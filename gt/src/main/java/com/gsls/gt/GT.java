package com.gsls.gt;

import static android.content.Context.POWER_SERVICE;
import static android.os.Build.VERSION.SDK_INT;
import static android.os.Build.VERSION_CODES.KITKAT;
import static java.lang.annotation.ElementType.PARAMETER;
import static java.lang.annotation.RetentionPolicy.RUNTIME;
import static java.lang.reflect.Proxy.newProxyInstance;
import static java.nio.charset.StandardCharsets.UTF_8;

import android.Manifest;
import android.accessibilityservice.AccessibilityService;
import android.accessibilityservice.GestureDescription;
import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.animation.ValueAnimator;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.ActivityManager;
import android.app.ActivityOptions;
import android.app.AlertDialog;
import android.app.Application;
import android.app.Dialog;
import android.app.KeyguardManager;
import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.ProgressDialog;
import android.app.Service;
import android.app.WallpaperInfo;
import android.app.WallpaperManager;
import android.app.admin.DevicePolicyManager;
import android.content.BroadcastReceiver;
import android.content.ClipData;
import android.content.ClipboardManager;
import android.content.ComponentName;
import android.content.ContentValues;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.ServiceConnection;
import android.content.SharedPreferences;
import android.content.pm.ActivityInfo;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PermissionInfo;
import android.content.pm.ResolveInfo;
import android.content.pm.ShortcutInfo;
import android.content.pm.ShortcutManager;
import android.content.res.AssetManager;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.content.res.XmlResourceParser;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapShader;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.LinearGradient;
import android.graphics.Matrix;
import android.graphics.Movie;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.PixelFormat;
import android.graphics.Point;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffXfermode;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.Shader;
import android.graphics.SweepGradient;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.GradientDrawable;
import android.graphics.drawable.Icon;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.hardware.camera2.CameraAccessException;
import android.hardware.camera2.CameraManager;
import android.hardware.fingerprint.FingerprintManager;
import android.media.AudioAttributes;
import android.media.AudioFormat;
import android.media.AudioManager;
import android.media.AudioRecord;
import android.media.MediaPlayer;
import android.media.MediaRecorder;
import android.media.SoundPool;
import android.media.ThumbnailUtils;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.TrafficStats;
import android.net.Uri;
import android.net.http.SslError;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Bundle;
import android.os.CancellationSignal;
import android.os.Environment;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.os.Message;
import android.os.Messenger;
import android.os.Parcelable;
import android.os.PowerManager;
import android.os.RemoteException;
import android.os.StatFs;
import android.provider.MediaStore;
import android.provider.Settings;
import android.renderscript.Allocation;
import android.renderscript.Element;
import android.renderscript.RenderScript;
import android.renderscript.ScriptIntrinsicBlur;
import android.security.keystore.KeyGenParameterSpec;
import android.security.keystore.KeyProperties;
import android.telephony.TelephonyManager;
import android.text.Editable;
import android.text.Html;
import android.text.InputFilter;
import android.text.Spannable;
import android.text.SpannableStringBuilder;
import android.text.Spanned;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.text.format.Formatter;
import android.text.style.CharacterStyle;
import android.text.style.ForegroundColorSpan;
import android.util.ArrayMap;
import android.util.AttributeSet;
import android.util.Base64;
import android.util.DisplayMetrics;
import android.util.Log;
import android.util.LruCache;
import android.util.TypedValue;
import android.view.ContextThemeWrapper;
import android.view.Display;
import android.view.Gravity;
import android.view.InputEvent;
import android.view.KeyCharacterMap;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.view.ViewTreeObserver;
import android.view.Window;
import android.view.WindowInsets;
import android.view.WindowManager;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityNodeInfo;
import android.view.animation.AlphaAnimation;
import android.view.animation.Animation;
import android.view.animation.AnimationSet;
import android.view.animation.AnimationUtils;
import android.view.animation.RotateAnimation;
import android.view.animation.ScaleAnimation;
import android.view.animation.TranslateAnimation;
import android.view.inputmethod.InputMethodManager;
import android.webkit.ClientCertRequest;
import android.webkit.ConsoleMessage;
import android.webkit.DownloadListener;
import android.webkit.GeolocationPermissions;
import android.webkit.HttpAuthHandler;
import android.webkit.JavascriptInterface;
import android.webkit.JsPromptResult;
import android.webkit.JsResult;
import android.webkit.PermissionRequest;
import android.webkit.RenderProcessGoneDetail;
import android.webkit.SafeBrowsingResponse;
import android.webkit.SslErrorHandler;
import android.webkit.ValueCallback;
import android.webkit.WebChromeClient;
import android.webkit.WebResourceError;
import android.webkit.WebResourceRequest;
import android.webkit.WebResourceResponse;
import android.webkit.WebSettings;
import android.webkit.WebStorage;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.RemoteViews;
import android.widget.ScrollView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.activity.result.ActivityResult;
import androidx.activity.result.ActivityResultCallback;
import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.annotation.AnimatorRes;
import androidx.annotation.ArrayRes;
import androidx.annotation.ColorRes;
import androidx.annotation.DimenRes;
import androidx.annotation.DrawableRes;
import androidx.annotation.IdRes;
import androidx.annotation.LayoutRes;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;
import androidx.annotation.StringRes;
import androidx.appcompat.app.ActionBar;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.core.app.ActivityCompat;
import androidx.core.app.NotificationCompat;
import androidx.core.app.NotificationManagerCompat;
import androidx.core.content.ContextCompat;
import androidx.core.content.FileProvider;
import androidx.fragment.app.DialogFragment;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentActivity;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.FragmentTransaction;
import androidx.lifecycle.Lifecycle;
import androidx.lifecycle.LifecycleEventObserver;
import androidx.lifecycle.LifecycleOwner;
import androidx.lifecycle.LifecycleRegistry;
import androidx.lifecycle.ViewModel;
import androidx.lifecycle.ViewModelProvider;
import androidx.lifecycle.ViewModelStore;
import androidx.lifecycle.ViewModelStoreOwner;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import androidx.recyclerview.widget.StaggeredGridLayoutManager;

import com.friendlyarm.AndroidSDK.HardwareInit;
import com.google.gson.Gson;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.Binarizer;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.EncodeHintType;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.RGBLuminanceSource;
import com.google.zxing.Result;
import com.google.zxing.WriterException;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.common.HybridBinarizer;
import com.google.zxing.qrcode.QRCodeReader;
import com.google.zxing.qrcode.QRCodeWriter;
import com.gsls.gt_databinding.annotation.GT_DaoBuild;
import com.gsls.gt_databinding.annotation.GT_HttpCallBuild;
import com.gsls.gt_databinding.route.ClassType;
import com.gsls.gt_databinding.route.GT_RouteMeta;
import com.gsls.gt_databinding.route.annotation.GT_ARouterName;
import com.gsls.gt_databinding.route.annotation.GT_Autowired;
import com.gsls.gt_databinding.route.annotation.GT_Route;
import com.gsls.gtk.GTEKt;
import com.gsls.toolkit.GT_Floating;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONStringer;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.lang.annotation.Annotation;
import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.ref.SoftReference;
import java.lang.ref.WeakReference;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Proxy;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.net.HttpURLConnection;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.security.InvalidParameterException;
import java.security.KeyStore;
import java.security.MessageDigest;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Date;
import java.util.Enumeration;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.TimeZone;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import java.util.zip.ZipFile;
import java.util.zip.ZipOutputStream;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;

import android_serialport_api.SerialPort;
import android_serialport_api.SerialPortFinder;
import dalvik.system.BaseDexClassLoader;
import dalvik.system.DexClassLoader;
import dalvik.system.DexFile;
import dalvik.system.PathClassLoader;

/**
 * 工具类说明：
 * GSLS_TOOL
 * <p>
 * <p>
 * 更新时间:2024.5.7
 * 更新内容 v1.4.5.5 版本：
 * CSDN 博客/官网教程:https://blog.csdn.net/qq_39799899
 * GitHub https://github.com/1079374315/GT
 * 更新内容如下：
 * 1.优化 WebView SslErrorHandler 事件，上架googleplay 遇见的问题
 * 2.优化 Android混合开发中 WebView 上传图片的问题，并增加优化了  拍照、相册选着图片、相册选择视频、拍摄视频、本地文件上传 功能。
 * 3.更新了 GT动画封装库的次数逻辑
 * 4.增加 路由框架 GT.ARouter，教程请参考：https://blog.csdn.net/qq_39799899
 *
 * <p>
 * <p>
 * 小提示：(用于 AndroidStudio )
 * 收起所有的 方法: Ctrl + Shift +  - (减号)
 * 展开所有的 方法: Ctrl + Shift +  + (加号)
 * 代码格式化快捷键是 Ctrl + Alt + L
 */

@SuppressWarnings("ALL")
public class GT {

    //================================== 所有属于 GT 类的属性 =======================================
    private static GT gt = null;//定义 GT 对象

    public GT() {
    }
    //================================== 提供访问 GT 属性的接口======================================

    /**
     * 获取线程安全的 GT 单例对象
     *
     * @return GT  返回 GT 对象
     */
    public static GT getGT() {
        if (gt == null) {
            synchronized (GT.class) {
                if (gt == null) {
                    gt = new GT();
                }
            }
        }
        return gt;
    }

    /**
     * 获取 Context
     *
     * @return
     */
    public static Context getActivity() {
        Context context = GT_Cache.getContext();
        if (context == null) {
            context = GT_Activity.getApplicationByReflect();
        }
        return context;
    }

    public static FragmentActivity getFragmentActivity() {
        FragmentActivity fragmentActivity = null;
        if (GT_Cache.getContext() == null) {
            GT_Cache.setContext(GT_Activity.getApplicationByReflect());
        }
        if (GT_Cache.getContext() != null && GT_Cache.getContext() instanceof FragmentActivity) {
            fragmentActivity = (FragmentActivity) GT_Cache.getContext();
        }
        return fragmentActivity;
    }

    /**
     * 绑定 Activity
     *
     * @param activity
     * @Activity 为外部提供访问 GT Context 接口
     */
    public static void build(Object obj, boolean... isInitUI) {
        GT_Cache.setContext(((Context) AnnotationAssist.returnActivityOrView(obj)[0]));
        if (GT_Cache.getContext() == null) {
            GT_Cache.setContext(getActivity());
        }
        AnnotationAssist.initAll(obj, isInitUI); //初始化 IOC 注解
    }

    /**
     * 给与非Activity的类型进行组件绑定
     *
     * @param obj
     * @param view
     */
    public static void build(Object obj, View view) {
        AnnotationAssist.initAll(obj);
        AnnotationAssist.initView(obj, view);//特殊的注解方法，用于适配 注解非 Activity 页面
        AnnotationAssist.initClick(obj, view);//特殊的注解方法，用于适配 注解非 Activity 页面
    }

    //============================================= 静态调用方法 =====================================

    /**
     * @param number 提示报错文件是第几级
     * @return String 报错的文件与行号
     * @报错提示 该提示可通过 GT 提供的接口 的实例获取
     */
    public static String getLineInfo(int number) {
        if (number < 0) {
            return "log Hierarchy error";
        }
        StackTraceElement ste = null;
        try {
            ste = new Throwable().getStackTrace()[number];
        } catch (Exception e) {
            getLineInfo(--number);
        }
        return "提示的文件  " + ste.getFileName() + "  行号 " + ste.getLineNumber();
    }

    /**
     * @return String 报错的文件与行号
     * @报错提示 该提示可通过 GT 提供的接口 的实例获取
     */
    public static String getLineInfo() {
        StackTraceElement ste = new Throwable().getStackTrace()[1];//默认是当前报错层级
        return "提示的文件  " + ste.getFileName() + "  行号 " + ste.getLineNumber();
    }

    /**
     * 提示消息 Log
     *
     * @param msg object 类型的消息
     */
    public static void log(Object msg, String... tag) {
        if (LOG.LOG_TF) {
            LOG.setLogData(String.valueOf(msg));
            Log.d((tag.length != 0 && tag[0].length() != 0) ? tag[0] : LOG.LOG_TAG, String.valueOf(msg));
        }
    }

    /**
     * @param mg
     * @标记日志
     */
    public static void logt(Object mg, String... tag) {
        if (LOG.LOG_TF) {
            String prefix = "";
            prefix = LOG.getPrefixT(LOG.lineInfoIndex);
            LOG.setLogData(prefix + mg);
            Log.d((tag.length != 0 && tag[0].length() != 0) ? tag[0] : LOG.LOG_TAG, prefix + mg);
            if (LOG.LOG_FILE_TF) {// 打印到sd卡
                if (TextUtils.isEmpty(prefix)) {
                    prefix = LOG.getPrefix(LOG.lineInfoIndex);
                }
                LOG.writeToSdCard(LOG.path, prefix, mg);
            }
        }
    }

    /**
     * @param mg
     * @标记日志
     */
    public static void logt(Object mg, int lineInfoIndex, String... tag) {
        if (LOG.LOG_TF) {
            String prefix = "";
            if (lineInfoIndex <= 0) {
                prefix = LOG.getPrefixT(LOG.lineInfoIndex);
            } else {
                prefix = LOG.getPrefixT(lineInfoIndex);
            }
            LOG.setLogData(prefix + mg);
            Log.d((tag.length != 0 && tag[0].length() != 0) ? tag[0] : LOG.LOG_TAG, prefix + mg);
            if (LOG.LOG_FILE_TF) {// 打印到sd卡
                if (TextUtils.isEmpty(prefix)) {
                    prefix = LOG.getPrefix(LOG.lineInfoIndex);
                }
                LOG.writeToSdCard(LOG.path, prefix, mg);
            }
        }
    }

    /**
     * @param mg
     * @详细提示消息
     */
    public static void logs(Object mg, String... tag) {
        if (LOG.LOG_TF) {
            String prefix = "";
            prefix = LOG.getPrefix(LOG.lineInfoIndex);
            LOG.setLogData(prefix + mg);
            Log.d((tag.length != 0 && tag[0].length() != 0) ? tag[0] : LOG.LOG_TAG, prefix + mg);
            if (LOG.LOG_FILE_TF) {// 打印到sd卡
                if (TextUtils.isEmpty(prefix)) {
                    prefix = LOG.getPrefix(LOG.lineInfoIndex);
                }
                LOG.writeToSdCard(LOG.path, prefix, mg);
            }
        }
    }

    /**
     * @param mg
     * @详细提示消息
     */
    public static void logs(Object mg, int lineInfoIndex, String... tag) {
        if (LOG.LOG_TF) {
            String prefix = "";
            if (lineInfoIndex <= 0) {
                prefix = LOG.getPrefix(LOG.lineInfoIndex);
            } else {
                prefix = LOG.getPrefix(lineInfoIndex);
            }
            LOG.setLogData(prefix + mg);
            Log.d((tag.length != 0 && tag[0].length() != 0) ? tag[0] : LOG.LOG_TAG, prefix + mg);
            if (LOG.LOG_FILE_TF) {// 打印到sd卡
                if (TextUtils.isEmpty(prefix)) {
                    prefix = LOG.getPrefix(LOG.lineInfoIndex);
                }
                LOG.writeToSdCard(LOG.path, prefix, mg);
            }
        }
    }

    /**
     * 提示消息 Log
     *
     * @param title 日志标题
     * @param msg   日志消息
     */
    public static void log(Object title, Object msg, String... tag) {
        if (LOG.LOG_TF) {

            LOG.setLogData("--- Run" +
                    "\n\n---------------------" + title + "------------------------\n" +
                    "" + msg + "\n" +
                    "---------------------" + title + "------------------------\n\n" +
                    "--- Close");
            Log.d((tag.length != 0 && tag[0].length() != 0) ? tag[0] : LOG.LOG_TAG,
                    "--- Run" +
                            "\n\n---------------------" + title + "------------------------\n" +
                            "" + msg + "\n" +
                            "---------------------" + title + "------------------------\n\n" +
                            "--- Close"
            );
        }

    }

    /**
     * 打印所有提示消息 Log
     *
     * @param msg object 类型的消息
     */
    public static void logAll(Object title, Object msg, String... tag) {
        if (LOG.LOG_TF) {
            LOG.setLogData("Run ----- " + title + " ---------");
            Log.d((tag.length != 0 && tag[0].length() != 0) ? tag[0] : LOG.LOG_TAG, "Run ----- " + title + " ---------");
            String strMsg = msg.toString();
            if (strMsg.length() > LOG.logMaxLength) {
                while (true) {
                    String substring = strMsg.substring(0, LOG.logMaxLength);
                    LOG.setLogData("--- " + substring);
                    Log.d((tag.length != 0 && tag[0].length() != 0) ? tag[0] : LOG.LOG_TAG, "--- " + substring);
                    strMsg = strMsg.substring(LOG.logMaxLength);
                    if (strMsg.length() <= LOG.logMaxLength) {
                        LOG.setLogData(strMsg);
                        Log.d((tag.length != 0 && tag[0].length() != 0) ? tag[0] : LOG.LOG_TAG, strMsg);
                        break;
                    }
                }
            } else {
                LOG.setLogData(String.valueOf(msg));
                Log.d((tag.length != 0 && tag[0].length() != 0) ? tag[0] : LOG.LOG_TAG, String.valueOf(msg));
            }

            LOG.setLogData("----- " + title + " ----- Close");
            Log.d((tag.length != 0 && tag[0].length() != 0) ? tag[0] : LOG.LOG_TAG, "----- " + title + " ----- Close");

        }
    }

    /**
     * 回调日志
     *
     * @param tags
     */
    public static String logCallback(int number, String msg, String... tags) {
        if (number <= 0) {
            number = 3;
        }
        String tag = "GT_";
        if (tags != null && tags.length > 0) {
            tag = tags[0];
        }
        java.lang.Thread thread = java.lang.Thread.currentThread();
        StackTraceElement[] stackTrace = thread.getStackTrace();
        if (stackTrace.length < number) return null;
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = number; i < stackTrace.length; i++) {
            StackTraceElement stackTraceElement1 = stackTrace[i];
            StackTraceElement stackTraceElement2 = null;
            if (i + 1 < stackTrace.length) {
                stackTraceElement2 = stackTrace[i + 1];
            }

            if (stackTraceElement2 != null) {
                if (i == number) {
                    stringBuilder.append("(").append(stackTraceElement1.getFileName()).append(":").append(stackTraceElement1.getLineNumber()).append(")").append(stackTraceElement1.getMethodName()).append(":").append(msg).append("->");
                }
                stringBuilder.append("(").append(stackTraceElement1.getFileName()).append(":").append(stackTraceElement2.getLineNumber()).append(")").append(stackTraceElement1.getMethodName()).append("->");
            } else if (stackTraceElement1 != null) {
                stringBuilder.append("(").append(stackTraceElement1.getFileName()).append(":").append(stackTraceElement1.getLineNumber()).append(")").append(stackTraceElement1.getMethodName()).append("->");
            }
        }
        Log.d(tag, stringBuilder.toString());
        return stringBuilder.toString();
    }

    /**
     * 提示消息 Log
     *
     * @param msg object 类型的消息
     */
    public static void err(Object msg, String... tag) {
        if (LOG.LOG_TF) {
            Log.e((tag.length != 0 && tag[0].length() != 0) ? tag[0] : LOG.LOG_TAG, String.valueOf(msg));
        }
    }

    /**
     * @param mg
     * @详细提示消息
     */
    public static void errs(Object mg, String... tag) {
        if (LOG.LOG_TF) {
            String prefix = "";
            prefix = LOG.getPrefix(LOG.lineInfoIndex);
            Log.e((tag.length != 0 && tag[0].length() != 0) ? tag[0] : LOG.LOG_TAG, prefix + mg);
            if (LOG.LOG_FILE_TF) {// 打印到sd卡
                if (TextUtils.isEmpty(prefix)) {
                    prefix = LOG.getPrefix(LOG.lineInfoIndex);
                }
                LOG.writeToSdCard(LOG.path, prefix, mg);
            }
        }
    }


    /**
     * @param mg
     * @详细提示消息
     */
    public static void errs(Object mg, int lineInfoIndex, String... tag) {
        if (LOG.LOG_TF) {
            String prefix = "";
            if (lineInfoIndex <= 0) {
                prefix = LOG.getPrefix(LOG.lineInfoIndex);
            } else {
                prefix = LOG.getPrefix(lineInfoIndex);
            }
            Log.e((tag.length != 0 && tag[0].length() != 0) ? tag[0] : LOG.LOG_TAG, prefix + mg);
            if (LOG.LOG_FILE_TF) {// 打印到sd卡
                if (TextUtils.isEmpty(prefix)) {
                    prefix = LOG.getPrefix(LOG.lineInfoIndex);
                }
                LOG.writeToSdCard(LOG.path, prefix, mg);
            }
        }
    }

    /**
     * @param mg
     * @标记日志
     */
    public static void errt(Object mg, String... tag) {
        if (LOG.LOG_TF) {
            String prefix = "";
            prefix = LOG.getPrefixT(LOG.lineInfoIndex);
            Log.e((tag.length != 0 && tag[0].length() != 0) ? tag[0] : LOG.LOG_TAG, prefix + mg);
            LOG.setLogData(prefix + mg);
            if (LOG.LOG_FILE_TF) {// 打印到sd卡
                if (TextUtils.isEmpty(prefix)) {
                    prefix = LOG.getPrefix(LOG.lineInfoIndex);
                }
                LOG.writeToSdCard(LOG.path, prefix, mg);
            }
        }
    }

    /**
     * @param mg
     * @标记日志
     */
    public static void errt(Object mg, int lineInfoIndex, String... tag) {
        if (LOG.LOG_TF) {
            String prefix = "";
            if (lineInfoIndex <= 0) {
                prefix = LOG.getPrefixT(LOG.lineInfoIndex);
            } else {
                prefix = LOG.getPrefixT(lineInfoIndex);
            }
            Log.e((tag.length != 0 && tag[0].length() != 0) ? tag[0] : LOG.LOG_TAG, prefix + mg);
            LOG.setLogData(prefix + mg);
            if (LOG.LOG_FILE_TF) {// 打印到sd卡
                if (TextUtils.isEmpty(prefix)) {
                    prefix = LOG.getPrefix(LOG.lineInfoIndex);
                }
                LOG.writeToSdCard(LOG.path, prefix, mg);
            }
        }
    }

    /**
     * 提示消息 Log
     *
     * @param title 日志标题
     * @param msg   日志消息
     */
    public static void err(Object title, Object msg, String... tag) {
        if (LOG.LOG_TF) {
            LOG.setLogData("--- Run" +
                    "\n\n---------------------" + title + "------------------------\n" +
                    "" + msg + "\n" +
                    "---------------------" + title + "------------------------\n\n" +
                    "--- Close");
            Log.e((tag.length != 0 && tag[0].length() != 0) ? tag[0] : LOG.LOG_TAG,
                    "--- Run" +
                            "\n\n---------------------" + title + "------------------------\n" +
                            "" + msg + "\n" +
                            "---------------------" + title + "------------------------\n\n" +
                            "--- Close"
            );
        }

    }

    /**
     * 打印所有提示消息 Log
     *
     * @param msg object 类型的消息
     */
    public static void errAll(Object title, Object msg, String... tag) {
        if (LOG.LOG_TF) {
            LOG.setLogData("Run ----- " + title + " ---------");
            Log.e((tag.length != 0 && tag[0].length() != 0) ? tag[0] : LOG.LOG_TAG, "Run ----- " + title + " ---------");
            String strMsg = msg.toString();
            if (strMsg.length() > LOG.logMaxLength) {
                while (true) {
                    String substring = strMsg.substring(0, LOG.logMaxLength);
                    Log.e((tag.length != 0 && tag[0].length() != 0) ? tag[0] : LOG.LOG_TAG, "--- " + substring);
                    strMsg = strMsg.substring(LOG.logMaxLength);
                    if (strMsg.length() <= LOG.logMaxLength) {
                        Log.e((tag.length != 0 && tag[0].length() != 0) ? tag[0] : LOG.LOG_TAG, strMsg);
                        break;
                    }
                }
            } else {
                LOG.setLogData(String.valueOf(msg));
                Log.e((tag.length != 0 && tag[0].length() != 0) ? tag[0] : LOG.LOG_TAG, String.valueOf(msg));
            }

            LOG.setLogData("----- " + title + " ----- Close");
            Log.e((tag.length != 0 && tag[0].length() != 0) ? tag[0] : LOG.LOG_TAG, "----- " + title + " ----- Close");

        }
    }

    /**
     * @param content
     * @标准Toast
     */
    public static void toast(Object message) {
        if (getActivity() != null) {
            if (Thread.isMainThread()) {
                Toast toast = null;
                if (toast == null) {
                    toast = Toast.makeText(getActivity(), message.toString(), Toast.LENGTH_SHORT);
                } else {
                    toast.setText(message.toString());
                }
                toast.show();
            } else {
                Thread.runAndroid(new Runnable() {
                    @Override
                    public void run() {
                        Toast toast = null;
                        if (toast == null) {
                            toast = Toast.makeText(getActivity(), message.toString(), Toast.LENGTH_SHORT);
                        } else {
                            toast.setText(message.toString());
                        }
                        toast.show();
                    }
                });
            }

        } else {
            log(getLineInfo(1), "当前没有赋值 Context 无法显示 Toast ");
        }

    }

    public static void toast(Context context, Object content) {
        if (Thread.isMainThread()) {
            Toast toast = null;
            if (toast == null) {
                toast = Toast.makeText(getActivity(), content.toString(), Toast.LENGTH_SHORT);
            } else {
                toast.setText(content.toString());
            }
            toast.show();
        } else {
            Thread.runAndroid(new Runnable() {
                @Override
                public void run() {
                    Toast toast = null;
                    if (toast == null) {
                        toast = Toast.makeText(getActivity(), content.toString(), Toast.LENGTH_SHORT);
                    } else {
                        toast.setText(content.toString());
                    }
                    toast.show();
                }
            });
        }
    }

    /**
     * 单个消息框 Toast
     *
     * @param msg object 类型的消息
     */
    public static void toast_s(Object msg) {
        if (TOAST.TOAST_TF) {
            Context context = getActivity();
            if (context != null && context != null) {
                if (Thread.isMainThread()) {
                    Toast.makeText(context, String.valueOf(msg), Toast.LENGTH_SHORT).show();
                } else {
                    Thread.runAndroid(new Runnable() {
                        @Override
                        public void run() {
                            Toast.makeText(context, String.valueOf(msg), Toast.LENGTH_SHORT).show();
                        }
                    });
                }
            } else {
                if (LOG.LOG_TF)//设置为默认输出日志
                    err("GT_bug", "消息框错误日志：你没有为 Context 进行赋值 ，却引用了 Toast 导致该功能无法实现。解决措施 在调用 toast 代码之前添加：GT.getGT().setactivity(activity);");
            }

        }
    }

    /**
     * 单个 Toast
     *
     * @param msg  消息
     * @param time 显示时间
     */
    public static void toast_time(Object msg, long time) {
        if (TOAST.TOAST_TF) {
            Context context = getActivity();
            if (Thread.isMainThread()) {
                if (context != null && context != null) {
                    final Toast toast = Toast.makeText(context, String.valueOf(msg), Toast.LENGTH_LONG);
                    final Timer timer = new Timer();
                    timer.schedule(new TimerTask() {
                        @Override
                        public void run() {
                            toast.show();
                        }
                    }, 0, 3000);
                    new Timer().schedule(new TimerTask() {
                        @Override
                        public void run() {
                            toast.cancel();
                            timer.cancel();
                        }
                    }, time);
                } else {
                    if (LOG.LOG_TF)//设置为默认输出日志
                        err("GT_bug", "消息框错误日志：你没有为 Context 进行赋值 ，却引用了 Toast 导致该功能无法实现。解决措施 在调用 toast 代码之前添加：GT.getGT().setactivity(activity);");
                }
            } else {
                Thread.runAndroid(new Runnable() {
                    @Override
                    public void run() {
                        if (context != null && context != null) {
                            final Toast toast = Toast.makeText(context, String.valueOf(msg), Toast.LENGTH_LONG);
                            final Timer timer = new Timer();
                            timer.schedule(new TimerTask() {
                                @Override
                                public void run() {
                                    toast.show();
                                }
                            }, 0, 3000);
                            new Timer().schedule(new TimerTask() {
                                @Override
                                public void run() {
                                    toast.cancel();
                                    timer.cancel();
                                }
                            }, time);
                        } else {
                            if (LOG.LOG_TF)//设置为默认输出日志
                                err("GT_bug", "消息框错误日志：你没有为 Context 进行赋值 ，却引用了 Toast 导致该功能无法实现。解决措施 在调用 toast 代码之前添加：GT.getGT().setactivity(activity);");
                        }
                    }
                });
            }


        }
    }/**/

    /**
     * 可多个消息框 Toast
     *
     * @param context 上下文
     * @param msg     object 类型的消息
     */
    public static void toast_s(Context context, Object msg) {
        if (!TOAST.TOAST_TF) return;
        if (Thread.isMainThread()) {
            Toast.makeText(context, String.valueOf(msg), Toast.LENGTH_SHORT).show();
        } else {
            Thread.runAndroid(new Runnable() {
                @Override
                public void run() {
                    Toast.makeText(context, String.valueOf(msg), Toast.LENGTH_SHORT).show();
                }
            });
        }

    }

    /**
     * 可多个消息框 Toast
     *
     * @param context 上下文
     * @param msg     object 类型的消息
     */
    public static void toast_time(Context context, Object msg, int time) {
        if (TOAST.TOAST_TF) {
            if (Thread.isMainThread()) {
                final Toast toast = Toast.makeText(context, String.valueOf(msg), Toast.LENGTH_LONG);
                final Timer timer = new Timer();
                timer.schedule(new TimerTask() {
                    @Override
                    public void run() {
                        toast.show();
                    }
                }, 0, 3000);
                new Timer().schedule(new TimerTask() {
                    @Override
                    public void run() {
                        toast.cancel();
                        timer.cancel();
                    }
                }, time);
            } else {
                Thread.runAndroid(new Runnable() {
                    @Override
                    public void run() {
                        final Toast toast = Toast.makeText(context, String.valueOf(msg), Toast.LENGTH_LONG);
                        final Timer timer = new Timer();
                        timer.schedule(new TimerTask() {
                            @Override
                            public void run() {
                                toast.show();
                            }
                        }, 0, 3000);
                        new Timer().schedule(new TimerTask() {
                            @Override
                            public void run() {
                                toast.cancel();
                                timer.cancel();
                            }
                        }, time);
                    }
                });
            }


        }
    }

    private static TOAST.ToastView toastView;

    /**
     * 简易自定义吐司
     *
     * @param context 上下文
     * @param layout  自定义布局
     * @param Gravity 吐司弹出位置 默认 Gravity.BOTTOM
     */
    public static TOAST.ToastView toastView(Context context, int layout, int... gravitys) {

        if (Thread.isMainThread()) {
            int gravity = Gravity.BOTTOM;
            if (gravitys.length > 0) {
                gravity = gravitys[0];
            }
            if (toastView == null) {
                toastView = new TOAST.ToastView().initLayout(layout, gravity, context);
            }
        } else {
            Thread.runAndroid(new Runnable() {
                @Override
                public void run() {
                    int gravity = Gravity.BOTTOM;
                    if (gravitys.length > 0) {
                        gravity = gravitys[0];
                    }
                    if (toastView == null) {
                        toastView = new TOAST.ToastView().initLayout(layout, gravity, context);
                    }
                }
            });
        }
        return toastView;
    }

    public static GT_Fragment getGT_Fragment() {
        return GT_Fragment.gt_fragment;
    }

    /**
     * @param dialogFragment
     * @跳转其他的 DialogFragment
     */
    public static void startDialogFragment(AppCompatActivity activity, DialogFragment dialogFragment) {
        dialogFragment.show(activity.getSupportFragmentManager(), dialogFragment.getClass().toString());// 弹出退出提示
    }

    public static void startDialogFragment(AppCompatActivity activity, Fragment fragment, DialogFragment dialogFragment) {
        dialogFragment.setTargetFragment(fragment, 1);
        dialogFragment.show(activity.getSupportFragmentManager(), dialogFragment.getClass().toString());// 弹出退出提示
    }

    /**
     * @param dialogFragment
     * @跳转其他的 DialogFragment
     */
    public static void startDialogFragment(DialogFragment dialogFragment, FragmentManager fragmentManager) {
        dialogFragment.show(fragmentManager, dialogFragment.getClass().toString());// 弹出退出提示
    }

    /**
     * @param dialogFragment
     * @跳转其他的 DialogFragment
     */
    public static void startDialogFragment(Class<?> dialogFragmentClass, FragmentManager fragmentManager) {
        DialogFragment fragment = null;
        try {
            fragment = (DialogFragment) dialogFragmentClass.newInstance();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InstantiationException e) {
            e.printStackTrace();
        }
        fragment.show(fragmentManager, fragment.getClass().toString());// 弹出退出提示
    }

    public static void startDialogFragment(Fragment fragment, FragmentManager supportFragmentManager, DialogFragment dialogFragment) {
        dialogFragment.setTargetFragment(fragment, 1);
        dialogFragment.show(supportFragmentManager, dialogFragment.getClass().toString());// 弹出退出提示
    }

    public static void startDialogFragment(AppCompatActivity activity, Class<?> dialogFragmentClass) {
        DialogFragment fragment = null;
        try {
            fragment = (DialogFragment) dialogFragmentClass.newInstance();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InstantiationException e) {
            e.printStackTrace();
        }
        fragment.show(activity.getSupportFragmentManager(), fragment.getClass().toString());// 弹出退出提示
    }

    public static void startDialogFragment(AppCompatActivity activity, Fragment fragment, Class<?> dialogFragmentClass) {
        DialogFragment dialogFragment = null;
        try {
            dialogFragment = (DialogFragment) dialogFragmentClass.newInstance();
            dialogFragment.setTargetFragment(fragment, 1);
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InstantiationException e) {
            e.printStackTrace();
        }
        dialogFragment.show(activity.getSupportFragmentManager(), fragment.getClass().toString());// 弹出退出提示
    }

    public static GT_View.BaseView startView(ViewGroup viewGroup, GT_View.BaseView view) {
        viewGroup.addView(view.getView());
        return view;
    }

    public static GT_Fragment startFragment(Object fragmentObj, int... resLayouts) {
        return GT_Fragment.gt_fragment.startFragment(fragmentObj, resLayouts);
    }

    public static GT_Fragment startFragmentHome(Object fragmentObj, int... resLayouts) {
        return GT_Fragment.gt_fragment.startFragmentHome(fragmentObj, resLayouts);
    }

    /**
     * 启动悬浮窗
     *
     * @param toFragment
     */
    public static void startFloatingWindow(Context context, Class<?> toFragment, Bundle... bundles) {
        if (Build.VERSION.SDK_INT >= 23) {
            if (!Settings.canDrawOverlays(context)) {
                Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse("package:" + context.getPackageName()));
                FragmentActivity fragmentActivity = (FragmentActivity) context;
                fragmentActivity.startActivityForResult(intent, 0);
                return;
            }
        }

        Intent intent = new Intent(context, toFragment);
        if (bundles != null && bundles.length != 0 && bundles[0] != null)
            intent.putExtras(bundles[0]);
        context.startService(intent);
    }


    /**
     * 启动悬浮窗
     *
     * @param toFragment
     */
    public static void startFloatingWindow(Context context, GT_FloatingWindow.BaseFloatingWindow floatingWindow) {
        startFloatingWindow(context, floatingWindow.getClass(), floatingWindow.getArguments());
        floatingWindow = null;
    }

    //============================================= 日志功能 =========================================

    /**
     * @用于打详细日志的 LOG 框架
     */
    public static class LOG {

        public LOG() {
        }

        //保存log的路径
        private static String path = Environment.getExternalStorageDirectory().getPath() + "/GT/";
        private static String logFilePath = ""; //自定义 打印日志的文件路径
        //格式化不包含秒的时间
        private static SimpleDateFormat dfd = new SimpleDateFormat("yyyy-MM-dd", Locale.CHINESE);
        //保存log的文件名称
        public static String fileName = "-log-" + "GT".substring("GT".lastIndexOf(".") + 1) + ".txt";
        private static String printFileName = "";         //用于自定义 打印文件名

        public static boolean LOG_TF = true;        //控制外部所有的 Log 显示
        public static boolean LOG_FILE_TF = false;  //控制是否打日志到本地(注意：打开比较耗内存资源，该功能仅用于测试，在上线时请关闭它)
        public static boolean GT_LOG_TF = false;    //控制内部所有的 Log 显示
        public static String LOG_TAG = "GT_";       //控制日志 TAG 值
        public static int logMaxLength = 3900;      //日志打印最大长度 默认是 3900 可修改
        public static int lineInfoIndex = 5;       //日志当前属于的层数,默认是5级返回层级

        public static int getLineInfoIndex() {
            return lineInfoIndex;
        }

        public static void setLineInfoIndex(int lineInfoIndex) {
            LOG.lineInfoIndex = lineInfoIndex;
        }

        public static String getLogFilePath() {
            return logFilePath;
        }

        public static void setLogFilePath(String logFilePath) {
            LOG.logFilePath = logFilePath;
        }

        public static String getPath() {
            return path;
        }

        public static void setPath(String path) {
            LOG.path = path;
        }

        public static SimpleDateFormat getDfd() {
            return dfd;
        }

        public static void setDfd(SimpleDateFormat dfd) {
            LOG.dfd = dfd;
        }

        public static String getFileName() {
            return fileName;
        }

        public static void setFileName(String fileName) {
            LOG.fileName = fileName;
        }

        public static boolean isLogTf() {
            return LOG_TF;
        }

        public static void setLogTf(boolean logTf) {
            LOG_TF = logTf;
        }

        public static boolean isLogFileTf() {
            return LOG_FILE_TF;
        }

        /**
         * @param logFileTf
         * @param activity
         * @打开本地打印
         */
        public static void setLogFileTf(boolean logFileTf, Activity activity) {
            LOG_FILE_TF = logFileTf;
            if (logFileTf) {
                printFileName = ApplicationUtils.getAppName(activity);
            }
        }

        public static boolean isGtLogTf() {
            return GT_LOG_TF;
        }

        public static void setGtLogTf(boolean gtLogTf) {
            GT_LOG_TF = gtLogTf;
        }

        public static String getLogTag() {
            return LOG_TAG;
        }

        public static void setLogTag(String logTag) {
            LOG_TAG = logTag;
        }

        public static String getPrintFileName() {
            return printFileName;
        }

        public static void setPrintFileName(String printFileName) {
            LOG.printFileName = printFileName;
        }

        public static SimpleDateFormat getDfs() {
            return dfs;
        }

        public static void setDfs(SimpleDateFormat dfs) {
            LOG.dfs = dfs;
        }

        private static String prefix; // 占位符

        // 获取log打印前缀(行数、类名、方法名)
        private static String getPrefix(int number) {
            if (number < 0) {
                return "log Hierarchy error ";
            }
            try {
                StackTraceElement caller = java.lang.Thread.currentThread().getStackTrace()[number];// new Throwable().getStackTrace()[number];
                prefix = "%s(" + caller.getFileName() + ":%d)" + "%s(): ";//初始化
                String packName = caller.getClassName().substring(0, caller.getClassName().lastIndexOf(".") + 1);
                String methodName = caller.getMethodName();
                if (methodName.contains("$")) {
                    methodName = methodName.substring(methodName.indexOf("$") + 1, methodName.lastIndexOf("$"));
                }
                prefix = String.format(prefix, packName, caller.getLineNumber(), methodName).trim(); // 替换
            } catch (Exception e) {
                getPrefix(--number);
            }
            return prefix;
        }

        private static String getPrefixT(int number) {
            if (number < 0) {
                return "log Hierarchy error ";
            }
            try {
                StackTraceElement caller = java.lang.Thread.currentThread().getStackTrace()[number];// new Throwable().getStackTrace()[number];
                prefix = "(" + caller.getFileName() + ":%d): ";//初始化
                prefix = String.format(prefix, caller.getLineNumber()).trim(); // 替换
            } catch (Exception e) {
//                errs("获取日志层级出现错误e:" + e);
                getPrefixT(--number);
            }
            return prefix;
        }

        public static String getClassName(int number) {
            if (number < 0) {
                return "log Hierarchy error ";
            }
            String prefix = "";
            try {
                StackTraceElement caller = java.lang.Thread.currentThread().getStackTrace()[number];// new Throwable().getStackTrace()[number];
                prefix = caller.getFileName();//初始化
            } catch (Exception e) {
//                errs("获取日志层级出现错误e:" + e);
                getClassName(--number);
            }
            return prefix;
        }

        /**
         * log打印到sdCard
         *
         * @param path   文件路径(不含文件名)
         * @param prefix log前缀内容
         * @param msg    打印内容
         * @ 格式化包含秒的时间
         */
        private static SimpleDateFormat dfs = new SimpleDateFormat("HH:mm:ss.SSS", Locale.CHINESE);

        /**
         * 打本地日志
         *
         * @param path
         * @param prefix
         * @param msg
         */
        public static void writeToSdCard(String path, String prefix, Object msg) {
            if (logFilePath != null && logFilePath.length() > 0) {//如果设置了自定义的，那就用自定义的路径
                path = Environment.getExternalStorageDirectory().getPath() + "/" + logFilePath;
            } else {//如果没有设置自定义的，那就用默认的
                try {
                    path = FileUtils.getGTPath(getActivity()) + "log/";
                } catch (Exception e) {

                }
            }
            String time = dfs.format(new Date());
//            Log.i("GT_i", "path:" + path);
            File file = createPathFile(path);
            BufferedWriter out = null;
            try {
                out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file, true)));
                out.write("\r\n[" + time + "]" + getProcessTag() + prefix + msg);
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    if (out != null) {
                        out.close();
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

        //获取当前进程信息(PID,TID,ThreadId)
        private static String getProcessTag() {
            return "<PID:" + android.os.Process.myPid() + ",TID:" + android.os.Process.myTid() + ",ThreadId:" + java.lang.Thread.currentThread().getId() + ">";
        }

        /**
         * 根据文件路径 创建文件
         *
         * @param path 文件路径(不含文件名)
         */
        public static File createPathFile(String path) {
            File fileDir = new File(path);
            if (!fileDir.exists()) {
                fileDir.mkdirs();
            }
            //如果自定义了 打印文件名就给它初始化上
            if (printFileName != null && !"".equals(printFileName)) {
                fileName = "-" + printFileName + ".txt";
            }
            String filePath = path + dfd.format(new Date()) + fileName;
            File file = new File(filePath);
            if (!file.exists()) {
                try {
                    file.createNewFile();
                } catch (Exception e) {
                    e.printStackTrace();
                    err("LOG日志报错", getLineInfo(1) + "[logGT] createPathFile(): e=" + e);
                }
            }
            return file;
        }

        //向日志广播发送日志信息
        public static void setLogData(String value) {
            if (GT_Floating.isLog) {
                EventBus.posts(value, "logAllData", GT_Floating.class);
            }
        }

    }

    /**
     * 防止APP奔溃类，APP产生奔溃后，会捕获，并将异常手机信息与异常原因发送出来
     * 使用方法：
     * GT.NeverCrash.getInstance().setMainCrashHandler((t, e, phoneMsg) -> {
     * //在主线程异常
     * }).setUncaughtCrashHandler((t, e, phoneMsg) -> {
     * //在子线程异常
     * }).register(this);
     */
    public static class NeverCrash {

        private final static NeverCrash INSTANCE = new NeverCrash();

        private MainCrashHandler mainCrashHandler;
        private UncaughtCrashHandler uncaughtCrashHandler;
        private Context mContext;

        private NeverCrash() {
        }

        public static NeverCrash getInstance() {
            return INSTANCE;
        }

        private synchronized MainCrashHandler getMainCrashHandler() {
            if (null == mainCrashHandler) {
                mainCrashHandler = (t, e, m) -> {
                };
            }
            return mainCrashHandler;
        }

        /**
         * 主线程发生异常时的回调，可用于打印日志文件
         * <p>
         * 注意跨线程操作的可能
         */
        public NeverCrash setMainCrashHandler(MainCrashHandler mainCrashHandler) {
            this.mainCrashHandler = mainCrashHandler;
            return this;
        }

        private synchronized UncaughtCrashHandler getUncaughtCrashHandler() {
            if (null == uncaughtCrashHandler) {
                uncaughtCrashHandler = (t, e, m) -> {
                };
            }
            return uncaughtCrashHandler;
        }

        /**
         * 子线程发生异常时的回调，可用于打印日志文件
         * <p>
         * 注意跨线程操作的可能
         */
        public NeverCrash setUncaughtCrashHandler(UncaughtCrashHandler uncaughtCrashHandler) {
            this.uncaughtCrashHandler = uncaughtCrashHandler;
            return this;
        }

        /**
         * 完成监听异常的注册
         *
         * @param application application
         */
        public void register(Application application) {
            mContext = application.getApplicationContext();

            //主线程异常拦截
            new Handler(Looper.getMainLooper()).post(() -> {
                while (true) {
                    try {
                        Looper.loop();
                    } catch (Throwable e) {
                        getMainCrashHandler().mainException(Looper.getMainLooper().getThread(), e, appendPhoneInfo());
                    }
                }
            });

            //子线程异常拦截
            java.lang.Thread.setDefaultUncaughtExceptionHandler((t, e) -> {
                getUncaughtCrashHandler().uncaughtException(t, e, appendPhoneInfo());
            });
        }

        /**
         * 获取手机信息
         */
        private String appendPhoneInfo() {
            StringBuilder sb = new StringBuilder();
            try {
                PackageManager pm = mContext.getPackageManager();
                PackageInfo pi = pm.getPackageInfo(mContext.getPackageName(), PackageManager.GET_ACTIVITIES);
                //App版本
                sb.append("App Version: ");
                sb.append(pi.versionName);
                sb.append("_");
                sb.append(pi.versionCode + "\n");

                //Android版本号
                sb.append("OS Version: ");
                sb.append(Build.VERSION.RELEASE);
                sb.append("_");
                sb.append(Build.VERSION.SDK_INT + "\n");

                //手机制造商
                sb.append("Vendor: ");
                sb.append(Build.MANUFACTURER + "\n");

                //手机型号
                sb.append("Model: ");
                sb.append(Build.MODEL + "\n");

                //CPU架构
                sb.append("CPU: ");
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                    sb.append(Arrays.toString(Build.SUPPORTED_ABIS));
                } else {
                    sb.append(Build.CPU_ABI);
                }
            } catch (Exception e) {

            }
            return sb.toString();
        }

        public static interface MainCrashHandler {
            void mainException(java.lang.Thread t, Throwable e, String phoneMsg);
        }

        public static interface UncaughtCrashHandler {
            void uncaughtException(java.lang.Thread t, Throwable e, String phoneMsg);
        }

    }

    //============================================= 吐司类 =====================================

    /**
     * @吐司类
     */
    public static class TOAST {

        public static boolean TOAST_TF = true;      //控制外部所有的 toast 显示
        public static boolean GT_TOAST_TF = false;  //控制内部所有的 toast 显示

        public static boolean isToastTf() {
            return TOAST_TF;
        }

        public static void setToastTf(boolean toastTf) {
            TOAST_TF = toastTf;
        }

        public static boolean isGtToastTf() {
            return GT_TOAST_TF;
        }

        public static void setGtToastTf(boolean gtToastTf) {
            GT_TOAST_TF = gtToastTf;
        }

        /**
         * Toast 自定义 View
         */
        public static class ToastView {

            private static Toast toast;
            private View view;

            public Toast getToast() {
                return toast;
            }

            public void show() {
                if (toast == null) return;
                toast.show();
                toast = null;
                view = null;
            }

            public void finish() {
                if (view != null) view = null;
                if (toast != null) toast = null;
            }


            public View getView() {
                return view;
            }


            /**
             * @param layout 布局
             * @return
             */
            public ToastView initLayout(int layout) {
                if (TOAST.TOAST_TF) {
                    Context context = getActivity();
                    if (context != null && context != null) {
                        view = LayoutInflater.from(context).inflate(layout, null);
                        toast = new Toast(context);
                        toast.setView(view);
                    } else {
                        if (LOG.LOG_TF) {//设置为默认输出日志
                            err("GT_bug", "消息框错误日志：你没有为 Context 进行赋值 ，却引用了 Toast 导致该功能无法实现。解决措施 在调用 toast 代码之前添加：GT.getGT().setactivity(activity);");
                        }
                    }
                }
                return this;
            }

            public ToastView initLayout(int layout, Context context) {
                if (TOAST.TOAST_TF) {
                    if (context != null) {
                        view = LayoutInflater.from(context).inflate(layout, null);
                        toast = new Toast(context);
                        toast.setView(view);
                    } else {
                        if (LOG.LOG_TF) {//设置为默认输出日志
                            err("GT_bug", "消息框错误日志：你没有为 Context 进行赋值 ，却引用了 Toast 导致该功能无法实现。解决措施 在调用 toast 代码之前添加：GT.getGT().setactivity(activity);");
                        }
                    }
                }
                return this;
            }

            /**
             * @param layout  布局
             * @param Gravity Gravity.*****  用这个变量里面的值可以控制显示位置 如果为 0 就显示默认位置
             * @return
             */
            public ToastView initLayout(Context context, int layout, int Gravity) {
                if (TOAST.TOAST_TF) {
                    if (context != null && context != null) {
                        view = LayoutInflater.from(context).inflate(layout, null);
                        toast = new Toast(context);
                        if (Gravity != 0)
                            toast.setGravity(Gravity, 0, 0);
                        toast.setView(view);
                    } else {
                        if (LOG.LOG_TF) {//设置为默认输出日志
                            err("GT_bug", "消息框错误日志：你没有为 Context 进行赋值 ，却引用了 Toast 导致该功能无法实现。解决措施 在调用 toast 代码之前添加：GT.getGT().setactivity(activity);");
                        }
                    }
                }
                return this;
            }


            public ToastView initLayout(int layout, int Gravity, Context context) {

                if (TOAST.TOAST_TF) {
                    if (context != null) {
                        view = LayoutInflater.from(context).inflate(layout, null);
                        toast = new Toast(context);
                        if (Gravity != 0)
                            toast.setGravity(Gravity, 0, 0);
                        toast.setView(view);
                    } else {
                        if (LOG.LOG_TF) {//设置为默认输出日志
                            err("GT_bug", "消息框错误日志：你没有为 Context 进行赋值 ，却引用了 Toast 导致该功能无法实现。解决措施 在调用 toast 代码之前添加：GT.getGT().setactivity(activity);");
                        }
                    }
                }
                return this;
            }


        }

        private static Context context = null;
        private static Toast toast = null;

        public static void showToast(Context context, String text) {
            if (toast == null) {
                toast = Toast.makeText(context, text, Toast.LENGTH_SHORT);
            } else {
                toast.setText(text);
                toast.setDuration(Toast.LENGTH_SHORT);
            }
            if (TOAST_TF)
                toast.show();
        }


    }

    //============================================= 数据类 =====================================

    public static class ARouter {

        public interface IProvider {
            void init(Context context);
        }

        public interface IInterceptor {
            void init(Context context, String injectObject);

            boolean process(Intent intent, InterceptorCallback callback);
        }

        public static abstract class InterceptorCallback {
            public boolean onContinue(Intent intent) {
                return true;
            }

            public boolean onAbort(Intent intent) {
                return false;
            }
        }


        private static boolean isDebugARouter = false;//ARouter调试开关
        private volatile static ARouter instance = null;//路由
        private static final Map<String, GT_RouteMeta> aRouterMap = new ArrayMap<>();//路由容器
        private static final Map<String, Object> aRouterStickyMap = new ArrayMap<>();//临时粘性参数事件
        private static SoftReference<Context> softReference;//内部引用 Application
        private static SoftReference<Activity> softReferenceActivity;//内部引用 activity
        private static SoftReference<GT.ARouter.InterceptorCallback> softReferenceNavigationCallback;//内部引用 NavigationCallback
        private ARouterBean aRouterBean;

        private class ARouterBean {

            public static final int INDEX_DEFAULT = -1079;//默认Int值
            private String path;//目标路径
            private String[] claIntercepts;//绿色通道

            public void setClaIntercepts(String[] claIntercepts) {
                this.claIntercepts = claIntercepts;
            }

            public String[] getClaIntercepts() {
                return claIntercepts;
            }

            private int flags = INDEX_DEFAULT;//activity的启动模式
            //启动动画
            private int enterAnim = INDEX_DEFAULT, exitAnim = INDEX_DEFAULT, enterBackAnim = INDEX_DEFAULT, exitBackAnim = INDEX_DEFAULT;
            private int[] anim;
            private Map<String, Object> paramsType;  // 注册参数
            private Map<String, Object> bundleParams;  //bundle 参数

            private Class<?>[] constructorKey;//bundle 类型
            private Object[] constructorValue;//bundle 值

            public ARouterBean(String path) {
                this.path = path;
            }

            public String getPath() {
                return path;
            }

            public void setPath(String path) {
                this.path = path;
            }

            public int getFlags() {
                return flags;
            }

            public void setFlags(int flags) {
                this.flags = flags;
            }

            public Map<String, Object> getBundleParams() {
                return bundleParams;
            }

            public void addBundleParams(String key, Object value) {
                if (bundleParams == null) bundleParams = new HashMap<>();
                bundleParams.put(key, value);//每次都只保存最新的那个
            }

            public Map<String, Object> getParamsType() {
                return paramsType;
            }

            public void addParamsType(String key, Object value) {
                if (paramsType == null) paramsType = new HashMap<>();
                paramsType.put(key, value);//每次都只保存最新的那个
            }

            /**
             * 添加构造方法值
             *
             * @param constructorKey
             * @param constructorValue
             */
            public void addConstructorParams(Class<?>[] constructorKey, Object... constructorValue) {
                if (constructorKey == null || constructorKey.length == 0 ||
                        constructorValue == null || constructorValue.length == 0 ||
                        constructorKey.length != constructorValue.length) return;
                this.constructorKey = constructorKey;
                this.constructorValue = constructorValue;
            }

            public Class<?>[] getConstructorKey() {
                if (constructorKey == null) return null;
                return (Class<?>[]) constructorKey;
            }

            public Object[] getConstructorValue() {
                if (constructorValue == null) return null;
                return constructorValue;
            }
        }

        public static ARouter getInstance() {
            if (instance == null) {
                synchronized (ARouter.class) {
                    if (instance == null) {
                        instance = new ARouter();
                    }
                }
            }
            return instance;
        }

        /**
         * 注册 获取注解
         *
         * @param object
         * @return
         */
        public ARouter inject(Object object, String... gtRoutePaths) {
            Context context = softReference.get();
            //路由检查是否自动依赖注入值
            Field[] fields = object.getClass().getDeclaredFields();//获致当前 Activity 所有成员变更
            for (Field field : fields) {
                GT_Autowired annotation = field.getAnnotation(GT_Autowired.class);
                if (annotation == null) continue;
                String name = annotation.value();
                //如果 注解里的key为空，那就直接用当前变量名作为key
                if (name == null || name.isEmpty()) {
                    name = field.getName();
                }

                Object value = null;
                try {

                    //获取当前注解类路由路径 作为依赖注解参数的 前缀 key
                    String gtRoutePath = "";
                    boolean isRemove = true;//是否注解参数自动释放
                    if (gtRoutePaths != null && gtRoutePaths.length != 0 && gtRoutePaths[0] != null) {
                        gtRoutePath = gtRoutePaths[0];
                        isRemove = false;
                    }

                    if (gtRoutePath.isEmpty()) {
                        GT_Route gtRoute = object.getClass().getAnnotation(GT_Route.class);
                        if (gtRoute != null) {
                            gtRoutePath = gtRoute.value();
                        }
                    }

                    //要保证，主动传参优先级大于一切架构赋值
                    if (aRouterStickyMap.containsKey(gtRoutePath + name)) {
                        value = aRouterStickyMap.get(gtRoutePath + name);
                        if (isRemove) {
                            aRouterStickyMap.remove(gtRoutePath + name);
                        }
                    } else if (aRouterMap.containsKey(name)) {//判断是否依赖 路由路径来自动注入
                        GT_RouteMeta gtRouteMeta = aRouterMap.get(name);
                        if (gtRouteMeta != null && gtRouteMeta.getDestination() != null) {
                            value = GT.AnnotationAssist.classToObject(gtRouteMeta.getDestination());
                        }
                    } else {//如果 既没有主动传值 也没有 依赖路由路径，那就自动生成默认对象
                        if (GT.ARouter.IProvider.class.isAssignableFrom(field.getType())) {
                            for (String key : aRouterMap.keySet()) {
                                GT_RouteMeta gtRouteMeta = aRouterMap.get(key);
                                if (field.getType().isAssignableFrom(gtRouteMeta.getDestination())) {
                                    value = GT.AnnotationAssist.classToObject(gtRouteMeta.getDestination());
                                    GT.AnnotationAssist.setReflectMethodValue(value, "init", null, Context.class, context);
                                    break;
                                }
                            }
                        }
                    }

                    //给注解类进行依赖注入
                    if (value != null) {
                        GT.AnnotationAssist.setReflectVariateValue(object, field.getName(), value);
                    }
                } catch (Exception e) {
                    if (GT.LOG.GT_LOG_TF) {
                        GT.errs("类型有不匹配的 e:" + e);
                    }
                }

            }
            return this;
        }

        /**
         * 手动释放依赖注解资源
         *
         * @param object
         * @return
         */
        public ARouter unregister(Object object) {
            //路由检查是否自动依赖注入值
            Field[] fields = object.getClass().getDeclaredFields();//获致当前 Activity 所有成员变更
            for (Field field : fields) {
                GT_Autowired annotation = field.getAnnotation(GT_Autowired.class);
                if (annotation == null) continue;
                String name = annotation.value();
                //如果 注解里的key为空，那就直接用当前变量名作为key
                if (name == null || name.isEmpty()) {
                    name = field.getName();
                }
                try {
                    //获取当前注解类路由路径 作为依赖注解参数的 前缀 key
                    String gtRoutePath = "";
                    GT_Route gtRoute = object.getClass().getAnnotation(GT_Route.class);
                    if (gtRoute != null) {
                        gtRoutePath = gtRoute.value();
                    }
                    aRouterStickyMap.remove(gtRoutePath + name);
                } catch (Exception e) {
                    if (GT.LOG.GT_LOG_TF) {
                        GT.errs("类型有不匹配的 e:" + e);
                    }
                }

            }
            return this;
        }


        /**
         * 销毁路由所有资源
         *
         * @return
         */
        public ARouter destroy() {
            clear();
            if (softReference != null) softReference.clear();
            if (aRouterMap != null) aRouterMap.clear();
            instance = null;
            return this;
        }

        /**
         * 清空路由 可清空缓存数据
         * 该方法请谨慎使用，会将路由传参也清理掉，
         * 若你确定没有传参缓存，即可使用
         *
         * @return
         */
        public ARouter clear() {
            aRouterBean = null;//2
            if (aRouterStickyMap != null) aRouterStickyMap.clear();
            if (softReferenceActivity != null) softReferenceActivity.clear();
            if (softReferenceNavigationCallback != null) softReferenceNavigationCallback.clear();
            return this;
        }

        /**
         * 构建跳转路由目的
         *
         * @param path
         * @return
         */
        public ARouter build(String path) {
            aRouterBean = new ARouterBean(path);
            return this;
        }

        /**
         * 动态设置 跳转Activity的Flags
         *
         * @param flags 参数值
         * @return
         */
        public ARouter withFlags(int flags) {
            if (aRouterBean == null) return this;
            aRouterBean.setFlags(flags);
            return this;
        }

        /**
         * 添加构造参数
         *
         * @param key   参数名称
         * @param value 参数值
         * @return
         */
        public ARouter constructorParams(Class<?>[] key, Object[] value) {
            if (aRouterBean == null) return this;
            //需要完成，注解赋值
            aRouterBean.addConstructorParams(key, value);
            return this;
        }

        /**
         * 注解传递参数
         *
         * @param key   参数名称
         * @param value 参数值
         * @return
         */
        public ARouter withObject(String key, Object value) {
            if (aRouterBean == null) return this;
            //需要完成，注解赋值
            aRouterBean.addParamsType(aRouterBean.getPath() + key, value);
            return this;
        }

        /**
         * 通过 Bundle 传递参数
         *
         * @param key   参数key
         * @param value 参数值
         * @return
         */
        public ARouter putExtra(String key, Object value) {
            if (aRouterBean == null) return this;
            aRouterBean.addBundleParams(key, value);
            return this;
        }

        /**
         * 使用转场动画
         *
         * @param anim [0][1] = 启动动画 、[2][3] = 返回动画
         * @return
         */
        public ARouter withTransition(int... anim) {
            if (aRouterBean == null || anim == null || anim.length <= 1) return this;
            aRouterBean.anim = anim;
            switch (anim.length) {
                case 2:
                    aRouterBean.enterAnim = anim[0];
                    aRouterBean.exitAnim = anim[1];
                    break;
                case 3:
                    aRouterBean.enterAnim = anim[0];
                    aRouterBean.exitAnim = anim[1];
                    aRouterBean.enterBackAnim = anim[2];
                    aRouterBean.exitBackAnim = anim[1];
                    break;
                case 4:
                    aRouterBean.enterAnim = anim[0];
                    aRouterBean.exitAnim = anim[1];
                    aRouterBean.enterBackAnim = anim[2];
                    aRouterBean.exitBackAnim = anim[3];
                    break;
            }

            return this;
        }

        /**
         * 使用转场动画
         *
         * @param enterAnim
         * @param exitAnim
         * @return
         */
        public ARouter withTransition(int enterAnim, int exitAnim) {
            if (aRouterBean == null) return this;
            aRouterBean.enterAnim = enterAnim;
            aRouterBean.exitAnim = exitAnim;
            return this;
        }

        /**
         * 使用绿色通道，默认跳过所有拦截器，可指定跳过的拦截器
         *
         * @param claIntercepts
         * @return
         */
        public ARouter greenChannal(String... claIntercepts) {
            if (aRouterBean == null) return this;
            aRouterBean.claIntercepts = claIntercepts;
            return this;
        }

        /**
         * 启动拦截器
         *
         * @param interceptorCallback 拦截器监听
         * @param <T>
         * @return
         */
        public <T> T navigation(GT.ARouter.InterceptorCallback interceptorCallback) {
            softReferenceNavigationCallback = new SoftReference(interceptorCallback);
            //否则就执行 路由基本逻辑
            return navigation();
        }

        /**
         * 拦截器方式
         *
         * @param activity            上下文
         * @param interceptorCallback 拦截器监听
         * @param <T>
         * @return
         */
        public <T> T navigation(Activity activity, GT.ARouter.InterceptorCallback... interceptorCallback) {
            softReferenceActivity = new SoftReference(activity);
            if (interceptorCallback != null && interceptorCallback.length > 0 && interceptorCallback[0] != null) {
                softReferenceNavigationCallback = new SoftReference(interceptorCallback[0]);
            }
            //否则就执行 路由基本逻辑
            return navigation();
        }

        public <T> T navigation(Activity activity) {
            softReferenceActivity = new SoftReference(activity);
            //否则就执行 路由基本逻辑
            return navigation();
        }


        public <T> T navigation() {
            if (aRouterBean == null) return null;
            GT_RouteMeta gt_routeMeta = aRouterMap.get(aRouterBean.path);
            if (gt_routeMeta == null) return null;
            Context context = null;

            //先拿Activity
            if (softReferenceActivity != null) {
                context = softReferenceActivity.get();
            }

            //若没有就直接拿 Application
            if (softReference != null && context == null) {
                context = softReference.get();
            }

            try {
                //如果使用注解传递，那就进行 监听者消息 方法传递
                Map<String, Object> paramsType = aRouterBean.getParamsType();
                if (paramsType != null && !paramsType.keySet().isEmpty()) {
                    for (String key : paramsType.keySet()) {
                        Object value = paramsType.get(key);
                        aRouterStickyMap.put(key, value);
                    }
                }

                boolean isAbort;//默认不拦截
                switch (gt_routeMeta.getType()) {
                    case ClassType.ACTIVITY:
                    case ClassType.VIEW:
                    case ClassType.FRAGMENT:
                    case ClassType.FRAGMENT_X:
                    case ClassType.DIALOG_FRAGMENT:
                    case ClassType.DIALOG_FRAGMENT_X:
                    case ClassType.VIEW_MODEL:
                    case ClassType.BASE_VIEW:
                    case ClassType.FLOATING_WINDOW:
                    case ClassType.POPUP_WINDOW:
                    case ClassType.NOTIFICATION:
                    case ClassType.WEB_VIEW:
                    case ClassType.ADAPTER:
                    case ClassType.PROVIDER://需要添加拦截器的
                        isAbort = loadInterceptor(context, gt_routeMeta);//加载拦截器
                        if (!isAbort) {
                            switch (gt_routeMeta.getType()) {
                                case ClassType.ACTIVITY:
                                    setActivity(context, gt_routeMeta);//处理 路由逻辑
                                    break;
                                case ClassType.VIEW:
                                    View view;
                                    view = setView(gt_routeMeta);//处理 路由逻辑
                                    if (view != null) {
                                        aRouterBean = null;
                                        return (T) view;
                                    }
                                    break;
                                case ClassType.FRAGMENT:
                                case ClassType.FRAGMENT_X:
                                    Fragment fragment;
                                    fragment = setFragment(gt_routeMeta);//处理 路由逻辑
                                    if (fragment != null) {
                                        aRouterBean = null;
                                        return (T) fragment;
                                    }
                                case ClassType.DIALOG_FRAGMENT:
                                case ClassType.DIALOG_FRAGMENT_X:
                                    DialogFragment dialogFragment;
                                    dialogFragment = setDialogFragment(gt_routeMeta);//处理 路由逻辑
                                    if (dialogFragment != null) {
                                        aRouterBean = null;
                                        return (T) dialogFragment;
                                    }
                                case ClassType.BASE_VIEW:
                                    GT.GT_View.BaseView baseView;
                                    baseView = setBaseView(gt_routeMeta);//处理 路由逻辑
                                    if (baseView != null) {
                                        aRouterBean = null;
                                        return (T) baseView;
                                    }
                                case ClassType.FLOATING_WINDOW://悬浮窗
                                    GT.GT_FloatingWindow.BaseFloatingWindow floatingWindow;
                                    floatingWindow = setFloatingWindow(gt_routeMeta);//处理 路由逻辑
                                    if (floatingWindow != null) {
                                        aRouterBean = null;
                                        return (T) floatingWindow;
                                    }
                                case ClassType.POPUP_WINDOW://悬浮窗
                                    GT.GT_PopupWindow.BasePopupWindow popupWindow;
                                    popupWindow = setPopupWindow(gt_routeMeta);//处理 路由逻辑
                                    if (popupWindow != null) {
                                        aRouterBean = null;
                                        return (T) popupWindow;
                                    }

                                case ClassType.NOTIFICATION://悬浮窗
                                    GT.GT_Notification.BaseNotification notification;
                                    notification = setNotification(gt_routeMeta);//处理 路由逻辑
                                    if (notification != null) {
                                        aRouterBean = null;
                                        return (T) notification;
                                    }

                                case ClassType.WEB_VIEW://悬浮窗
                                    GT.GT_WebView.BaseWebView webView;
                                    webView = setWebView(gt_routeMeta);//处理 路由逻辑
                                    if (webView != null) {
                                        aRouterBean = null;
                                        return (T) webView;
                                    }

                                case ClassType.ADAPTER://适配器
                                    RecyclerView.Adapter<RecyclerView.ViewHolder> adapter;
                                    adapter = setAdapter(gt_routeMeta);//处理 路由逻辑
                                    if (adapter != null) {
                                        aRouterBean = null;
                                        return (T) adapter;
                                    }

                                case ClassType.VIEW_MODEL://viewModel
                                    ViewModel viewModel;
                                    viewModel = setViewModel(gt_routeMeta);//处理 路由逻辑
                                    if (viewModel != null) {
                                        aRouterBean = null;
                                        return (T) viewModel;
                                    }

                                case ClassType.PROVIDER://接口方法、传值、传参
                                    Object obj;
                                    obj = setProvider(context, gt_routeMeta);//处理 接口方法 路由逻辑
                                    if (obj != null) {
                                        aRouterBean = null;
                                        return (T) obj;
                                    }
                            }
                        }
                        aRouterBean = null;//1
                        return null;
                    case ClassType.INTERCEPTOR://直接跳转拦截器
                        startInterceptor(context, gt_routeMeta);//加载拦截器
                        aRouterBean = null;//1
                        return null;
                    //待实现
                    case ClassType.SERVICE:
                        break;
                    case ClassType.CONTENT_PROVIDER:
                        break;
                    case ClassType.UNKNOWN:
                        break;
                }
            } catch (Exception e) {
                if (ARouter.isDebugARouter) {
                    GT.err(" e:" + e);
                }
            }
            aRouterBean = null;//9
            return (T) gt_routeMeta;
        }

        @SuppressLint("WrongConstant")
        private void setActivity(Context context, GT_RouteMeta gt_routeMeta) {
            if (context != null) {
                Intent intent = new Intent(context, gt_routeMeta.getDestination());
                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                if (aRouterBean.flags != ARouterBean.INDEX_DEFAULT) {
                    intent.setFlags(aRouterBean.flags);
                }
                setBundleParams(intent);

                //设置Activity 动态转场
                if (aRouterBean.enterBackAnim != ARouterBean.INDEX_DEFAULT && aRouterBean.exitBackAnim != ARouterBean.INDEX_DEFAULT) {
                    //传递参数
                    intent.putExtra(gt_routeMeta.getDestination() + "enterBackAnim", aRouterBean.enterBackAnim);
                    intent.putExtra(gt_routeMeta.getDestination() + "exitBackAnim", aRouterBean.exitBackAnim);
                }

                //动态添加 转场
                if (aRouterBean.enterAnim != ARouterBean.INDEX_DEFAULT && aRouterBean.exitAnim != ARouterBean.INDEX_DEFAULT) {
                    ActivityOptions options = ActivityOptions.makeCustomAnimation(context, aRouterBean.enterAnim, aRouterBean.exitAnim);
                    try {
                        context.startActivity(intent, options.toBundle());
                    } catch (Exception e) {
                        context.startActivity(intent);
                    }
                } else {
                    context.startActivity(intent);
                }
            }
        }

        private DialogFragment setDialogFragment(GT_RouteMeta gt_routeMeta) {
            DialogFragment dialogFragment = null;
            try {
                Object obj = GT.AnnotationAssist.classToObject(gt_routeMeta.getPackClassPath());
                if (obj instanceof DialogFragment) {
                    dialogFragment = (DialogFragment) obj;
                    Bundle bundle = new Bundle();
                    setFragmentParams(bundle);
                    dialogFragment.setArguments(bundle);
                }
            } catch (Exception e) {
            }
            return dialogFragment;
        }

        private Fragment setFragment(GT_RouteMeta gt_routeMeta) {
            Fragment fragment = null;
            try {
                Object obj = GT.AnnotationAssist.classToObject(gt_routeMeta.getPackClassPath());
                if (obj instanceof Fragment) {
                    fragment = (Fragment) obj;
                    Bundle bundle = new Bundle();
                    setFragmentParams(bundle);
                    bundle.putIntArray(gt_routeMeta.getDestination() + "anim", aRouterBean.anim);
                    fragment.setArguments(bundle);
                }
            } catch (Exception e) {
            }
            return fragment;
        }

        /**
         * 创建 Object
         *
         * @param gt_routeMeta
         * @param isContext
         * @return
         */
        private Object creationObject(GT_RouteMeta gt_routeMeta, Boolean... isContext) {
            Object obj;
            if (aRouterBean != null && aRouterBean.constructorKey != null && aRouterBean.constructorValue != null) {//是否传递参数 Bundle
                obj = GT.AnnotationAssist.classToObject(gt_routeMeta.getPackClassPath(), aRouterBean.constructorKey, aRouterBean.constructorValue);
                aRouterBean.constructorKey = null;
                aRouterBean.constructorValue = null;
            } else {//没有传递 Bundle 参数
                if (isContext != null && isContext.length > 0 && isContext[0] != null && isContext[0]) {
                    obj = GT.AnnotationAssist.classToObject(gt_routeMeta.getPackClassPath(), new Class[]{Context.class}, new Object[]{softReference.get()});
                } else {
                    obj = GT.AnnotationAssist.classToObject(gt_routeMeta.getPackClassPath());
                }
            }
            return obj;
        }

        private GT.GT_View.BaseView setBaseView(GT_RouteMeta gt_routeMeta) {
            GT.GT_View.BaseView baseView = null;
            try {
                Object obj = creationObject(gt_routeMeta);
                if (obj instanceof GT.GT_View.BaseView) {
                    baseView = (GT.GT_View.BaseView) obj;
                    Bundle bundle = new Bundle();
                    setFragmentParams(bundle);
                    baseView.setArguments(bundle);
                }
            } catch (Exception e) {
                GT.errt("e:" + e);
            }
            return baseView;
        }

        private GT.GT_FloatingWindow.BaseFloatingWindow setFloatingWindow(GT_RouteMeta gt_routeMeta) {
            GT.GT_FloatingWindow.BaseFloatingWindow floatingWindow = null;
            try {
                Object obj = creationObject(gt_routeMeta);
                if (obj instanceof GT.GT_FloatingWindow.BaseFloatingWindow) {
                    floatingWindow = (GT.GT_FloatingWindow.BaseFloatingWindow) obj;
                    Bundle bundle = new Bundle();
                    setFragmentParams(bundle);
                    floatingWindow.setArguments(bundle);
                }
            } catch (Exception e) {
                GT.errt("e:" + e);
            }
            return floatingWindow;
        }


        private Object setProvider(Context context, GT_RouteMeta gt_routeMeta) {
            Object obj = null;
            try {
                obj = GT.AnnotationAssist.classToObject(gt_routeMeta.getDestination());
                GT.AnnotationAssist.setReflectMethodValue(obj, "init", null, Context.class, context);
            } catch (Exception e) {
            }
            return obj;
        }

        private View setView(GT_RouteMeta gt_routeMeta) {
            try {
                Object obj = creationObject(gt_routeMeta, true);
                if (obj instanceof View) {
                    return (View) obj;
                }
            } catch (Exception e) {
                GT.errt("e:" + e);
            }
            return null;
        }


        private GT.GT_PopupWindow.BasePopupWindow setPopupWindow(GT_RouteMeta gt_routeMeta) {
            GT.GT_PopupWindow.BasePopupWindow popupWindow = null;
            try {
                Object obj = creationObject(gt_routeMeta, true);
                if (obj instanceof GT.GT_PopupWindow.BasePopupWindow) {
                    popupWindow = (GT.GT_PopupWindow.BasePopupWindow) obj;
                    Bundle bundle = new Bundle();
                    setFragmentParams(bundle);
                    popupWindow.setArguments(bundle);
                }

            } catch (Exception e) {
                GT.errt("e:" + e);
            }
            return popupWindow;

        }

        private GT.GT_WebView.BaseWebView setWebView(GT_RouteMeta gt_routeMeta) {
            GT.GT_WebView.BaseWebView webView = null;
            try {
                Object obj = creationObject(gt_routeMeta, true);
                if (obj instanceof GT.GT_WebView.BaseWebView) {
                    webView = (GT.GT_WebView.BaseWebView) obj;
                    Bundle bundle = new Bundle();
                    setFragmentParams(bundle);
                    webView.setArguments(bundle);
                }
            } catch (Exception e) {
                GT.errt("e:" + e);
            }
            return webView;

        }

        private RecyclerView.Adapter<RecyclerView.ViewHolder> setAdapter(GT_RouteMeta gt_routeMeta) {
            RecyclerView.Adapter<RecyclerView.ViewHolder> adapter = null;
            try {
                Object obj = creationObject(gt_routeMeta, true);
                if (obj instanceof GT.Adapters.BaseAdapter) {
                    adapter = (RecyclerView.Adapter<RecyclerView.ViewHolder>) obj;
                }
            } catch (Exception e) {
                GT.errt("e:" + e);
            }
            return adapter;

        }


        private ViewModel setViewModel(GT_RouteMeta gt_routeMeta) {
            ViewModel viewModel = null;
            try {
                Object obj = creationObject(gt_routeMeta, true);
                if (obj instanceof ViewModel) {
                    viewModel = (ViewModel) obj;
                }
            } catch (Exception e) {
                GT.errt("e:" + e);
            }
            return viewModel;

        }

        private GT.GT_Notification.BaseNotification setNotification(GT_RouteMeta gt_routeMeta) {
            GT.GT_Notification.BaseNotification notification = null;
            try {
                Object obj = creationObject(gt_routeMeta, true);
                if (obj instanceof GT.GT_Notification.BaseNotification) {
                    notification = (GT.GT_Notification.BaseNotification) obj;
                    Bundle bundle = new Bundle();
                    setFragmentParams(bundle);
                    notification.setArguments(bundle);
                }
            } catch (Exception e) {
                GT.errt("e:" + e);
            }
            return notification;

        }


        /**
         * 启动拦截器
         *
         * @param context
         * @param gt_routeMeta
         * @return
         */
        private boolean startInterceptor(Context context, GT_RouteMeta gt_routeMeta) {
            //本次跳转 是否存在拦截
            String[] interceptors = gt_routeMeta.getInterceptors();
            if (interceptors == null || interceptors.length == 0) return false;//如果没有设置拦截器，那就返回不拦截

            //本次拦截 是否存在监听
            GT.ARouter.InterceptorCallback interceptorCallback = null;
            if (softReferenceNavigationCallback != null) {
                interceptorCallback = softReferenceNavigationCallback.get();
            }

            //默认不拦截
            final boolean[] isAbort = {false};

            //传递参数
            Intent intent = null;
            if (context instanceof Activity) {
                Activity actvity = (Activity) context;
                intent = actvity.getIntent();
            }

            Intent intentBundleParam = setBundleParams(intent);
            if (intent == null) {
                intent = intentBundleParam;
            }

            //按被调用的拦截器遍历顺序处理
            for (int i = 0; i < interceptors.length; i++) {
                if (isAbort[0]) break;//如果上个拦截器已拦截，那就直接停止遍历拦截
                String interceptor = interceptors[i];
                Object obj;
                GT_RouteMeta gtRouteMeta = aRouterMap.get(interceptor);//获取这个拦截器的信息
                try {
                    //实例化拦截器
                    obj = GT.AnnotationAssist.classToObject(gtRouteMeta.getDestination());

                    //调用初始化
                    GT.AnnotationAssist.setReflectMethodValue(obj, "init", null, new Class[]{Context.class, String.class}, context, "");

                    GT.ARouter.InterceptorCallback finalInterceptorCallback = interceptorCallback;
                    //进行拦截返回
                    int finalI = i;
                    GT.AnnotationAssist.setReflectMethodValue(obj, "process", Boolean.class,
                            new Class[]{Intent.class, GT.ARouter.InterceptorCallback.class}, intent, new GT.ARouter.InterceptorCallback() {
                                @Override
                                public boolean onContinue(Intent intent) {
                                    if (finalI == interceptors.length - 1 && finalInterceptorCallback != null) {
                                        finalInterceptorCallback.onContinue(intent);
                                    }
                                    if (softReferenceNavigationCallback != null)
                                        softReferenceNavigationCallback.clear();
                                    return super.onContinue(intent);
                                }

                                @Override
                                public boolean onAbort(Intent intent) {
                                    isAbort[0] = true;
                                    if (finalInterceptorCallback != null) {
                                        finalInterceptorCallback.onAbort(intent);
                                    }
                                    if (softReferenceNavigationCallback != null)
                                        softReferenceNavigationCallback.clear();
                                    return super.onAbort(intent);
                                }
                            });


                } catch (Exception e) {
                }

                if (softReferenceActivity != null) softReferenceActivity.clear();
                //遍历拦截循环结束
            }

            return isAbort[0];
        }

        /**
         * 加载拦截器
         *
         * @param context
         * @param gt_routeMeta
         * @return
         */
        private boolean loadInterceptor(Context context, GT_RouteMeta gt_routeMeta) {
            //本次跳转 是否存在拦截
            String[] interceptors = gt_routeMeta.getInterceptors();
            if (interceptors == null || interceptors.length == 0) return false;//如果没有设置拦截器，那就返回不拦截

            //本次拦截 是否存在监听
            GT.ARouter.InterceptorCallback interceptorCallback = null;
            if (softReferenceNavigationCallback != null) {
                interceptorCallback = softReferenceNavigationCallback.get();
            }

            //默认不拦截
            final boolean[] isAbort = {false};

            //传递参数
            Intent intent = null;
            if (context instanceof Activity) {
                Activity activity = (Activity) context;
                intent = activity.getIntent();
            }

            Intent intentBundleParam = setBundleParams(intent);
            if (intent == null) {
                intent = intentBundleParam;
            }

            List<String> claInterceptsList = null;
            if (aRouterBean != null) {
                String[] claIntercepts = aRouterBean.claIntercepts;
                if (claIntercepts != null) {
                    claInterceptsList = new ArrayList<>(Arrays.asList(claIntercepts));
                }
            }

            //按被调用的拦截器遍历顺序处理
            for (int i = 0; i < interceptors.length; i++) {
                if (isAbort[0]) break;//如果上个拦截器已拦截，那就直接停止遍历拦截
                String interceptor = interceptors[i];
                if (claInterceptsList != null && interceptor != null) {
                    if (claInterceptsList.isEmpty()) {
                        if (interceptorCallback != null) interceptorCallback.onContinue(intent);//返回通过拦截
                        break;//全绿色通道
                    } else if (claInterceptsList.contains(interceptor)) continue;//跳过绿色通道拦截器
                }
                Object obj;
                GT_RouteMeta gtRouteMeta = aRouterMap.get(interceptor);//获取这个拦截器的信息
                try {
                    //实例化拦截器
                    obj = GT.AnnotationAssist.classToObject(gtRouteMeta.getDestination());
                    //调用初始化
                    GT.AnnotationAssist.setReflectMethodValue(obj, "init", null, new Class[]{Context.class, String.class}, context, gt_routeMeta.getPath());

                    GT.ARouter.InterceptorCallback finalInterceptorCallback = interceptorCallback;
                    //进行拦截返回
                    int finalI = i;
                    GT.AnnotationAssist.setReflectMethodValue(obj, "process", Boolean.class,
                            new Class[]{Intent.class, GT.ARouter.InterceptorCallback.class}, intent, new GT.ARouter.InterceptorCallback() {
                                @Override
                                public boolean onContinue(Intent intent) {
                                    if (finalI == interceptors.length - 1 && finalInterceptorCallback != null) {
                                        finalInterceptorCallback.onContinue(intent);
                                    }
                                    if (softReferenceNavigationCallback != null)
                                        softReferenceNavigationCallback.clear();
                                    return super.onContinue(intent);
                                }

                                @Override
                                public boolean onAbort(Intent intent) {
                                    isAbort[0] = true;
                                    if (finalInterceptorCallback != null) {
                                        finalInterceptorCallback.onAbort(intent);
                                    }
                                    if (softReferenceNavigationCallback != null)
                                        softReferenceNavigationCallback.clear();
                                    return super.onAbort(intent);
                                }
                            });


                } catch (Exception e) {
                }

                if (softReferenceActivity != null) softReferenceActivity.clear();
                //遍历拦截循环结束
            }
            return isAbort[0];
        }

        /**
         * Bundle 参数
         *
         * @param intent
         */
        private Intent setBundleParams(Intent intent) {
            if (aRouterBean == null) return intent;
            //如果传递的int是 Bundle 数据，那就通过 ent 传递
            try {
                Map<String, Object> bundleParams = aRouterBean.getBundleParams();
                if (bundleParams != null && !bundleParams.keySet().isEmpty()) {
                    if (intent == null) intent = new Intent();
                    for (String key : bundleParams.keySet()) {
                        Object object = bundleParams.get(key);
                        if (object instanceof String) {
                            intent.putExtra(key, object.toString());
                        } else if (object instanceof Integer) {
                            intent.putExtra(key, (Integer) object);
                        } else if (object instanceof Long) {
                            intent.putExtra(key, (Long) object);
                        } else if (object instanceof Float) {
                            intent.putExtra(key, (Float) object);
                        } else if (object instanceof Boolean) {
                            intent.putExtra(key, (Boolean) object);
                        } else if (object instanceof Double) {
                            intent.putExtra(key, (Double) object);
                        } else if (object instanceof Short) {
                            intent.putExtra(key, (Short) object);
                        } else if (object instanceof Byte) {
                            intent.putExtra(key, (Byte) object);
                        } else if (object instanceof Parcelable) {
                            intent.putExtra(key, (Parcelable) object);
                        } else if (object instanceof Serializable) {
                            intent.putExtra(key, (Serializable) object);
                        } else if (object instanceof Bundle) {
                            intent.putExtra(key, (Bundle) object);
                        } else if (object instanceof Character) {
                            intent.putExtra(key, (Character) object);
                        } else if (object instanceof String[]) {
                            intent.putExtra(key, (String[]) object);
                        } else if (object instanceof Integer[]) {
                            intent.putExtra(key, (Integer[]) object);
                        } else if (object instanceof Float[]) {
                            intent.putExtra(key, (Float[]) object);
                        } else if (object instanceof Boolean[]) {
                            intent.putExtra(key, (Boolean[]) object);
                        } else if (object instanceof Short[]) {
                            intent.putExtra(key, (Short[]) object);
                        } else if (object instanceof Byte[]) {
                            intent.putExtra(key, (Byte[]) object);
                        } else if (object instanceof Double[]) {
                            intent.putExtra(key, (Double[]) object);
                        } else if (object instanceof Long[]) {
                            intent.putExtra(key, (Long[]) object);
                        } else if (object instanceof Serializable[]) {
                            intent.putExtra(key, (Serializable[]) object);
                        } else if (object instanceof Parcelable[]) {
                            intent.putExtra(key, (Parcelable[]) object);
                        } else if (object instanceof Character[]) {
                            intent.putExtra(key, (Character[]) object);
                        } else {//转入 json 存储
                            intent.putExtra(key, GT.JSON.toJson2(object));
                        }

                    }
                }
            } catch (Exception e) {

            }
            return intent;
        }

        /**
         * Fragment 参数
         *
         * @param bundle
         */
        private void setFragmentParams(Bundle bundle) {
            if (aRouterBean == null) return;
            //如果传递的int是 Bundle 数据，那就通过 ent 传递
            try {
                Map<String, Object> bundleParams = aRouterBean.getBundleParams();
                if (bundleParams != null && !bundleParams.keySet().isEmpty()) {
                    for (String key : bundleParams.keySet()) {
                        Object object = bundleParams.get(key);
                        if (object instanceof String) {
                            bundle.putString(key, object.toString());
                        } else if (object instanceof Integer) {
                            bundle.putInt(key, (Integer) object);
                        } else if (object instanceof Long) {
                            bundle.putLong(key, (Long) object);
                        } else if (object instanceof Float) {
                            bundle.putFloat(key, (Float) object);
                        } else if (object instanceof Boolean) {
                            bundle.putBoolean(key, (Boolean) object);
                        } else if (object instanceof Double) {
                            bundle.putDouble(key, (Double) object);
                        } else if (object instanceof Short) {
                            bundle.putShort(key, (Short) object);
                        } else if (object instanceof Byte) {
                            bundle.putByte(key, (Byte) object);
                        } else if (object instanceof Parcelable) {
                            bundle.putParcelable(key, (Parcelable) object);
                        } else if (object instanceof Serializable) {
                            bundle.putSerializable(key, (Serializable) object);
                        } else if (object instanceof Bundle) {
                            bundle = (Bundle) object;
                        } else if (object instanceof Character) {
                            bundle.putChar(key, (char) object);
                        } else if (object instanceof String[]) {
                            bundle.putStringArray(key, (String[]) object);
                        } else if (object instanceof Integer[]) {
                            bundle.putIntArray(key, (int[]) object);
                        } else if (object instanceof Float[]) {
                            bundle.putFloatArray(key, (float[]) object);
                        } else if (object instanceof Boolean[]) {
                            bundle.putBooleanArray(key, (boolean[]) object);
                        } else if (object instanceof Short[]) {
                            bundle.putShort(key, (Short) object);
                        } else if (object instanceof Byte[]) {
                            bundle.putByteArray(key, (byte[]) object);
                        } else if (object instanceof Double[]) {
                            bundle.putDoubleArray(key, (double[]) object);
                        } else if (object instanceof Long[]) {
                            bundle.putLongArray(key, (long[]) object);
                        } else if (object instanceof Character[]) {
                            bundle.putCharArray(key, (char[]) object);
                        } else {//转入 json 存储
                            bundle.putString(key, GT.JSON.toJson2(object));
                        }

                    }
                }
            } catch (Exception e) {

            }
        }

        public static synchronized void openDebug() {
            isDebugARouter = true;
        }

        public static synchronized void printStackTrace() {

        }

        /**
         * Application 初始化
         *
         * @param context
         */
        public static synchronized void init(Context context) {
            softReference = new SoftReference(context);
            //加载路由注解
            loadHibernateAnnotation(context, context.getPackageName());
        }

        /**
         * 处理 路由初始化数据
         *
         * @param context
         * @param packagePath
         */
        private static void loadHibernateAnnotation(Context context, String packagePath) {
            if (packagePath == null) return;
            try {
                String packageCodePath = context.getPackageCodePath();
                DexFile dexFile = new DexFile(packageCodePath);
                Enumeration<String> enumeration = dexFile.entries();
                while (enumeration.hasMoreElements()) {
                    String className = enumeration.nextElement();
                    //在当前所有可执行的类里面查找包含有该包名的所有类
                    if (className.contains(packagePath)) {
                        Class<?> clazz1 = null;
                        try {
                            clazz1 = Class.forName(className);
                        } catch (ClassNotFoundException ignored) {

                        }
                        if (clazz1 == null) continue;//在扫描到第三模块时会为null
                        //过滤掉未被注解过的类
                        GT_ARouterName aRouterName = clazz1.getAnnotation(GT_ARouterName.class);//获取该类 ContextView 的注解类
                        if (aRouterName != null) {
                            String[] values = aRouterName.value();
                            for (String value : values) {
                                Object object = GT.AnnotationAssist.classToObject(value);
                                if (object == null) continue;
                                Map<String, GT_RouteMeta> map = GT.AnnotationAssist.getReflectMethodValue(object, "loadInto", Map.class);
                                for (String key : map.keySet()) {
                                    if (!aRouterMap.containsKey(key)) {
                                        aRouterMap.put(key, map.get(key));
                                    }
                                }

                            }
                        }

                    }
                }

            } catch (Exception e) {
                if (isDebugARouter) {
                    GT.errt("e:" + e);
                }
            }

        }

    }

    /**
     * 观察者与订阅者-(增加跨进程能力)
     * 使用教程:https://blog.csdn.net/qq_39799899/article/details/123871288?spm=1001.2014.3001.5501
     */
    public static class EventBus {

        /**
         * 注意:在自定义 evenKey 时请不要写入 "_GT_" 字符,该字符为关键字
         * 彩蛋 发布事件后可接收到订阅者返回值,但如果订阅者与发布者不在同一线程中或发布的事件中有两个订阅者,将无法在发布事件的线程接收到订阅者的返回值
         * 发布事件 方式一:纯 eventData
         * 将该事件发布到整个 订阅者管理器
         * <p>
         * 发布事件 方式二:纯 String
         * 单个 String表示,在所有注册的区域里匹配到这 eventKey 唯一标识,并发布事件
         * 多个 String表示,在所有注册的区域里匹配这 多个eventKey 唯一标识,并发布事件
         * <p>
         * 发布事件 方式三:纯 Class
         * 单个 Class表示,在当前Class类中找到被 Subscribe注解标识 过的所有方法进行"参数匹配试"发布事件
         * 多个 Class表示,在这些Class类中找到被 Subscribe注解标识 过的所有方法进行"参数匹配试"发布事件
         * <p>
         * 发布事件 方式四:String 与 Class 混合类型,混合的顺序可顺便(但在删除粘性事件时的key必须与发布事件的key一模一样,包括字母顺序)
         * 单组 混合类型表示,在这 class 中 寻找到 该 eventKey 名称的方法进行发布事件
         * 多组 混合类型表示,在这些 class 中 寻找到 这些 eventKey 名称的方法进行发布事件
         * <p>
         */

        //订阅者事件总线管理器
        public static final Map<String, Map<String, List<OneListener>>> allInteriorEventBusMap = new ArrayMap<>();//所有局部事件
        private static final Map<String, EventBusBean> eventBusMap = new ArrayMap<>();//普通事件
        private static final Map<String, Object> eventBusStickyMap = new ArrayMap<>();//粘性事件
        //用于注销订阅者
        private List<String> deleteList = new ArrayList<>();
        //用于订阅者优先级
        private final CopyOnWriteArrayList<EventBusBean> priorityList = new CopyOnWriteArrayList<>();
        //用于事件分发拦截
        private final CopyOnWriteArrayList<Object> interceptList = new CopyOnWriteArrayList<>();

        //用于发布指定key的
        private final List<String> keyStringList = new ArrayList<>();
        private final List<Class<?>> keyClassList = new ArrayList<>();

        public static final String SEPARATOR = "_GT_";//分隔符
        private static volatile EventBus defaultInstance;

        public static EventBus getDefault() {
            if (defaultInstance == null) {
                synchronized (EventBus.class) {
                    if (defaultInstance == null) {
                        defaultInstance = new EventBus();
                    }
                }
            }
            return defaultInstance;
        }

        /**
         * 查看普通事件
         */
        public Map<String, EventBusBean> showEventBusMap() {
            logt("eventBusSize:" + eventBusMap.keySet().size());
            for (String s : eventBusMap.keySet()) {
                logt("eventBus:" + eventBusMap.get(s));
            }
            return eventBusMap;
        }

        /**
         * 取消事件分发
         *
         * @param eventNames 填写要取消的事件分发，若不填则默认将调用该方法 的方法名作为 要拦截的事件分发者
         */
        public void cancelEventDelivery(Object... eventNames) {
            //如果你指定了 要拦截的事件分发者，那就按照你指定的事件来拦截
            if (eventNames != null && eventNames.length > 0) {
                for (Object obj : eventNames) {
                    interceptList.add(obj);
                }
            } else {//如果没有指定，那就默认将调用该方法 的方法名作为 要拦截的事件分发者
                try {
                    String methodName = java.lang.Thread.currentThread().getStackTrace()[3].getMethodName();//调用的方法名
                    interceptList.add(methodName);
                } catch (Exception e) {

                }
            }
        }

        /**
         * 查看粘性事件
         */
        public void showEventBusStickyMap() {
            logt("eventBusStickySize:" + eventBusStickyMap.keySet().size());
            for (String key : eventBusStickyMap.keySet()) {
                logt(key + ":" + eventBusStickyMap.get(key));
            }
        }

        /**
         * 删除单个 粘性事件
         *
         * @param eventKeys 填写的 key 必须要与发布事件的 key 一模一样,包括字母顺序
         */
        public boolean removeStickyEvent(Object... eventKeys) {
            try {
                String key = "";
                if (eventKeys.length != 0) {
                    for (Object obj : eventKeys) {
                        if (obj instanceof Class<?>) {
                            Class<?> aclass = (Class<?>) obj;
                            key += aclass.getName() + SEPARATOR;
                        } else {
                            key += obj.toString() + SEPARATOR;
                        }
                    }
                    if (key.contains(SEPARATOR)) {
                        if (SEPARATOR.equals(key.substring(key.length() - 1))) {
                            key = key.substring(0, key.length() - 1);
                        }
                    }
                }
                //删除单个粘性事件
                if (eventBusStickyMap.containsKey(key)) {
                    eventBusStickyMap.remove(key);
                    return true;
                } else {
                    return false;
                }
            } catch (Exception e) {
                if (LOG.GT_LOG_TF) {
                    GT.errt("e:" + e);
                }
                return false;
            }
        }

        /**
         * 清空粘性事件
         */
        public void clearStickyEvent() {
            eventBusStickyMap.clear();
        }


        //****************************************************** EventBus 快捷方式 **************************************************

        /**
         * 发布事件
         * 注意:在自定义 evenKey 时请不要写入 "_GT_" 字符,该字符为关键字
         *
         * @param <T>       返回类型 (发布事件后可接收到订阅者返回值,但如果订阅者与发布者不在同一线程中或发布的事件中有两个订阅者,将无法在发布事件的线程接收到订阅者的返回值)
         * @param eventData 发布的事件 (参数仅支持一个,若需要传多参数可传递 Bundle,List,Map,实体类Bean等等)
         * @param eventKeys 指定发送的区域 (如果不填则默认向所有订阅者发布事件)
         * @return
         */
        public static <T> T posts(Object eventData, Object... eventKeys) {
            return EventBus.getDefault().post(eventData, eventKeys);
        }

        /**
         * 发布粘性事件
         * 注意:在自定义 evenKey 时请不要写入 "_GT_" 字符,该字符为关键字
         *
         * @param <T>       返回类型 (发布事件后可接收到订阅者返回值,但如果订阅者与发布者不在同一线程中或发布的事件中有两个订阅者,将无法在发布事件的线程接收到订阅者的返回值)
         * @param eventData 发布的事件 (参数仅支持一个,若需要传多参数可传递 Bundle,List,Map,实体类Bean等等)
         * @param eventKeys 指定发送的区域 (如果不填则默认向所有订阅者发布事件)
         * @return
         */
        public static <T> T postStickys(Object eventData, Object... eventKeys) {
            return EventBus.getDefault().postSticky(eventData, eventKeys);
        }

        /**
         * 发布跨进程 事件
         * 注意:在自定义 evenKey 时请不要写入 "_GT_" 字符,该字符为关键字
         *
         * @param 无法返回数据
         * @param eventData 发布的事件 (参数仅支持一个的基本类型)
         * @param eventKeys 指定发送的区域 (如果不填则默认向所有订阅者发布事件)
         * @return
         */
        public static void postAcrossProcessess(Object eventData, Object... eventKeys) {
            EventBus.getDefault().postAcrossProcesses(eventData, eventKeys);
        }

        /**
         * 发布内部事件
         * 注意:在自定义 evenKey 时请不要写入 "_GT_" 字符,该字符为关键字
         *
         * @param eventData 发布的事件 (参数仅支持一个,若需要传多参数可传递 Bundle,List,Map,实体类Bean等等)
         * @param eventKeys 指定发送的区域 (如果不填则默认向所有订阅者发布事件)
         * @return
         */
        public static <T> T postInteriors(T eventData, Object... eventKeys) {
            return EventBus.getDefault().postInterior(eventData, eventKeys);
        }

        /**
         * 发布事件 到本进程 与 跨进程
         *
         * @param eventData 发布的事件 (参数仅支持一个)
         * @param eventKeys 指定发送的区域 (如果不填则默认向所有订阅者发布事件)
         */
        public static void postAlls(Object eventData, Object... eventKeys) {
            EventBus.getDefault().postAll(eventData, eventKeys);
        }


        /**
         * 注册被观察者
         *
         * @param subscriber
         */
        public static <T> void registerInteriors(Object subscriber, String key, GT.OneListener<T> oneListener) {
            EventBus.getDefault().registerInterior(subscriber, key, oneListener);
        }

        /**
         * 注册被观察者
         *
         * @param subscriber
         */
        public static void registers(Object subscriber) {
            EventBus.getDefault().register(subscriber);
        }

        /**
         * 注册跨进程
         *
         * @param context
         * @param subscriber 注册的类
         */
        public static void registerAcrossProcessess(Object subscriber, Context... mContext) {
            EventBus.getDefault().registerAcrossProcesses(subscriber, mContext);
        }

        /**
         * 取消事件分发
         *
         * @param eventNames 填写要取消的事件分发，若不填则默认将调用该方法 的方法名作为 要拦截的事件分发者
         */
        public static void cancelEventDeliverys(Object... eventNames) {
            //如果你指定了 要拦截的事件分发者，那就按照你指定的事件来拦截
            EventBus.getDefault().cancelEventDelivery(eventNames);
        }

        /**
         * 取消被观察者
         *
         * @param subscriber
         */
        public static void unregisters(Object subscriber) {
            EventBus.getDefault().unregister(subscriber);
        }

        /**
         * 取消跨进程 被观察者
         *
         * @param subscriber
         */
        public static void unregisterAcrossProcessess(Object subscriber, Context... mContext) {
            EventBus.getDefault().unregisterAcrossProcesses(subscriber, mContext);
        }


        /**
         * 取消 内部被观察者
         *
         * @param subscriber
         */
        public static void unregisterInteriors(Object subscriber) {
            EventBus.getDefault().unregisterInterior(subscriber);
        }

        /**
         * 取消 当前类所有 被观察者
         *
         * @param subscriber
         */
        public static void unregisterAlls(Object subscriber) {
            EventBus.getDefault().unregisterAll(subscriber);
        }


        //****************************************************** EventBus 实际 方法 **************************************************


        /**
         * 注册内部 被观察者
         *
         * @param subscriber
         * @param key
         * @param oneListener
         * @param <T>
         */
        public synchronized <T> void registerInterior(Object subscriber, String key, GT.OneListener<T> oneListener) {
            if (subscriber == null || key == null || oneListener == null) return;
            synchronized (allInteriorEventBusMap) {
                Map<String, List<OneListener>> interiorEventBusMap = allInteriorEventBusMap.get(subscriber.toString());
                if (interiorEventBusMap == null) {
                    interiorEventBusMap = new ArrayMap<>();//局部事件
                }

                List<OneListener> oneListeners = interiorEventBusMap.get(key);//Map<String, List<OneListener>>
                if (oneListeners == null || oneListeners.size() == 0) {
                    oneListeners = new CopyOnWriteArrayList<OneListener>();
                }
                oneListeners.add(oneListener);
                interiorEventBusMap.put(key, oneListeners);

                allInteriorEventBusMap.put(subscriber.toString(), interiorEventBusMap);
            }
        }

        /**
         * 注册跨进程 被观察者
         *
         * @param subscriber
         * @param mContext   注册的类
         */
        public synchronized void registerAcrossProcesses(Object subscriber, Context... mContext) {
            Context context = GT.getActivity();
            if (mContext.length > 0) {
                context = mContext[0];
            }
            EventBus.registers(subscriber);
            EventBusClient.registerAcrossProcesses(context, subscriber);
        }

        /**
         * 注册 被观察者
         *
         * @param subscriber
         */
        public synchronized void register(Object subscriber) {
            try {
                Class<?> aClass = subscriber.getClass();
                Method[] methods;
                try {
                    methods = aClass.getDeclaredMethods();
                } catch (Throwable th) {
                    methods = aClass.getMethods();
                }

                for (Method method : methods) {
                    //过滤掉不需要方法
                    Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class);
                    if (subscribeAnnotation == null) continue;
                    Class<?>[] parameterTypes = method.getParameterTypes();
                    String methodName = method.getName();//获取方法名称

                    //如果参数不是一个,那就进行精准提示并跳过操作
                    if (parameterTypes.length > 1) {
                        String str = "";
                        try {
                            for (Class<?> parameterType : parameterTypes) {
                                String parameterStr = parameterType.toString();
                                if (parameterStr.contains(".")) {
                                    str += parameterStr.substring(parameterStr.lastIndexOf(".") + 1) + " xxx,";
                                } else {
                                    str += parameterStr + " xxx,";
                                }
                            }
                            if (str.contains(",")) {
                                if (",".equals(str.substring(str.length() - 1))) {
                                    str = str.substring(0, str.length() - 1);
                                }
                            }
                        } catch (Exception e) {
                            GT.errt("GT.EventBus 参数仅支持一个,若需要传多参数可传递 Bundle,List,Map,实体类Bean等等:  " + methodName + "(" + str + ")");
                        }
                        continue;
                    }

                    Class<?> returnType = method.getReturnType();//获取方法返回类型
                    //订阅者唯一名称,若没有填订阅者名称那就默认使用当前方法名
                    String eventKey = subscribeAnnotation.eventKey().length() == 0 ? methodName : subscribeAnnotation.eventKey();//订阅者唯一名称
                    String threadMode = subscribeAnnotation.threadMode();//线程类型
                    int priority = subscribeAnnotation.priority();//优先级
                    boolean sticky = subscribeAnnotation.sticky();//是否支持粘性事件

                    //class + 唯一标识(方法名) + 参数类型 生成订阅者唯一标识
                    eventKey = aClass + SEPARATOR + eventKey + (parameterTypes.length == 1 ? (SEPARATOR + parameterTypes[0]) : "");

                    //如果订阅者没有被注册,那就进行注册
                    if (!eventBusMap.containsKey(eventKey)) {
                        EventBusBean eventBusBean = new EventBusBean(subscriber, aClass, parameterTypes, returnType, eventKey, methodName, threadMode, priority, sticky);
                        eventBusMap.put(eventKey, eventBusBean);//ok
                    }

                    //---------------------------------------------------------------  粘性事件处理 ----------------------------------------------
                    //粘性事件处理,普通事件在这个方法里是订阅，粘性事件在这个方法里是发送
                    if (sticky) {
                        //进行粘性事件处理
                        for (String key : eventBusStickyMap.keySet()) {
                            Object eventData = eventBusStickyMap.get(key);
                            if (key.length() == 0) {//为空的key
                                try {
                                    AnnotationAssist.setReflectMethodValue(subscriber, methodName, returnType, parameterTypes, eventData);
                                } catch (Exception e) {
                                    if (LOG.GT_LOG_TF) {
                                        GT.errs("类型有不匹配的 e:" + e);
                                    }
                                }
                            } else {//不为空的key
                                if (!key.contains(SEPARATOR)) continue;
                                String[] split = key.split(SEPARATOR);
                                keyClassList.clear();
                                keyStringList.clear();
                                for (String str : split) {
                                    Class<?> aClass1 = AnnotationAssist.stringToClass(str);
                                    if (aClass1 != null) {
                                        keyClassList.add(aClass);
                                    } else {
                                        keyStringList.add(str);
                                    }
                                }

                                String[] split2 = eventKey.split(SEPARATOR);
                                if (split2.length < 3) continue;
                                String keyStr = split2[1];
                                if (keyStringList.size() != 0 && !keyStringList.contains(keyStr)) {
                                    continue;
                                }

                                if (keyClassList.size() != 0 && !keyClassList.contains(aClass)) {
                                    continue;
                                }

                                try {
                                    AnnotationAssist.setReflectMethodValue(subscriber, methodName, returnType, parameterTypes, eventData);
                                } catch (Exception e) {
                                    if (LOG.GT_LOG_TF) {
                                        GT.errs("类型有不匹配的 e:" + e);
                                    }
                                }

                            }
                        }
                    }
                }
            } catch (Exception e) {
                if (LOG.GT_LOG_TF) {
                    GT.errt("e:" + e);
                }
            }
        }


        /**
         * 取消内部 被观察者
         *
         * @param subscriber
         */
        public synchronized void unregisterInterior(Object subscriber) {
            if (subscriber == null) return;
            allInteriorEventBusMap.remove(subscriber.toString());
        }

        /**
         * 取消跨进程 被观察者
         *
         * @param subscriber
         */
        public synchronized void unregisterAcrossProcesses(Object subscriber, Context... mContext) {
            Context context = GT.getActivity();
            if (mContext.length > 0) {
                context = mContext[0];
            }
            EventBus.unregisters(subscriber);
            EventBusClient.unregisterAcrossProcesses(context);
        }

        /**
         * 取消 被观察者
         *
         * @param subscriber
         */
        public synchronized void unregister(Object subscriber) {
            try {
                Class<?> aClass = subscriber.getClass();
                Method[] methods;
                try {
                    methods = aClass.getDeclaredMethods();
                } catch (Throwable th) {
                    methods = aClass.getMethods();
                }


                for (Method method : methods) {

                    //过滤掉不需要方法
                    Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class);
                    if (subscribeAnnotation == null) {
                        continue;
                    }
                    Class<?>[] parameterTypes = method.getParameterTypes();
                    String methodName = method.getName();
                    //如果参数不是一个,那就进行精准提示
                    if (parameterTypes.length > 1) {
                        String str = "";
                        try {
                            for (Class<?> parameterType : parameterTypes) {
                                String parameterStr = parameterType.toString();
                                if (parameterStr.contains(".")) {
                                    str += parameterStr.substring(parameterStr.lastIndexOf(".") + 1) + " xxx,";
                                } else {
                                    str += parameterStr + " xxx,";
                                }
                            }
                            if (str.contains(",")) {
                                if (",".equals(str.substring(str.length() - 1))) {
                                    str = str.substring(0, str.length() - 1);
                                }
                            }
                        } catch (Exception e) {
                            GT.err("GT.EventBus 参数仅支持一个,若需要传多参数可传递 Bundle,List,Map,实体类Bean等等:  " + methodName + "(" + str + ")" + GT.getLineInfo(2));
                        }
                        continue;
                    }

                    //获取方法名
                    String eventKey = subscribeAnnotation.eventKey().length() == 0 ? methodName : subscribeAnnotation.eventKey();//订阅者唯一名称,若没有填订阅者名称那就默认使用当前方法名
                    eventKey = aClass + SEPARATOR + eventKey + (parameterTypes.length == 1 ? (SEPARATOR + parameterTypes[0]) : "");

                    deleteList.clear();
                    for (String key : eventBusMap.keySet()) {
                        if (!key.equals(eventKey)) {
                            continue;
                        }
                        EventBusBean eventBusBean = eventBusMap.get(key);
                        if (eventBusBean.object == subscriber) {
                            deleteList.add(eventBusBean.eventKey);
                        }
                    }

                    for (String key : deleteList) {
                        EventBusBean eventBusBean = eventBusMap.get(key);
                        if (eventBusBean != null) {
                            eventBusBean.object = null;
                        }
                        eventBusMap.remove(key);//ok
                    }
                }

            } catch (Exception e) {
                if (LOG.GT_LOG_TF) {
                    GT.errt("e:" + e);
                }
            }
        }

        /**
         * 取消当前类所有 观察者
         *
         * @param subscriber
         */
        public synchronized void unregisterAll(Object subscriber) {
            unregisterInterior(subscriber);
            unregister(subscriber);
            unregisterAcrossProcesses(subscriber);
        }

        /**
         * 发布内部事件
         *
         * @param bean
         * @param key
         * @param <T>
         */
        public synchronized <T> T postInterior(Object eventData, Object... eventKeys) {
            T t = null;
            synchronized (allInteriorEventBusMap) {
                try {
                    interceptList.clear();
                    if (eventKeys != null && eventKeys.length > 0) {
                        for (Object eventKey : eventKeys) {
                            String key = eventKey.toString();
                            for (String mapKey : allInteriorEventBusMap.keySet()) {
                                Map<String, List<OneListener>> interiorEventBusMap = allInteriorEventBusMap.get(mapKey);
                                if (interceptList.contains(key)) continue;//过滤掉 事件分发拦截
                                List<OneListener> oneListeners = interiorEventBusMap.get(key);
                                if (oneListeners != null && oneListeners.size() > 0) {
                                    for (OneListener<T> oneListener : oneListeners) {
                                        try {
                                            oneListener.onOneListener((T) eventData);
                                        } catch (Exception e) {

                                        }

                                        try {
                                            Object returnData = oneListener.onOneReturnListener((T) eventData);
                                            if (returnData != null) {
                                                t = (T) returnData;
                                            }
                                        } catch (Exception e) {

                                        }

                                    }
                                }
                            }
                        }
                    }
                } catch (Exception e) {

                }
            }
            interceptList.clear();
            return t;
        }

        /**
         * 发布粘性事件
         * 注意:在自定义 evenKey 时请不要写入 "_GT_" 字符,该字符为关键字
         *
         * @param <T>       返回类型 (发布事件后可接收到订阅者返回值,但如果订阅者与发布者不在同一线程中或发布的事件中有两个订阅者,将无法在发布事件的线程接收到订阅者的返回值)
         * @param eventData 发布的事件 (参数仅支持一个,若需要传多参数可传递 Bundle,List,Map,实体类Bean等等)
         * @param eventKeys 指定发送的区域 (如果不填则默认向所有订阅者发布事件)
         * @return
         */
        public synchronized <T> T postSticky(Object eventData, Object... eventKeys) {
            synchronized (eventBusStickyMap) {
                try {
                    String key = "";
                    if (eventKeys.length != 0) {
                        for (Object obj : eventKeys) {
                            if (obj instanceof Class<?>) {
                                Class<?> aclass = (Class<?>) obj;
                                key += aclass.getName() + SEPARATOR;
                            } else {
                                key += obj.toString() + SEPARATOR;
                            }
                        }
                        if (key.contains(SEPARATOR)) {
                            if (SEPARATOR.equals(key.substring(key.length() - 1))) {
                                key = key.substring(0, key.length() - 1);
                            }
                        }
                    }
                    //记录粘性事件
                    eventBusStickyMap.put(key, eventData);
                } catch (ConcurrentModificationException e) {
                    if (LOG.GT_LOG_TF) {
                        GT.errt("e:" + e);
                    }
                }
            }
            //正常发布事件
            return post(eventData, eventKeys);
        }

        /**
         * 发布事件
         * 注意:在自定义 evenKey 时请不要写入 "_GT_" 字符,该字符为关键字
         *
         * @param <T>       返回类型 (发布事件后可接收到订阅者返回值,但如果订阅者与发布者不在同一线程中或发布的事件中有两个订阅者,将无法在发布事件的线程接收到订阅者的返回值)
         * @param eventData 发布的事件 (参数仅支持一个,若需要传多参数可传递 Bundle,List,Map,实体类Bean等等)
         * @param eventKeys 指定发送的区域 (如果不填则默认向所有订阅者发布事件)
         * @return
         */
        public synchronized <T> T post(Object eventData, Object... eventKeys) {
            synchronized (eventBusMap) {
                try {
                    T t = null;

                    priorityList.clear();
                    interceptList.clear();
                    //订阅方法的优先级
                    for (String key : eventBusMap.keySet()) {
                        priorityList.add(eventBusMap.get(key));
                    }

                    //按照订阅者实体类中的线程大小进行从小到大排序
                    priorityList.sort(Comparator.comparing(EventBusBean::getPriority));

                    //如果有指定订阅者类型,那就进行分类
                    if (eventKeys != null && eventKeys.length != 0) {
                        //给指定或筛选后的订阅者发布该事件
                        keyClassList.clear();
                        keyStringList.clear();
                        //分别用 集合装入 String 与 class

                        for (Object eventKey : eventKeys) {
                            if (eventKey instanceof Class<?>) {
                                Class<?> aClass = (Class<?>) eventKey;
                                keyClassList.add(aClass);
                            } else {
                                keyStringList.add(eventKey.toString());
                            }
                        }
                    }

                    //类型匹配后进行向订阅者按照线程优先级进行遍历 发布事件
                    for (EventBusBean eventBusBean : priorityList) {


                        //如果有指定订阅者类型,那就进行过滤筛选
                        if (eventKeys != null && eventKeys.length != 0) {
                            if (!eventBusBean.eventKey.contains(SEPARATOR)) {
                                continue;
                            }
                            String[] split = eventBusBean.eventKey.split(SEPARATOR);
                            if (split.length < 2) {
                                continue;//如果少于两个分隔符，那就有问题，过滤掉
                            }
                            String keyStr = split[1];

                            //事件分发拦截
                            if (interceptList.size() != 0 && (interceptList.contains(keyStr) || interceptList.contains(eventBusBean.aClass))) {
                                continue;
                            }
                            //字符串拦截
                            if (keyStringList.size() != 0 && !keyStringList.contains(keyStr)) {
                                continue;
                            }
                            //class 拦截
                            if (keyClassList.size() != 0 && !keyClassList.contains(eventBusBean.aClass)) {
                                continue;
                            }
                        }

                        //按照订阅者的线程类型进行处理
                        switch (eventBusBean.threadMode) {
                            case ThreadMode.POSTING://默认使用发布事件的当前线程
                                t = setMethodValue(eventBusBean, eventData);
                                break;
                            case ThreadMode.MAIN://使用UI主线程
                                if (Thread.isMainThread()) { //主线程
                                    t = setMethodValue(eventBusBean, eventData);
                                } else {//子线程
                                    Thread.getUiThread().post(() -> setMethodValue(eventBusBean, eventData));
                                }
                                break;
                            case ThreadMode.MAIN_ORDERED://new一个主线程处理
                                Thread.getUiThread().post(() -> setMethodValue(eventBusBean, eventData));
                                break;
                            case ThreadMode.BACKGROUND://在本子线程或新new子线程处理
                                if (!Thread.isMainThread()) {//子线程
                                    t = setMethodValue(eventBusBean, eventData);
                                } else {//主线程
                                    Thread.getInstance(0).execute(() -> setMethodValue(eventBusBean, eventData));
                                }
                                break;
                            case ThreadMode.ASYNC://在新new子线程处理
                                Thread.getInstance(0).execute(() -> setMethodValue(eventBusBean, eventData));
                                break;
                        }

                    }

                    interceptList.clear();//清空拦截事件对象
                    //如果只有一个发布的那就进行返回数据
                    return t;
                } catch (ConcurrentModificationException e) {
                    if (LOG.GT_LOG_TF) {
                        GT.errt("e:" + e);
                    }
                }
            }
            return null;
        }

        /**
         * 发布跨进程事件 (postAcrossProcesse)
         *
         * @param 无法返回数据
         * @param eventData 发布的事件 (参数仅支持一个的基本类型)
         * @param eventKeys 指定发送的区域 (如果不填则默认向所有订阅者发布事件)
         */
        public synchronized void postAcrossProcesses(Object eventData, Object... eventKeys) {
            EventBusService.sendMsg(eventData, eventKeys);
            EventBusClient.sendMsg(eventData, eventKeys);
        }

        /**
         * 发布事件 到本进程 与 跨进程
         *
         * @param eventData 发布的事件 (参数仅支持一个)
         * @param eventKeys 指定发送的区域 (如果不填则默认向所有订阅者发布事件)
         */
        public synchronized void postAll(Object eventData, Object... eventKeys) {
            postInterior(eventData, eventKeys);
            posts(eventData, eventKeys);
            postAcrossProcesses(eventData, eventKeys);
        }

        /**
         * 设置方法值
         *
         * @param eventBusBean
         */
        private <T> T setMethodValue(EventBusBean eventBusBean, Object eventData) {
            try {
                return (T) AnnotationAssist.setReflectMethodValue(eventBusBean.object, eventBusBean.methodName, eventBusBean.returnType, eventBusBean.parameterTypes, eventData == null ? "null" : eventData);
            } catch (Exception e) {
                if (LOG.GT_LOG_TF) {
                    GT.errs("类型有不匹配的 e:" + e);
                }
            }
            return null;
        }

        @Documented
        @Retention(RetentionPolicy.RUNTIME)
        @Target({ElementType.METHOD})
        public @interface Subscribe {
            //指定订阅者key标签,若不指定则默认为该方法名为订阅者key标签
            String eventKey() default "";

            // 指定事件订阅方法的线程模式，即在那个线程执行事件订阅方法处理事件，默认为POSTING
            String threadMode() default ThreadMode.POSTING;

            // 是否支持粘性事件，默认为false
            boolean sticky() default false;

            // 订阅方法优先级默认为0，多个事件订阅方法可以接收相同的事件，在发布事件后,订阅者无需切换线程的情况下,优先级高的先接收到事件,若发布事件时订阅者会切换线程 则不会保证 优先级高的先接收到事件
            int priority() default 0;//发送顺序从 最优先(最小)开始 向 后优先(最大)的 逐递发布
        }

        //设置在那个线程执行事件
        public interface ThreadMode {
            String POSTING = "POSTING";//在当前线程
            String MAIN = "MAIN";//若发布事件时为(UI)主线程,那就在发布事件的主线程上处理,否则新new一个主线程处理
            String MAIN_ORDERED = "MAIN_ORDERED";//new一个主线程处理
            String BACKGROUND = "BACKGROUND";//若发布事件时为子线程,那就在发布事件的子线程上处理,否则新new一个子线程处理
            String ASYNC = "ASYNC";//new一个子线程处理
        }

        //订阅者信息实体类
        private class EventBusBean {

            private Object object;                  //订阅者对象
            private Class<?> aClass;                //订阅者class
            private Class<?>[] parameterTypes;      //订阅者参数类型
            private Class<?> returnType;            //订阅者返回类型
            private String eventKey;                //订阅者唯一标识
            private String methodName;              //订阅者方法名
            private String threadMode;              //订阅者需要线程
            private int priority;                   //订阅者线程优先级
            private boolean sticky;                 //订阅者是否支持粘性事件

            public EventBusBean() {
                super();
            }

            public EventBusBean(Object object, Class<?> aClass, Class<?>[] parameterTypes, Class<?> returnType, String eventKey, String methodName, String threadMode, int priority, boolean sticky) {
                this.object = object;
                this.aClass = aClass;
                this.parameterTypes = parameterTypes;
                this.returnType = returnType;
                this.eventKey = eventKey;
                this.methodName = methodName;
                this.threadMode = threadMode;
                this.priority = priority;
                this.sticky = sticky;
            }


            public Class<?> getReturnType() {
                return returnType;
            }

            public void setReturnType(Class<?> returnType) {
                this.returnType = returnType;
            }

            public Class<?>[] getParameterTypes() {
                return parameterTypes;
            }

            public void setParameterTypes(Class<?>[] parameterTypes) {
                this.parameterTypes = parameterTypes;
            }

            public String getMethodName() {
                return methodName;
            }

            public void setMethodName(String methodName) {
                this.methodName = methodName;
            }

            public Object getObject() {
                return object;
            }

            public void setObject(Object object) {
                this.object = object;
            }

            public Class<?> getaClass() {
                return aClass;
            }

            public void setaClass(Class<?> aClass) {
                this.aClass = aClass;
            }

            public String getEventKey() {
                return eventKey;
            }

            public void setEventKey(String eventKey) {
                this.eventKey = eventKey;
            }

            public String getThreadMode() {
                return threadMode;
            }

            public void setThreadMode(String threadMode) {
                this.threadMode = threadMode;
            }

            public int getPriority() {
                return priority;
            }

            public void setPriority(int priority) {
                this.priority = priority;
            }

            public boolean isSticky() {
                return sticky;
            }

            public void setSticky(boolean sticky) {
                this.sticky = sticky;
            }

            @Override
            public String toString() {
                return "EventBusBean{" +
                        "object=" + object +
                        ", aClass=" + aClass +
                        ", parameterTypes=" + Arrays.toString(parameterTypes) +
                        ", eventKey='" + eventKey + '\'' +
                        ", methodName='" + methodName + '\'' +
                        ", threadMode='" + threadMode + '\'' +
                        ", priority=" + priority +
                        ", sticky=" + sticky +
                        '}';
            }
        }

        public static class EventBusClient {

            // 4. 客户端发送消息给服务端
            private static Messenger servermessenger;
            private static final ServiceConnection connection = new ServiceConnection() {
                public void onServiceConnected(ComponentName name, IBinder service) {
                    servermessenger = new Messenger(service);//获取服务端信使
//                    logt("获取到服务器信使");
                }

                public void onServiceDisconnected(ComponentName name) {
                }
            };

            /**
             * 注册跨进程
             *
             * @param context
             * @param subscriber 注册的类
             */
            public static void registerAcrossProcesses(Context context, Object subscriber) {
                if (context == null) return;
                //第二种：Messenger 传递消息
                Intent intent = new Intent("com.gsls.gt.EventBus");
                intent.setPackage(context.getPackageName());
                context.bindService(intent, connection, Service.BIND_AUTO_CREATE);
            }

            public static void sendMsg(Object eventData, Object... eventKeys) {
//                logt("servermessenger:" + servermessenger);

                Observable.getDefault().execute(new Observable.RunJava<Object>() {
                    @Override
                    public void run() {
                        if (servermessenger != null) return;
                        //处理 跨进程 有 0.003 毫秒 延迟的问题,挂起处理最大等待限度为 1秒
                        for (int i = 0; i < 1000; i++) {
                            Thread.sleep(1);
                            if (servermessenger != null) break;
                        }
                    }
                }).execute(new Observable.RunAndroid<Object>() {
                    @Override
                    public void run() {
                        if (servermessenger == null) return;
                        Message message = Message.obtain();
                        Bundle bundle = new Bundle();
                        //解析发布事件标识
                        String keys = null;
                        if (eventKeys.length > 0) {
                            keys = "";

                            //获取当前进程中 已存在的订阅者
                            String eventBusMapStr = String.valueOf(eventBusMap);
                            List<String> strList = new ArrayList<>();
                            for (String str : eventBusMapStr.split(EventBus.SEPARATOR)) {
                                strList.add(str);
                            }

                            if (eventKeys.length == 1) {
                                keys = String.valueOf(eventKeys[0]);
                                if (strList.contains(keys)) {//如果当前进程已存在将要发送的订阅者，那就取消跨进程发送，直接转本进程发布事件
                                    posts(eventData, eventKeys);
                                    return;
                                }
                            } else {
                                for (Object keyValue : eventKeys) {
                                    if (strList.contains(String.valueOf(keyValue))) {//如果当前进程已存在将要发送的订阅者，那就取消跨进程发送，直接转本进程发布事件
                                        posts(eventData, keyValue);
                                        continue;
                                    }
                                    keys += String.valueOf(keyValue) + EventBus.SEPARATOR;
                                }
                                //去掉最后一个,
                                keys = keys.substring(0, keys.length() - EventBus.SEPARATOR.length());
                            }

                            if (keys != null) {
                                bundle.putString("key", keys);
                            }
                        }

                        //解析发布事件值
                        if (eventData == null) {
                            bundle.putString("type", "null");
                            bundle.putString("value", String.valueOf(eventData));
                        } else if (eventData instanceof String) {
                            bundle.putString("type", "String");
                            bundle.putString("value", String.valueOf(eventData));
                        } else if (eventData instanceof Integer) {
                            bundle.putString("type", "Integer");
                            bundle.putInt("value", Integer.parseInt(String.valueOf(eventData)));
                        } else if (eventData instanceof Boolean) {
                            bundle.putString("type", "Boolean");
                            bundle.putBoolean("value", Boolean.parseBoolean(String.valueOf(eventData)));
                        } else if (eventData instanceof Double) {
                            bundle.putString("type", "Double");
                            bundle.putDouble("value", Double.parseDouble(String.valueOf(eventData)));
                        } else if (eventData instanceof Float) {
                            bundle.putString("type", "Float");
                            bundle.putFloat("value", Float.parseFloat(String.valueOf(eventData)));
                        } else if (eventData instanceof Long) {
                            bundle.putString("type", "Long");
                            bundle.putLong("value", Long.parseLong(String.valueOf(eventData)));
                        } else if (eventData instanceof Short) {
                            bundle.putString("type", "Short");
                            bundle.putShort("value", Short.parseShort(String.valueOf(eventData)));
                        } else {//其余的类型均解析成 json
                            String objJson = "";
                            try {
                                objJson = JSON.toJson2(eventData);
                            } catch (Exception e) {
                                objJson = String.valueOf(eventData);
                            }
                            bundle.putString("type", "Object");
                            bundle.putString("valueObject", objJson);
                        }
                        message.setData(bundle);
//                        logt("向服务器发送一波数据:" + bundle.getString("type") + "," + bundle.getString("key") + "," + eventData);
                        //非常重要的一句话
                        message.replyTo = clientmesssager;
                        try {
                            servermessenger.send(message);
                        } catch (RemoteException e) {
                            e.printStackTrace();
                        }
                    }
                });


            }


            //3.客户端的信使:负责接受服务器发来的消息
            private static final Messenger clientmesssager = new Messenger(new Handler(Looper.myLooper()) {
                @Override
                public void dispatchMessage(@NonNull Message msg) {
                    super.handleMessage(msg);
//                    logt("接收到 服务器发来的数据");
                    Bundle bundle = msg.getData();
                    String type = bundle.getString("type");
                    String key = bundle.getString("key");
                    Object value = null;

                    switch (type) {
                        case "null":
                            value = null;
                            break;
                        case "String":
                            value = bundle.getString("value");
                            break;
                        case "Integer":
                            value = bundle.getInt("value");
                            break;
                        case "Boolean":
                            value = bundle.getBoolean("value");
                            break;
                        case "Double":
                            value = bundle.getDouble("value");
                            break;
                        case "Float":
                            value = bundle.getFloat("value");
                            break;
                        case "Long":
                            value = bundle.getLong("value");
                            break;
                        case "Short":
                            value = bundle.getShort("value");
                            break;
                        case "Object":
                            value = bundle.getString("value");
                            break;
                    }

//                    logt("type:" + type);
//                    logt("key:" + key);
//                    logt("value:" + value);
//                    logt("发布事件数据");
                    if (key != null) {
                        //如果存在多个发布目标，那就发分割发送多个
                        if (key.contains(EventBus.SEPARATOR)) {
                            String[] split = key.split(EventBus.SEPARATOR);
                            Object[] objs = new Object[split.length];
                            for (int i = 0; i < split.length; i++) {
                                objs[i] = split[i];
                            }
                            EventBus.posts(value, objs);
                        } else {
                            EventBus.posts(value, key);
                        }
                    } else {
                        EventBus.posts(value);
                    }
                }
            });

            public static void unregisterAcrossProcesses(Context context) {
                context.unbindService(connection);
            }

        }

        public static class EventBusService extends Service {

            private static Messenger clientMessager;

            public static void sendMsg(Object eventData, Object... eventKeys) {
//                logt("clientMessager:" + clientMessager);

                Observable.getDefault().execute(new Observable.RunJava<Object>() {
                    @Override
                    public void run() {
                        if (clientMessager != null) return;
                        //处理 跨进程 有 0.003 毫秒 延迟的问题,挂起处理最大等待限度为 1秒
                        for (int i = 0; i < 1000; i++) {
                            Thread.sleep(1);
                            if (clientMessager != null) break;
                        }

                    }
                }).execute(new Observable.RunAndroid<Object>() {
                    @Override
                    public void run() {
                        if (clientMessager == null) return;//等待处理后还是为 null 那就过滤掉本次发送的数据
                        Message messenge = Message.obtain();
                        Bundle bundle = new Bundle();

                        //解析发布事件标识
                        String keys = null;
                        if (eventKeys.length > 0) {
                            keys = "";

                            //获取当前进程中 已存在的订阅者
                            String eventBusMapStr = String.valueOf(eventBusMap);
                            List<String> strList = new ArrayList<>();
                            for (String str : eventBusMapStr.split(EventBus.SEPARATOR)) {
                                strList.add(str);
                            }

                            if (eventKeys.length == 1) {
                                keys = String.valueOf(eventKeys[0]);

                                if (strList.contains(keys)) {//如果当前进程已存在将要发送的订阅者，那就取消跨进程发送，直接转本进程发布事件
                                    posts(eventData, eventKeys);
                                    return;
                                }
                            } else {
                                for (Object keyValue : eventKeys) {

                                    if (strList.contains(String.valueOf(keyValue))) {//如果当前进程已存在将要发送的订阅者，那就取消跨进程发送，直接转本进程发布事件
                                        posts(eventData, keyValue);
                                        continue;
                                    }
                                    keys += String.valueOf(keyValue) + EventBus.SEPARATOR;
                                }
                                //去掉最后一个,
                                keys = keys.substring(0, keys.length() - EventBus.SEPARATOR.length());
                            }

                            if (keys != null) {
                                bundle.putString("key", keys);
                            }
                        }

                        //解析发布事件值
                        if (eventData == null) {
                            bundle.putString("type", "null");
                            bundle.putString("value", String.valueOf(eventData));
                        } else if (eventData instanceof String) {
                            bundle.putString("type", "String");
                            bundle.putString("value", String.valueOf(eventData));
                        } else if (eventData instanceof Integer) {
                            bundle.putString("type", "Integer");
                            bundle.putInt("value", Integer.parseInt(String.valueOf(eventData)));
                        } else if (eventData instanceof Boolean) {
                            bundle.putString("type", "Boolean");
                            bundle.putBoolean("value", Boolean.parseBoolean(String.valueOf(eventData)));
                        } else if (eventData instanceof Double) {
                            bundle.putString("type", "Double");
                            bundle.putDouble("value", Double.parseDouble(String.valueOf(eventData)));
                        } else if (eventData instanceof Float) {
                            bundle.putString("type", "Float");
                            bundle.putFloat("value", Float.parseFloat(String.valueOf(eventData)));
                        } else if (eventData instanceof Long) {
                            bundle.putString("type", "Long");
                            bundle.putLong("value", Long.parseLong(String.valueOf(eventData)));
                        } else if (eventData instanceof Short) {
                            bundle.putString("type", "Short");
                            bundle.putShort("value", Short.parseShort(String.valueOf(eventData)));
                        } else {//其余的类型均解析成 json
                            String objJson = "";
                            try {
                                objJson = JSON.toJson2(eventData);
                            } catch (Exception e) {
                                objJson = String.valueOf(eventData);
                            }
                            bundle.putString("type", "Object");
                            bundle.putString("valueObject", objJson);
                        }

//                        logt("向客户端发送一波数据:" + bundle.getString("type") + "," + bundle.getString("key") + "," + eventData);
                        messenge.setData(bundle);
                        try {
                            clientMessager.send(messenge);
                        } catch (RemoteException e) {
                            e.printStackTrace();
                        }
                    }
                });


            }

            public EventBusService() {
            }

            // 返回server_messager的代理人，便于客户端获取服务端信使
            @Override
            public IBinder onBind(Intent intent) {
                return new Messenger(new Handler(Looper.myLooper()) {
                    @Override
                    public void dispatchMessage(@NonNull Message msg) {
//                        logt("接收到客户端信息");
                        //接受客户端消息
                        Bundle bundle = msg.getData();
                        String type = bundle.getString("type");
                        String key = bundle.getString("key");
                        Object value = null;

                        switch (type) {
                            case "null":
                                value = null;
                                break;
                            case "String":
                                value = bundle.getString("value");
                                break;
                            case "Integer":
                                value = bundle.getInt("value");
                                break;
                            case "Boolean":
                                value = bundle.getBoolean("value");
                                break;
                            case "Double":
                                value = bundle.getDouble("value");
                                break;
                            case "Float":
                                value = bundle.getFloat("value");
                                break;
                            case "Long":
                                value = bundle.getLong("value");
                                break;
                            case "Short":
                                value = bundle.getShort("value");
                                break;
                            case "Object":
                                value = bundle.getString("value");
                                break;
                        }

                        //如果存在多个发布目标，那就发分割发送多个
                        if (key != null) {
                            if (key.contains(EventBus.SEPARATOR)) {
                                String[] split = key.split(EventBus.SEPARATOR);
                                Object[] objs = new Object[split.length];
                                for (int i = 0; i < split.length; i++) {
                                    objs[i] = split[i];
                                }
                                EventBus.posts(value, objs);
                            } else {
                                EventBus.posts(value, key);
                            }
                        } else {
                            EventBus.posts(value);
                        }

                        //向客户端发送消息
                        clientMessager = msg.replyTo;//用于获取客户端的信使
//                        logt("获取客户端的信使");

                        super.handleMessage(msg);
                    }
                }).getBinder();
            }

        }

    }

    /**
     * 数据发送与接收类(支持跨进出跨APP发送接收数据)
     * sendUpdateUiBroadcast
     * updateUi
     */
    public static class DataSendReception {

        //发送方法

        /**
         * 发送更新UI广播(简洁版.支持跨APP传输)
         *
         * @param context
         * @param broadcastName 接收方必须用相同的这个地址注册
         * @param data
         */
        public static void sendUpdateUiBroadcast(Object broadcastName, Object data) {
            Context context = getActivity();
            if (context != null && broadcastName != null) {

                //判断是否为class
                if (broadcastName instanceof Class) {
                    Class<?> objClass = (Class<?>) broadcastName;
                    broadcastName = objClass.getName();
                }

                Intent intent = null;
                //判断是否为 Intent
                if (data instanceof Intent) {
                    intent = (Intent) data;
                } else {
                    intent = new Intent();
                    intent.putExtra(broadcastName.toString(), data.toString());
                }
                intent.setAction(broadcastName.toString());
                context.sendBroadcast(intent);
            }
        }

        /**
         * 发送更新UI广播(标准版.支持跨APP传输)
         *
         * @param context
         * @param broadcastName 接收方必须用相同的这个地址注册
         * @param intent
         */
        public static void sendUpdateUiBroadcast(Context context, Object broadcastName, Object data) {
            if (context != null && broadcastName != null && data != null) {
                //判断是否为class
                if (broadcastName instanceof Class) {
                    Class<?> objClass = (Class<?>) broadcastName;
                    broadcastName = objClass.getName();
                }

                Intent intent = null;
                //判断是否为 Intent
                if (data instanceof Intent) {
                    intent = (Intent) data;
                } else {
                    intent = new Intent();
                    intent.putExtra(broadcastName.toString(), data.toString());
                }

                intent.setAction(broadcastName.toString());
                context.sendBroadcast(intent);
            }
        }

        //接收方法

        /**
         * 内部注册监听数据的方法
         *
         * @param registerMessage
         */
        public static void registerUpdateUiBroadcast(Object registerMessage) {
            Context context = getActivity();
            if (context == null || registerMessage == null) {
                errs("注册参数为空，注册监听数据失败！");
                return;
            }

            String actionData = registerMessage.getClass().getName();

            OnReceptionDataListener onReceptionDataListener = null;
            if (registerMessage instanceof OnReceptionDataListener) {
                onReceptionDataListener = (OnReceptionDataListener) registerMessage;
            }
            //注册广播
            UiReceiver uiReceiver = new UiReceiver(actionData, onReceptionDataListener);
            IntentFilter intentFilter = new IntentFilter();
            intentFilter.addAction(actionData);
            context.registerReceiver(uiReceiver, intentFilter);
        }

        /**
         * 注册监听数据的方法
         *
         * @param context
         * @param broadcastName   接收暗号，必须与发送的暗号一致
         * @param onReceptionData 监听数据反馈接口
         */
        public static void registerUpdateUiBroadcast(Object broadcastName, OnReceptionDataListener onReceptionDataListener) {
            Context context = getActivity();
            if (context == null || broadcastName == null || onReceptionDataListener == null) {
                errs("注册参数为空，注册监听数据失败！");
                return;
            }

            if (broadcastName instanceof Class) {
                Class<?> objClass = (Class<?>) broadcastName;
                broadcastName = objClass.getName();
            }

            //注册广播
            UiReceiver uiReceiver = new UiReceiver(broadcastName, onReceptionDataListener);
            IntentFilter intentFilter = new IntentFilter();
            intentFilter.addAction(broadcastName.toString());
            context.registerReceiver(uiReceiver, intentFilter);
        }

        /**
         * 注册监听数据的方法
         *
         * @param context
         * @param broadcastName   接收暗号，必须与发送的暗号一致
         * @param onReceptionData 监听数据反馈接口
         */
        public static void registerUpdateUiBroadcast(Context context, Object broadcastName, OnReceptionDataListener onReceptionDataListener) {
            if (context == null || broadcastName == null || onReceptionDataListener == null) {
                errs("注册参数为空，注册监听数据失败！");
                return;
            }

            if (broadcastName instanceof Class) {
                Class<?> objClass = (Class<?>) broadcastName;
                broadcastName = objClass.getName();
            }

            //注册广播
            UiReceiver uiReceiver = new UiReceiver(broadcastName, onReceptionDataListener);
            IntentFilter intentFilter = new IntentFilter();
            intentFilter.addAction(broadcastName.toString());
            context.registerReceiver(uiReceiver, intentFilter);
        }

        //接收数据接口
        public interface OnReceptionDataListener {
            void updateUi(Context context, Intent intent, String defaultBroadcastName);//刷新UI
        }

        /**
         * 定义一个接收到消息后刷新UI的内部类广播
         */
        public static class UiReceiver extends BroadcastReceiver {
            private OnReceptionDataListener onReceptionDataListener;//监听广播数据的接口
            private String defaultBroadcastName;//默认键

            //构造方法初始化
            public UiReceiver(Object defaultBroadcastName, OnReceptionDataListener onReceptionDataListener) {
                this.onReceptionDataListener = onReceptionDataListener;
                this.defaultBroadcastName = defaultBroadcastName.toString();
            }

            @Override
            public void onReceive(Context context, Intent intent) {
                //是否注销当前广播监听
                if (intent != null) {
                    if (intent.getBooleanExtra("isUnregisterReceiver", false)) {
                        context.unregisterReceiver(this); //注销广播
                        return;
                    }
                }
                onReceptionDataListener.updateUi(context, intent, defaultBroadcastName);//接收数据
            }

        }

        /**
         * 注销广播
         *
         * @param broadcastName 要关闭广播的名字
         */
        public static void unregisterReceiver(Object broadcastName) {
            Context context = getActivity();
            if (context != null && broadcastName != null) {
                //判断是否为class
                if (broadcastName instanceof Class) {
                    Class<?> objClass = (Class<?>) broadcastName;
                    broadcastName = objClass.getName();
                }
                Intent intent = new Intent();
                intent.putExtra("isUnregisterReceiver", true);
                intent.setAction(broadcastName.toString());
                context.sendBroadcast(intent);
            }
        }

    }

    /**
     * 对 Object 的增删查改操作
     */
    public static class SaveObject {

        public static interface SaveBean extends Serializable {
        }

        /**
         * 保存Object
         *
         * @param context
         * @param obj
         * @return 是否保存成功
         */
        public static synchronized boolean saveObject(Context context, Object obj) {
            if (context == null || obj == null) {
                errs("保存的参数为 null");
                return false;
            }
            try {
                File file = new File(context.getFilesDir().getPath() + obj.getClass().getName());
                ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(file));
                out.writeObject(obj);//存储Object
                out.close();//关闭存储流
            } catch (IOException e) {
                GT.errs("异常:" + e);
                e.printStackTrace();
                return false;
            }
            return true;
        }

        /**
         * 删除Object
         *
         * @param context
         * @param cla
         * @return
         */
        public static synchronized boolean deleteObject(Context context, Class<?> cla) {
            if (context == null || cla == null) {
                errs("删除的参数为 null");
                return false;
            }
            try {
                File file = new File(context.getFilesDir().getPath() + cla.getName());
                ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(file));
                Object obj = new Object();//保证不会空指针
                try {
                    obj = cla.newInstance();//实体化
                } catch (IllegalAccessException e) {
                    GT.errs("异常:" + e);
                    e.printStackTrace();
                    return false;
                } catch (InstantiationException e) {
                    GT.errs("异常:" + e);
                    e.printStackTrace();
                    return false;
                }
                out.writeObject(obj);//存储Object
                out.close();//关闭存储流
            } catch (IOException e) {
                GT.errs("异常:" + e);
                e.printStackTrace();
                return false;
            }
            return true;
        }

        /**
         * 获取Object
         *
         * @param context
         * @param cla
         * @param <T>
         * @return
         */
        public static synchronized <T> T queryObject(Context context, Class<T> cla) {

            if (context == null || cla == null) {
                errs("查询的参数为 null");
                return null;
            }
            T t = null;
            try {
                File file = new File(context.getFilesDir().getPath() + cla.getName());
                ObjectInputStream in = new ObjectInputStream(new FileInputStream(file));
                t = (T) in.readObject();
                in.close();//关闭反序列化数据流
            } catch (IOException | ClassNotFoundException e) {
                GT.errs("异常:" + e);
                e.printStackTrace();
            }
            return t;

        }

        /**
         * 更改Object
         *
         * @param context
         * @param obj
         * @return
         */
        public static synchronized boolean updateObject(Context context, Object obj) {
            if (context == null || obj == null) {
                errs("修改的参数为 null");
                return false;
            }
            try {
                File file = new File(context.getFilesDir().getPath() + obj.getClass().getName());
                ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(file));
                out.writeObject(obj);//存储Object
                out.close();//关闭存储流
            } catch (IOException e) {
                GT.errs("异常:" + e);
                e.printStackTrace();
                return false;
            }
            return true;
        }

    }

    /**
     * 数据持久化 SharedPreferences
     */
    public static class GT_SharedPreferences implements SaveObject.SaveBean {

        //构建 GT_SharedPreferences
        @Target(ElementType.FIELD)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface Build {
            String setSpName() default "GT";        //默认SP名称

            boolean setISCommit() default true;     //默认自动提交
        }

        public void commit() {
            sp_e.apply();
        }  // 使用 apply 手动提交 如果提交后还有后续操作，建议使用 apply，先会写入内存，然后再异步写入磁盘

        public void clear() {
            sp_e.clear();
            sp_e.commit();
        }//清空    //如果使用 commit 来提交事务，是直接写入磁盘 ，如果需要频繁的提交的话， apply 的性能会优于 commit

        private SharedPreferences sp;
        private ReentrantReadWriteLock mReadWriteLock = new ReentrantReadWriteLock();
        private ReentrantReadWriteLock.ReadLock lockRead;
        private ReentrantReadWriteLock.WriteLock lockWrite;

        public SharedPreferences getSharedPreferences() {
            return sp;
        }           //获取 SharedPreferences

        private SharedPreferences.Editor sp_e;

        public SharedPreferences.Editor getEditor() {
            return sp_e;
        }   //获取 SharedPreferences.Editor

        private boolean commit = true;             //定义是否自动提交


        /**
         * 初始化 SP
         *
         * @param context     上下文
         * @param SPName      存储的名字
         * @param permissions 存储可读取的权限
         * @param commits     是否自动提交(默认自动提交)
         */
        public GT_SharedPreferences(Context context, String sPName, boolean... commits) {
            if (sp != null) return;
            lockRead = mReadWriteLock.readLock();
            lockWrite = mReadWriteLock.writeLock();
            if (commits != null && commits.length > 0) {
                this.commit = commits[0];
            }
            sp = context.getSharedPreferences(sPName, 0);//打开 或 创建 SharedPreferences
            sp_e = sp.edit();//让userData处于编辑状态
        }

        /**
         * 增加
         *
         * @param key    保存数据的 key
         * @param object 存储的数据
         * @return 返回 sp 操作对象
         */
        public GT_SharedPreferences save(String key, Object object) {
            try {
                if (lockWrite != null) {
                    lockWrite.lock();
                }
                boolean TF = true;//监测保存状态是否正常
                if (object instanceof String) {
                    sp_e.putString(key, object.toString());
                } else if (object instanceof Integer) {
                    sp_e.putInt(key, (Integer) object);
                } else if (object instanceof Long) {
                    sp_e.putLong(key, (Long) object);
                } else if (object instanceof Float) {
                    sp_e.putFloat(key, (Float) object);
                } else if (object instanceof Boolean) {
                    sp_e.putBoolean(key, (Boolean) object);
                } else if (object instanceof Set) {
                    sp_e.putStringSet(key, (Set) object);
                } else {
                    String json = JSON.toJson2(object);
                    String json_class = object.getClass().toString();
                    sp_e.putString(key, json);                           //保存对象的 Json 数据
                    sp_e.putString(key + "_class", json_class);            //保存对象的 class 数据
                }
                if (commit && TF) sp_e.apply();  //如果设置了自动提交 并且 保存状态正常 即可自定提交
            } catch (Exception e) {
                GT.errs("e:" + e);
            } finally {
                if (lockWrite != null) {
                    lockWrite.unlock();
                }
            }
            return this;

        }

        /**
         * 删除数据
         *
         * @param key 删除的 key
         * @return 返回 sp 操作对象
         */
        public SharedPreferences.Editor delete(String key) {
            try {
                if (lockWrite != null) {
                    lockWrite.lock();
                }
                sp_e.remove(key);
                if (commit) sp_e.apply();
            } catch (Exception e) {
                GT.errs("e:" + e);
            } finally {
                if (lockWrite != null) {
                    lockWrite.unlock();
                }
            }
            return sp_e;
        }

        /**
         * 修改数据
         *
         * @param key    修改的 key
         * @param object 新的数据
         * @return 返回 sp 操作类
         */
        public GT_SharedPreferences updata(String key, Object object) {
            save(key, object);
            return this;
        }

        /**
         * 查询数据
         *
         * @param key 查询数据的 key
         * @return 返回 sp 操作类
         */
        public Object query(String key) {
            Object obj = null;
            try {
                if (lockRead != null) {
                    lockRead.lock();
                }
                obj = sp.getInt(key, 0);
            } catch (ClassCastException e1) {
                try {
                    String str_class = sp.getString(key + "_class", null);     //获取对象 class 数据
                    String str = sp.getString(key, null);                          //获取对象 Json  数据
                    if (str_class == null) {      //如果 class 数据为空
                        obj = str;              //普通的 Json 数据
                    } else {
                        Object object_class = getObj(str_class);    //通过对象的 class 反射出 实例对象
                        try {
                            obj = JSON.fromJson2(str, object_class.getClass());     //通过 JSON 与 实例对象 获取相应的 Object 对象
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                } catch (ClassCastException e2) {
                    try {
                        obj = sp.getLong(key, 0);
                    } catch (ClassCastException e3) {
                        try {
                            obj = sp.getFloat(key, 0f);
                        } catch (ClassCastException e4) {
                            try {
                                obj = sp.getBoolean(key, false);
                            } catch (ClassCastException e5) {
                                try {
                                    obj = sp.getStringSet(key, null);
                                } catch (ClassCastException e6) {
                                    obj = null;
                                }
                            }
                        }
                    }
                }
            } finally {
                if (lockRead != null) {
                    lockRead.unlock();
                }
            }
            return obj;
        }

        /**
         * 可返回指定类型
         *
         * @param key
         * @param dataType
         * @param <T>
         * @return
         */
        public <T> T query(String key, Class<T> dataType) {
            Object obj = null;
            try {
                if (lockRead != null) {
                    lockRead.lock();
                }
                if (dataType == Integer.class || dataType == int.class) {
                    obj = sp.getInt(key, 0);
                } else if (dataType == String.class) {
                    obj = sp.getString(key, null);
                } else if (dataType == Long.class || dataType == long.class) {
                    obj = sp.getLong(key, 0);
                } else if (dataType == Float.class || dataType == float.class) {
                    obj = sp.getFloat(key, 0);
                } else if (dataType == boolean.class || dataType == Boolean.class) {
                    obj = sp.getBoolean(key, false);
                } else if (dataType == Set.class) {
                    obj = sp.getStringSet(key, null);
                } else {// Bean
                    String str_class = sp.getString(key + "_class", null);     //获取对象 class 数据
                    String str = sp.getString(key, null);                          //获取对象 Json  数据
                    if (str_class == null) {      //如果 class 数据为空
                        obj = str;              //普通的 Json 数据
                    } else {
                        Object object_class = getObj(str_class);    //通过对象的 class 反射出 实例对象
                        try {
                            obj = JSON.fromJson2(str, object_class.getClass());     //通过 JSON 与 实例对象 获取相应的 Object 对象
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
            } catch (Exception e) {
                GT.errs("e:" + e);
            } finally {
                if (lockRead != null) {
                    lockRead.unlock();
                }
            }
            return (T) obj;
        }

        /**
         * 查 List
         *
         * @param key  查 list 的 key
         * @param type 数据的类型
         * @return 返回 sp 操作类
         */
        public Object queryList(String key, Type type) {
            /**
             *  字符串 转 List 参数说明：
             *
             * key：与之前 save 是的 key
             *  type：
             *  Type type = new TypeToken<List<***Bean>>(){}.getType()
             *
             *  所以你只要传一个 new TypeToken<List<***Bean>>(){}.getType() 即可
             *  ***Bean 解释:   List<***Bean>   是之前 save 时 List的泛型
             *
             */
            if (lockRead != null) {
                lockRead.lock();
            }
            Object obj = null;
            String str_class = sp.getString(key + "_class", null);     //获取对象 class 数据
            String str = sp.getString(key, null);                          //获取对象 Json  数据
            if (str_class != null && str_class.equals("class java.util.ArrayList")) {      //如果 class 数据为空
                try {
                    obj = JSON.fromJson2(str, type.getClass());//字符串转 List
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                }
            }
            if (lockRead != null) {
                lockRead.unlock();
            }
            return obj;
        }

        /**
         * 通过 对象的.class 属性反射对象
         *
         * @param objectClass 全类名
         * @return 返回 反射的实体类
         */
        private Object getObj(String objectClass) {
            Object obj = null;
            String[] strs = objectClass.split(" ");
            String str = strs[1];
            Class<?> clazz = getClass();
            try {
                clazz = Class.forName(str);
            } catch (ClassNotFoundException e1) {
                e1.printStackTrace();
            }
            try {
                obj = clazz.newInstance();
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            } catch (InstantiationException e) {
                e.printStackTrace();
            }
            return obj;        //返回实例化好的类

        }

        /**
         * 获取所有
         *
         * @return 返回 map
         */
        public Map<String, ?> queryAll() {
            return sp.getAll();
        }

    }

    /**
     * GT_IO  Android 的 内部 IO 流
     */
    public static class GT_IO {

        /**
         * 使用实例：
         * 第一步：
         * GT.GT_IO io = new GT.GT_IO(this);//创建 IO 对象
         * 第二步：
         * io.save(editText.getText().toString(),"King");//保存数据
         * 第三步：
         * String king = io.query("King"); //获取数据
         */

        private Context context;

        /**
         * 实例化 上下文
         *
         * @param context
         */
        public GT_IO(Context context) {
            this.context = context;
        }

        /**
         * 保存数据
         *
         * @param saveData 保存的数据
         * @param dataName 保存文件名称
         * @return 返回 IO 操作对象
         */
        public GT_IO save(String saveData, String dataName) {

            FileOutputStream fos = null;//文件输出流
            try {
                fos = context.openFileOutput(dataName, context.MODE_PRIVATE);//获取文件输出流对象
                fos.write(saveData.getBytes());//保存备忘信息
                fos.flush();//清除缓存
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                if (fos != null) {
                    try {
                        fos.close();//关闭输出流
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
            return this;
        }

        /**
         * 查询文件
         *
         * @param dataName 文件绝对路径包括文件名
         * @return
         */
        public String query(String dataName) {
            FileInputStream fis = null;//文件输入流对象
            String data = null;
            byte[] buffer = null;
            try {
                fis = context.openFileInput(dataName);//获得文件输入流对象
                buffer = new byte[fis.available()];//实例化字节数组
                fis.read(buffer);//从输入流中读取数据
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                if (fis != null) {
                    try {
                        fis.close();//关闭输入流对象
                        data = new String(buffer);//把字节数组中的数据转换为字符串
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
            return data;
        }

    }

    /**
     * 增强版外部存储
     */
    public static class FileUtils {

        /**
         getActivity().getFilesDir().getAbsolutePath() + File.separator + "optimize_dex/";
         app 的内部目录，具体目录：0/data/data/com.gsls.gtlibrary/file/
         */

        /**
         * 获取 GT 路径
         *
         * @param activitys
         * @return
         */
        public static String getPath(Context context, boolean... isCreate) {
            String path = FileUtils.getAppDirectory(context) + "/";
            if (isCreate != null && isCreate.length != 0 && isCreate[0] && path != null) {
                File file = new File(path);
                if (!file.exists()) {
                    file.mkdirs();
                }
            }
            return path;
        }

        /**
         * 获取 GT 路径
         *
         * @param activitys
         * @return
         */
        public static String getGTPath(Context context, boolean... isCreate) {
            String path = FileUtils.getAppDirectory(context) + "/GT/";
            if (isCreate != null && isCreate.length != 0 && isCreate[0] && path != null) {
                File file = new File(path);
                if (!file.exists()) {
                    file.mkdirs();
                }
            }
            return path;
        }

        /**
         * 获取 GT 路径
         *
         * @param context
         * @param path
         * @return
         */
        public static File getGTFile(Context context, String... paths) {
            File file = null;
            String path = "";
            if (paths.length > 0) {
                path = paths[0];
            }
            try {
                file = new File(getGTPath(context) + path);
            } catch (Exception e) {

            }
            if (!file.exists()) {
                file.mkdirs();
            }
            return file;
        }

        /**
         * 是否为文件夹 是返回 true 是文件返回 false
         *
         * @param file
         * @return
         */
        public static boolean isDirectory(String file) {
            try {
                if (file == null)
                    return false;
                int lastIndexOf = file.lastIndexOf("/");
                if (lastIndexOf != -1) {
                    file = file.substring(lastIndexOf + 1);
                }
                if (!file.contains(".")) {
                    return true;
                }
            } catch (Exception e) {
            }
            return false;
        }

        /**
         * 获取文件名称
         *
         * @param fileStr
         */
        public static String getFileName(String fileStr) {
            if (fileStr == null) return fileStr;
            if (fileStr.contains("/")) {
                fileStr = fileStr.substring(fileStr.lastIndexOf("/") + 1);
            } else if (fileStr.contains("\\")) {
                fileStr = fileStr.substring(fileStr.lastIndexOf("\\") + 1);
            }
            return fileStr;
        }

        /**
         * 保存单个文件
         *
         * @param saveData 文件保存的数据
         * @param savePaht 文件保存的路径
         * @param fileName 文件名与扩展名
         */
        public static void saveData(String saveData, String savePaht, String fileName) {
            save(saveData, savePaht, fileName);
        }

        /**
         * 保存多个文件
         *
         * @param savePaht 多个文件保存的地址
         * @param saveMap  保存多个文件的数据 key = 文件名与扩展名  value = 文件里的数据
         */
        public static void saveDataAll(String savePaht, Map<String, String> saveMap) {
            for (String key : saveMap.keySet()) {
                save(saveMap.get(key), savePaht, key);
            }
        }

        /**
         * 文件是否存在
         *
         * @param filePathAddFileName
         * @return
         */
        public static boolean fileExist(String filePath) {
            return new File(filePath).exists();
        }

        /**
         * 该文件是否为文件夹
         *
         * @param filePath
         * @return
         */
        public static boolean fileIsDirectory(String filePath) {
            File file = new File(filePath);
            boolean isFolder = false;
            if (file.exists()) {
                isFolder = file.isDirectory();
            }
            return isFolder;
        }

        /**
         * 保存文件数据
         *
         * @param saveData
         * @param savePaht
         * @param fileName
         */
        public static void save(String saveData, String savePaht, String fileName) {
            File fileNull = new File(savePaht);
            if (!fileNull.exists()) {
                fileNull.mkdirs();
            }

            File file = new File(savePaht, fileName);
            FileOutputStream fos = null;

            try {
                fos = new FileOutputStream(file);
                fos.write(saveData.getBytes());
                fos.flush();
            } catch (FileNotFoundException var18) {
                var18.printStackTrace();
            } catch (IOException var19) {
                var19.printStackTrace();
            } finally {
                if (fos != null) {
                    try {
                        fos.close();
                    } catch (IOException var17) {
                        var17.printStackTrace();
                    }
                }

            }

        }

        public static String query(String queryPaht, String fileName) {
            File fileNull = new File(queryPaht);
            if (!fileNull.exists()) {
                fileNull.mkdirs();
            }

            File file = new File(queryPaht, fileName);
            FileInputStream fis = null;
            byte[] buffer = null;
            String data = null;

            try {
                fis = new FileInputStream(file);
                buffer = new byte[fis.available()];
                fis.read(buffer);
            } catch (FileNotFoundException var19) {
                var19.printStackTrace();
            } catch (IOException var20) {
                var20.printStackTrace();
            } finally {
                if (fis != null) {
                    try {
                        fis.close();
                        data = new String(buffer);
                    } catch (IOException var18) {
                        var18.printStackTrace();
                    }
                }

            }

            return data;
        }

        /**
         * 查询文件数据
         *
         * @param queryPaht
         * @return
         */
        public static String query(String queryPaht) {
            File fileNull = new File(queryPaht);
            if (!fileNull.exists()) {
                fileNull.mkdirs();
            }

            File file = new File(queryPaht);
            FileInputStream fis = null;
            byte[] buffer = null;
            String data = null;

            try {
                fis = new FileInputStream(file);
                buffer = new byte[fis.available()];
                fis.read(buffer);
            } catch (FileNotFoundException var19) {
                var19.printStackTrace();
            } catch (IOException var20) {
                var20.printStackTrace();
            } finally {
                if (fis != null) {
                    try {
                        fis.close();
                        data = new String(buffer);
                    } catch (IOException var18) {
                        var18.printStackTrace();
                    }
                }

            }

            return data;
        }

        /**
         * 查询该文件夹中有多少个文件
         *
         * @param filePath 操作的文件夹路径
         * @return
         */
        public static List<String> queryFilePathFileNumber(String filePath) {

            List<String> fileNameList = new ArrayList<>();

            //判断当前路径是否存在
            File file = new File(filePath);
            if (!file.exists()) {
                return fileNameList;
            }

            try {
                File[] files = file.listFiles();
                if (files == null || files.length == 0) return fileNameList;
                for (File fileOne : files) {
                    if (fileOne.isDirectory()) {
                        fileNameList.add("目录:" + fileOne.getName());
                    } else {
                        fileNameList.add("文件:" + fileOne.getName());
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
                return fileNameList;
            }
            return fileNameList;
        }

        /**
         * 获取文件描述
         *
         * @param filePath
         * @param fileName
         * @return
         */
        public static String getFileSizeDescriptor(String filePath, String fileName) {

            try {
                long fileSize = getFileSize(new File(filePath, fileName));
                String fileDescriptor = formetFileSize(fileSize);
                return fileDescriptor;
            } catch (Exception e) {
                e.printStackTrace();
            }

            return null;
        }

        /**
         * 获取指定文件大小
         *
         * @param file
         * @return
         * @throws Exception
         */
        public static long getFileSize(File file) throws Exception {
            long size = 0;
            if (file.exists()) {
                FileInputStream fis = null;
                fis = new FileInputStream(file);
                size = fis.available();
            } else {
                file.createNewFile();
            }
            return size;
        }

        /**
         * 转换文件大小
         *
         * @param fileS
         * @return
         */
        public static String formetFileSize(long fileS) {
            DecimalFormat df = new DecimalFormat("#.00");
            String fileSizeString = "";
            String wrongSize = "0B";
            if (fileS == 0) {
                return wrongSize;
            }
            if (fileS < 1024) {
                fileSizeString = df.format((double) fileS) + "B";
            } else if (fileS < 1048576) {
                fileSizeString = df.format((double) fileS / 1024) + "KB";
            } else if (fileS < 1073741824) {
                fileSizeString = df.format((double) fileS / 1048576) + "MB";
            } else {
                fileSizeString = df.format((double) fileS / 1073741824) + "GB";
            }
            return fileSizeString;
        }

        /**
         * 删除单个文件
         *
         * @param path
         * @return
         */
        public static boolean deleteFile(String path) {
            File file = new File(path);
            if (file.exists()) {
                return file.delete();
            }
            return false;
        }

        /**
         * 删除单个文件
         *
         * @param path
         * @return
         */
        public static boolean deleteFile(File file) {
            if (file != null && file.exists()) {
                return file.delete();
            }
            return false;
        }

        /**
         * 删除所有文件
         *
         * @param deleteFile     删除当前文件夹里的文件
         * @param deleteThisFile 是否删除当前路径的文件夹
         */
        public static void deleteAllFiles(String deleteFile, boolean... deleteThisFiles) {
            boolean deleteThisFile = false;
            if (deleteThisFiles.length > 0) {
                deleteThisFile = deleteThisFiles[0];
            }
            deleteAllFiles(new File(deleteFile), deleteThisFile);
        }


        /**
         * 删除当前目录下所有的文件已经子文件
         *
         * @param deleteFile     删除当前文件夹里的文件
         * @param deleteThisFile 是否删除当前路径的文件夹
         */
        public static void deleteAllFiles(File deleteFile, boolean deleteThisFile) {

            if (!deleteFile.exists()) {
                return;
            }

            File files[] = deleteFile.listFiles();
            if (files != null && files.length != 0) {
                for (File file : files) {
                    if (file.isDirectory()) { // 判断是否为文件夹
                        deleteAllFiles(file, deleteThisFile);
                        try {
                            file.delete();
                        } catch (Exception e) {
                        }
                    } else {
                        if (file.exists()) { // 判断是否存在
                            deleteAllFiles(file, deleteThisFile);
                            try {
                                file.delete();
                            } catch (Exception e) {
                            }
                        }
                    }
                }

                //是否删除当前文件
                if (deleteThisFile) {
                    try {
                        deleteFile.delete();
                    } catch (Exception e) {
                    }
                }

            } else {

            }
        }


        /**
         * 重命名
         *
         * @param path
         * @param oldName
         * @param newName
         */
        public static void changeFileDirName(String path, String oldName, String newName) {
            File oldFile = new File(path + "/" + oldName);
            File newFile = new File(path + "/" + newName);

            oldFile.renameTo(newFile);
        }

        /**
         * getUsb路径
         *
         * @return
         */
        public static List<String> getUsbPath() {
            List<String> usbData = getUsbData();
            if (usbData == null || usbData.size() == 0) return null;
            List<String> usbPath = new ArrayList<>();
            for (String userData : usbData) {
                userData = userData.substring(userData.lastIndexOf("/") + 1);
                usbPath.add("/storage/" + userData + "/");
            }
            return usbPath;
        }

        /**
         * getUsb路径
         *
         * @return
         */
        public static List<String> getUsbName() {
            List<String> usbData = getUsbData();
            if (usbData == null || usbData.size() == 0) return null;
            List<String> usbName = new ArrayList<>();
            for (String userData : usbData) {
                userData = userData.substring(userData.lastIndexOf("/") + 1);
                usbName.add(userData);
            }
            return usbName;
        }

        /**
         * 获取USB信息
         *
         * @return
         */
        public static List<String> getUsbData() {
            String filePath = "/proc/mounts";
            File file = new File(filePath);
            List<String> lineList = new ArrayList<>();
            InputStream inputStream = null;
            try {
                inputStream = new FileInputStream(file);
                if (inputStream != null) {
                    InputStreamReader inputStreamReader = new InputStreamReader(inputStream, "GBK");
                    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
                    String line = "";
                    while ((line = bufferedReader.readLine()) != null) {
                        if (line.contains("vfat")) {
                            lineList.add(line);
                        }
                    }
                }
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                if (inputStream != null) {
                    try {
                        inputStream.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
            if (lineList.size() == 0) return null;
            List<String> usbPaths = new ArrayList<>();
            for (int i = 0; i < lineList.size(); i++) {
                String editPath = lineList.get(i);
                int start = editPath.indexOf("/mnt");
                int end = editPath.indexOf(" vfat");
                usbPaths.add(editPath.substring(start, end));
            }
            return usbPaths;
        }

        /**
         * 复制单个文件
         *
         * @param fromFileStr
         * @param toFileStr
         * @return
         */
        public static void copyFile(String fromFileStr, String toFileStr) {

            File fromFile = new File(fromFileStr);
            File toFile = new File(toFileStr);

            if (!fromFile.exists()) {
                return;
            }

            //开始拷贝文件
            copy(fromFileStr, toFileStr);
        }

        /**
         * 拷贝文件
         *
         * @param fromFile
         * @param toFile
         * @return
         */
        private static int copy(String fromFile, String toFile) {
            try {
                InputStream inputStream = new FileInputStream(fromFile);
                OutputStream outputStream = new FileOutputStream(toFile);
                byte bt[] = new byte[1024];
                int d;
                while ((d = inputStream.read(bt)) > 0) {
                    outputStream.write(bt, 0, d);
                }
                inputStream.close();
                outputStream.close();
                return 0;
            } catch (Exception e) {
                return -1;
            }
        }

        /**
         * 复制所有文件
         *
         * @param fromFile
         * @param toFile
         * @return
         */
        public static int copyAllFile(String fromFile, String toFile) {
            //要复制的文件目录
            File[] currentFiles;
            File root = new File(fromFile);
            //如同判断SD卡是否存在或者文件是否存在
            //如果不存在则 return出去
            if (!root.exists()) {
                return -1;
            }
            //如果存在则获取当前目录下的全部文件 填充数组
            currentFiles = root.listFiles();
            if (currentFiles == null) {//如果只有一个文件，那就使用拷贝一个文件的方法
                FileUtils.copyFile(fromFile, toFile);
                return 0;
            }

            //目标目录
            File targetDir = new File(toFile);
            //创建目录
            if (!targetDir.exists()) {
                targetDir.mkdirs();
            }
            //遍历要复制该目录下的全部文件
            for (int i = 0; i < currentFiles.length; i++) {
                if (currentFiles[i].isDirectory())//如果当前项为子目录 进行递归
                {
//                GT.log("1 " + currentFiles[i].getPath() + "/" + "--------" + toFile + "/" + currentFiles[i].getName() + "/");
                    copyAllFile(currentFiles[i].getPath() + "/", toFile + "/" + currentFiles[i].getName() + "/");

                } else//如果当前项为文件则进行文件拷贝
                {
//                GT.log("2 " + currentFiles[i].getPath() + "--------" + toFile + "/" + currentFiles[i].getName());
                    CopySdcardFile(currentFiles[i].getPath(), toFile + "/" + currentFiles[i].getName());
                }
            }
            return 0;
        }

        /**
         * 要复制的目录下的所有非子目录(文件夹)文件拷贝
         *
         * @param fromFile
         * @param toFile
         * @return
         */
        private static int CopySdcardFile(String fromFile, String toFile) {
            try {
                InputStream fosfrom = new FileInputStream(fromFile);
                OutputStream fosto = new FileOutputStream(toFile);
                byte bt[] = new byte[1024];
                int c;
                while ((c = fosfrom.read(bt)) > 0) {
                    fosto.write(bt, 0, c);
                }
                fosfrom.close();
                fosto.close();
                return 0;

            } catch (Exception ex) {
                return -1;
            }
        }

        /**
         * 获取文件夹中所有文件名
         *
         * @param path
         * @return
         */
        public static List<String> getFilesAllName(String path) {
            File file = new File(path);
            File[] files = file.listFiles();
            if (files == null) {
                Log.e("error", "空目录");
                return null;
            }
            List<String> s = new ArrayList<String>();
            for (int i = 0; i < files.length; i++) {
                s.add(files[i].getAbsolutePath());
            }
            return s;
        }

        /**
         * 清空文件夹中所有文件
         *
         * @param file         清空的文件路径
         * @param isSaveFolder 是否保存当前文件夹 true：b
         */
        public static void deleteAllFile(File file, boolean isSaveFolder) {

            if (file.isDirectory()) {
                File[] files = file.listFiles();
                for (int i = 0; i < files.length; i++) {
                    File f = files[i];
                    deleteAllFile(f, isSaveFolder);
                }
                if (!isSaveFolder) {// 是否保留本文件夹
                    file.delete();// 如要保留文件夹，只删除文件，请注释这行
                }
            } else if (file.exists()) {
                file.delete();
            }
        }

        /**
         * 获取当前SD目录路径 适配高Api机型
         *
         * @param context
         * @return
         */
        public static String getAppDirectory(Context context) {
            if (Build.VERSION.SDK_INT >= 26) {
                String absolutePath = ContextCompat.getExternalFilesDirs(context, Environment.DIRECTORY_DCIM)[0].getAbsolutePath();
                if (absolutePath.contains("/DCIM")) {
                    absolutePath = absolutePath.substring(0, absolutePath.indexOf("/DCIM"));
                }
                return absolutePath;
            }
            return Environment.getExternalStorageDirectory().toString();
        }

        //U盘的实体类信息
        public class USB_Bean {

            private String capacity;        //容量
            private String haveBeenUsed;    //当前占用容量
            private String freeSpace;       //空闲空间
            private String blockSize;       //块大小
            private int type;               //类型

            public USB_Bean() {
                super();
            }

            public USB_Bean(String capacity, String haveBeenUsed, String freeSpace, String blockSize, int type) {
                this.capacity = capacity;
                this.haveBeenUsed = haveBeenUsed;
                this.freeSpace = freeSpace;
                this.blockSize = blockSize;
                this.type = type;
            }

            public String getCapacity() {
                return capacity;
            }

            public void setCapacity(String capacity) {
                this.capacity = capacity;
            }

            public String getHaveBeenUsed() {
                return haveBeenUsed;
            }

            public void setHaveBeenUsed(String haveBeenUsed) {
                this.haveBeenUsed = haveBeenUsed;
            }

            public String getFreeSpace() {
                return freeSpace;
            }

            public void setFreeSpace(String freeSpace) {
                this.freeSpace = freeSpace;
            }

            public String getBlockSize() {
                return blockSize;
            }

            public void setBlockSize(String blockSize) {
                this.blockSize = blockSize;
            }

            public int getType() {
                return type;
            }

            public void setType(int type) {
                this.type = type;
            }

            @Override
            public String toString() {
                return "USB_Bean{" +
                        "capacity='" + capacity + '\'' +
                        ", haveBeenUsed='" + haveBeenUsed + '\'' +
                        ", freeSpace='" + freeSpace + '\'' +
                        ", blockSize='" + blockSize + '\'' +
                        ", type=" + type +
                        '}';
            }
        }

        /**
         * 解析路径
         *
         * @param uDiskPath
         * @return
         */
        public static FileBean parseFilePath(String uDiskPath) {
            FileBean fileBean = new FileBean();
            List<String> list = null;
            String[] filePaths = uDiskPath.split("/");
            if (uDiskPath.contains(".")) {
                // 指定了文件名
                if (uDiskPath.contains("/")) {
                    // 指定了路径
                    list = new ArrayList<>();
                    for (int i = 0; i < filePaths.length - 1; i++) {
                        list.add(filePaths[i]);
                    }
                    fileBean.setFilePath(uDiskPath.substring(0, uDiskPath.lastIndexOf("/")));
                    String fileName = uDiskPath.substring(uDiskPath.lastIndexOf("/") + 1, uDiskPath.length());
                    fileBean.setFileName(fileName);
                } else {
                    // 未指定路径
                    fileBean.setFileName(uDiskPath);
                }
            } else {
                if (uDiskPath.contains("/")) {
                    // 纯路径
                    fileBean.setFilePath(uDiskPath.substring(0, uDiskPath.lastIndexOf("/")));
                }

            }
            fileBean.setFilePathList(list);
            return fileBean;

        }

        public static class FileBean {
            private String fileName;// 文件名
            private List<String> filePathList;// 文件路径
            private String filePath;// 文件路径

            public FileBean() {
            }

            public FileBean(String fileName, List<String> filePathList, String filePath) {
                this.fileName = fileName;
                this.filePathList = filePathList;
                this.filePath = filePath;
            }

            public String getFileName() {
                return fileName;
            }

            public void setFileName(String fileName) {
                this.fileName = fileName;
            }

            public List<String> getFilePathList() {
                return filePathList;
            }

            public void setFilePathList(List<String> filePathList) {
                this.filePathList = filePathList;
            }

            public String getFilePath() {
                return filePath;
            }

            public void setFilePath(String filePath) {
                this.filePath = filePath;
            }

            @Override
            public String toString() {
                return "FileBean{" +
                        "fileName='" + fileName + '\'' +
                        ", filePathList=" + filePathList +
                        ", filePath='" + filePath + '\'' +
                        '}';
            }
        }

    }

    /**
     * @Hibernate SQL
     * 注意：SQL好像可以直接"增加列"与"修改列名"，且不会导致数据丢失
     * hibernate.sqLiteDatabase2.execSQL("ALTER TABLE 表名 ADD COLUMN 新增加的列名 int");//测试成功
     * hibernate.sqLiteDatabase2.execSQL("ALTER TABLE 表名 RENAME COLUMN 旧表名 TO 新表名");//测试成功
     */
    public static class Hibernate implements SaveObject.SaveBean {
        private WeakReference<Context> weakReference;
        private final int MAX = 100000;//最大存储10万数值分界线
        private Hibernate hibernate;
        private ReentrantReadWriteLock readWriteLock;//读写锁
        private Lock lockRead;//读锁
        private Lock lockWrite;//写锁

        public Hibernate() {
            Context context = getActivity();
            if (context != null) {
                weakReference = new WeakReference<>(context);
            } else {
                errs("当前并没有绑定 Activity 无法使用无参构造方法，请先使用 GT.GT.build(this); 进行 Activity 绑定。");
            }
            if (readWriteLock == null) {
                readWriteLock = new ReentrantReadWriteLock();//读写锁
                lockRead = readWriteLock.readLock();//读锁
                lockWrite = readWriteLock.writeLock();//写锁
            }
        }

        public Hibernate(Context context) {
            weakReference = new WeakReference<>(context);
            if (readWriteLock == null) {
                readWriteLock = new ReentrantReadWriteLock();//读写锁
                lockRead = readWriteLock.readLock();//读锁
                lockWrite = readWriteLock.writeLock();//写锁
            }
        }

        //=============================== 实例化 动态的 Hibernate 对象 ====================================

        /**
         * 初始化 Hibernate
         *
         * @param context     上下文
         * @param SQLName     数据库名称
         * @param sqlVersions 数据库版本
         * @param scanTable   数据库映射类
         * @return
         */
        public Hibernate initialize(String sQLName, int sqlVersions, String passWord, Object scanTable) {
            if (hibernate == null) {
                synchronized (Hibernate.class) {
                    if (hibernate == null) {
                        hibernate = this;
                        initSQL(sQLName, sqlVersions, passWord, scanTable); //数据库操作执行
                    }
                }
            }
            return hibernate;
        }

        public Hibernate getHibernate() {
            if (hibernate == null) {
                synchronized (Hibernate.class) {
                    if (hibernate == null) {
                        hibernate = this;
                        initSQL(null, -1, null, null);//数据库操作执行
                    }
                }
            }
            return hibernate;
        }


        //=============================== 数据库注解 ====================================

        //构建Hibernate
        @Target(ElementType.FIELD)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface Build {
            String setSqlName() default "GT";//数据库默认名为 GT.db

            int setSqlVersion() default 1;//数据库默认版本从 1

            Class<?>[] setSqlTables() default {};//数据库默认加载的数据库,如果设置了映射的表那就不再扫描bean与entity标注的类

            boolean setIsThread() default false;//是否使用线程创建数据库： 注意，如果在线程中创建数据库就不能直接创建就引用数据库对象，需要触发使用

            String setPassWord() default Hibernate.DATABASE_PASSWORD;//默认的数据库加密密码

            boolean setTransaction() default true;//默认的数据库所有操作是使用事务的
        }

        //设置映射标识
        @Target(ElementType.TYPE)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface GT_Bean {
            String[] setSqlNames() default {};//设置属于那个数据库的表,默认是空
//            boolean setIsEncryption() default false;//默认不进行加密
        }

        @Target(ElementType.TYPE)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface GT_Entity {
            String[] setSqlNames() default {};//设置属于那个数据库的表,默认是空
//            boolean setIsEncryption() default false;//默认不进行加密
        }

        //设置主键注解
        @Target({ElementType.FIELD})
        @Retention(RetentionPolicy.RUNTIME)
        public @interface GT_Key {
            boolean setAutoincrement() default true;    //默认为 手动增长

            int setLength() default 200;                //设置主键长度

            String[] setCheckValues() default {};       //设置固定选择的String值如：(男、女)

            double setMax() default Double.MAX_VALUE;   //设置最大值

            double setMin() default Double.MIN_VALUE;   //设置最小值
        }

        //表字段特殊设置注解
        @Target({ElementType.FIELD})
        @Retention(RetentionPolicy.RUNTIME)
        public @interface GT_Column {

            String setOldTableValue() default "";       //用于修改字段名，填写旧的字段名

            boolean setNotNull() default false;         //设置字段不为null,默认可为null

            String[] setCheckValues() default {};       //设置固定选择的String值如：(男、女)

            int setLength() default 200;                //限制字段大小

            double setMax() default Double.MAX_VALUE;   //设置最大值

            double setMin() default Double.MIN_VALUE;   //设置最小值

            boolean setNotInit() default false;         //设置是否需要持久化,默认是持久化

            String[] setDefaultValue() default {};      //设置默认值，请规范使用

            boolean setIsEncryption() default false;   //是否加密,默认不加密


            /**
             * 索引标识
             * 什么情况下要避免使用索引？
             * 虽然索引的目的在于提高数据库的性能，但这里有几个情况需要避免使用索引。使用索引时，应重新考虑下列准则：
             * 索引不应该使用在较小的表上。
             * 索引不应该使用在有频繁的大批量的更新或插入操作的表上。
             * 索引不应该使用在含有大量的 NULL 值的列上。
             * 索引不应该使用在频繁操作的列上。
             */
            String GENERAL_INDEX = "CREATE INDEX index_name ON tableName (column);";//单列索引或组合索引
            String UNIQUE_INDEX = "CREATE UNIQUE INDEX index_name on tableName (column);";//唯一索引
            String DEFAULT_INDEX = "UNIQUE NOT NULL";//默认索引

            String setIndex() default ""; //索引信息

        }


        //设置数据库接口标识
        @Target(ElementType.TYPE)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface GT_Dao {

        }

        //插入数据
        @Target(ElementType.METHOD)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface GT_Insert {
            String[] value() default {};

            String[] where() default {};
        }

        //删除数据
        @Target(ElementType.METHOD)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface GT_Delete {
            String[] value() default {};

            String[] where() default {};
        }

        //查询数据
        @Target(ElementType.METHOD)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface GT_Query {
            String[] select() default {};   //返回字段类型

            String[] where() default {};      //查询条件

            String[] value() default {};    //查询条件值

            String flashback() default "";  //排序

            int[] limit() default {};    //限量

            String groupBy() default "";//相当于select语句group by关键字后面的部分

            String having() default "";//相当于select语句having关键字后面的部分

            boolean isLast() default false;//是否倒序

        }

        //更新数据
        @Target(ElementType.METHOD)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface GT_Update {
            String[] value() default {};

            String[] where() default {};
        }

        //万能sql语句
        @Target(ElementType.METHOD)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface GT_Code {
            String value() default "";
        }

        @Documented
        @Target(PARAMETER)
        @Retention(RUNTIME)
        public @interface Where {
            String value();
        }


        //=============================== 数据库属性 ====================================
        private String DATABASE_NAME = "GT.db";   //默认数据库名称(可修改)

        private static final String DATABASE_PASSWORD = "123456"; //默认数据库密码
        private int DATABASE_VERSION = 1;         //默认数据库版本(可升级)
        private Object SCAN_TABLE = null;         //默认数据库映射方式(可修改)
        private boolean isDeleteNullTable;        //是否删除无用表
        private volatile boolean isTransaction = true;   //是否开启事务(默认开启)

        public String getDATABASE_NAME() {
            return DATABASE_NAME;
        }

        public void setDATABASE_NAME(String DATABASE_NAME) {
            this.DATABASE_NAME = DATABASE_NAME;
        }

        public int getDATABASE_VERSION() {
            return DATABASE_VERSION;
        }

        public void setDATABASE_VERSION(int DATABASE_VERSION) {
            this.DATABASE_VERSION = DATABASE_VERSION;
        }

        public boolean isTransaction() {
            return isTransaction;
        }

        public void setTransaction(boolean transaction) {
            isTransaction = transaction;
        }

        //=============================== 数据库对象 ====================================
        public SQLiteDatabase sqLiteDatabase2;
        //=============================== 数据库语句 ====================================
        public static String SQL_CODE = "";

        //=============================== 无实体类完成数据库 ====================================
        public SQLiteDatabase getSqliteDatabase() {
            return sqLiteDatabase2;
        }

        /**
         * 关闭SQL对象
         *
         * @return
         */
        public Hibernate close() {
            if (sqLiteDatabase2 != null) {
                sqLiteDatabase2.close();//ok
            }
            return this;
        }

        /**
         * @param sqLiteDatabase
         * @设置Hibernate数据库的SQL管理对象
         */
        public void setSqLiteDatabase(SQLiteDatabase sqLiteDatabase) {
            this.sqLiteDatabase2 = sqLiteDatabase;
        }

        //=============================== 数据表路径 ====================================

        private List<Class<?>> tableList;//创建表class集合

        public List<Class<?>> getTableList() {
            return tableList;
        }

        public void setTableList(List<Class<?>> tableList) {
            this.tableList = tableList;
        }

        //表字段与字段的类型
        private List<String> tableStr;

        public List<String> getTableStr() {
            return tableStr;
        }

        public void setTableStr(List<String> tableStr) {
            this.tableStr = tableStr;
        }

        //=============================== 数据库管理 ====================================

        /**
         * @管理数据库核心类
         */
        private class DatabaseHelper extends SQLiteOpenHelper {

            private DatabaseHelper databaseHelper = null;
            private Context context = null;

            public DatabaseHelper(Context context) {
                super(context, DATABASE_NAME, null, DATABASE_VERSION);
                this.context = context;
            }

            public synchronized DatabaseHelper getDatabaseHelper(Context context) {
                if (databaseHelper == null) {
                    databaseHelper = new DatabaseHelper(context);
                }
                return databaseHelper;
            }

            //构造方法
            public DatabaseHelper(@Nullable Context context, @Nullable String name, @Nullable SQLiteDatabase.CursorFactory factory, int version) {
                super(context, name, factory, version);
                this.context = context;
            }

            @Override
            public void onCreate(SQLiteDatabase sqLiteDatabase) {
                createSQL(sqLiteDatabase);
            }

            private void createSQL(SQLiteDatabase sqLiteDatabase) {
                scanTable(SCAN_TABLE); //设置创建或更新升级的数据库表
                sqLiteDatabase2 = sqLiteDatabase;
                //如果设置了 独自的 SQL 语句代码就用单独设置的
                if (null != SQL_CODE && !"".equals(SQL_CODE)) {
                    sqLiteDatabase.execSQL(SQL_CODE); //创建数据库 sql 语句 并 执行
                    SQL_CODE = "";//初始化
                } else {//否则用智能SQL代码
                    for (String sqlStr : creationTableNameList) {
                        sqLiteDatabase.execSQL(sqlStr); //创建数据库 sql 语句 并 执行
                    }

                    //检查是否需要建立索引
                    if (tableIndexList.size() != 0) {
                        for (String indexCode : tableIndexList) {
                            try {
                                sqLiteDatabase.execSQL(indexCode); //执行数据库索引代码
                            } catch (Exception e) {
                                GT.errs("e:" + e);
                            }
                        }
                    }

                }
            }

            @Override
            public void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) {
                //如果当前版本需要升级
                updateSQL(sqLiteDatabase, oldVersion, newVersion);
            }

            private void updateSQL(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) {
                if (oldVersion < newVersion) {
                    scanTable(SCAN_TABLE); //设置创建或更新升级的数据库表
                    //更新开始
                    sqLiteDatabase2 = sqLiteDatabase;//赋值
                    if (SQL_CODE != null && !"".equals(SQL_CODE)) {//用户指定的代码
                        sqLiteDatabase.execSQL(SQL_CODE);
                        SQL_CODE = "";//初始化
                    } else {//用智能代码
                        for (int i = 0; i < creationTableNameList.size(); i++) { //遍历需要升级的表

                            //第一步：获取想要更新升级的所有表名，将表名全部改成“待删除表”
                            if (isTable(tableNameList.get(i))) {//如果当前数据库存在该表
                                updateTableName(tableNameList.get(i), "temp_" + tableNameList.get(i));//修改表名
                            }

                            //第二步：创建最新的表
                            if (!isTable(tableNameList.get(i))) {//当前表如果不存在
                                sqLiteDatabase.execSQL(creationTableNameList.get(i));//ok
                                //检查是否需要建立索引
                                if (tableIndexList.size() != 0) {
                                    for (String indexCode : tableIndexList) {
                                        try {
                                            sqLiteDatabase.execSQL(indexCode); //执行数据库索引代码
                                        } catch (Exception e) {
                                            GT.errs("e:" + e);
                                        }
                                    }
                                }
                            }

                            //第三步：将旧表数据导入新表中,如果当前数据库存在该表
                            if (isTable("temp_" + tableNameList.get(i)) && isTable(tableNameList.get(i))) {
                                List<String> oldList = new ArrayList<>();//需要导入的旧字段
                                List<String> newList = new ArrayList<>();//需要导入的新字段

                                List<String> tempSQLTableValue = getTableAllValue("temp_" + tableNameList.get(i), sqLiteDatabase);//获取上个版本表所有字段
                                List<String> sqlTableValue = getTableAllValue(tableNameList.get(i), sqLiteDatabase);//获取当前最新版本数据库表所有字段
                                for (String tableValue : tempSQLTableValue) {//遍历旧版本，如果新版本也有就存入 待导入数据字段行列
                                    if (sqlTableValue.contains(tableValue)) {
                                        oldList.add(tableValue);//存入容器中
                                        newList.add(tableValue);//存入容器中
                                    }
                                }

                                //当前表是否需要修改字段
                                //Book{bookName bookNumber ,name number }
                                if (updateTableValueList != null && updateTableValueList.size() > 0) {
                                    for (String updateData : updateTableValueList) {
                                        String updateTableName = updateData.substring(0, updateData.indexOf("{"));//获取需要修改的表名
                                        if (!tableNameList.get(i).equals(updateTableName))
                                            continue;//过滤掉不需要修改的表

                                        //开始解析 修改字段
                                        String updateValue = updateData;
                                        updateValue = updateValue.substring(updateValue.indexOf("{") + 1, updateValue.indexOf("}"));
                                        String[] updateArrayValue = updateValue.split(",");
                                        String[] oldArray = updateArrayValue[0].split(" ");
                                        String[] newArray = updateArrayValue[1].split(" ");

                                        for (String old : oldArray) {
                                            oldList.add(old);//存入容器中
                                        }

                                        for (String news : newArray) {
                                            newList.add(news);//存入容器中
                                        }

                                    }
                                }
                                //将旧表中 需要导入的数据 导入到新表中
                                inputTableData("temp_" + tableNameList.get(i), oldList, tableNameList.get(i), newList);
                            }


                            //第四步：删除旧表
                            if (isTable("temp_" + tableNameList.get(i))) {//如果当前数据库存在该表
                                deleteTable("temp_" + tableNameList.get(i));
                            }

                        }

                        //第五步：删除数据库中多余无用的表
                        for (String tableName : getSqlAllTableName()) {//获取数据库中所有的表
                            if (!"sqlite_sequence".equals(tableName)) {//过来掉系统自带的表
                                if (!tableNameList.contains(tableName)) {//如果数据库表没有存在最新数据库更新的表名当中
                                    deleteTable(tableName);//删除当前无效的表
                                }
                            }
                        }

                        //更新结束
                    }
                }
            }

        }

        //=============================== 数据库操作 ====================================

        /**
         * @param oldTableName 旧表名称
         * @param NewTableName 新表名称
         * @return
         * @修改表名称
         */
        public synchronized Hibernate updateTableName(String oldTableName, String NewTableName) {
            if (sqLiteDatabase2 == null) return this;
            if (isTransaction)
                sqLiteDatabase2.beginTransaction();
            try {
                String sql = "ALTER TABLE " + oldTableName + " RENAME TO " + NewTableName;
                sqLiteDatabase2.execSQL(sql);//ok
                if (isTransaction)
                    sqLiteDatabase2.setTransactionSuccessful();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (isTransaction)
                    sqLiteDatabase2.endTransaction();
            }
            return this;
        }

        /**
         * @param oldTableName 旧表名称
         * @param NewTableName 新表名称
         * @return
         * @修改表名称
         */
        public synchronized Hibernate updateTableName(Class<?> oldTableNameClass, Class<?> NewTableNameClass) {
            if (sqLiteDatabase2 == null) return this;
            if (isTransaction)
                sqLiteDatabase2.beginTransaction();
            try {
                String sql = "ALTER TABLE " + oldTableNameClass.getSimpleName() + " RENAME TO " + NewTableNameClass.getSimpleName();
                sqLiteDatabase2.execSQL(sql);//ok
                if (isTransaction)
                    sqLiteDatabase2.setTransactionSuccessful();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (isTransaction)
                    sqLiteDatabase2.endTransaction();
            }
            return this;
        }

        /**
         * @param tableName 表名
         * @return
         * @获取表所有字段名
         */
        public static synchronized List<String> getTableAllValue(String tableName, SQLiteDatabase sqLiteDatabase) {
            Cursor tempCursor = null;
            List<String> tableNameList = new ArrayList<>();
            if (sqLiteDatabase == null) return tableNameList;
            try {
                String sql = "SELECT * FROM " + tableName + " WHERE 0";
                tempCursor = sqLiteDatabase.rawQuery(sql, null);//ok
                String[] columnNames = tempCursor.getColumnNames();
                for (String str : columnNames) {
                    tableNameList.add(str);
                }
                return tableNameList;
            } catch (Exception e) {
                err(getLineInfo(1), "出现异常操作失误:" + e);
            } finally {
                if (tempCursor != null) {
                    tempCursor.close();
                }
            }
            return tableNameList;
        }

        /**
         * @param tableClass 表名
         * @return
         * @获取表所有字段名
         */
        public synchronized List<String> getTableAllValue(Class<?> tableClass) {
            if (tableClass == null || !isTable(tableClass.getSimpleName())) return null;
            Cursor tempCursor = null;
            List<String> tableNameList = new ArrayList<>();
            if (sqLiteDatabase2 == null) return tableNameList;
            if (isTransaction)
                sqLiteDatabase2.beginTransaction();
            try {
                String sql = "SELECT * FROM " + tableClass.getSimpleName() + " WHERE 0";
                tempCursor = sqLiteDatabase2.rawQuery(sql, null);//ok
                String[] columnNames = tempCursor.getColumnNames();
                for (String str : columnNames) {
                    tableNameList.add(str);
                }
                if (isTransaction)
                    sqLiteDatabase2.setTransactionSuccessful();
                return tableNameList;
            } catch (Exception e) {
                err(getLineInfo(1), "出现异常操作失误:" + e);
            } finally {
                if (tempCursor != null) {
                    tempCursor.close();
                }
                if (isTransaction)
                    sqLiteDatabase2.endTransaction();
            }

            return tableNameList;
        }

        /**
         * 创建表
         *
         * @param tableClass
         * @return
         */
        public synchronized boolean createTable(Class<?> tableClass) {
            if (sqLiteDatabase2 == null) return false;
            if (isTransaction)
                sqLiteDatabase2.beginTransaction();
            boolean tf = false;
            try {
                if (!isTable(tableClass)) {
                    scanTable(tableClass);//将类转为SQL代码
                    for (String sqlStr : creationTableNameList) {
                        sqLiteDatabase2.execSQL(sqlStr);//ok
                    }
                    if (isTransaction)
                        sqLiteDatabase2.setTransactionSuccessful();
                    tf = true;
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (isTransaction)
                    sqLiteDatabase2.endTransaction();
            }
            return tf;
        }

        public synchronized boolean createTable(String tableName) {
            if (sqLiteDatabase2 == null) return false;
            if (isTransaction)
                sqLiteDatabase2.beginTransaction();
            boolean tf = false;
            try {
                if (!isTable(tableName)) {
                    scanTable(tableName);//将类转为SQL代码
                    for (String sqlStr : creationTableNameList) {
                        sqLiteDatabase2.execSQL(sqlStr);//ok
                    }
                    if (isTransaction)
                        sqLiteDatabase2.setTransactionSuccessful();
                    tf = true;
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (isTransaction)
                    sqLiteDatabase2.endTransaction();
            }
            return tf;
        }


        /**
         * @param tableName
         * @return
         * @删除表
         */
        public synchronized Hibernate deleteTable(String tableName) {

            if (sqLiteDatabase2 == null) return this;
            if (isTransaction)
                sqLiteDatabase2.beginTransaction();
            try {
                String sql = "DROP TABLE " + tableName;
                sqLiteDatabase2.execSQL(sql);//ok
                if (isTransaction)
                    sqLiteDatabase2.setTransactionSuccessful();
            } catch (Exception e) {
                err(getLineInfo(1), "出现异常操作失误:" + e);
            } finally {
                if (isTransaction)
                    sqLiteDatabase2.endTransaction();
            }
            return this;
        }

        /**
         * @param tableClass
         * @return
         * @删除表
         */
        public synchronized Hibernate deleteTable(Class<?> tableClass) {
            if (sqLiteDatabase2 == null) return this;
            if (isTransaction)
                sqLiteDatabase2.beginTransaction();
            try {
                String sql = "DROP TABLE " + tableClass.getSimpleName();
                sqLiteDatabase2.execSQL(sql);//ok
                if (isTransaction)
                    sqLiteDatabase2.setTransactionSuccessful();
            } catch (Exception e) {
                err(getLineInfo(1), "出现异常操作失误:" + e);
            } finally {
                if (isTransaction)
                    sqLiteDatabase2.endTransaction();
            }
            return this;
        }

        /**
         * @return
         * @获取当前数据库所有表名称
         */
        public synchronized List<String> getSqlAllTableName() {
            List<String> strList = new ArrayList<>();
            if (sqLiteDatabase2 == null) return strList;
            Cursor cursor = null;
            try {
                cursor = sqLiteDatabase2.rawQuery("select name from sqlite_master where type='table' order by name", null);//ok
                while (cursor.moveToNext()) {
                    String tableName = cursor.getString(0);
                    if ("android_metadata".equals(tableName)) {//是否遍历到系统数据库
                        deleteTable("android_metadata");//删除系统创建的数据库
                    } else if (!"sqlite_sequence".equals(tableName)) {
                        strList.add(tableName);
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (cursor != null) {
                    cursor.close();
                }
            }
            return strList;
        }

        /**
         * 获取数据库所有名称
         *
         * @return
         */
        public synchronized List<String> getSqlAllName() {
            if (weakReference.get() == null) return null;

            List<String> filesAllNames = FileUtils.getFilesAllName(weakReference.get().getFilesDir().getParent() + "/databases/");
            if (filesAllNames == null) {
                return null;
            } else {

                //将路径去掉
                for (int i = 0; i < filesAllNames.size(); i++) {
                    String filesAllName = filesAllNames.get(i);
                    String[] split = filesAllName.split("/");
                    filesAllName = split[split.length - 1];
                    if (filesAllName.contains(".db")) {
                        filesAllNames.set(i, filesAllName);
                    }
                }

                List<String> sqlNames = new ArrayList<>();
                //去掉非数据库的文件
                for (String filesName : filesAllNames) {
                    String extension = filesName.substring(filesName.lastIndexOf(".") + 1);
                    if ("db".equals(extension)) {
                        sqlNames.add(filesName);
                    }
                }
                return sqlNames;
            }
        }

        /**
         * @param tableName 表名
         * @return 存在返回 true 不存在返回 false
         * @监测当前数据库是否存在此表
         */
        public synchronized boolean isTable(String tableName) {
            List<String> sqlAllTableName = getSqlAllTableName();
            if (sqlAllTableName.contains(tableName)) {
                return true;
            }
            return false;
        }

        /**
         * @param tableClass 表名
         * @return 存在返回 true 不存在返回 false
         * @监测当前数据库是否存在此表
         */
        public synchronized boolean isTable(Class<?> tableClass) {
            List<String> sqlAllTableName = getSqlAllTableName();
            if (sqlAllTableName.contains(tableClass.getSimpleName())) {
                return true;
            }
            return false;
        }

        /**
         * @param oldTable 旧表
         * @param newTable 新表
         * @return
         * @导入表的数据 (自动匹配相同表字段自动导入数据)
         */
        public synchronized Hibernate inputTableData(String oldTable, String newTable) {
            if (sqLiteDatabase2 == null) return this;
            if (isTransaction)
                sqLiteDatabase2.beginTransaction();
            try {
                List<String> tempSQLTableValue = getTableAllValue(oldTable, sqLiteDatabase2);//获取上个版本表所有字段
                List<String> SQLTableValue = getTableAllValue(newTable, sqLiteDatabase2);//获取当前最新版本数据库表所有字段
                //效验出 旧版本 与 新版本 数据库均有的字段
                List<String> SQLValue = new ArrayList<>();
                for (String tableValue : tempSQLTableValue) {//遍历旧版本，如果新版本也有就存入 待导入数据字段行列
                    if (SQLTableValue.contains(tableValue)) {
                        SQLValue.add(tableValue);//存入容器中
                    }
                }

                //生成可用的表字段
                String tableChars = "";//表字段
                for (String str : SQLValue) {
                    tableChars += (str + ",");
                }
                tableChars = tableChars.substring(0, tableChars.length() - 1);//去掉SQLCode 最后一个无用逗号

                String inputSQL = "INSERT INTO " + newTable + "(" + tableChars + ") SELECT " + tableChars + " FROM " + oldTable;
                sqLiteDatabase2.execSQL(inputSQL);//ok
                if (isTransaction)
                    sqLiteDatabase2.setTransactionSuccessful();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (isTransaction)
                    sqLiteDatabase2.endTransaction();
            }

            return this;
        }

        /**
         * @param oldTableClass 旧表
         * @param newTableClass 新表
         * @return
         * @导入表的数据 (自动匹配相同表字段自动导入数据)
         */
        public synchronized Hibernate inputTableData(Class<?> oldTableClass, Class<?> newTableClass) {
            if (sqLiteDatabase2 == null) return this;
            if (isTransaction)
                sqLiteDatabase2.beginTransaction();
            try {
                String oldTable = oldTableClass.getSimpleName();
                String newTable = newTableClass.getSimpleName();

                List<String> tempSQLTableValue = getTableAllValue(oldTable, sqLiteDatabase2);//获取上个版本表所有字段
                List<String> SQLTableValue = getTableAllValue(newTable, sqLiteDatabase2);//获取当前最新版本数据库表所有字段
                //效验出 旧版本 与 新版本 数据库均有的字段
                List<String> SQLValue = new ArrayList<>();
                for (String tableValue : tempSQLTableValue) {//遍历旧版本，如果新版本也有就存入 待导入数据字段行列
                    if (SQLTableValue.contains(tableValue)) {
                        SQLValue.add(tableValue);//存入容器中
                    }
                }

                //生成可用的表字段
                String tableChars = "";//表字段
                for (String str : SQLValue) {
                    tableChars += (str + ",");
                }
                tableChars = tableChars.substring(0, tableChars.length() - 1);//去掉SQLCode 最后一个无用逗号

                String inputSQL = "INSERT INTO " + newTable + "(" + tableChars + ") SELECT " + tableChars + " FROM " + oldTable;
                sqLiteDatabase2.execSQL(inputSQL);//ok
                if (isTransaction)
                    sqLiteDatabase2.setTransactionSuccessful();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (isTransaction)
                    sqLiteDatabase2.endTransaction();
            }

            return this;
        }

        /**
         * @param oldTable     旧表
         * @param oldTableList 旧表集合
         * @param newTable     新表
         * @param newTableList 新表集合
         * @return
         * @导入表的数据 (指定匹配相同表字段自动导入数据)
         */
        public synchronized Hibernate inputTableData(String oldTable, List<String> oldTableList, String newTable, List<String> newTableList) {
            if (sqLiteDatabase2 == null) return this;
            if (isTransaction)
                sqLiteDatabase2.beginTransaction();
            try {
                //如果当前数据库存在该表
                if (isTable(oldTable) && isTable(newTable)) {
                    //生成旧的可用表字段
                    String oldTableChar = "";
                    for (String str : oldTableList) {
                        oldTableChar += (str + ",");
                    }
                    oldTableChar = oldTableChar.substring(0, oldTableChar.length() - 1);//去掉SQLCode 最后一个无用逗号

                    //生成新的可用表字段
                    String newTableChar = "";
                    for (String str : newTableList) {
                        newTableChar += (str + ",");
                    }
                    newTableChar = newTableChar.substring(0, newTableChar.length() - 1);//去掉SQLCode 最后一个无用逗号
                    String inputSQL = "INSERT INTO " + newTable + "(" + newTableChar + ") SELECT " + oldTableChar + " FROM " + oldTable;
                    sqLiteDatabase2.execSQL(inputSQL);//ok
                    if (isTransaction)
                        sqLiteDatabase2.setTransactionSuccessful();
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (isTransaction)
                    sqLiteDatabase2.endTransaction();
            }

            return this;
        }

        /**
         * @param oldTable     旧表
         * @param oldTableList 旧表集合
         * @param newTable     新表
         * @param newTableList 新表集合
         * @return
         * @导入表的数据 (指定匹配相同表字段自动导入数据)
         */
        public synchronized Hibernate inputTableData(Class<?> oldTableClass, List<String> oldTableList, Class<?> newTableClass, List<String> newTableList) {
            if (sqLiteDatabase2 == null) return this;
            if (isTransaction)
                sqLiteDatabase2.beginTransaction();
            try {
                String oldTable = oldTableClass.getSimpleName();
                String newTable = newTableClass.getSimpleName();

                if (isTable(oldTable) && isTable(newTable)) {//如果当前数据库存在该表

                    //生成旧的可用表字段
                    String oldTableChar = "";
                    for (String str : oldTableList) {
                        oldTableChar += (str + ",");
                    }
                    oldTableChar = oldTableChar.substring(0, oldTableChar.length() - 1);//去掉SQLCode 最后一个无用逗号

                    //生成新的可用表字段
                    String newTableChar = "";
                    for (String str : newTableList) {
                        newTableChar += (str + ",");
                    }
                    newTableChar = newTableChar.substring(0, newTableChar.length() - 1);//去掉SQLCode 最后一个无用逗号


                    String inputSQL = "INSERT INTO " + newTable + "(" + newTableChar + ") SELECT " + oldTableChar + " FROM " + oldTable;
                    sqLiteDatabase2.execSQL(inputSQL);//ok
                    if (isTransaction)
                        sqLiteDatabase2.setTransactionSuccessful();
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (isTransaction)
                    sqLiteDatabase2.endTransaction();
            }

            return this;
        }

        /**
         * 返回List或Map
         *
         * @param type
         * @param value
         * @param <T>
         * @return
         */
        public static Object returnListOrMap(Class<?> type, String value) {
            if (type == List.class) {
                if (value == null || "null".equals(value)) return null;
                //如果是 List java.lang.String[1111, 2222, 3333]
                String valueType = value.substring(0, value.indexOf("["));
                String valueData = value.substring(value.indexOf("[") + 1, value.length() - 1);
                String[] arrayValue = valueData.split(",");

                if (valueType == null || valueType.length() == 0) return null;

                switch (valueType) {
                    case "java.lang.String":
                        List<String> strList = new ArrayList<String>();
                        for (String str : arrayValue) {
                            strList.add(str);
                        }
                        return strList;
                    case "java.lang.Integer":
                        List<Integer> intList = new ArrayList<Integer>();
                        for (String str : arrayValue) {
                            intList.add(Integer.parseInt(str));
                        }
                        return intList;
                    case "java.lang.Boolean":
                        List<Boolean> booleanList = new ArrayList<Boolean>();
                        for (String str : arrayValue) {
                            booleanList.add(Boolean.parseBoolean(str));
                        }
                        return booleanList;
                    case "java.lang.Double":
                        List<Double> doubleList = new ArrayList<Double>();
                        for (String str : arrayValue) {
                            doubleList.add(Double.parseDouble(str));
                        }
                        return doubleList;
                    case "java.lang.Float":
                        List<Float> floatList = new ArrayList<Float>();
                        for (String str : arrayValue) {
                            floatList.add(Float.parseFloat(str));
                        }
                        return floatList;
                    case "java.sql.Time":
                        List<Time> timeList = new ArrayList<Time>();
                        for (String str : arrayValue) {
                            SimpleDateFormat format2 = new SimpleDateFormat("hh:mm:ss");// 格式化类型
                            Date d2 = null;
                            try {
                                d2 = format2.parse(str);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            Time startTimeFmt = new Time(d2.getTime());
                            timeList.add(startTimeFmt);
                        }
                        return timeList;
                    case "java.util.Date":
                    case "java.sql.Date":
                        List<Date> dateList = new ArrayList<Date>();
                        for (String str : arrayValue) {
                            try {
                                Date date = new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy", Locale.US).parse(str);
                                dateList.add(date);
                            } catch (ParseException e) {
                                e.printStackTrace();
                            }
                        }
                        return dateList;
                    case "java.lang.Long":
                        List<Long> longList = new ArrayList<Long>();
                        for (String str : arrayValue) {
                            longList.add(Long.parseLong(str));
                        }
                        return longList;
                    case "[B"://byte数组
                        List<Object> byteArrayList = new ArrayList<Object>();
                        for (String str : arrayValue) {
                            byteArrayList.add(str);
                        }
                        return byteArrayList;
                    case "java.util.ArrayList": {
                        //解析二级
                        valueData = valueData.substring(1, valueData.length() - 1);
                        String[] split = valueData.split("\\], \\[");
                        List<Object> listList = new ArrayList<Object>();
                        for (String str : split) {
                            List<Object> list = new ArrayList<Object>();
                            String[] split1 = str.split(", ");
                            for (String str1 : split1) {
                                if (str1 != null) {
                                    list.add(str1);
                                } else {
                                    list.add(str1);
                                }
                            }
                            listList.add(list);
                        }
                        return listList;
                    }
                    case "java.util.ArrayMap": {
                        //解析二级 Map {key1=value1, key2=value2}, {2=2, 22=22}
                        List<Object> mapList = new ArrayList<Object>();
                        valueData = valueData.substring(1, valueData.length() - 1);
                        String[] split = valueData.split("\\}, \\{");//key1=value1, key2=value2}, {2=2, 22=22
                        for (String str : split) {
                            Map<Object, Object> map = new ArrayMap<>();
                            String[] split1 = str.split(", ");//key1=value1, key2=value2
                            for (String str1 : split1) {
                                String[] split2 = str1.split("=");//key1=value1
                                map.put(split2[0], split2[1]);
                            }
                            mapList.add(map);
                        }
                        return mapList;
                    }
                    default: {
                        //非基础类型的数据处理

                        //获取集合中实体类的数据类型
                        Class<?> clazz = null;
                        try {
                            clazz = Class.forName(valueType);
                        } catch (ClassNotFoundException e1) {
                            e1.printStackTrace();
                        }

                        //解析集合数据
                        arrayValue = valueData.split("\\},\\{");

                        //生成集合数据并返回
                        List<Object> mapList = new ArrayList<Object>();
                        for (int i = 0; i < arrayValue.length; i++) {
                            String str = arrayValue[i];
                            if (i == 0) {
                                str = str + "}";
                            } else if (i == arrayValue.length - 1) {
                                str = "{" + str;
                            } else {
                                str = "{" + str + "}";
                            }
                            Object o = null;
                            try {
                                o = JSON.fromJson2(str, clazz);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            mapList.add(o);
                        }
                        return mapList;
                    }
                }


            } else if (type == Map.class) {
                if (value == null || "null".equals(value)) return null;
                //如果是 Map java.lang.String[key1, key2, key3]
                //          java.lang.String[1号, 2号, 3号]

                String[] split = value.split("\n");
                if (split.length != 2) {
                    return null;
                }

                String keys = split[0];//map-key
                String values = split[1];//map-value

                // Key 解析
                int keysIndex = keys.indexOf("[");//解析普通类型
                if (keysIndex == -1) {
                    keysIndex = keys.indexOf("{");//解析特殊类型
                }
                String keysType = keys.substring(0, keysIndex);
                String keysData = keys.substring(keysIndex + 1, keys.length() - 1);
                String[] arraykeysData = keysData.split(",");//解析待带入的key值

                // value 解析
                int valuesIndex = values.indexOf("[");//解析普通类型
                if (valuesIndex == -1) {
                    valuesIndex = values.indexOf("{");//解析特殊类型
                }
                String valuesType = values.substring(0, valuesIndex);
                String valuesData = values.substring(valuesIndex + 1, values.length() - 1);

                Map<Object, Object> map = new ArrayMap<>();
                Class<?> keysTypeClass = null;
                Class<?> valuesTypeClass = null;
                try {
                    keysTypeClass = Class.forName(keysType);
                    valuesTypeClass = Class.forName(valuesType);
                } catch (ClassNotFoundException e) {
                    e.printStackTrace();
                }

                //解析key数据
                String[] keysDataArray = null;
                if (returnType(keysTypeClass) == null) {
                    //特殊类型
                    keysDataArray = keysData.split("\\},\\{");
                } else {
                    //普通类型
                    keysDataArray = keysData.split(", ");
                }

                //解析value数据
                String[] valuesDataArray = null;
                if (returnType(valuesTypeClass) == null) {
                    //特殊类型
                    valuesDataArray = valuesData.split("\\},\\{");

                } else {
                    //普通类型
                    valuesDataArray = valuesData.split(", ");
                }


                Object keyObject = null;
                Object valueObject = null;

                //生成Map
                for (int i = 0; i < keysDataArray.length; i++) {

                    String keyStr = keysDataArray[i];
                    String valueStr = valuesDataArray[i];

                    //如果key是特殊类型就做特殊处理
                    if (returnType(keysTypeClass) == null) {
                        if (i == 0) {
                            keyStr += "}";
                        } else if (i == keysDataArray.length - 1) {
                            keyStr = "{" + keyStr;
                        } else {
                            keyStr = "{" + keyStr + "}";
                        }
                        try {
                            keyObject = JSON.fromJson2(keyStr, keysTypeClass);
                        } catch (Exception e) {
                            e.printStackTrace();
                            keyObject = keyStr.toString();
                        }
                    } else {
                        keyObject = keyStr.toString();
                    }

                    //如果value是特殊类型就做特殊处理
                    if (returnType(valuesTypeClass) == null) {
                        if (i == 0) {
                            valueStr += "}";
                        } else if (i == keysDataArray.length - 1) {
                            valueStr = "{" + valueStr;
                        } else {
                            valueStr = "{" + valueStr + "}";
                        }

                        try {
                            valueObject = JSON.fromJson2(valueStr, valuesTypeClass);
                        } catch (Exception e) {
                            e.printStackTrace();
                            valueObject = valueStr.toString();
                        }

                    } else {
                        valueObject = valueStr.toString();
                    }

                    map.put(keyObject, valueObject);


                }

                return map;

            }
            return null;
        }

        /**
         * 返回类型
         *
         * @param type
         * @return
         */
        public static Class returnType(Class<?> type) {

            switch (type.getName()) {
                case "java.lang.String":
                    return String.class;
                case "java.lang.Integer":
                    return Integer.class;
                case "java.lang.Boolean":
                    return Boolean.class;
                case "java.lang.Double":
                    return Double.class;
                case "java.lang.Float":
                    return Float.class;
                case "java.sql.Time":
                    return Time.class;
                case "java.util.Date":
                case "java.sql.Date":
                    return Date.class;
                case "java.lang.Long":
                    return Long.class;
                case "[B"://byte数组
                    return Byte.class;
                case "java.util.ArrayList": {
                    return ArrayList.class;
                }
                case "java.util.ArrayMap": {
                    return ArrayMap.class;
                }
                default:
                    //特殊类型
                    return null;
            }
        }

        /**
         * 返回类型
         *
         * @param type
         * @return
         */
        private Object returnTypeDataValue(Object objValue, Class<?> type) {
            if (objValue == null) return null;

            String objValueStr = objValue.toString();

            try {
                switch (type.getName()) {
                    case "java.lang.String":
                        return String.valueOf(objValue);
                    case "java.lang.Integer":
                        return Integer.parseInt(objValueStr);
                    case "java.lang.Boolean":
                        return Boolean.parseBoolean(objValueStr);
                    case "java.lang.Double":
                        return Double.parseDouble(objValueStr);
                    case "java.lang.Float":
                        return Float.parseFloat(objValueStr);
                    case "java.sql.Time":
                        SimpleDateFormat format2 = new SimpleDateFormat("hh:mm:ss");// 格式化类型
                        Date d2 = null;
                        try {
                            d2 = format2.parse(objValueStr);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        Time startTimeFmt = new Time(d2.getTime());
                        return startTimeFmt;
                    case "java.util.Date":
                    case "java.sql.Date":
                        try {
                            Date date = new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy", Locale.US).parse(objValueStr);
                            return date;
                        } catch (ParseException e) {
                            e.printStackTrace();
                            return null;
                        }
                    case "java.lang.Long":
                        return Long.parseLong(objValueStr);
                    case "[B"://byte数组
                        return Byte.parseByte(objValueStr);
                    default:
                        //特殊类型
                        return null;
                }
            } catch (Exception e) {
                return null;
            }

        }

        /**
         * ======================================================== 表的 聚合函数 代码 ========================================
         */

        private boolean status = false;//当前增删查改的状态
        private int statusNumber = 0;//数据库操作返回值

        // SQL 操作属性
        private String conditions = null;           //条件
        private String groupBy = null;
        private String having = null;
        private String[] values = null;             //条件值
        private String[] returnValues = null;       //返回字段
        private String orderByStr = null;           //排序
        private String limitStr = null;             //限量
        private boolean isLast = false;             //是否查询到最后一条 默认从第一条查询
        private boolean saveAddUpdateKey = false;   //保存与修改主键是否已被创建
        //        private boolean isEncryption;//是否加密
        private static String passWord = "";//数据加密密码


        //初始化数据库参数
        private void initSqlParameter() {
            status = false;
            statusNumber = 0;
            saveAddUpdateKey = false;
        }

        //释放数据库参数
        private void closeSqlParameter() {
            values = null;
            conditions = null;
            returnValues = null;
            groupBy = null;
            having = null;
            orderByStr = null;
            limitStr = null;
        }

        /**
         * 设置返回参数
         *
         * @param returnValues
         * @return
         */
        public Hibernate select(String... returnValues) {
            if (returnValues != null && returnValues.length == 0) returnValues = null;
            this.returnValues = returnValues;
            return this;
        }

        /**
         * 条件参数
         *
         * @param conditions 条件
         * @param values     值
         * @return
         */
        public Hibernate where(Object conditions, String... values) {

            if (conditions == null || values == null || values.length == 0) {
                return this;
            }

            if (conditions != null && conditions instanceof String[]) {
                String[] strArray = (String[]) conditions;
                if (strArray.length == 0) return this;
            }

            //监测条件
            String conditionsType = conditions.getClass().getSimpleName();

            if (!conditionsType.equals("String") && !conditionsType.equals("String[]")) {
                err(getLineInfo(LOG.lineInfoIndex), "条件参数 conditionsType 类型仅支持String 与 String[]，操作失败");
                status = false;
                return this;
            }

            //解析查询条件 conditions （String）
            String condition = "";//解析筛选条件
            if (conditionsType.equals("String[]")) {
                for (String str : (String[]) conditions) {
                    if (str.contains("?")) {
                        condition += (str + " and");
                    } else {
                        condition += (str + " = ? and ");
                    }

                }

                //去掉最后一个多余 and
                condition = condition.substring(0, condition.lastIndexOf("and"));
            } else if (conditionsType.equals("String")) {
                condition = (String) conditions;
            }

            this.conditions = condition;//1
            this.values = values;
            return this;
        }

        /**
         * 根据 orderByStr 进行倒序
         * <p>
         * 实例:limit(4).flashback("loginID"); 返回最后4条数据
         *
         * @param orderByStr 根据表的该字段返回最后的数据(倒序)
         * @return
         */
        public Hibernate flashback(String orderByStr) {
            if (orderByStr == null || orderByStr.length() == 0) return this;
            this.orderByStr = orderByStr + " desc";
            return this;
        }

        public Hibernate groupBy(String groupBy) {
            if (groupBy == null || groupBy.length() == 0) return this;
            this.groupBy = groupBy;
            return this;
        }

        public Hibernate having(String having) {
            if (having == null || having.length() == 0) return this;
            this.having = having;
            return this;
        }

        /**
         * 当前页数显示多少条数据
         * 实例：
         * new int[]{20} 一个数表示，当前返回多少条数据
         * new int[]{1,100} 两个数表示，第一页显示100条数据
         *
         * @param limitStr
         * @return
         */
        public Hibernate limit(int[] limitStr) {
            if (limitStr == null || limitStr.length < 1 || limitStr.length > 2) return this;
            if (limitStr.length == 1) {
                this.limitStr = limitStr[0] + "";
            } else if (limitStr.length == 2) {
                this.limitStr = limitStr[0] + "," + limitStr[1];
            }
            return this;
        }

        public boolean isLast() {
            return isLast;
        }

        /**
         * 是否查询最后一个内容
         *
         * @param last 默认为 false
         */
        public Hibernate isLast(boolean last) {
            isLast = last;
            return this;
        }

        /**
         * @return 当前数据库操作后的状态
         */
        public boolean isStatus() {
            return status;
        }

        /**
         * @return 数据库操作返回值
         */
        public int getStatus() {
            return statusNumber;
        }

        /**
         * 保存和修改提取的添加父类的方法
         *
         * @param bean
         * @param class1
         * @param contentValues
         * @param <T>
         */
        private <T> void saveSuper(T bean, Class class1, ContentValues contentValues) {

            Class superclass = class1.getSuperclass();

            //递归去执行父类
            if (Object.class != class1) {
                saveSuper(bean, superclass, contentValues);
            } else {
                return;
            }

            String simpleName = class1.getSimpleName();//获取表名

            //获取所有成员变量
            Field[] fields = class1.getDeclaredFields();
            for (Field field : fields) {
                field.setAccessible(true); // 设置属性是可以访问的
                try {
                    Class<?> type = field.getType();//获取字段类型
                    String name = field.getName();//获取属性名
                    Object val = field.get(bean);// 得到此属性的值

                    //判断当前字段子表是否存在，如果存在，那就优先录用子表的，跳过本次解析
                    if (contentValues.containsKey(name)) {
                        continue;
                    }

                    GT_Column gt_Column = field.getAnnotation(GT_Column.class);//如果是不被初始化的那就进行跳过解析
                    if (gt_Column != null && gt_Column.setNotInit()) {
                        continue;
                    }

                    GT_Key annotation = field.getAnnotation(GT_Key.class);
                    if (annotation != null) {
                        //如果主键未被解析过那就进行再父类解析,如果这个字段是Key并且是 "自增",或是不映射字段 的就跳过
                        if (saveAddUpdateKey || annotation.setAutoincrement())
                            continue;
                    }

                    if (String.class == type) {
                        if (val == null) {
                            contentValues.put(name, (String) null);
                            continue;
                        }
                        contentValues.put(name, (String) val);
                    } else if (int.class == type || Integer.class == type) {
                        if (val == null) {
                            contentValues.put(name, 0);
                            continue;
                        }
                        contentValues.put(name, (int) val);
                    } else if (boolean.class == type || Boolean.class == type) {
                        if (val == null) {
                            contentValues.put(name, false);
                            continue;
                        }
                        contentValues.put(name, (boolean) val);
                    } else if (double.class == type || Double.class == type) {
                        if (val == null) {
                            contentValues.put(name, 0);
                            continue;
                        }
                        contentValues.put(name, (double) val);
                    } else if (float.class == type || Float.class == type) {
                        if (val == null) {
                            contentValues.put(name, 0);
                            continue;
                        }
                        contentValues.put(name, (float) val);
                    } else if (Time.class == type) {
                        if (val == null) {
                            contentValues.put(name, (String) null);
                            continue;
                        }
                        contentValues.put(name, String.valueOf((Time) val));
                    } else if (Date.class == type || java.sql.Date.class == type) {
                        if (val == null) {
                            contentValues.put(name, (String) null);
                            continue;
                        }
                        contentValues.put(name, String.valueOf((Date) val));
                    } else if (long.class == type || Long.class == type) {
                        if (val == null) {
                            contentValues.put(name, 0);
                            continue;
                        }
                        contentValues.put(name, (long) val);
                    } else if (short.class == type || Short.class == type) {
                        if (val == null) {
                            contentValues.put(name, 0);
                            continue;
                        }
                        contentValues.put(name, (short) val);
                    } else if (byte[].class.equals(type)) {
                        contentValues.put(name, (byte[]) val);
                    }

                    //数组类型
                    else if (String[].class == type) {
                        //String[]
                        String valueData = JSON.toJson2(val);
                        contentValues.put(name, valueData);
                    } else if (int[].class == type) {
                        //int[]
                        String valueData = JSON.toJson2(val);
                        contentValues.put(name, valueData);
                    } else if (boolean[].class == type) {
                        //boolean[]
                        String valueData = JSON.toJson2(val);
                        contentValues.put(name, valueData);
                    } else if (double[].class == type) {
                        //double[]
                        String valueData = JSON.toJson2(val);
                        contentValues.put(name, valueData);
                    } else if (float[].class == type) {
                        //float[]
                        String valueData = JSON.toJson2(val);
                        contentValues.put(name, valueData);
                    } else if (long[].class == type) {
                        //long[]
                        String valueData = JSON.toJson2(val);
                        contentValues.put(name, valueData);
                    } else if (short[].class == type) {
                        //short[]
                        String valueData = JSON.toJson2(val);
                        contentValues.put(name, valueData);
                    } else if (List.class == type || Map.class == type) { //存储 List 与 Map 类型的
                        if (val == null) {
                            contentValues.put(name, (String) null);
                            continue;
                        }

                        String data = "";
                        //如果是 List 类型的存储
                        if (val.getClass() == ArrayList.class) {
                            ArrayList<?> list = (ArrayList<?>) val;
                            if (list.size() != 0) {
                                Object o = list.get(0);
                                if (o != null) {
                                    Class aClass = returnType(o.getClass());//返回当前类型
                                    if (aClass == null) {//如果是特殊类型 ，那就进过json 处理 再存储
                                        String jsonStr = JSON.toJson2(val);//将 bean 转为 json
                                        data = o.getClass().getName() + jsonStr;
                                    } else {
                                        data = aClass.getName() + val.toString();
                                    }
                                } else {
                                    data = val.toString();
                                }
                            } else {
                                data = val.toString();
                            }
                        } else if (val.getClass() == ArrayMap.class) {
                            Set<?> keys = ((ArrayMap<?, ?>) val).keySet();
                            Collection<?> values = ((ArrayMap<?, ?>) val).values();
                            if (values.size() != 0) {
                                Object keyObj = keys.iterator().next();
                                Object valObj = values.iterator().next();
                                if (keyObj != null && valObj != null) {

                                    String keysData = "";
                                    String valuesData = "";

                                    if (returnType(keyObj.getClass()) == null) {//如果是特殊类型 ，那就进过json 处理 再存储
                                        keysData = JSON.toJson2(keys);//将 bean 转为 json;
                                    } else {
                                        keysData = keys.toString();
                                    }

                                    if (returnType(valObj.getClass()) == null) {//如果是特殊类型 ，那就进过json 处理 再存储
                                        valuesData = JSON.toJson2(values);//将 bean 转为 json;
                                    } else {
                                        valuesData = values.toString();
                                    }

                                    data = keyObj.getClass().getName() + keysData + "\n" + valObj.getClass().getName() + valuesData;
                                } else {
                                    data = val.toString();
                                }
                            } else {
                                data = val.toString();
                            }
                        }

                        contentValues.put(name, data);
                    } else {
                        String jsonStr = JSON.toJson2(val);//将 bean 转为 json
                        contentValues.put(name, jsonStr);
                    }

                } catch (IllegalArgumentException | IllegalAccessException e) {
                    e.printStackTrace();
                    errs(getLineInfo(LOG.lineInfoIndex) + "数据出现问题");
                    status = false;
                    return;
                }
            }

            return;
        }

        /**
         * 保存和修改的操作核心方法
         *
         * @param bean
         * @param contentValues
         * @param <T>
         */
        private <T> void saveAddUpdateOperation(T bean, ContentValues contentValues) {
            Class<?> class1 = bean.getClass();//当前类
            //获取所有成员变量
            Field[] fields = class1.getDeclaredFields();
            //解析并设置保存的数据
            for (Field field : fields) {
                field.setAccessible(true); // 设置属性是可以访问的
                try {
                    Class<?> type = field.getType();//获取字段类型
                    String name = field.getName();//获取属性名
                    Object val = field.get(bean);// 得到此属性的值
                    if (val == null) continue;

                    GT_Column gt_Column = field.getAnnotation(GT_Column.class);//如果是不被初始化的那就进行跳过解析
                    if (gt_Column != null && gt_Column.setNotInit()) {
                        continue;
                    }

                    GT_Key annotation = field.getAnnotation(GT_Key.class);
                    if (annotation != null) {//如果这个字段是Key并且是 "自增",或是不映射字段 的就跳过
                        saveAddUpdateKey = true;//已被主键标识过
                        if (annotation.setAutoincrement()) {//如果是自增的那就直接跳过
                            continue;
                        }
                    }

                    //解析多个默认值，并随机选择后设置为默认值
                    boolean defaultOneValue = false;//是否是一个默认值
                    if (gt_Column != null) {
                        String[] defaultValues = gt_Column.setDefaultValue();
                        if (defaultValues.length > 1) {
                            int anInt = GT_Random.getInt(0, defaultValues.length);
                            String defaultValue = defaultValues[anInt];
                            if (val == null || !String.valueOf(val).equals("0")) {
                                val = defaultValues[anInt];//将默认值赋给插入的数据
                            }
                        } else if (defaultValues.length == 1) {
                            defaultOneValue = true;
                        }
                    }

                    //插入普通字段
                    if (String.class == type) {
                        if (defaultOneValue && val == null) continue;
                        //加密数据

                        if (gt_Column != null && gt_Column.setIsEncryption()) {
                            val = Encryption.DES.encryptPassword(val, passWord);
                        }

                        /*if (isEncryption) {
                            if(gt_Property == null){
                                val = GT.Encryption.DES.encryptPassword(val, passWord);
                            }else if(gt_Property.setIsEncryption()){
                                val = GT.Encryption.DES.encryptPassword(val, passWord);
                            }
                        }*/
                        contentValues.put(name, (String) val);
                    } else if (short.class == type || Short.class == type) {
                        short value = Short.parseShort(val.toString());
                        if (defaultOneValue && value == 0) continue;
                        contentValues.put(name, value);
                    } else if (int.class == type || Integer.class == type) {
                        int value = Integer.parseInt(val.toString());
                        if (defaultOneValue && value == 0) continue;
                        contentValues.put(name, value);
                    } else if (long.class == type || Long.class == type) {
                        long value = Long.parseLong(val.toString());
                        if (defaultOneValue && value == 0) continue;
                        contentValues.put(name, value);

                    } else if (boolean.class == type || Boolean.class == type) {
                        boolean value = Boolean.parseBoolean(val.toString());
                        if (defaultOneValue && !value) continue;
                        contentValues.put(name, value);

                    } else if (float.class == type || Float.class == type) {
                        float value = Float.parseFloat(val.toString());
                        if (defaultOneValue && value == 0) continue;
                        contentValues.put(name, value);

                    } else if (double.class == type || Double.class == type) {
                        double value = Double.parseDouble(val.toString());
                        if (defaultOneValue && value == 0) continue;
                        contentValues.put(name, value);

                    } else if (Time.class == type) {
                        if (val == null) continue;
                        contentValues.put(name, String.valueOf((Time) val));

                    } else if (Date.class == type || java.sql.Date.class == type) {
                        if (val == null) continue;
                        contentValues.put(name, String.valueOf((Date) val));

                    } else if (byte[].class.equals(type)) {
                        if (val == null) continue;
                        contentValues.put(name, (byte[]) val);
                    }


                    //数组类型
                    else if (String[].class == type ||
                            int[].class == type ||
                            boolean[].class == type ||
                            double[].class == type ||
                            float[].class == type ||
                            long[].class == type ||
                            short[].class == type) {
                        contentValues.put(name, JSON.toJson2(val));//存储数组类型
                    }


                    //存储 List 与 Map 类型的
                    else if (List.class == type || Map.class == type) {
                        String data = "";
                        //如果是 List 类型的存储
                        if (val.getClass() == ArrayList.class) {
                            ArrayList<?> list = (ArrayList<?>) val;
                            if (list.size() != 0) {
                                Object o = list.get(0);
                                if (o != null) {
                                    Class aClass = returnType(o.getClass());//返回当前类型
                                    if (aClass == null) {//如果是特殊类型 ，那就进过json 处理 再存储
                                        String jsonStr = JSON.toJson2(val);//将 bean 转为 json
                                        data = o.getClass().getName() + jsonStr;
                                    } else {
                                        data = aClass.getName() + val.toString();
                                    }
                                } else {
                                    data = val.toString();
                                }
                            } else {
                                data = val.toString();
                            }
                        } else if (val.getClass() == ArrayMap.class) {
                            Set<?> keys = ((ArrayMap<?, ?>) val).keySet();
                            Collection<?> values = ((ArrayMap<?, ?>) val).values();
                            if (values.size() != 0) {
                                Object keyObj = keys.iterator().next();
                                Object valObj = values.iterator().next();
                                if (keyObj != null && valObj != null) {

                                    String keysData = "";
                                    String valuesData = "";

                                    if (returnType(keyObj.getClass()) == null) {//如果是特殊类型 ，那就进过json 处理 再存储
                                        keysData = JSON.toJson2(keys);//将 bean 转为 json;
                                    } else {
                                        keysData = keys.toString();
                                    }

                                    if (returnType(valObj.getClass()) == null) {//如果是特殊类型 ，那就进过json 处理 再存储
                                        valuesData = JSON.toJson2(values);//将 bean 转为 json;
                                    } else {
                                        valuesData = values.toString();
                                    }

                                    data = keyObj.getClass().getName() + keysData
                                            + "\n" +
                                            valObj.getClass().getName() + valuesData;
                                } else {
                                    data = val.toString();
                                }
                            } else {
                                data = val.toString();
                            }
                        }

                        contentValues.put(name, data);
                    }


                    //存储实体类
                    else {
                        // 装换实体类需要用规则的创建，构造、set、get、toString、都有才行
                        String jsonStr = JSON.toJson2(val);//将 bean 转为 json
                        //如果现有的JSON解析无效，那就使用更高级的JSON进行解析
//                        if (val != null && jsonStr == null || "null".equals(jsonStr) || jsonStr.length() == 0) {
//                            jsonStr = GsonUtils.toJson(val);
//                        }
                        contentValues.put(name, jsonStr);
                    }

                } catch (IllegalArgumentException | IllegalAccessException e) {
                    e.printStackTrace();
                    errs(getLineInfo(LOG.lineInfoIndex) + "数据出现问题");
                    status = false;
                    return;
                }
            }

            //优先遍历子表再去遍历父表
            Class<?> superclass = class1.getSuperclass();//获取父类
            //递归去执行父类
            if (Object.class != superclass) {
                saveSuper(bean, superclass, contentValues);//使用保存父类的方法进行保存
            }
        }

        //查询父类
        public static <T> void querySuper(T bean, Class<?> class1, String[] tableChar, Cursor cursor) {

            //递归查询父类字段
            Class<?> superclass = class1.getSuperclass();
            if (Object.class != superclass) {
                querySuper(bean, superclass, tableChar, cursor);
            } else {
                //如果已经到基类Object那就不再递归了
                return;
            }

            Field[] fields = superclass.getDeclaredFields();
            for (Field field : fields) {

                //用于解密
                GT_Column gt_Column = field.getAnnotation(GT_Column.class);

                String valueName = field.getName();
                Class<?> type = field.getType();
                field.setAccessible(true);
                for (String str : tableChar) {
                    Object obj = null;
                    if (str.equals(valueName)) {
                        if (String.class == type) {
                            String value = cursor.getString(cursor.getColumnIndex(valueName));
                            //解密
                            if (gt_Column != null && gt_Column.setIsEncryption()) {
                                value = Encryption.DES.decryptPassword(value, passWord);
                            }
                            obj = value;
                        } else if (int.class == type || Integer.class == type) {
                            int value = cursor.getInt(cursor.getColumnIndex(valueName));
                            obj = value;
                        } else if (boolean.class == type || Boolean.class == type) {
                            int value = cursor.getInt(cursor.getColumnIndex(valueName));// false:0   true:1
                            if (value == 1) {
                                obj = true;
                            } else if (value == 0) {
                                obj = false;
                            }
                        } else if (double.class == type || Double.class == type) {
                            double value = cursor.getDouble(cursor.getColumnIndex(valueName));
                            obj = value;
                        } else if (float.class == type || Float.class == type) {
                            float value = cursor.getFloat(cursor.getColumnIndex(valueName));
                            obj = value;
                        } else if (Time.class == type) {
                            String time = cursor.getString(cursor.getColumnIndex(valueName));
                            if (time == null || time.length() == 0) {
                                time = new Time(System.currentTimeMillis()).toString();
                            }
                            SimpleDateFormat format2 = new SimpleDateFormat("hh:mm:ss");// 格式化类型
                            Date d2 = null;
                            try {
                                d2 = format2.parse(time);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            Time startTimeFmt = new Time(d2.getTime());
                            obj = startTimeFmt;
                        } else if (Date.class == type || java.sql.Date.class == type) {
                            String value = cursor.getString(cursor.getColumnIndex(valueName));
                            try {
                                Date date = new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy", Locale.US).parse(value);
                                obj = date;
                            } catch (ParseException e) {
                                e.printStackTrace();
                            }
                        } else if (long.class == type || Long.class == type) {
                            long value = cursor.getLong(cursor.getColumnIndex(valueName));
                            obj = value;
                        } else if (short.class == type || Short.class == type) {
                            short value = cursor.getShort(cursor.getColumnIndex(valueName));
                            obj = value;
                        } else if (byte[].class.equals(type)) {
                            byte[] value = cursor.getBlob(cursor.getColumnIndex(valueName));
                            obj = value;
                        }


                        //数组类型
                        else if (String[].class == type) {
                            //String[]
                            String value = cursor.getString(cursor.getColumnIndex(valueName));
                            if (value == null) {
                                obj = null;
                            } else if ("[]".equals(value)) {
                                obj = new String[]{};
                            } else if (value.length() >= 5) {
                                obj = value.substring(2, value.length() - 2).split("\",\"");
                            }
                        } else if (int[].class == type) {
                            //int[]
                            String value = cursor.getString(cursor.getColumnIndex(valueName));
                            int[] intArr = null;
                            if (value == null) {
                                obj = null;
                            } else if ("[]".equals(value)) {
                                obj = new int[]{};
                            } else if (value.length() >= 3) {
                                value = value.substring(1, value.length() - 1);

                                if (value.indexOf(",") != -1) {
                                    String[] split = value.split(",");
                                    intArr = new int[split.length];
                                    for (int p = 0; p < split.length; p++) {
                                        intArr[p] = Integer.parseInt(split[p]);
                                    }
                                } else {
                                    intArr = new int[]{Integer.parseInt(value)};
                                }
                            }
                            obj = intArr;
                        } else if (boolean[].class == type) {
                            //boolean[]
                            String value = cursor.getString(cursor.getColumnIndex(valueName));
                            boolean[] booleanArr = null;
                            if (value == null) {
                                obj = null;
                            } else if ("[]".equals(value)) {
                                obj = new boolean[]{};
                            } else if (value.length() >= 3) {
                                value = value.substring(1, value.length() - 1);

                                if (value.indexOf(",") != -1) {
                                    String[] split = value.split(",");
                                    booleanArr = new boolean[split.length];
                                    for (int p = 0; p < split.length; p++) {
                                        booleanArr[p] = Boolean.parseBoolean(split[p]);
                                    }
                                } else {
                                    booleanArr = new boolean[]{Boolean.parseBoolean(value)};
                                }
                            }
                            obj = booleanArr;
                        } else if (double[].class == type) {
                            //double[]
                            String value = cursor.getString(cursor.getColumnIndex(valueName));
                            double[] doubleArr = null;
                            if (value == null) {
                                obj = null;
                            } else if ("[]".equals(value)) {
                                obj = new double[]{};
                            } else if (value.length() >= 3) {
                                value = value.substring(1, value.length() - 1);

                                if (value.indexOf(",") != -1) {
                                    String[] split = value.split(",");
                                    doubleArr = new double[split.length];
                                    for (int p = 0; p < split.length; p++) {
                                        doubleArr[p] = Double.parseDouble(split[p]);
                                    }
                                } else {
                                    doubleArr = new double[]{Double.parseDouble(value)};
                                }
                            }
                            obj = doubleArr;
                        } else if (float[].class == type) {
                            //float[]
                            String value = cursor.getString(cursor.getColumnIndex(valueName));
                            float[] floatArr = null;
                            if (value == null) {
                                obj = null;
                            } else if ("[]".equals(value)) {
                                obj = new float[]{};
                            } else if (value.length() >= 3) {
                                value = value.substring(1, value.length() - 1);

                                if (value.indexOf(",") != -1) {
                                    String[] split = value.split(",");
                                    floatArr = new float[split.length];
                                    for (int p = 0; p < split.length; p++) {
                                        floatArr[p] = Float.parseFloat(split[p]);
                                    }
                                } else {
                                    floatArr = new float[]{Float.parseFloat(value)};
                                }
                            }
                            obj = floatArr;
                        } else if (long[].class == type) {
                            //long[]
                            String value = cursor.getString(cursor.getColumnIndex(valueName));
                            long[] longArr = null;
                            if (value == null) {
                                obj = null;
                            } else if ("[]".equals(value)) {
                                obj = new long[]{};
                            } else if (value.length() >= 3) {
                                value = value.substring(1, value.length() - 1);

                                if (value.indexOf(",") != -1) {
                                    String[] split = value.split(",");
                                    longArr = new long[split.length];
                                    for (int p = 0; p < split.length; p++) {
                                        longArr[p] = Long.parseLong(split[p]);
                                    }
                                } else {
                                    longArr = new long[]{Long.parseLong(value)};
                                }
                            }
                            obj = longArr;
                        } else if (short[].class == type) {
                            //short[]
                            String value = cursor.getString(cursor.getColumnIndex(valueName));
                            short[] shortArr = null;
                            if (value == null) {
                                obj = null;
                            } else if ("[]".equals(value)) {
                                obj = new short[]{};
                            } else if (value.length() >= 3) {
                                value = value.substring(1, value.length() - 1);

                                if (value.indexOf(",") != -1) {
                                    String[] split = value.split(",");
                                    shortArr = new short[split.length];
                                    for (int p = 0; p < split.length; p++) {
                                        shortArr[p] = Short.parseShort(split[p]);
                                    }
                                } else {
                                    shortArr = new short[]{Short.parseShort(value)};
                                }
                            }
                            obj = shortArr;
                        } else if (List.class == type || Map.class == type) {

                            String value = cursor.getString(cursor.getColumnIndex(valueName));
                            if (value == null || "null".equals(value)) {
                                obj = null;
                            } else {
                                //第二次转换 List OR Map
                                obj = returnListOrMap(type, value);
                            }
                        } else {
//                                    err(getLineInfo(LOG.lineInfoIndex), "解析的表文件 [" + tableName + "] 类中的字段 [" + field + "] 出现不支持类型。");
                            String value = cursor.getString(cursor.getColumnIndex(valueName));
                            String name = field.getName();//获取属性名
                            Object val = null;
                            try {
                                val = field.get(bean);// 得到此属性的值
                            } catch (IllegalAccessException e) {
                                e.printStackTrace();
                            }
                            try {
                                obj = JSON.fromJson2(value, type);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                        }
                    }

                    try {
                        if (obj != null) {
                            field.set(bean, obj);
                        }
                        continue;
                    } catch (Exception e) {
//                                    e.printStackTrace();
                        errs("查询数据中出现了无法转换的类型:" + e);
                    }
                }

            }
        }

        //查询核心方法
        private <T> List<T> queryCoreAlgorithm(Class<T> tableNameClass, boolean isQueryAll) {
            String tableName = tableNameClass.getSimpleName();//获取表名称

            //判断这个表是否存在
            if (!isTable(tableName)) {
                err(getLineInfo(LOG.lineInfoIndex), "查询的表不存在，操作失败");
                status = false;
                return null;
            }

            //获取查询该表的返回字段
            if (returnValues == null || returnValues.length == 0) {
                List<String> tableAllValue = getTableAllValue(tableName, sqLiteDatabase2);
                if (tableAllValue != null && tableAllValue.size() > 0) {
                    returnValues = new String[tableAllValue.size()];
                    for (int i = 0; i < tableAllValue.size(); i++) {
                        returnValues[i] = tableAllValue.get(i);
                    }
                }
            }
            List<T> beanList = new ArrayList<T>();//创建容器

            //初始化数据库参数
            initSqlParameter();

            //反射生成对象并注入
            if (sqLiteDatabase2 == null) return null;

            Cursor cursor = sqLiteDatabase2.query(tableName, returnValues, conditions, values, groupBy, having, orderByStr, limitStr);//ok
            if (cursor != null && cursor.getCount() > 0) {
                if (isLast()) {
                    cursor.moveToLast();//移动到最后一位
                } else {
                    cursor.moveToFirst();//移动到首位
                }
                for (int i = 0; i < cursor.getCount(); i++) {
                    T bean = null;//定义泛型
                    try {
                        bean = tableNameClass.newInstance();//实体化
                    } catch (IllegalAccessException e) {
                        err(getLineInfo(LOG.lineInfoIndex), "数据库操作 实体类缺少无参构造，操作失败e：" + e);
                        status = false;
                        return null;
                    } catch (InstantiationException e) {
                        e.printStackTrace();
                        err(getLineInfo(LOG.lineInfoIndex), "数据库操作 实体类缺少无参构造，操作失败e：" + e);
                        status = false;
                        return null;
                    }

                    //递归查询父类
                    querySuper(bean, tableNameClass, returnValues, cursor);

                    Field[] fields = bean.getClass().getDeclaredFields();
                    for (Field field : fields) {

                        //用于解密
                        GT_Column gt_Column = field.getAnnotation(GT_Column.class);//如果是不被初始化的那就进行跳过解析

                        String valueName = field.getName();
                        Class<?> type = field.getType();
                        field.setAccessible(true);
                        if (returnValues != null) {
                            for (String str : returnValues) {
                                Object obj = null;
                                if (str.equals(valueName)) {
                                    if (String.class == type) {
                                        String value = cursor.getString(cursor.getColumnIndex(valueName));
//                                      //解密
                                        if (gt_Column != null && gt_Column.setIsEncryption()) {
                                            value = Encryption.DES.decryptPassword(value, passWord);
                                        }
                                        obj = value;
                                    } else if (int.class == type || Integer.class == type) {
                                        int value = cursor.getInt(cursor.getColumnIndex(valueName));
                                        obj = value;
                                    } else if (boolean.class == type || Boolean.class == type) {
                                        int value = cursor.getInt(cursor.getColumnIndex(valueName));// false:0   true:1
                                        if (value == 1) {
                                            obj = true;
                                        } else if (value == 0) {
                                            obj = false;
                                        }
                                    } else if (double.class == type || Double.class == type) {
                                        double value = cursor.getDouble(cursor.getColumnIndex(valueName));
                                        obj = value;
                                    } else if (float.class == type || Float.class == type) {
                                        float value = cursor.getFloat(cursor.getColumnIndex(valueName));
                                        obj = value;
                                    } else if (Time.class == type) {
                                        String time = cursor.getString(cursor.getColumnIndex(valueName));
                                        if (time == null || time.length() == 0) {
                                            obj = null;
                                            continue;
                                        }
                                        SimpleDateFormat format2 = new SimpleDateFormat("hh:mm:ss");// 格式化类型
                                        Date d2 = null;
                                        try {
                                            d2 = format2.parse(time);
                                        } catch (Exception e) {
                                            e.printStackTrace();
                                        }
                                        Time startTimeFmt = new Time(d2.getTime());
                                        obj = startTimeFmt;
                                    } else if (Date.class == type || java.sql.Date.class == type) {
                                        String value = cursor.getString(cursor.getColumnIndex(valueName));
                                        if (value == null || value.length() == 0) {
                                            obj = null;
                                            continue;
                                        }
                                        try {
                                            Date date = new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy", Locale.US).parse(value);
                                            obj = date;
                                        } catch (ParseException e) {
                                            e.printStackTrace();
                                        }
                                    } else if (long.class == type || Long.class == type) {
                                        long value = cursor.getLong(cursor.getColumnIndex(valueName));
                                        obj = value;
                                    } else if (short.class == type || Short.class == type) {
                                        short value = cursor.getShort(cursor.getColumnIndex(valueName));
                                        obj = value;
                                    } else if (byte[].class.equals(type)) {
                                        byte[] value = cursor.getBlob(cursor.getColumnIndex(valueName));
                                        obj = value;
                                    }


                                    //数组类型
                                    else if (String[].class == type) {
                                        //String[]
                                        String value = cursor.getString(cursor.getColumnIndex(valueName));
                                        if (value == null) {
                                            obj = null;
                                        } else if ("[]".equals(value)) {
                                            obj = new String[]{};
                                        } else if (value.length() >= 5) {
                                            obj = value.substring(2, value.length() - 2).split("\",\"");
                                        }
                                    } else if (int[].class == type) {
                                        //int[]
                                        String value = cursor.getString(cursor.getColumnIndex(valueName));
                                        int[] intArr = null;
                                        if (value == null) {
                                            obj = null;
                                        } else if ("[]".equals(value)) {
                                            obj = new int[]{};
                                        } else if (value.length() >= 3) {
                                            value = value.substring(1, value.length() - 1);

                                            if (value.indexOf(",") != -1) {
                                                String[] split = value.split(",");
                                                intArr = new int[split.length];
                                                for (int p = 0; p < split.length; p++) {
                                                    intArr[p] = Integer.parseInt(split[p]);
                                                }
                                            } else {
                                                intArr = new int[]{Integer.parseInt(value)};
                                            }
                                        }
                                        obj = intArr;
                                    } else if (boolean[].class == type) {
                                        //boolean[]
                                        String value = cursor.getString(cursor.getColumnIndex(valueName));
                                        boolean[] booleanArr = null;
                                        if (value == null) {
                                            obj = null;
                                        } else if ("[]".equals(value)) {
                                            obj = new boolean[]{};
                                        } else if (value.length() >= 3) {
                                            value = value.substring(1, value.length() - 1);

                                            if (value.indexOf(",") != -1) {
                                                String[] split = value.split(",");
                                                booleanArr = new boolean[split.length];
                                                for (int p = 0; p < split.length; p++) {
                                                    booleanArr[p] = Boolean.parseBoolean(split[p]);
                                                }
                                            } else {
                                                booleanArr = new boolean[]{Boolean.parseBoolean(value)};
                                            }
                                        }
                                        obj = booleanArr;
                                    } else if (double[].class == type) {
                                        //double[]
                                        String value = cursor.getString(cursor.getColumnIndex(valueName));
                                        double[] doubleArr = null;
                                        if (value == null) {
                                            obj = null;
                                        } else if ("[]".equals(value)) {
                                            obj = new double[]{};
                                        } else if (value.length() >= 3) {
                                            value = value.substring(1, value.length() - 1);

                                            if (value.indexOf(",") != -1) {
                                                String[] split = value.split(",");
                                                doubleArr = new double[split.length];
                                                for (int p = 0; p < split.length; p++) {
                                                    doubleArr[p] = Double.parseDouble(split[p]);
                                                }
                                            } else {
                                                doubleArr = new double[]{Double.parseDouble(value)};
                                            }
                                        }
                                        obj = doubleArr;
                                    } else if (float[].class == type) {
                                        //float[]
                                        String value = cursor.getString(cursor.getColumnIndex(valueName));
                                        float[] floatArr = null;
                                        if (value == null) {
                                            obj = null;
                                        } else if ("[]".equals(value)) {
                                            obj = new float[]{};
                                        } else if (value.length() >= 3) {
                                            value = value.substring(1, value.length() - 1);

                                            if (value.indexOf(",") != -1) {
                                                String[] split = value.split(",");
                                                floatArr = new float[split.length];
                                                for (int p = 0; p < split.length; p++) {
                                                    floatArr[p] = Float.parseFloat(split[p]);
                                                }
                                            } else {
                                                floatArr = new float[]{Float.parseFloat(value)};
                                            }
                                        }
                                        obj = floatArr;
                                    } else if (long[].class == type) {
                                        //long[]
                                        String value = cursor.getString(cursor.getColumnIndex(valueName));
                                        long[] longArr = null;
                                        if (value == null) {
                                            obj = null;
                                        } else if ("[]".equals(value)) {
                                            obj = new long[]{};
                                        } else if (value.length() >= 3) {
                                            value = value.substring(1, value.length() - 1);

                                            if (value.indexOf(",") != -1) {
                                                String[] split = value.split(",");
                                                longArr = new long[split.length];
                                                for (int p = 0; p < split.length; p++) {
                                                    longArr[p] = Long.parseLong(split[p]);
                                                }
                                            } else {
                                                longArr = new long[]{Long.parseLong(value)};
                                            }
                                        }
                                        obj = longArr;
                                    } else if (short[].class == type) {
                                        //short[]
                                        String value = cursor.getString(cursor.getColumnIndex(valueName));
                                        short[] shortArr = null;
                                        if (value == null) {
                                            obj = null;
                                        } else if ("[]".equals(value)) {
                                            obj = new short[]{};
                                        } else if (value.length() >= 3) {
                                            value = value.substring(1, value.length() - 1);

                                            if (value.indexOf(",") != -1) {
                                                String[] split = value.split(",");
                                                shortArr = new short[split.length];
                                                for (int p = 0; p < split.length; p++) {
                                                    shortArr[p] = Short.parseShort(split[p]);
                                                }
                                            } else {
                                                shortArr = new short[]{Short.parseShort(value)};
                                            }
                                        }
                                        obj = shortArr;
                                    } else if (List.class == type || Map.class == type) {

                                        String value = cursor.getString(cursor.getColumnIndex(valueName));
                                        if (value == null || "null".equals(value)) {
                                            obj = null;
                                        } else {
                                            //第二次转换 List OR Map
                                            obj = returnListOrMap(type, value);
                                        }
                                    } else {
//                                    err(getLineInfo(LOG.lineInfoIndex), "解析的表文件 [" + tableName + "] 类中的字段 [" + field + "] 出现不支持类型。");
                                        String value = cursor.getString(cursor.getColumnIndex(valueName));
                                        String name = field.getName();//获取属性名
                                        Object val = null;
                                        try {
                                            val = field.get(bean);// 得到此属性的值
                                        } catch (IllegalAccessException e) {
                                            e.printStackTrace();
                                        }
                                        try {
                                            obj = JSON.fromJson2(value, type);
                                        } catch (Exception e) {
                                            e.printStackTrace();
                                        }

                                    }
                                }

                                try {
                                    if (obj != null) {
                                        field.set(bean, obj);
                                    }
                                    continue;
                                } catch (Exception e) {
//                                    e.printStackTrace();
                                    errs("查询数据中出现了无法转换的类型:" + e);
                                }
                            }
                        }
                    }
                    beanList.add(bean);//存入查询到的数据

                    //是否查询全部
                    if (isQueryAll) {
                        cursor.moveToNext();//移动到下一位
                    } else {
                        //查询到一个后退出
                        break;
                    }
                }
            }
            cursor.close();//释放资源

            //释放数据库参数
            closeSqlParameter();
            return beanList;
        }

        /**
         * 将该实体类中的真正主键设置为条件与条件值
         *
         * @param bean
         * @param <T>
         */
        private <T> void wheresKeyValue(T bean, Class<?> aClass) {

            Class<?> superclass = aClass.getSuperclass();//父类
            if (superclass != Object.class) {
                wheresKeyValue(bean, superclass);//递归调用
            }

            for (Field field : aClass.getDeclaredFields()) {
                field.setAccessible(true); // 设置属性是可以访问的
                GT_Key annotation = field.getAnnotation(GT_Key.class);
                if (annotation != null) {
                    try {
                        String name = field.getName();//获取属性名
                        Object val = field.get(bean);// 得到此属性的值
                        conditions = name + " = ?";//2
                        values = new String[]{String.valueOf(val)};
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    }
                    break;
                }
            }
        }

        /**
         * 那实体类中不为 null 的值自动设置为 操作条件
         *
         * @param bean
         * @param aClass
         * @param <T>
         */
        private <T> void wheresValue(T bean, Class<?> aClass) {

            Class<?> superclass = aClass.getSuperclass();//父类
            if (superclass != Object.class) {
                wheresValue(bean, superclass);//递归调用
            }

            List<String> valueList = new ArrayList<>();

            for (Field field : aClass.getDeclaredFields()) {
                field.setAccessible(true); // 设置属性是可以访问的
                try {
                    String name = field.getName();//获取属性名
                    String val = String.valueOf(field.get(bean));// 得到此属性的值
                    if ("null".equals(val) || "0".equals(val)) continue;//过滤掉空值
                    valueList.add(val);
                    if (conditions == null) conditions = "";
                    conditions += name + " = ? and ";//2
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                }
            }

            //去掉多余的 and
            if (conditions != null && conditions.contains("?")) {
                conditions = conditions.substring(0, conditions.lastIndexOf("?") + 1);
            }

            if (valueList.size() > 0) {
                values = new String[valueList.size()];
                for (int i = 0; i < valueList.size(); i++) {
                    values[i] = valueList.get(i);
                }
            }

        }

        /**
         * @param cursor         游标对象
         * @param tClass         实体类class
         * @param sqLiteDatabase 数据库操作对象
         * @param tableName      表名
         * @param returnValues   返回字段
         * @param <T>            返回值 单个或多个实体类，具体拿到返回值需要自己判断
         * @return
         */
        @SuppressLint({"Range", "SimpleDateFormat"})
        public static <T> Object cursorToObject(Cursor cursor, Class<T> tClass, SQLiteDatabase sqLiteDatabase, String tableName, String... returnValues) {
            if (cursor == null || tClass == null) return null;

            if (tableName == null) {
                tableName = tClass.getSimpleName();
            }

            if (returnValues == null || returnValues.length == 0 || (returnValues.length == 1 && returnValues[0].equals("*"))) {
                //获取查询该表的返回字段
                List<String> tableAllValue = getTableAllValue(tableName, sqLiteDatabase);
                if (tableAllValue != null && tableAllValue.size() > 0) {
                    returnValues = new String[tableAllValue.size()];
                    for (int i = 0; i < tableAllValue.size(); i++) {
                        returnValues[i] = tableAllValue.get(i);
                    }
                }
            }

            boolean isQueryAll = cursor.getCount() != 1;//自动判断是否需要返回多个值

            List<T> beanList = new ArrayList<T>();//创建容器

            if (cursor.getCount() > 0) {
                cursor.moveToFirst();//移动到首位
                for (int i = 0; i < cursor.getCount(); i++) {
                    T bean = null;//定义泛型
                    try {
                        bean = tClass.newInstance();//实体化
                    } catch (IllegalAccessException e) {
                        return null;
                    } catch (InstantiationException e) {
                        e.printStackTrace();
                        return null;
                    }

                    //递归查询父类
                    Hibernate.querySuper(bean, tClass, returnValues, cursor);

                    Field[] fields = bean.getClass().getDeclaredFields();
                    for (Field field : fields) {

                        //用于解密
                        GT_Column gt_Column = field.getAnnotation(GT_Column.class);//如果是不被初始化的那就进行跳过解析

                        String valueName = field.getName();
                        Class<?> type = field.getType();
                        field.setAccessible(true);
                        if (returnValues != null) {
                            for (String str : returnValues) {
                                Object obj = null;
                                if (str.equals(valueName)) {
                                    if (String.class == type) {
                                        String value = cursor.getString(cursor.getColumnIndex(valueName));
//                                      //解密
                                        if (gt_Column != null && gt_Column.setIsEncryption()) {
                                            value = Encryption.DES.decryptPassword(value, passWord);
                                        }
                                        obj = value;
                                    } else if (int.class == type || Integer.class == type) {
                                        obj = cursor.getInt(cursor.getColumnIndex(valueName));
                                    } else if (boolean.class == type || Boolean.class == type) {
                                        int value = cursor.getInt(cursor.getColumnIndex(valueName));// false:0   true:1
                                        if (value == 1) {
                                            obj = true;
                                        } else if (value == 0) {
                                            obj = false;
                                        }
                                    } else if (double.class == type || Double.class == type) {
                                        obj = cursor.getDouble(cursor.getColumnIndex(valueName));
                                    } else if (float.class == type || Float.class == type) {
                                        obj = cursor.getFloat(cursor.getColumnIndex(valueName));
                                    } else if (Time.class == type) {
                                        String time = cursor.getString(cursor.getColumnIndex(valueName));
                                        if (time == null || time.length() == 0) {
                                            obj = null;
                                            continue;
                                        }
                                        Date d2 = null;
                                        try {
                                            d2 = new SimpleDateFormat("hh:mm:ss").parse(time);
                                        } catch (Exception e) {
                                            e.printStackTrace();
                                        }
                                        obj = new Time(d2.getTime());
                                    } else if (Date.class == type || java.sql.Date.class == type) {
                                        String value = cursor.getString(cursor.getColumnIndex(valueName));
                                        if (value == null || value.length() == 0) {
                                            obj = null;
                                            continue;
                                        }
                                        try {
                                            obj = new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy", Locale.US).parse(value);
                                        } catch (ParseException e) {
                                            e.printStackTrace();
                                        }
                                    } else if (long.class == type || Long.class == type) {
                                        obj = cursor.getLong(cursor.getColumnIndex(valueName));
                                    } else if (short.class == type || Short.class == type) {
                                        obj = cursor.getShort(cursor.getColumnIndex(valueName));
                                    } else if (byte[].class.equals(type)) {
                                        obj = cursor.getBlob(cursor.getColumnIndex(valueName));
                                    }


                                    //数组类型
                                    else if (String[].class == type) {
                                        //String[]
                                        String value = cursor.getString(cursor.getColumnIndex(valueName));
                                        if (value == null) {
                                            obj = null;
                                        } else if ("[]".equals(value)) {
                                            obj = new String[]{};
                                        } else if (value.length() >= 5) {
                                            obj = value.substring(2, value.length() - 2).split("\",\"");
                                        }
                                    } else if (int[].class == type) {
                                        //int[]
                                        String value = cursor.getString(cursor.getColumnIndex(valueName));
                                        int[] intArr = null;
                                        if (value == null) {
                                            obj = null;
                                        } else if ("[]".equals(value)) {
                                            obj = new int[]{};
                                        } else if (value.length() >= 3) {
                                            value = value.substring(1, value.length() - 1);

                                            if (value.contains(",")) {
                                                String[] split = value.split(",");
                                                intArr = new int[split.length];
                                                for (int p = 0; p < split.length; p++) {
                                                    intArr[p] = Integer.parseInt(split[p]);
                                                }
                                            } else {
                                                intArr = new int[]{Integer.parseInt(value)};
                                            }
                                        }
                                        obj = intArr;
                                    } else if (boolean[].class == type) {
                                        //boolean[]
                                        String value = cursor.getString(cursor.getColumnIndex(valueName));
                                        boolean[] booleanArr = null;
                                        if (value == null) {
                                            obj = null;
                                        } else if ("[]".equals(value)) {
                                            obj = new boolean[]{};
                                        } else if (value.length() >= 3) {
                                            value = value.substring(1, value.length() - 1);

                                            if (value.contains(",")) {
                                                String[] split = value.split(",");
                                                booleanArr = new boolean[split.length];
                                                for (int p = 0; p < split.length; p++) {
                                                    booleanArr[p] = Boolean.parseBoolean(split[p]);
                                                }
                                            } else {
                                                booleanArr = new boolean[]{Boolean.parseBoolean(value)};
                                            }
                                        }
                                        obj = booleanArr;
                                    } else if (double[].class == type) {
                                        //double[]
                                        String value = cursor.getString(cursor.getColumnIndex(valueName));
                                        double[] doubleArr = null;
                                        if (value == null) {
                                            obj = null;
                                        } else if ("[]".equals(value)) {
                                            obj = new double[]{};
                                        } else if (value.length() >= 3) {
                                            value = value.substring(1, value.length() - 1);

                                            if (value.contains(",")) {
                                                String[] split = value.split(",");
                                                doubleArr = new double[split.length];
                                                for (int p = 0; p < split.length; p++) {
                                                    doubleArr[p] = Double.parseDouble(split[p]);
                                                }
                                            } else {
                                                doubleArr = new double[]{Double.parseDouble(value)};
                                            }
                                        }
                                        obj = doubleArr;
                                    } else if (float[].class == type) {
                                        //float[]
                                        String value = cursor.getString(cursor.getColumnIndex(valueName));
                                        float[] floatArr = null;
                                        if (value == null) {
                                            obj = null;
                                        } else if ("[]".equals(value)) {
                                            obj = new float[]{};
                                        } else if (value.length() >= 3) {
                                            value = value.substring(1, value.length() - 1);

                                            if (value.contains(",")) {
                                                String[] split = value.split(",");
                                                floatArr = new float[split.length];
                                                for (int p = 0; p < split.length; p++) {
                                                    floatArr[p] = Float.parseFloat(split[p]);
                                                }
                                            } else {
                                                floatArr = new float[]{Float.parseFloat(value)};
                                            }
                                        }
                                        obj = floatArr;
                                    } else if (long[].class == type) {
                                        //long[]
                                        String value = cursor.getString(cursor.getColumnIndex(valueName));
                                        long[] longArr = null;
                                        if (value == null) {
                                            obj = null;
                                        } else if ("[]".equals(value)) {
                                            obj = new long[]{};
                                        } else if (value.length() >= 3) {
                                            value = value.substring(1, value.length() - 1);

                                            if (value.contains(",")) {
                                                String[] split = value.split(",");
                                                longArr = new long[split.length];
                                                for (int p = 0; p < split.length; p++) {
                                                    longArr[p] = Long.parseLong(split[p]);
                                                }
                                            } else {
                                                longArr = new long[]{Long.parseLong(value)};
                                            }
                                        }
                                        obj = longArr;
                                    } else if (short[].class == type) {
                                        //short[]
                                        String value = cursor.getString(cursor.getColumnIndex(valueName));
                                        short[] shortArr = null;
                                        if (value == null) {
                                            obj = null;
                                        } else if ("[]".equals(value)) {
                                            obj = new short[]{};
                                        } else if (value.length() >= 3) {
                                            value = value.substring(1, value.length() - 1);

                                            if (value.contains(",")) {
                                                String[] split = value.split(",");
                                                shortArr = new short[split.length];
                                                for (int p = 0; p < split.length; p++) {
                                                    shortArr[p] = Short.parseShort(split[p]);
                                                }
                                            } else {
                                                shortArr = new short[]{Short.parseShort(value)};
                                            }
                                        }
                                        obj = shortArr;
                                    } else if (List.class == type || Map.class == type) {

                                        String value = cursor.getString(cursor.getColumnIndex(valueName));
                                        if (value == null || "null".equals(value)) {
                                            obj = null;
                                        } else {
                                            //第二次转换 List OR Map
                                            obj = Hibernate.returnListOrMap(type, value);
                                        }
                                    } else {
                                        String value = cursor.getString(cursor.getColumnIndex(valueName));
                                        try {
                                            obj = JSON.fromJson2(value, type);
                                        } catch (Exception e) {
                                            e.printStackTrace();
                                        }

                                    }
                                }

                                try {
                                    if (obj != null) {
                                        field.set(bean, obj);
                                    }
                                } catch (Exception e) {
//                                    e.printStackTrace();
                                    errs("查询数据中出现了无法转换的类型:" + e);
                                }
                            }
                        }
                    }
                    beanList.add(bean);//存入查询到的数据

                    //是否查询全部
                    if (isQueryAll) {
                        cursor.moveToNext();//移动到下一位
                    } else {
                        //查询到一个后退出
                        break;
                    }
                }
            }
            cursor.close();//释放资源
            switch (beanList.size()) {
                case 0:
                    return null;
                case 1:
                    return beanList.get(0);
                default:
                    return (T) beanList;
            }
        }


        /**
         * @param cursor         游标对象
         * @param tClass         实体类class
         * @param sqLiteDatabase 数据库操作对象
         * @param tableName      表名
         * @param returnValues   返回字段
         * @param <T>            返回值 单个或多个实体类，具体拿到返回值需要自己判断
         * @return
         */
        public <T> Object cursorToObject(Cursor cursor, Class<T> tClass, String tableName, String... returnValues) {
            return cursorToObject(cursor, tClass, sqLiteDatabase2, tableName, returnValues);
        }

        /**
         * 返回 自定义 SQL code 返回值
         *
         * @param data
         * @return
         */
        private static String[] replaceSelectValue(String data) {
            if (data == null || data.length() == 0) return new String[]{"*"};
            try {
                int startIndex = data.toLowerCase().indexOf("select") + 6;
                int endIndex = data.toLowerCase().indexOf("from");
                data = data.substring(startIndex, endIndex);
                if (data.replaceAll("\\s*", "").equals("*")) {
                    return new String[]{"*"};
                }

                if (data.contains(",")) {
                    String[] split = data.split(",");
                    for (int i = 0; i < split.length; i++) {
                        split[i] = split[i].substring(split[i].indexOf(".") + 1).replaceAll("\\s*", "");
                    }
                    return split;
                } else if (data.contains(".")) {
                    data = data.substring(data.indexOf(".") + 1).replaceAll("\\s*", "");
                    return new String[]{data};
                } else {
                    return new String[]{data.replaceAll("\\s*", "")};
                }
            } catch (Exception e) {
                return new String[]{"*"};
            }
        }


        /**
         * 获取表数据总数量
         *
         * @param tableClass
         * @return 返回当前表数据总条数，如果当前表不存在则返回-1
         */
        public long count(Class<?> tableClass) {
            if (tableClass == null) return -1;
            long count = 0;
            try {
                if (lockRead != null) {
                    lockRead.lock();
                }
                String tableName = tableClass.getSimpleName();
                if (isTable(tableName)) {
                    String sqlCode = "select count(1) from " + tableName;//默认计数语句
                    if (conditions != null && values != null) {
                        sqlCode += " where " + conditions;
                    }
                    if (sqLiteDatabase2 == null) return -1;
                    Cursor cursor = sqLiteDatabase2.rawQuery(sqlCode, values);//ok
                    if (cursor != null && cursor.moveToFirst()) {
                        count = cursor.getLong(0);
                    }
                    cursor.close();
                } else {
                    count = -1;
                }
            } catch (Exception e) {
                GT.errs("e:" + e);
            } finally {
                if (lockRead != null) {
                    lockRead.unlock();
                }
            }
            return count;
        }

        /**
         * 求当列总和
         *
         * @param aClass
         * @param columnName
         * @return
         */
        public Object sum(Class<?> aClass, String columnName) {
            if (aClass == null || columnName == null) return null;
            Object sum = -1;
            try {
                if (lockRead != null) {
                    lockRead.lock();
                }
                String tableName = aClass.getSimpleName();//表名
                String sqlCode = "select sum(" + columnName + ") from " + tableName;//默认的代码
                if (conditions != null && values != null) {
                    sqlCode += " where " + conditions;
                }
                //查一下数据库怎么查询该字段是属于什么类型的数据

                if (sqLiteDatabase2 == null) return null;
                Cursor cursor = sqLiteDatabase2.rawQuery(sqlCode, values);//ok
                if (cursor != null && cursor.moveToFirst()) {
                    sum = cursor.getInt(0);
                }
                cursor.close();
            } catch (Exception e) {
                GT.errs("e:" + e);
            } finally {
                if (lockRead != null) {
                    lockRead.unlock();
                }
            }
            return sum;
        }

        /**
         * 求当列最大值
         *
         * @param aClass
         * @param columnName
         * @return
         */
        public Object max(Class<?> aClass, String columnName) {
            if (aClass == null || columnName == null) return null;
            Object sum = -1;
            try {
                if (lockRead != null) {
                    lockRead.lock();
                }
                String tableName = aClass.getSimpleName();//表名
                String sqlCode = "select max(" + columnName + ") from " + tableName;//默认的代码
                if (conditions != null && values != null) {
                    sqlCode += " where " + conditions;
                }
                //查一下数据库怎么查询该字段是属于什么类型的数据
                if (sqLiteDatabase2 == null) return null;
                Cursor cursor = sqLiteDatabase2.rawQuery(sqlCode, values);//ok
                if (cursor != null && cursor.moveToFirst()) {
                    sum = cursor.getInt(0);
                }
                cursor.close();
            } catch (Exception e) {
                GT.errs("e:" + e);
            } finally {
                if (lockRead != null) {
                    lockRead.unlock();
                }
            }
            return sum;
        }

        /**
         * 求当列小值
         *
         * @param aClass
         * @param columnName
         * @return
         */
        public Object min(Class<?> aClass, String columnName) {
            if (aClass == null || columnName == null) return null;
            Object sum = -1;

            try {
                if (lockRead != null) {
                    lockRead.lock();
                }
                String tableName = aClass.getSimpleName();//表名
                String sqlCode = "select min(" + columnName + ") from " + tableName;//默认的代码
                if (conditions != null && values != null) {
                    sqlCode += " where " + conditions;
                }
                //查一下数据库怎么查询该字段是属于什么类型的数据

                if (sqLiteDatabase2 == null) return null;
                Cursor cursor = sqLiteDatabase2.rawQuery(sqlCode, values);//ok
                if (cursor != null && cursor.moveToFirst()) {
                    sum = cursor.getInt(0);
                }
                cursor.close();
            } catch (Exception e) {
                GT.errs("e:" + e);
            } finally {
                if (lockRead != null) {
                    lockRead.unlock();
                }
            }


            return sum;
        }

        /**
         * 求当平均数
         *
         * @param aClass
         * @param columnName
         * @return
         */
        public Object average(Class<?> aClass, String columnName) {
            if (aClass == null || columnName == null) return null;
            Object sum = -1;
            try {
                if (lockRead != null) {
                    lockRead.lock();
                }
                String tableName = aClass.getSimpleName();//表名
                String sqlCode = "select avg(" + columnName + ") from " + tableName;//默认的代码
                if (conditions != null && values != null) {
                    sqlCode += " where " + conditions;
                }
                //查一下数据库怎么查询该字段是属于什么类型的数据
                if (sqLiteDatabase2 == null) return null;
                Cursor cursor = sqLiteDatabase2.rawQuery(sqlCode, values);//ok
                if (cursor != null && cursor.moveToFirst()) {
                    sum = cursor.getInt(0);
                }
                cursor.close();
            } catch (Exception e) {
                GT.errs("e:" + e);
            } finally {
                if (lockRead != null) {
                    lockRead.unlock();
                }
            }
            return sum;
        }

        /**
         * 开启事务
         *
         * @return
         */
        public synchronized Hibernate beginTransaction() {
            if (sqLiteDatabase2 == null) return this;
            sqLiteDatabase2.beginTransaction();//开启事务 ok
            return this;
        }

        /**
         * 设置事务成功
         *
         * @return
         */
        public synchronized Hibernate setTransactionSuccessful() {
            if (sqLiteDatabase2 == null) return this;
            sqLiteDatabase2.setTransactionSuccessful();//设置该事务成功 ok
            return this;
        }

        /**
         * 结束事务
         *
         * @return
         */
        public synchronized Hibernate endTransaction() {
            if (sqLiteDatabase2 == null) return this;
            sqLiteDatabase2.endTransaction();//结束本次事务 ok
            return this;
        }

        /**
         * ======================================================== 表的 增删查改 代码 ========================================
         */


        //============================================= 无实体类操作 =================================

        /**
         * @param tableName     表名称
         * @param contentValues 内容值
         * @return
         * @保存
         */
        public synchronized Hibernate save(String tableName, ContentValues contentValues) {
            if (sqLiteDatabase2 == null) return this;
            if (isTransaction)
                sqLiteDatabase2.beginTransaction();
            try {
                if (lockWrite != null) {
                    lockWrite.lock();
                }
                if (!isTable(tableName)) {
                    err(getLineInfo(LOG.lineInfoIndex), "保存的表不存在，操作失败");
                    status = false;
                    return this;
                }
                initSqlParameter();
                long insert = sqLiteDatabase2.insert(tableName, null, contentValues);//ok
                statusNumber = (int) insert;
                //设置状态码
                if (insert == -1) {
                    status = false;
                } else {
                    status = true;
                }
                if (isTransaction)
                    sqLiteDatabase2.setTransactionSuccessful();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (isTransaction)
                    sqLiteDatabase2.endTransaction();
                if (lockWrite != null) {
                    lockWrite.unlock();
                }
            }
            return this;
        }

        /**
         * 异步保存
         *
         * @param tableName     表名称
         * @param contentValues 内容值
         * @return
         */
        public synchronized Hibernate saveAsync(String tableName, ContentValues contentValues) {
            if (sqLiteDatabase2 == null) return this;
            Thread.getInstance(0).execute(new Runnable() {
                @Override
                public void run() {
                    save(tableName, contentValues);
                }
            });
            return this;
        }

        /**
         * @param tableName   表名
         * @param condition   条件
         * @param valuesArray 条件值
         * @return
         * @删除
         */
        public synchronized Hibernate delete(String tableName) {
            if (sqLiteDatabase2 == null) return this;
            if (isTransaction)
                sqLiteDatabase2.beginTransaction();
            try {
                if (lockWrite != null) {
                    lockWrite.lock();
                }
                if (tableName == null || conditions == null || values == null) {
                    err(getLineInfo(LOG.lineInfoIndex), "删除的 " + tableName + " 数据为null，操作失败");
                    return this;
                }
                //进行删除
                if (!isTable(tableName)) {
                    err(getLineInfo(LOG.lineInfoIndex), "删除的表不存在，操作失败");
                    status = false;
                    return this;
                }
                //初始化
                initSqlParameter();

                int update = sqLiteDatabase2.delete(tableName, conditions, values);//ok
                if (update == 0) {
                    status = false;
                } else {
                    status = true;
                }
                closeSqlParameter();
                if (isTransaction)
                    sqLiteDatabase2.setTransactionSuccessful();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (isTransaction)
                    sqLiteDatabase2.endTransaction();
                if (lockWrite != null) {
                    lockWrite.unlock();
                }
            }
            return this;
        }

        /**
         * 异步删除
         *
         * @param tableName   表名
         * @param condition   条件
         * @param valuesArray 条件值
         * @return
         * @删除
         */
        public synchronized Hibernate deleteAsync(String tableName) {
            if (sqLiteDatabase2 == null) return this;
            Thread.getInstance(0).execute(new Runnable() {
                @Override
                public void run() {
                    delete(tableName);
                }
            });

            return this;
        }

        /**
         * @param tableName   表名
         * @param condition   条件
         * @param valuesArray 条件值
         * @return
         * @查询
         */
        public synchronized Cursor query(String tableName) {
            Cursor cursor = null;
            if (sqLiteDatabase2 == null) return null;
            if (isTransaction)
                sqLiteDatabase2.beginTransaction();
            try {
                if (lockRead != null) {
                    lockRead.lock();
                }
                //判断这个表是否存在
                if (!isTable(tableName)) {
                    err(getLineInfo(2), "查询的表不存在，操作失败");
                    status = false;
                    return null;
                }
                initSqlParameter();

                cursor = sqLiteDatabase2.query(tableName, returnValues, conditions, values, groupBy, having, orderByStr, limitStr);//ok
                statusNumber = cursor.getCount();
                orderByStr = "";
                limitStr = "";
                cursor.moveToFirst();
                closeSqlParameter();
                if (isTransaction)
                    sqLiteDatabase2.setTransactionSuccessful();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (isTransaction)
                    sqLiteDatabase2.endTransaction();
                if (lockRead != null) {
                    lockRead.unlock();
                }
            }
            return cursor;
        }

        /**
         * @param tableName    表名
         * @param returnValues 返回内容值(若返回全部可写 null)
         * @param condition    条件
         * @param valuesArray  条件值
         * @return
         * @修改
         */
        public synchronized Hibernate update(String tableName, ContentValues contentValues) {
            if (sqLiteDatabase2 == null) return this;
            if (isTransaction)
                sqLiteDatabase2.beginTransaction();
            try {
                if (lockWrite != null) {
                    lockWrite.lock();
                }
                if (!isTable(tableName)) {
                    err(getLineInfo(LOG.lineInfoIndex), "修改的表不存在，操作失败");
                    status = false;
                    return this;
                }
                initSqlParameter();
                statusNumber = sqLiteDatabase2.update(tableName, contentValues, conditions, values);//ok
                //进行更新
                if (statusNumber == 0) {
                    status = false;
                } else {
                    status = true;
                }
                closeSqlParameter();
                if (isTransaction)
                    sqLiteDatabase2.setTransactionSuccessful();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (isTransaction)
                    sqLiteDatabase2.endTransaction();
                if (lockWrite != null) {
                    lockWrite.unlock();
                }
            }
            return this;
        }

        /**
         * 更新异步
         *
         * @param tableName    表名
         * @param returnValues 返回内容值(若返回全部可写 null)
         * @param condition    条件
         * @param valuesArray  条件值
         * @return
         * @修改
         */
        public synchronized Hibernate updateAsync(String tableName, ContentValues contentValues) {
            if (sqLiteDatabase2 == null) return this;
            Thread.getInstance(0).execute(new Runnable() {
                @Override
                public void run() {
                    update(tableName, contentValues);
                }
            });
            return this;
        }

        /**
         * @param tableClass
         * @return
         * @删除所有表
         */
        public synchronized Hibernate deleteAll(String tableName) {
            if (sqLiteDatabase2 == null) return this;
            if (isTransaction)
                sqLiteDatabase2.beginTransaction();
            try {
                if (lockWrite != null) {
                    lockWrite.lock();
                }
                //判断这个表是否存在
                if (!isTable(tableName)) {
                    err(getLineInfo(LOG.lineInfoIndex), "删除的表不存在，操作失败");
                    status = false;
                    return this;
                }
                initSqlParameter();

                statusNumber = sqLiteDatabase2.delete(tableName, null, null);//ok
                //进行更新
                if (statusNumber == 0) {
                    status = false;
                } else {
                    status = true;
                }
                if (isTransaction)
                    sqLiteDatabase2.setTransactionSuccessful();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (isTransaction)
                    sqLiteDatabase2.endTransaction();
                if (lockWrite != null) {
                    lockWrite.unlock();
                }
            }

            return this;
        }

        /**
         * 删除全部异步
         *
         * @param tableClass
         * @return
         * @删除所有表
         */
        public synchronized Hibernate deleteAllAsync(String tableName) {
            if (sqLiteDatabase2 == null) return this;
            Thread.getInstance(0).execute(new Runnable() {
                @Override
                public void run() {
                    deleteAll(tableName);
                }
            });

            return this;
        }

        //============================================= 实体类操作 =================================

        /**
         * @param bean //要保存的对象
         * @return
         * @保存数据
         */
        public synchronized <T> Hibernate save(T bean) {
            if (sqLiteDatabase2 == null) return this;
            if (isTransaction)
                sqLiteDatabase2.beginTransaction();
            try {
                if (lockWrite != null) {
                    lockWrite.lock();
                }
                if (bean == null) {
                    err(getLineInfo(LOG.lineInfoIndex), "保存的对象为null，操作失败！");
                    status = false;
                    return this;
                }

                String simpleName = bean.getClass().getSimpleName();//获取表名
                //检查数据库中是否存在该表
                if (!isTable(simpleName)) {
                    err(getLineInfo(LOG.lineInfoIndex), "当前数据库中 " + simpleName + " 表不存在，操作失败！.");
                    status = false;
                    return this;
                }

                //创建游标
                ContentValues contentValues = new ContentValues();

                initSqlParameter();

                //保存和修改的操作
                saveAddUpdateOperation(bean, contentValues);

                //开始插入
                long insert = sqLiteDatabase2.insert(bean.getClass().getSimpleName(), null, contentValues);//ok
                statusNumber = (int) insert;
                //设置状态码
                if (insert == -1) {
                    status = false;
                } else {
                    status = true;
                }
                if (isTransaction)
                    sqLiteDatabase2.setTransactionSuccessful();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (isTransaction)
                    sqLiteDatabase2.endTransaction();
                if (lockWrite != null) {
                    lockWrite.unlock();
                }
            }

            return this;
        }

        /**
         * 异步保存
         *
         * @param bean //要保存的对象
         * @return
         * @保存数据
         */
        public synchronized <T> Hibernate saveAsync(T bean) {
            if (sqLiteDatabase2 == null) return this;
            Thread.getInstance(0).execute(new Runnable() {
                @Override
                public void run() {
                    save(bean);
                }
            });
            return this;
        }

        /**
         * 保存全部
         * 如果一次性存储的数据很多，推荐用所有存储
         * 存储所有数据,当前测试效率：存储10万条数据，09:07:53.199——09:07:59.646 耗时6秒多
         * 注意，影响存储的效率有如下：
         * 1.该实体类复杂层度会直接影响存储效率
         * 2.当前装载的安卓系统配置也会影响到存储效率
         *
         * @param beanList
         * @param <T>
         * @return
         */
        public synchronized <T> Hibernate saveAll(List<T> beanList) {

            if (beanList == null && beanList.size() != 0) {
                err(getLineInfo(LOG.lineInfoIndex), "保存全部的对象为null，操作失败！");
                status = false;
                return this;
            }

            long insert = 0;

            String tableName = beanList.get(0).getClass().getSimpleName();
            //检查数据库中是否存在该表
            if (!isTable(tableName)) {
                err(getLineInfo(LOG.lineInfoIndex), "当前数据库中 " + tableName + " 表不存在，操作失败！.");
                status = false;
                return this;
            }

            try {
                if (lockWrite != null) {
                    lockWrite.lock();
                }
                if (isTransaction)
                    sqLiteDatabase2.beginTransaction();


                //创建游标
                ContentValues contentValues = new ContentValues();
                initSqlParameter();
                if (beanList.size() > MAX) {
                    List<List<T>> lists = listToLists(beanList, MAX);
                    for (List<T> list : lists) {
                        for (T bean : list) {
                            //保存和修改的操作
                            saveAddUpdateOperation(bean, contentValues);//保存全部
                            //数据库操作
                            if (sqLiteDatabase2 == null) return this;
                            insert = sqLiteDatabase2.insert(tableName, null, contentValues);//ok
                            contentValues.clear();
                        }
                    }
                } else {
                    for (T bean : beanList) {
                        //保存和修改的操作
                        saveAddUpdateOperation(bean, contentValues);//保存全部
                        //数据库操作
                        if (sqLiteDatabase2 == null) return this;
                        insert = sqLiteDatabase2.insert(tableName, null, contentValues);//ok
                        contentValues.clear();
                    }
                }
                if (isTransaction)
                    sqLiteDatabase2.setTransactionSuccessful();
            } catch (Exception e) {
                err(getLineInfo(LOG.lineInfoIndex), "当前数据库中 " + tableName + " 存储全部，操作失败！.");
                status = false;
                return this;
            } finally {
                if (isTransaction)
                    sqLiteDatabase2.endTransaction();
                if (lockWrite != null) {
                    lockWrite.unlock();
                }
            }

            statusNumber = (int) insert;
            //设置状态码
            if (insert == -1) {
                status = false;
            } else {
                status = true;
            }
            return this;
        }

        /**
         * List 分割 api
         *
         * @param list 需要分割的list
         * @param max  分割数额
         * @param <T>
         * @return
         */
        private static <T> List<List<T>> listToLists(List<T> list, int max) {
            double value = Double.parseDouble(String.valueOf(list.size())) / Double.parseDouble(String.valueOf(max));
            int count = 0;
            count = (int) value;
            if (String.valueOf(value).contains(".")) {
                count++;
            }
            List<List<T>> lists = new ArrayList<>();
            int record = 0;
            int index = 0;
            for (int i = 0; i < count; i++) {
                List<T> tList = new ArrayList<>();
                for (int j = record; j < list.size(); j++) {
                    record++;
                    index++;
                    tList.add(list.get(j));
                    if (index == max) {
                        index = 0;
                        break;
                    }
                }
                lists.add(tList);
            }
            return lists;
        }

        /**
         * 异步保存
         * 如果一次性存储的数据很多，推荐用所有存储
         * 存储所有数据,当前测试效率：存储10万条数据，09:07:53.199——09:07:59.646 耗时6秒多
         * 注意，影响存储的效率有如下：
         * 1.该实体类复杂层度会直接影响存储效率
         * 2.当前装载的安卓系统配置也会影响到存储效率
         *
         * @param beanList
         * @param <T>
         * @return
         */
        public synchronized <T> Hibernate saveAllAsync(List<T> beanList) {
            Thread.getInstance(0).execute(new Runnable() {
                @Override
                public void run() {
                    saveAll(beanList);
                }
            });
            return this;
        }

        /**
         * 保存全部
         *
         * @param ts
         * @param <T>
         * @return
         */
        public synchronized <T> Hibernate saveAll(T... ts) {
            if (ts == null || ts.length == 0) {
                err(getLineInfo(LOG.lineInfoIndex), "保存全部的对象为null，操作失败！");
                status = false;
                return this;
            }

            Object[] ts2 = ts;
            List<Object> list = new ArrayList<>();
            //如果 传递过来的参数是 变量数组的话，那就进行解析一层
            if (String.valueOf(ts[0]).contains("[Lcom")) {
                ts2 = (Object[]) ts[0];
            }

            for (Object t : ts2) {
                list.add(t);
            }
            saveAll(list);
            return this;
        }

        /**
         * 异步保存全部
         *
         * @param ts
         * @param <T>
         * @return
         */
        public synchronized <T> Hibernate saveAllAsync(T... ts) {
            if (ts == null) {
                err(getLineInfo(LOG.lineInfoIndex), "保存全部的对象为null，操作失败！");
                status = false;
                return this;
            }
            Thread.getInstance(0).execute(new Runnable() {
                @Override
                public void run() {
                    saveAll(ts);
                }
            });

            return this;
        }

        /**
         * 删除表(如果没有设置 删除条件 与 条件值 将无法删除)
         *
         * @param beanClass  删除表的名称
         * @param conditions 删除条件
         * @param values     删除条件对应值
         * @return
         */
        public synchronized <T> Hibernate delete(T classOrBean) {
            if (sqLiteDatabase2 == null) return this;
            if (isTransaction)
                sqLiteDatabase2.beginTransaction();
            try {
                if (lockWrite != null) {
                    lockWrite.lock();
                }
                Class<?> aClass = classOrBean.getClass();

                if (classOrBean == null || (classOrBean.getClass() == Class.class && (conditions == null || values == null))) {
                    err(getLineInfo(LOG.lineInfoIndex), "删除的 " + classOrBean + " 数据为null，操作失败");
                    return this;
                }


                if (classOrBean.getClass() == Class.class) {
                    aClass = (Class) classOrBean;
                } else {
                    aClass = classOrBean.getClass();

                }

                String simpleName = aClass.getSimpleName();//获取表名

                //如果没有自己设置条件，那就直接使用该对象的ID值进行默认操作
                if (conditions == null || values == null) {
                    wheresKeyValue(classOrBean, aClass);//第一次调用
                }

                //检查数据库中是否存在该表
                if (!isTable(simpleName)) {
                    err(getLineInfo(LOG.lineInfoIndex), "当前数据库中 " + simpleName + " 表不存在，操作失败！...");
                    status = false;
                    return this;
                }

                initSqlParameter();

                //进行更新
                int update = sqLiteDatabase2.delete(simpleName, conditions, values);//ok

                if (update == 0) {
                    status = false;
                } else {
                    status = true;
                }

                closeSqlParameter();
                if (isTransaction)
                    sqLiteDatabase2.setTransactionSuccessful();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (isTransaction)
                    sqLiteDatabase2.endTransaction();
                if (lockWrite != null) {
                    lockWrite.unlock();
                }
            }
            return this;
        }

        /**
         * 异步删除
         * 删除表(如果没有设置 删除条件 与 条件值 将无法删除)
         *
         * @param beanClass  删除表的名称
         * @param conditions 删除条件
         * @param values     删除条件对应值
         * @return
         */
        public synchronized <T> Hibernate deleteAsync(T classOrBean) {
            if (sqLiteDatabase2 == null) return this;
            Thread.getInstance(0).execute(new Runnable() {
                @Override
                public void run() {
                    delete(classOrBean);
                }
            });
            return this;
        }

        /**
         * @param beanClass 删除的表
         * @param keyValue  删除的ID
         * @return
         * @更具ID删除
         */
        public synchronized Hibernate delete(Class<?> beanClass, int key) {
            if (sqLiteDatabase2 == null) return this;
            if (isTransaction)
                sqLiteDatabase2.beginTransaction();
            try {
                if (lockWrite != null) {
                    lockWrite.lock();
                }
                if (beanClass == null || key <= 0) {
                    err(getLineInfo(LOG.lineInfoIndex), "删除的 beanClass 数据为null，操作失败");
                    return this;
                }

                String simpleName = beanClass.getSimpleName();//获取表名

                //检查数据库中是否存在该表
                List<String> tableAllValue = null;
                if (isTable(simpleName)) {
                    tableAllValue = getTableAllValue(simpleName, sqLiteDatabase2);
                    if (tableAllValue == null || tableAllValue.size() == 0) {
                        err(getLineInfo(LOG.lineInfoIndex), "删除的表数据为空，操作失败");
                        status = false;
                        return this;
                    }
                } else {
                    err(getLineInfo(LOG.lineInfoIndex), "删除的表不存在，操作失败");
                    status = false;
                    return this;
                }

                //进行更新
                int update = sqLiteDatabase2.delete(simpleName, tableAllValue.get(0) + "= ?", new String[]{String.valueOf(key)});//ok

                if (update == 0) {
                    status = false;
                } else {
                    status = true;
                }
                if (isTransaction)
                    sqLiteDatabase2.setTransactionSuccessful();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (isTransaction)
                    sqLiteDatabase2.endTransaction();
                if (lockWrite != null) {
                    lockWrite.unlock();
                }
            }
            return this;
        }

        /**
         * 异步删除
         *
         * @param beanClass 删除的表
         * @param keyValue  删除的ID
         * @return
         * @更具ID删除
         */
        public synchronized Hibernate deleteAsync(Class<?> beanClass, int key) {
            if (sqLiteDatabase2 == null) return this;
            Thread.getInstance(0).execute(new Runnable() {
                @Override
                public void run() {
                    delete(beanClass, key);
                }
            });
            return this;
        }

        /**
         * @param tableClass
         * @return
         * @删除这张表的 所有数据
         */
        public synchronized Hibernate deleteAll(Class<?> tableClass) {
            if (sqLiteDatabase2 == null) return this;
            if (isTransaction)
                sqLiteDatabase2.beginTransaction();
            try {
                if (lockWrite != null) {
                    lockWrite.lock();
                }
                //初始化与获取必要属性
                String simpleName = tableClass.getSimpleName();//获取表名

                //判断这个表是否存在
                if (!isTable(simpleName)) {
                    err(getLineInfo(LOG.lineInfoIndex), "删除的表不存在，操作失败");
                    status = false;
                    return this;
                }
                initSqlParameter();
                statusNumber = sqLiteDatabase2.delete(simpleName, conditions, values);//ok
                //进行更新
                if (statusNumber == 0) {
                    status = false;
                } else {
                    status = true;
                }
                closeSqlParameter();
                if (isTransaction)
                    sqLiteDatabase2.setTransactionSuccessful();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (isTransaction)
                    sqLiteDatabase2.endTransaction();
                if (lockWrite != null) {
                    lockWrite.unlock();
                }
            }
            return this;
        }

        /**
         * 异步删除
         *
         * @param tableClass
         * @return
         * @删除所有表
         */
        public synchronized Hibernate deleteAllAsync(Class<?> tableClass) {
            if (sqLiteDatabase2 == null) return this;
            Thread.getInstance(0).execute(new Runnable() {
                @Override
                public void run() {
                    deleteAll(tableClass);
                }
            });
            return this;
        }

        /**
         * @param tableNameClass 查询的表
         * @param values         查询ID
         * @param <T>
         * @return
         * @根据表ID查询数据
         */
        public synchronized <T> T query(Class<T> tableNameClass) {
            List<T> list = null;
            if (sqLiteDatabase2 == null) return null;
            if (isTransaction)
                sqLiteDatabase2.beginTransaction();
            try {
                if (lockRead != null) {
                    lockRead.lock();
                }
                if (tableNameClass == null) {
                    err(getLineInfo(LOG.lineInfoIndex), "查询的数据为 null，操作失败");
                    status = false;
                    return null;
                }
                //反射生成对象并注入
                list = queryCoreAlgorithm(tableNameClass, false);
                if (isTransaction)
                    sqLiteDatabase2.setTransactionSuccessful();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (isTransaction)
                    sqLiteDatabase2.endTransaction();
                if (lockRead != null) {
                    lockRead.unlock();
                }
            }
            if (list == null || list.size() == 0) {
                return null;
            } else {
                return list.get(0);
            }
        }

        /**
         * @param tableNameClass 查询的表
         * @param values         查询ID
         * @param <T>
         * @return
         * @根据表ID查询数据
         */
        public synchronized <T> T query(Class<T> tableNameClass, int key) {

            List<T> list = null;
            if (sqLiteDatabase2 == null) return null;
            try {
                if (lockRead != null) {
                    lockRead.lock();
                }
                if (tableNameClass == null || key <= 0) {
                    err(getLineInfo(LOG.lineInfoIndex), "查询的数据为 null，操作失败");
                    status = false;
                    return null;
                }

                String tableName = tableNameClass.getSimpleName();

                //判断这个表是否存在
                if (!isTable(tableName)) {
                    err(getLineInfo(LOG.lineInfoIndex), "查询的表不存在，操作失败");
                    status = false;
                    return null;
                }

                if (isTransaction)
                    sqLiteDatabase2.beginTransaction();

                //获取表名
                List<String> tableAllValue = getTableAllValue(tableName, sqLiteDatabase2);
                if (tableAllValue != null && tableAllValue.size() > 0) {
                    //条件参数
                    where(tableAllValue.get(0) + " = ?", String.valueOf(key));
                    //反射生成对象并注入
                    list = queryCoreAlgorithm(tableNameClass, false);
                    if (isTransaction)
                        sqLiteDatabase2.setTransactionSuccessful();
                } else {
                    err(getLineInfo(LOG.lineInfoIndex), "查询的数据表不存在,操作失败");
                    status = false;
                }

            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (isTransaction)
                    sqLiteDatabase2.endTransaction();
                if (lockRead != null) {
                    lockRead.unlock();
                }
            }

            if (list == null || list.size() == 0) {
                return null;
            } else {
                return list.get(0);
            }
        }

        /**
         * 根据表查询表中所有数据
         *
         * @param tableNameClass
         * @param <T>
         * @return
         */
        public synchronized <T> List<T> queryAll(Class<T> tableNameClass) {
            List<T> list = null;
            if (sqLiteDatabase2 == null) return null;
            if (isTransaction)
                sqLiteDatabase2.beginTransaction();
            try {
                if (lockRead != null) {
                    lockRead.lock();
                }
                if (tableNameClass == null) {
                    err(getLineInfo(LOG.lineInfoIndex), "查询的数据为 null，操作失败");
                    status = false;
                    return null;
                }
                //算法
                list = queryCoreAlgorithm(tableNameClass, true);
                if (isTransaction)
                    sqLiteDatabase2.setTransactionSuccessful();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (isTransaction)
                    sqLiteDatabase2.endTransaction();
                if (lockRead != null) {
                    lockRead.unlock();
                }
            }
            return list;
        }

        /**
         * @param bean       更新的表数据(实体类)
         * @param conditions 修改条件
         * @param values     修改条件对应值
         * @return
         * @更新表
         */
        public synchronized <T> Hibernate update(T bean) {
            if (sqLiteDatabase2 == null) return this;
            if (isTransaction)
                sqLiteDatabase2.beginTransaction();
            try {
                if (lockWrite != null) {
                    lockWrite.lock();
                }
                if (bean == null) {
                    err(getLineInfo(LOG.lineInfoIndex), "修改的数据为null，操作失败");
                    status = false;
                    return this;
                }

                Class<?> aClass = bean.getClass();

                String simpleName = aClass.getSimpleName();//获取表名
                //检查数据库中是否存在该表
                if (!isTable(simpleName)) {
                    err(getLineInfo(LOG.lineInfoIndex), "当前数据库中 " + simpleName + " 表不存在，操作失败！.");
                    status = false;
                    return this;
                }

                //如果没有自己设置条件，那就直接使用该对象的ID值进行默认操作
                if (conditions == null || values == null) {
                    wheresKeyValue(bean, aClass);//第一次调用
                }

                ContentValues contentValues = new ContentValues();
                initSqlParameter();
                //保存和修改的操作
                saveAddUpdateOperation(bean, contentValues);

                if (values != null)
                    statusNumber = sqLiteDatabase2.update(aClass.getSimpleName(), contentValues, conditions, values);//ok
                //进行更新
                if (statusNumber == 0) {
                    status = false;
                } else {
                    status = true;
                }
                closeSqlParameter();
                if (isTransaction)
                    sqLiteDatabase2.setTransactionSuccessful();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (isTransaction)
                    sqLiteDatabase2.endTransaction();
                if (lockWrite != null) {
                    lockWrite.unlock();
                }
            }
            return this;
        }

        /**
         * 异步更新
         *
         * @param bean       更新的表数据(实体类)
         * @param conditions 修改条件
         * @param values     修改条件对应值
         * @return
         * @更新表
         */
        public synchronized <T> Hibernate updateAsync(T bean) {
            if (sqLiteDatabase2 == null) return this;
            Thread.getInstance(0).execute(new Runnable() {
                @Override
                public void run() {
                    update(bean);
                }
            });
            return this;
        }

        /**
         * @param bean       更新的表数据(实体类)
         * @param conditions 修改条件
         * @param values     修改条件对应值
         * @return
         * @更新表
         */
        public synchronized Hibernate update(Class<?> tableClass, Object bean) {
            if (sqLiteDatabase2 == null) return this;
            if (isTransaction)
                sqLiteDatabase2.beginTransaction();
            try {
                if (lockWrite != null) {
                    lockWrite.lock();
                }
                if (bean == null) {
                    err(getLineInfo(LOG.lineInfoIndex), "修改的数据为null，操作失败");
                    status = false;
                    return this;
                }

                String simpleName = bean.getClass().getSimpleName();//获取表名
                //检查数据库中是否存在该表
                if (!isTable(simpleName)) {
                    err(getLineInfo(LOG.lineInfoIndex), "当前数据库中 " + simpleName + " 表不存在，操作失败！.");
                    status = false;
                    return this;
                }

                //判断更新对象是 实体类 还是 ContentValues 对象
                if (ContentValues.class != bean.getClass()) {
                    ContentValues contentValues = new ContentValues();
                    initSqlParameter();
                    //保存和修改的操作
                    saveAddUpdateOperation(bean, contentValues);

                    if (conditions == null || values == null) {
                        wheresKeyValue(bean, tableClass);
                    }

                    statusNumber = sqLiteDatabase2.update(bean.getClass().getSimpleName(), contentValues, conditions, values);//ok
                } else {
                    if (conditions == null || values == null) {
                        err(getLineInfo(LOG.lineInfoIndex), "修改的数据为null，操作失败");
                        status = false;
                        return this;
                    }
                    if (sqLiteDatabase2 == null) return this;
                    statusNumber = sqLiteDatabase2.update(tableClass.getSimpleName(), (ContentValues) bean, conditions, values);//ok
                }
                //进行更新
                if (statusNumber == 0) {
                    status = false;
                } else {
                    status = true;
                }
                closeSqlParameter();
                if (isTransaction)
                    sqLiteDatabase2.setTransactionSuccessful();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (isTransaction)
                    sqLiteDatabase2.endTransaction();
                if (lockWrite != null) {
                    lockWrite.unlock();
                }
            }
            return this;
        }

        /**
         * 异步更新
         *
         * @param bean       更新的表数据(实体类)
         * @param conditions 修改条件
         * @param values     修改条件对应值
         * @return
         * @更新表
         */
        public synchronized Hibernate updateAsync(Class<?> tableClass, Object bean) {
            if (sqLiteDatabase2 == null) return this;
            Thread.getInstance(0).execute(new Runnable() {
                @Override
                public void run() {
                    update(tableClass, bean);
                }
            });
            return this;
        }

        /**
         * @param bean     修改表的 实体类 或 ContentValues 值
         * @param keyValue 修改表里的那个ID行数据
         * @return
         * @修改表
         */
        public synchronized Hibernate update(Object bean, Object keyValue) {
            if (sqLiteDatabase2 == null) return this;
            if (isTransaction)
                sqLiteDatabase2.beginTransaction();
            try {
                if (lockWrite != null) {
                    lockWrite.lock();
                }
                //判空
                if (bean == null || keyValue == null) {
                    err(getLineInfo(LOG.lineInfoIndex), "修改的参数为null，操作失败");
                    status = false;
                    return this;
                }

                //初始化与获取必要属性
                ContentValues contentValues = new ContentValues();
                statusNumber = 0;

                String simpleName = bean.getClass().getSimpleName();//获取表名
                //判断这个表是否存在
                List<String> tableAllValue = null;
                if (isTable(simpleName)) {
                    tableAllValue = getTableAllValue(simpleName, sqLiteDatabase2);
                    if (tableAllValue == null || tableAllValue.size() == 0) {
                        err(getLineInfo(LOG.lineInfoIndex), "修改的表数据为空，操作失败");
                        status = false;
                        return this;
                    }
                } else {
                    err(getLineInfo(LOG.lineInfoIndex), "修改的表不存在，操作失败");
                    status = false;
                    return this;
                }

                initSqlParameter();
                //保存和修改的操作
                saveAddUpdateOperation(bean, contentValues);
                statusNumber = sqLiteDatabase2.update(simpleName, contentValues, tableAllValue.get(0) + "= ?", new String[]{keyValue.toString()});//ok

                //进行更新
                if (statusNumber == 0) {
                    status = false;
                } else {
                    status = true;
                }
                if (isTransaction)
                    sqLiteDatabase2.setTransactionSuccessful();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (isTransaction)
                    sqLiteDatabase2.endTransaction();
                if (lockWrite != null) {
                    lockWrite.unlock();
                }
            }

            return this;
        }

        /**
         * 异步更新
         *
         * @param bean     修改表的 实体类 或 ContentValues 值
         * @param keyValue 修改表里的那个ID行数据
         * @return
         * @修改表
         */
        public synchronized Hibernate updateAsync(Object bean, Object keyValue) {
            Thread.getInstance(0).execute(new Runnable() {
                @Override
                public void run() {
                    update(bean, keyValue);
                }
            });
            return this;
        }

        /**
         * @param tableClass
         * @param contentValues
         * @return
         * @更新这张表全部数据
         */
        public synchronized Hibernate updateAll(Class<?> tableClass, ContentValues contentValues) {
            if (sqLiteDatabase2 == null) return this;
            if (isTransaction)
                sqLiteDatabase2.beginTransaction();
            try {
                if (lockWrite != null) {
                    lockWrite.lock();
                }
                //判空
                if (contentValues == null || tableClass == null) {
                    err(getLineInfo(LOG.lineInfoIndex), "修改的参数为null，操作失败");
                    status = false;
                    return this;
                }

                //初始化与获取必要属性
                String simpleName = tableClass.getSimpleName();//获取表名
                statusNumber = 0;

                //判断这个表是否存在
                if (!isTable(simpleName)) {
                    err(getLineInfo(LOG.lineInfoIndex), "修改的表不存在，操作失败");
                    status = false;
                    return this;
                }
                statusNumber = sqLiteDatabase2.update(simpleName, contentValues, conditions, values);//ok
                //进行更新
                if (statusNumber == 0) {
                    status = false;
                } else {
                    status = true;
                }
                if (isTransaction)
                    sqLiteDatabase2.setTransactionSuccessful();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (isTransaction)
                    sqLiteDatabase2.endTransaction();
                if (lockWrite != null) {
                    lockWrite.unlock();
                }
            }
            return this;
        }

        /**
         * 异步更新
         *
         * @param tableClass
         * @param contentValues
         * @return
         * @更新这张表全部数据
         */
        public synchronized Hibernate updateAllAsync(Class<?> tableClass, ContentValues contentValues) {
            if (sqLiteDatabase2 == null) return this;
            Thread.getInstance(0).execute(new Runnable() {
                @Override
                public void run() {
                    updateAll(tableClass, contentValues);
                }
            });
            return this;
        }

        /**
         * ======================================================== Hibernate 创建数据库 代码 ========================================
         */

        //====================================== 设置扫描表路径 ======================================

        /**
         * @param scanTablePath (使用详情请参考官网)
         * @return
         * @主要作用：将类转为SQL代码
         * @初始化扫描数据库实体类路径
         * @可输入的值如下：
         * @1.实体类的包路径 com.gsls.gtlibrary.enity
         * @2.实体类的class User.class
         * @3.实体类的 List/Set/Array ：List<Class<?>> 、 Set<Class<?>、 Class<?>[]
         */
        public Hibernate scanTable(Object scanTable) {
//            GT.log("反射解析");
            isDeleteNullTable = true;//需要检查是否有要删除的表
            isCreateTable = true;
            tableNameList.clear();
            creationTableNameList.clear();
            updateTableValueList.clear();
            //判空
            if (scanTable == null) {
                scanTable = ApplicationUtils.getPackageName(weakReference.get());
            }

            //实例化 数据库表集合
            if (tableList == null) {
                tableList = new ArrayList<>();
            } else {
                tableList.clear();//清空
            }

            boolean isReflect = false;//是否需要反射得到 class
            //解析路径 或 引用赋值
            String EnityPackagePath = "";
            if (scanTable instanceof Class<?>) {//添加单个的表
                Class<?> classs = (Class<?>) scanTable;
                tableList.add(classs);//添加到数据库表的集合中
            } else if (scanTable instanceof String) {//添加该路径下所有表
                EnityPackagePath = scanTable.toString();//如果是路径直接赋值
                isReflect = true;
            } else if (scanTable instanceof List) {//添加该集合中所有表
                tableList = (List<Class<?>>) scanTable;//如果是class 集合直接引用
            } else if (scanTable instanceof Set) {//添加该集合中所有表
                Set<Class<?>> tableSet = (Set<Class<?>>) scanTable;//如果是 Set 转换到 List 去
                for (Class<?> classs : tableSet) {
                    tableList.add(classs);
                }
            } else if (scanTable instanceof Class<?>[]) {//添加该集合中所有表
                Class<?>[] classArray = (Class<?>[]) scanTable;//如果是 Array 转换到 List 去
                for (Class<?> classs : classArray) {
                    tableList.add(classs);
                }
            } else {
                errs("当前不支持 " + scanTable.getClass() + "  类型。");
                isCreateTable = false;
                return this;
            }

            //检测扫描路径
            if (isReflect) {
                //如果需要反射就进行反射得到 class
                if (!"".equals(EnityPackagePath)) {
                    loadHibernateAnnotation(EnityPackagePath, weakReference.get());//加载数据库注解
                } else {
                    errs("当前扫描数据库实体类的路径有错误！请检查该路径。EnityPackagePath = " + EnityPackagePath);
                    isCreateTable = false;
                    return this;
                }
            }

            //进行 class 反射解析
            if (tableList != null && tableList.size() > 0) {
                analysisClassData();//解析 class
            }

            return this;
        }
        //====================================== 第三步：反射解析 class 信息自动生成 SQL代码 =================================

        /**
         * @反射解析 Class 数据
         * @return
         * @待完成
         */
        private final List<String> creationTableNameList = new ArrayList<>();//实例化表名集合
        private final List<String> tableNameList = new ArrayList<>();//实例化表名集合
        private final List<String> updateTableValueList = new ArrayList<>();//实例化存储更新字段的集合
        private final List<String> tableIndexList = new ArrayList<>();//表索引信息
        private String indexChar = "";//添加要创建索引的表字段

        private String tableSqlCode;//创建表的SQL语句
        private String sqlChar = "";//添加要创建表字段
        private String KeyType = "";//创建主键的类型
        private String KeySqlCode = "";//创建主键的数据库代码
        private String fieldPropertyCode = "";//字段属性

        //解析 主键 与 字段 自动生成 SQL 语句
        private Hibernate analysisClassData() {

            KeyType = "";//初始化该表的主键
            KeySqlCode = "";//初始化该表的主键代码

            //遍历所有集成的 SQL 语句
            for (int i = 0; i < tableList.size(); i++) {

                Class<?> aClass = tableList.get(i);//获取需要处理的 Class

                String tableName = aClass.getSimpleName();//获取表名
                if (tableNameList.contains(tableName)) continue;//如果当前数据库表中已经存在该表，那就不再添加

                //存储需要更新的数据库字段
                saveUpdateData(aClass);

                //添加解析表名
                tableNameList.add(tableName);//存储表名

                //初始化
                tableSqlCode = "CREATE TABLE " + tableName + "(";//创建表的SQL语句
                sqlChar = "";//初始化 SQL 字段
                KeySqlCode = "";//初始化主键的创建代码
                fieldPropertyCode = "";//字段属性代码

                //解析类中所有字段
                String returnData = analysisClassAllChar(aClass);
                if ("this".equals(returnData)) {
                    return this;
                }

                //如果没有指定 主键，那就默认创建自增主键
                if (KeySqlCode == null || KeySqlCode.length() == 0) {
                    KeySqlCode = tableName + "_ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL";
                }

                creationTableNameList.add(tableSqlCode + KeySqlCode + sqlChar + ")");//添加在创建表时需要执行的
            }


            return this;
        }


        /**
         * 解析类中所有字段
         *
         * @param aClass 需要递归父类
         */
        private String analysisClassAllChar(Class<?> aClass) {

            tableIndexList.clear();
            indexChar = "";
            String tableName = aClass.getSimpleName();//获取表名
            List<String> sqlCharList = new ArrayList<>();//存储映射过的字段

            //遍历所有成员变量
            for (Field field : aClass.getDeclaredFields()) {

                fieldPropertyCode = "";//初始化
                Class<?> type = field.getType();//获取当前字段类型
                String tableChar = field.getName();//获取当前字段的名称

                GT_Column gt_Column = field.getAnnotation(GT_Column.class);//创建表时的
                if (gt_Column != null && gt_Column.setNotInit()) {//过滤掉 不映射的字段
                    continue;
                }

                //解析主键：优先使用子表主键
                GT_Key gt_Key = field.getAnnotation(GT_Key.class);//创建表时的
                if (gt_Key != null) {
                    //如果注解为主键，且是第一次的主键(从子表向父表递归)，那就进行生成主键
                    if (KeySqlCode.length() != 0) {
                        continue;//跳过本次
                    }

                    //字段属性解析设置
                    int fieldLength = gt_Key.setLength();          //获取字段长度,仅对String有效
                    String[] checkValuesLength = gt_Key.setCheckValues();    //获取限定数据，仅String字段使用
                    double max = gt_Key.setMax();                  //最大值
                    double min = gt_Key.setMin();                  //最小值
                    if (checkValuesLength.length != 0) {// 男女的还不行,如果是这种就完犊子了 (你，我，他，其他)
                        fieldPropertyCode = " CHECK(";
                        //遍历添加限制值
                        for (int i = 0; i < checkValuesLength.length; i++) {
                            if (i >= checkValuesLength.length - 1) {
                                fieldPropertyCode += tableChar + "='" + checkValuesLength[i] + "'";
                            } else {
                                fieldPropertyCode += tableChar + "='" + checkValuesLength[i] + "' OR ";
                            }
                        }

                        fieldPropertyCode += ")";
                    } else if (max != Double.MAX_VALUE || min != Double.MIN_VALUE) {
                        fieldPropertyCode = " CHECK(" + tableChar + ">=" + min + " AND " + tableChar + "<=" + max + ")";
                    }

                    //若需要兼容其他字段可直接在这添加，不会对其他代码有影响
                    if (String.class == type) {
                        KeyType = "varchar(" + fieldLength + ")" + fieldPropertyCode;
                    } else if (int.class == type || Integer.class == type) {
                        KeyType = "integer" + fieldPropertyCode;
                    } else if (boolean.class == type || Boolean.class == type) {
                        KeyType = "BOOLEAN";
                    } else if (double.class == type || Double.class == type) {
                        KeyType = "DOUBLE" + fieldPropertyCode;
                    } else if (float.class == type || Float.class == type) {
                        KeyType = "FLOAT" + fieldPropertyCode;
                    } else if (Time.class == type) {
                        KeyType = "TIME";
                    } else if (Date.class == type || java.sql.Date.class == type) {
                        KeyType = "DATE";
                    } else if (long.class == type || Long.class == type) {
                        KeyType = "LONG" + fieldPropertyCode;
                    } else if (short.class == type || Short.class == type) {
                        KeyType = "varchar(6)";
                    } else if (byte[].class.equals(type)) {
                        KeyType = "BLOB";
                    } else if (List.class == type || Map.class == type) {
                        KeyType = "TEXT";
                    } else {
                        err(getLineInfo(), "解析的表文件 [" + tableName + "] 类中的字段 [" + field + "] 出现不支持类型。");
                        isCreateTable = false;
                        return "this";
                    }

                    // 自增需要增加 String、Bolean、Float、Time
                    boolean autoincrement = gt_Key.setAutoincrement();//获取 主键类型 注解值
                    if (autoincrement) {//自动增长
//                        GT.log(tableName + "自增长:" + tableChar + " 类型:" + KeyType);
                        if (KeyType.contains("integer") || KeyType.contains("LONG")) {
                            KeySqlCode = field.getName() + " " + KeyType.toUpperCase() + " PRIMARY KEY AUTOINCREMENT NOT NULL";
                        } else {
                            err(getLineInfo(), "解析的表文件 [" + tableName + "] 类中的字段 [" + field + "] 不是int类型，暂不支持自增。");
                            isCreateTable = false;
                            return "this";
                        }
                    } else {//手动增长
//                        GT.log(tableName + "手动增长:" + tableChar);
                        if ("integer".equals(KeyType)) {//如果是整数型就需要转换一下
                            KeyType = "INT";
                        }
                        KeySqlCode = field.getName() + " " + KeyType.toUpperCase() + " PRIMARY KEY NOT NULL";
                    }
                    continue;//跳过字段的解析
                }


                //普通表字段解析
                int fieldLength = 200;//字段长度
                if (gt_Column != null) {

                    //字段属性解析设置
                    fieldLength = gt_Column.setLength();                  //获取字段长度,仅对String有效
                    String[] checkValuesLength = gt_Column.setCheckValues();        //获取限定数据，仅String字段使用
                    double max = gt_Column.setMax();                      //最大值
                    double min = gt_Column.setMin();                      //最小值
                    boolean notNull = gt_Column.setNotNull();             //不为null,默认值是 false
                    String[] defaultValue = gt_Column.setDefaultValue();  //默认值,如果只有一个那就在创建的时候直接定死，如果有多个，那就直接去保存，修改操作里去随机默认值

                    //字段限定值
                    if (checkValuesLength.length != 0) {
                        fieldPropertyCode = " CHECK(";
                        //遍历添加限制值
                        for (int i = 0; i < checkValuesLength.length; i++) {
                            if (i >= checkValuesLength.length - 1) {
                                fieldPropertyCode += tableChar + "='" + checkValuesLength[i] + "'";
                            } else {
                                fieldPropertyCode += tableChar + "='" + checkValuesLength[i] + "' OR ";
                            }

                        }
                        fieldPropertyCode += ")";
                    } else if (max != Double.MAX_VALUE || min != Double.MIN_VALUE) {
                        //CHECK(shortValue between 1 and 5)
                        fieldPropertyCode = " CHECK(" + tableChar + " BETWEEN " + (min - 1) + " AND " + max + ")";
                    }

                    //是否可为null
                    if (notNull) {
                        fieldPropertyCode += " NOT NULL";//添加不可以为null
                    }

                    //设置默认值
                    if (defaultValue.length == 1) {
                        if (int.class == type ||
                                boolean.class == type ||
                                double.class == type ||
                                float.class == type ||
                                long.class == type ||
                                short.class == type) {
                            fieldPropertyCode += " DEFAULT " + defaultValue[0] + "";
                        } else {
                            fieldPropertyCode += " DEFAULT '" + defaultValue[0] + "'";
                        }

                    }
                    //开始其他属性的解析
                }

                //判断当前映射的表中是否已经存在该字段，如果是那就估计是父类与子类重复的那就直接过滤掉
                if (sqlCharList.contains(tableChar)) {
                    continue;//过滤掉第二次添加的(父类)已添加的字段字段的解析
                }

                //若需要兼容其他字段可直接在这添加，不会对其他代码有影响
                if (String.class == type) {
                    sqlChar += (", " + tableChar + " VARCHAR(" + fieldLength + ")" + fieldPropertyCode);
                } else if (int.class == type) {
                    sqlChar += (", " + tableChar + " INT" + fieldPropertyCode);
                } else if (Integer.class == type) {
                    sqlChar += (", " + tableChar + " INTEGER" + fieldPropertyCode);
                } else if (boolean.class == type || Boolean.class == type) {
                    sqlChar += (", " + tableChar + " BOOLEAN" + fieldPropertyCode);
                } else if (double.class == type || Double.class == type) {
                    sqlChar += (", " + tableChar + " DOUBLE" + fieldPropertyCode);
                } else if (float.class == type || Float.class == type) {
                    sqlChar += (", " + tableChar + " FLOAT" + fieldPropertyCode);
                } else if (Time.class == type) {
                    sqlChar += (", " + tableChar + " TIME" + fieldPropertyCode);
                } else if (Date.class == type || java.sql.Date.class == type) {
                    sqlChar += (", " + tableChar + " DATE" + fieldPropertyCode);
                } else if (long.class == type || Long.class == type) {
                    sqlChar += (", " + tableChar + "  VARCHAR(20)" + fieldPropertyCode);
                } else if (short.class == type || Short.class == type) {
                    sqlChar += (", " + tableChar + "  VARCHAR(6)" + fieldPropertyCode);
                } else if (byte[].class.equals(type)) {
                    sqlChar += (", " + tableChar + " BLOB");
                } else if (List.class == type || Map.class == type) {
                    sqlChar += (", " + tableChar + " TEXT");
                } else {
                    sqlChar += (", " + tableChar + " TEXT");
                }


                //如果是默认索引，那就添加默认索引
                if (gt_Column != null) {
                    switch (gt_Column.setIndex()) {
                        case GT_Column.DEFAULT_INDEX://默认索引
                            sqlChar += " " + gt_Column.setIndex();
                            break;
                        case GT_Column.UNIQUE_INDEX://默认索引
                            String index = gt_Column.setIndex().replaceFirst("index_name", tableChar)
                                    .replaceFirst("tableName", tableName)
                                    .replaceFirst("column", tableChar);
                            tableIndexList.add(index);
                            break;
                        case GT_Column.GENERAL_INDEX://单列索引或组合索引 CREATE INDEX [index_name] ON [tableName] ([column]);
                            indexChar += tableChar + ",";
                            break;

                    }
                }

                sqlCharList.add(tableChar);//存储映射过的字段
            }

            //单列或组合索引 如果 indexChar != null 代表是 单列或组合索引
            if (indexChar != null && indexChar.length() > 0) {
                indexChar = indexChar.substring(0, indexChar.length() - 1);
                String column = indexChar;
                if (indexChar.contains(",")) {//如果是组合索引 就创建新的索引名字
                    column = indexChar.replaceAll(",", "_");
                }
                String index = GT_Column.GENERAL_INDEX.replaceFirst("index_name", column)
                        .replaceFirst("tableName", tableName)
                        .replaceFirst("column", indexChar);
                tableIndexList.add(index);
            }

            //解析父类,放在下面的表，在父类子类有相同字段时，优先选用子表里的字段
            Class<?> superclass = aClass.getSuperclass();
            if (Object.class != superclass) {
                analysisClassAllChar(superclass);
            }

            return "";
        }


        /**
         * @param aClass
         * @存储需要更新的数据
         */
        private synchronized void saveUpdateData(Class<?> mClass) {
            String tableName = mClass.getSimpleName();//获取表名
            Field[] fields = mClass.getDeclaredFields();//获取所有成员变量
            String oldStr = "";//存储旧字段
            String newStr = "";//存储新字段
            for (Field field : fields) {
                String newTableName = field.getName();//获取新字段名
                GT_Column gt_Column = field.getAnnotation(GT_Column.class);//保存修改数据解析
                if (gt_Column != null) {
                    String oldTableName = gt_Column.setOldTableValue();//获取注解值
                    if (oldTableName != null && !"".equals(oldTableName)) {
                        //过滤掉 字段值 与 注解值 一样的问题
                        if (newTableName.equals(oldTableName)) continue;
                        oldStr += oldTableName + " ";
                        newStr += newTableName + " ";
                    }
                }
            }
            if (oldStr != null && newStr != null && !"".equals(oldStr) && !"".equals(newStr)) {
                updateTableValueList.add(tableName + "{" + oldStr + "," + newStr + "}");
            }
        }

        //====================================== 第四步：创建数据库对象 ======================================
        public boolean isCreateTable = true;//是否创建数据库

        private Hibernate initSQL(String sqlName, int sqlVersion, String passWord, Object scanTable) {
            //初始化数据库名称
            if (sqlName != null) {
                DATABASE_NAME = sqlName + ".db";
            }

            //初始化数据库版本号
            if (sqlVersion > 0) {
                DATABASE_VERSION = sqlVersion;
            }

            //初始化数据库加密密码
            if (passWord != null) {
                this.passWord = passWord;
            }
            if (isCreateTable) {//是否执行创建数据库代码
                SCAN_TABLE = scanTable;//映射表的方式赋值
                isDeleteNullTable = false;
                DatabaseHelper databaseHelper = new DatabaseHelper(weakReference.get(), DATABASE_NAME, null, DATABASE_VERSION);
                sqLiteDatabase2 = databaseHelper.getWritableDatabase();//ok
                if (sqLiteDatabase2 == null) return this;
                if (isDeleteNullTable) {
                    deleteUnnecessaryTable();//删除掉多余的表
                } else {
                    if (isTable("android_metadata")) {
                        deleteTable("android_metadata");
                    }
                }

            }
            return this;
        }

        /**
         * 删除掉多余的表,如系统自己创建的表
         */
        private void deleteUnnecessaryTable() {
            //删除系统创建的多余表
            List<String> okTableNameList = new ArrayList<>();
            for (Class classz : tableList) {
                okTableNameList.add(classz.getSimpleName());
            }

            List<String> sqlAllTableName = getSqlAllTableName();
            for (String tableName : sqlAllTableName) {
                if (!okTableNameList.contains(tableName)) {//判断当前创建的表是否为系统创建的表
                    if (isTable(tableName)) {
                        deleteTable(tableName).isStatus();//删除表
                    }
                }
            }
            okTableNameList.clear();
            okTableNameList = null;
        }

        //====================================== 加载 包名扫描 SQL 注解 ======================================
        private void loadHibernateAnnotation(String EnityPackagePath, Context context) {
            DexFile dexFile = null;
            try {
                dexFile = new DexFile(context.getPackageCodePath());
            } catch (IOException e) {
                e.printStackTrace();
                isCreateTable = false;
            }
            Enumeration<String> enumeration = dexFile.entries();
            while (enumeration.hasMoreElements()) {
                String className = enumeration.nextElement();
//                GT.log("className:" + className);//com.gsls.activity.MainActivity
                //在当前所有可执行的类里面查找包含有该包名的所有类
                if (className.contains(EnityPackagePath)) {
                    Class<?> clazz1 = null;
                    try {
                        clazz1 = Class.forName(className);
                    } catch (ClassNotFoundException e) {
//                        e.printStackTrace();
                    }
                    if (clazz1 == null) continue;//在扫描到第三模块时会为null

                    //过滤掉未被注解过的类
                    GT_Bean bean_Bean = clazz1.getAnnotation(GT_Bean.class);//获取该类 ContextView 的注解类
                    GT_Entity bean_Entity = clazz1.getAnnotation(GT_Entity.class);//获取该类 ContextView 的注解类

                    if (bean_Bean != null || bean_Entity != null) {

                        //分库映射(如果实体类中指定了被映射的数据库，那就根据数据库名称来判断该表是否映射)
                        String[] userSqlName = new String[0];
                        userSqlName = null;
                        if (bean_Bean != null) {
                            userSqlName = bean_Bean.setSqlNames();//获取用户指定的数据库名称
                        } else if (bean_Entity != null) {
                            userSqlName = bean_Entity.setSqlNames();//获取用户指定的数据库名称
                        }

                        if (userSqlName != null && userSqlName.length != 0) {
                            String gt_sqlName = DATABASE_NAME.substring(0, DATABASE_NAME.indexOf("."));//获取当前系统执行的数据库名称
                            //StringArray to List
                            if (!Arrays.asList(userSqlName).contains(gt_sqlName)) {
                                continue;//跳过本次添加的表
                            }
                        }
                        tableList.add(clazz1);
                    }

                }
            }
        }


        /**
         * ==================================== 新版 数据库 操作API ====================================
         */

        private static Map<String, String[]> parameterNameMap = new ArrayMap<>();//存储一个接口里方法的形参名称

        public static <T> T create(Class<T> classz, Hibernate... hibernates) {
            //设置并发请求个数
            ExecutorService executor = null;
            GT_DaoBuild gt_dao = classz.getAnnotation(GT_DaoBuild.class);
            executor = Thread.getInstance(0, true);

            //如果该类被 GT_Dao 所标识，那就进行反射获取绑定对象进行解析
            if (gt_dao != null) {
                Object object = AnnotationAssist.classToObject(classz.getName() + "Binding");
                if (object != null) {
                    String javaCode = object.toString();
                    if (javaCode != null) {
                        String[] parameterNameArrays = javaCode.split(" ");
                        for (String parameterName : parameterNameArrays) {
                            int indexOf = parameterName.indexOf("[");
                            if (indexOf != -1) {
                                String key = parameterName.substring(0, indexOf);
                                String value = parameterName.substring(indexOf + 1, parameterName.length() - 1);
                                parameterNameMap.put(key, value.split(","));
                            }
                        }
                    }
                }
            }

            //采用动态代理进行解析接口类
            ExecutorService finalExecutor = executor;
            return MethodProxy.getInstance().create(classz, new MethodProxy.OnRunMethod() {
                @Override
                public Object runMethod(Object proxy, Method method, Object[] args) {
                    String methodName = method.getName();
                    Call<T> call = new Call<T>();
                    call.executor = finalExecutor;//设置线程池

                    //设置指定的 数据库框架对象
                    if (hibernates != null && hibernates.length > 0) {
                        call.hibernate = hibernates[0];
                    }
                    if (call.hibernate == null) {
                        call.hibernate = new Hibernate().initialize(null, 1, Hibernate.DATABASE_PASSWORD, null);
                    }

                    //获取所有注解
                    List<Annotation> methodAllAnnotation = AnnotationAssist.getMethodParameterAnnotation(method);
                    for (Annotation annotation : methodAllAnnotation) {

                    }

                    //获取T类型，用于 json to Bean
                    try {
                        Type genericReturnType = method.getGenericReturnType();
                        String typeName = genericReturnType.toString();
                        if (typeName.indexOf("Call<") != -1) {
                            typeName = typeName.substring(typeName.indexOf("Call<") + "Call<".length(), typeName.length() - 1);
                        }
                        call.t = (T) AnnotationAssist.classToObject(typeName);//1
                        if (typeName.contains("java.util.List")) {
                            call.tClass = AnnotationAssist.stringListToClass(typeName);
                        } else {
                            call.tClass = (Class<T>) AnnotationAssist.stringToClass(typeName);
                        }
                    } catch (Exception e) {
                        call.exception = e;
                    }

                    //获取方法形参的类型
                    Class<?>[] parameterTypes = method.getParameterTypes();

                    String[] parameterArray = null;

                    //第一种方法：使用 GT_DataBinding 进行获取方法形参
                    if (parameterArray == null || parameterArray.length == 0 || parameterNameMap.size() >= 1) {
                        try {
                            String GT_KEY = classz.getName() + "+" + methodName + "-";
                            for (Class<?> cla : parameterTypes) {
                                String parameterType = cla.toString();
                                if (parameterType.contains(".")) {
                                    String[] split = parameterType.split("\\.");
                                    GT_KEY += split[split.length - 1] + "-";
                                } else {
                                    GT_KEY += parameterType + "-";
                                }
                            }
                            GT_KEY = GT_KEY.substring(0, GT_KEY.length() - 1);
                            parameterArray = parameterNameMap.get(GT_KEY);
                        } catch (Exception e) {
                            GT.errt("通过注解请求方式异常:" + e);
                        }
                    }

                    //第二种方法：使用注解的方式获取方法形参名
                    if (parameterArray == null || parameterArray.length == 0) {
                        Annotation[][] declaredAnnotations = method.getParameterAnnotations();
                        List<String> list = new ArrayList<>();
                        //获取 注解上的方法名称
                        for (Annotation[] annotation1 : declaredAnnotations) {
                            for (Annotation annotation2 : annotation1) {
                                if (annotation2 instanceof Where) {
                                    Where where = (Where) annotation2;
                                    list.add(where.value());
                                }
                            }
                        }
                        if (list.size() >= 1) {
                            parameterArray = new String[list.size()];
                            for (int i = 0; i < list.size(); i++) {
                                parameterArray[i] = list.get(i);
                            }
                        }
                    }


                    //第三种方法：通过 JDK1.8 获取方法形参的名称
                    if (parameterArray == null || parameterArray.length == 0) {
                        try {
                            Parameter[] parameters = method.getParameters();
                            parameterArray = new String[parameters.length];
                            for (int i = 0; i < parameters.length; i++) {
                                parameterArray[i] = parameters[i].getName();
                            }
                        } catch (NoSuchMethodError e) {
                            if (LOG.GT_LOG_TF) {
                                GT.errt("method.getParameters 方法无效:" + e);
                            }
                        }
                    }


                    //三种方法还为 null 那就无能为力，只能提示错误
                    if (parameterArray == null) {
                        GT.errt("获取 GT.Hibernate.Call 方法种的形参出错，无法进行请求操作，正确使用教程请参考官网教程：https://blog.csdn.net/qq_39799899");
                        if (args == null || args.length == 0) return call;
                        parameterArray = new String[args.length];
                        for (int i = 0; i < args.length; i++) {
                            parameterArray[i] = "" + i;
                        }
                    }


                    if (args != null) {
                        for (int i = 0; i < args.length; i++) {
                            Object obj = args[i];
                            if (obj == null) continue;//跳过为 null 的参数
                            String aClass = AnnotationAssist.returnType(parameterTypes[i]).toString();
                            if (aClass.contains("Map")) {
                                if (obj instanceof Map) {
                                    Map<String, Object> map = (Map<String, Object>) obj;
                                    for (String key : map.keySet()) {
                                        if (!call.getParamMap().containsKey(key)) {
                                            call.addParam(key, map.get(key));

                                        }
                                    }
                                }
                            } else if (aClass.contains("Object") || aClass.contains("java.util.List") || aClass.contains("class [Lcom")) {
                                if (obj instanceof WhereBean) {
                                    call.whereBean = (WhereBean) obj;
                                } else {
                                    call.t = (T) obj;//2
                                }
                            } else {//call.whereBean
                                if (!call.getParamMap().containsKey(parameterArray[i])) {
                                    call.addParam(parameterArray[i], obj);
                                }
                            }

                        }
                    }

//                    call.url += call.keyList.get(call.keyList.size() - 1);
                    if (call.keyList.size() != 0) {
                        call.keyList.remove(call.keyList.size() - 1);
                    }

                    //再把具体请求的方法进行整合
                    GT_Insert insert = method.getAnnotation(GT_Insert.class);
                    GT_Delete delete = method.getAnnotation(GT_Delete.class);
                    GT_Query query = method.getAnnotation(GT_Query.class);
                    GT_Update update = method.getAnnotation(GT_Update.class);
                    GT_Code code = method.getAnnotation(GT_Code.class);

                    //如果存在代表，赋值直接是以 whereBean 实体类赋值的
                    if (call.whereBean == null) {
                        call.whereBean = new WhereBean();
                        //请求类型
                        if (insert != null) {
                            call.whereBean.setType(GT_Insert.class);
                            call.whereBean.setSqlWhere(insert.where());
                            call.whereBean.setSqlValue(insert.value());
                        } else if (delete != null) {
                            call.whereBean.setType(GT_Delete.class);
                            call.whereBean.setSqlWhere(delete.where());
                            call.whereBean.setSqlValue(delete.value());
                        } else if (query != null) {
                            call.whereBean.setType(GT_Query.class);
                            call.whereBean.setSqlSelect(query.select());
                            call.whereBean.setSqlWhere(query.where());
                            call.whereBean.setSqlValue(query.value());
                            call.whereBean.setFlashback(query.flashback());
                            call.whereBean.setLimit(query.limit());
                            call.whereBean.setGroupBy(query.groupBy());
                            call.whereBean.setHaving(query.having());
                            call.whereBean.setList(query.isLast());
                        } else if (update != null) {
                            call.whereBean.setType(GT_Update.class);
                            call.whereBean.setSqlWhere(update.where());
                            call.whereBean.setSqlValue(update.value());
                        } else if (code != null) {
                            call.whereBean.setType(GT_Code.class);
                            call.whereBean.setSqlCode(code.value());
                        }
                    } else {
                        if (insert != null) {
                            call.whereBean.setType(GT_Insert.class);
                        } else if (delete != null) {
                            call.whereBean.setType(GT_Delete.class);
                        } else if (query != null) {
                            call.whereBean.setType(GT_Query.class);
                        } else if (update != null) {
                            call.whereBean.setType(GT_Update.class);
                        } else if (code != null) {
                            call.whereBean.setType(GT_Code.class);
                        }
                    }

                    call.method = method;
                    return call;
                }
            });
        }

        //请求数据载体
        public static class Call<T> {

            private List<String> keyList = new ArrayList<>(); //为了保证方法参数的顺序
            private Map<String, Object> paramMap = new ArrayMap<>();
            private Map<String, Object> headerMap = new ArrayMap<>();
            private ExecutorService executor;//线程池
            private String response;
            private Method method;
            private T t;
            private Class<T> tClass;
            private Exception exception;//异常

            private WhereBean whereBean;

            private Hibernate hibernate;//SQL管理器

            public Map<String, Object> getParamMap() {
                return paramMap;
            }

            public Call<T> addParam(String key, Object obj) {
                if (paramMap != null) {
                    paramMap.put(key, obj);
                    keyList.add(key);
                }
                return this;
            }

            /**
             * 经典的请求方式 ：
             * new Call<>(Bean.class).addUrl(url).newCall();
             *
             * @param tClass
             */
            public Call(Class<T>... tClass) {
                executor = Thread.getInstance(0);
                if (tClass.length > 0) {
                    Class tClass1 = tClass[0];
                    this.tClass = tClass1;

                }

            }

            public T getData() {
                return t;
            }


            @Override
            public String toString() {
                return "Call{" +
                        "keyList=" + keyList +
                        ", paramMap=" + paramMap +
                        ", headerMap=" + headerMap +
                        ", executor=" + executor +
                        ", response='" + response + '\'' +
                        ", method=" + method +
                        ", t=" + t +
                        ", tClass=" + tClass +
                        ", exception=" + exception +
                        ", whereBean=" + whereBean +
                        ", hibernate=" + hibernate +
                        '}';
            }

            //异步需要填参数，同步请求无需填参数
            public Call<T> newCall(Callback<T>... callback) {
                return callRequest(this, callback);
            }


            public void close() {
                response = null;
                t = null;
                exception = null;
                if (paramMap != null) {
                    paramMap.clear();
                    paramMap = null;
                }
                if (headerMap != null) {
                    headerMap.clear();
                    headerMap = null;
                }
            }

        }

        public static class WhereBean {

            private Class<?> type;
            private String[] sqlSelect;//SQL 返回字段类型
            private String[] sqlWhere;//SQL 条件类型代码
            private String[] sqlValue;//SQL 条件代码
            private String sqlCode;//SQL代码
            private String flashback;
            private int[] limit;
            private String groupBy;
            private String having;
            private boolean isList;

            public WhereBean(Class<?> type, String[] sqlSelect, String[] sqlWhere, String[] sqlValue, String sqlCode, String flashback, int[] limit, String groupBy, String having, boolean isList) {
                this.type = type;
                this.sqlSelect = sqlSelect;
                this.sqlWhere = sqlWhere;
                this.sqlValue = sqlValue;
                this.sqlCode = sqlCode;
                this.flashback = flashback;
                this.limit = limit;
                this.groupBy = groupBy;
                this.having = having;
                this.isList = isList;
            }

            public WhereBean() {
            }

            public String[] getSqlSelect() {
                return sqlSelect;
            }

            public WhereBean setSqlSelect(String... sqlSelect) {
                this.sqlSelect = sqlSelect;
                return this;
            }

            public String[] getSqlWhere() {
                return sqlWhere;
            }

            public WhereBean setSqlWhere(String... sqlWhere) {
                this.sqlWhere = sqlWhere;
                return this;
            }

            public String[] getSqlValue() {
                return sqlValue;
            }

            public WhereBean setSqlValue(String... sqlValue) {
                this.sqlValue = sqlValue;
                return this;
            }

            public String getSqlCode() {
                return sqlCode;
            }

            public WhereBean setSqlCode(String sqlCode) {
                this.sqlCode = sqlCode;
                return this;
            }

            public String getFlashback() {
                return flashback;
            }

            public WhereBean setFlashback(String flashback) {
                this.flashback = flashback;
                return this;
            }

            public int[] getLimit() {
                return limit;
            }

            public WhereBean setLimit(int... limit) {
                this.limit = limit;
                return this;
            }

            public String getGroupBy() {
                return groupBy;
            }

            public WhereBean setGroupBy(String groupBy) {
                this.groupBy = groupBy;
                return this;
            }

            public String getHaving() {
                return having;
            }

            public WhereBean setHaving(String having) {
                this.having = having;
                return this;
            }

            public boolean isList() {
                return isList;
            }

            public WhereBean setList(boolean list) {
                isList = list;
                return this;
            }

            public Class<?> getType() {
                return type;
            }

            /**
             * 数据库操作类型(增删查改)
             *
             * @param type
             * @return
             */
            public WhereBean setType(Class<?> type) {
                this.type = type;
                return this;
            }

            @Override
            public String toString() {
                return "WhereBean{" +
                        "type=" + type +
                        ", sqlSelect=" + Arrays.toString(sqlSelect) +
                        ", sqlWhere=" + Arrays.toString(sqlWhere) +
                        ", sqlValue=" + Arrays.toString(sqlValue) +
                        ", sqlCode='" + sqlCode + '\'' +
                        ", flashback='" + flashback + '\'' +
                        ", limit=" + Arrays.toString(limit) +
                        ", groupBy='" + groupBy + '\'' +
                        ", having='" + having + '\'' +
                        ", isList=" + isList +
                        '}';
            }
        }

        /**
         * 具体请求
         *
         * @param call
         * @param callBack
         * @param <T>
         */
        private static <T> Call<T> callRequest(Call<T> call, Callback<T>... callbacks) {
            Callback<T> callBack = null;
            if (callbacks.length > 0) {
                callBack = callbacks[0];
            }

            if (callBack != null) {
                //异步操作
                Callback<T> finalCallBack = callBack;
                call.executor.execute(new Runnable() {
                    @Override
                    public void run() {
                        callSynchronization(call, finalCallBack);
                    }
                });
            } else {
                //同步操作
                return callSynchronization(call, callBack);
            }

            return call;
        }

        /**
         * 操作
         *
         * @param call
         * @param callback
         * @param <T>
         * @return
         */
        private static <T> Call<T> callSynchronization(Call<T> call, Callback<T> callback) {
            if (call.hibernate == null) return call;

            Thread.runAndroid(new Runnable() {
                @Override
                public void run() {
                    callback.onStart(call);
                }
            });

            try {
                if ((call.whereBean.sqlWhere != null || call.whereBean.sqlCode != null) && call.paramMap.size() > 0) {
                    call.whereBean.sqlValue = new String[call.paramMap.size()];
                    Iterator<String> iterator = call.paramMap.keySet().iterator();

                    //倒序
                    List<String> sqlValueList = new ArrayList<>();
                    for (int i = 0; i < call.whereBean.sqlValue.length; i++) {
                        String key = iterator.next();
                        sqlValueList.add(key);
                    }
//                    Collections.reverse(sqlValueList);

                    //设置查询类型值
                    for (int i = 0; i < sqlValueList.size(); i++) {
                        String key = sqlValueList.get(i);
                        String value = String.valueOf(call.paramMap.get(key));
                        call.whereBean.sqlValue[i] = value;
                    }
                    sqlValueList.clear();
                    sqlValueList = null;
                }

                if (GT_Insert.class.equals(call.whereBean.type)) {//插入数据
                    boolean status = false;
                    if (call.tClass == call.t.getClass()) {
                        status = call.hibernate.save(call.t).isStatus();
                    } else if (call.t instanceof List) {
                        status = call.hibernate.saveAll((List<?>) call.t).isStatus();
                    } else if (call.t.getClass().toString().contains("class [Lcom")) {
                        status = call.hibernate.saveAll(call.t).isStatus();
                    }

                    boolean finalStatus = status;
                    Thread.runAndroid(new Runnable() {
                        @Override
                        public void run() {
                            if (finalStatus) {//插入成功
                                callback.onSuccess(call.t, call);
                            } else {//插入失败
                                callback.onError(call, call.exception);
                            }
                        }
                    });

                } else if (GT_Delete.class.equals(call.whereBean.type)) {//删除数据
                    boolean status = true;
                    if (call.whereBean.sqlWhere.length == 0 && call.whereBean.sqlValue.length == 1) {//根据ID删除
                        status = call.hibernate.delete(call.tClass, Integer.parseInt(call.whereBean.sqlValue[0])).isStatus();
                    } else if (call.whereBean.sqlWhere.length != 0 || call.whereBean.sqlValue.length != 0) {//根据具体条件删除
                        status = call.hibernate.where(call.whereBean.sqlWhere, call.whereBean.sqlValue).delete(call.tClass).isStatus();
                    } else if (call.t != null) {//根据实体类的 ID 删除
                        status = call.hibernate.delete(call.t).isStatus();
                    } else if (call.whereBean.sqlWhere.length == 0 && call.whereBean.sqlValue.length == 0) {
                        status = call.hibernate.deleteAll(call.tClass).isStatus();//删除所有
                    }

                    boolean finalStatus = status;
                    Thread.runAndroid(new Runnable() {
                        @Override
                        public void run() {
                            if (finalStatus) {//删除成功
                                callback.onSuccess(call.t, call);
                            } else {//删除失败
                                callback.onError(call, call.exception);
                            }
                        }
                    });

                } else if (GT_Query.class.equals(call.whereBean.type)) {//查询数据
                    //查询条件
                    call.hibernate
                            .where(call.whereBean.sqlWhere, call.whereBean.sqlValue)
                            .select(call.whereBean.sqlSelect)
                            .flashback(call.whereBean.flashback)
                            .limit(call.whereBean.limit)
                            .groupBy(call.whereBean.groupBy)
                            .having(call.whereBean.having)
                            .isLast(call.whereBean.isList);
                    if (call.t instanceof ArrayList) {
                        call.t = (T) call.hibernate.queryAll(call.tClass);//3
                    } else {
                        call.t = (T) call.hibernate.query(call.tClass);//4
                    }
                    Thread.runAndroid(new Runnable() {
                        @Override
                        public void run() {
                            if (call.t != null) {
                                callback.onSuccess(call.t, call);
                            } else {
                                callback.onError(call, call.exception);
                            }
                        }
                    });
                } else if (GT_Update.class.equals(call.whereBean.type)) {//修改数据
                    boolean status = false;
                    if (call.t instanceof ContentValues) {
                        ContentValues contentValues = (ContentValues) call.t;
                        status = call.hibernate
                                .where(call.whereBean.sqlWhere, call.whereBean.sqlValue)
                                .update(call.tClass.getSimpleName(), contentValues).isStatus();

                        //获取到返回 ID
                        try {
                            if (call.whereBean.sqlWhere != null && call.whereBean.sqlWhere.length > 0 && call.whereBean.sqlValue != null && call.whereBean.sqlValue.length > 0) {
                                String idName = call.whereBean.sqlWhere[0];
                                idName = idName.substring(0, idName.indexOf(" "));
                                contentValues.put(idName, Integer.parseInt(call.whereBean.sqlValue[0]));
                                call.t = (T) contentValues;//5
                            }
                        } catch (Exception e) {

                        }

                    } else {
                        status = call.hibernate.update(call.t).isStatus();
                    }
                    boolean finalStatus = status;
                    Thread.runAndroid(new Runnable() {
                        @Override
                        public void run() {
                            if (finalStatus) {//修改成功
                                if (call.t instanceof ContentValues) {//ContentValues 转 实体类
                                    call.t = (T) AnnotationAssist.contentValuesToObject((ContentValues) call.t, call.tClass);//6
                                }
                                callback.onSuccess(call.t, call);
                            } else {//修改失败
                                callback.onError(call, call.exception);
                            }
                        }
                    });
                } else if (GT_Code.class.equals(call.whereBean.type)) {//使用自定义代码执行
                    SQLiteDatabase sqliteDatabase = call.hibernate.getSqliteDatabase();
                    if (sqliteDatabase == null || call.whereBean.getSqlCode() == null || call.whereBean.getSqlCode().length() == 0) {
                        Thread.runAndroid(new Runnable() {
                            @Override
                            public void run() {
                                callback.onError(call, call.exception);
                            }
                        });

                    } else {
                        //自定义sql代码
                        String code = call.whereBean.getSqlCode().toLowerCase();//注意：全部转为小写
                        if (code.contains("insert")) {
                            code = ApplicationUtils.replaceArray(call.whereBean.getSqlCode(), "\\?", call.whereBean.sqlValue);
                            call.hibernate.getSqliteDatabase().execSQL(code);
                        } else if (code.contains("delete")) {
                            code = ApplicationUtils.replaceArray(call.whereBean.getSqlCode(), "\\?", call.whereBean.sqlValue);
                            call.hibernate.getSqliteDatabase().execSQL(code);
                        } else if (code.contains("select")) {
                            code = ApplicationUtils.replaceArray(call.whereBean.getSqlCode(), "\\?", call.whereBean.sqlValue);
                            Cursor cursor = sqliteDatabase.rawQuery(code, null);
                            call.t = (T) cursorToObject(cursor, call.tClass, sqliteDatabase, call.tClass.getSimpleName(), replaceSelectValue(code));//7
                        } else if (code.contains("update")) {
                            code = ApplicationUtils.replaceArray(call.whereBean.getSqlCode(), "\\?", call.whereBean.sqlValue);
                            call.hibernate.getSqliteDatabase().execSQL(code);
                        } else {
                            code = ApplicationUtils.replaceArray(call.whereBean.getSqlCode(), "\\?", call.whereBean.sqlValue);
                            call.hibernate.getSqliteDatabase().execSQL(code);
                        }

                        //如果没报异常捕获，那就算执行正常走操作成功流程
                        Thread.runAndroid(new Runnable() {
                            @Override
                            public void run() {
                                callback.onSuccess(call.t, call);
                            }
                        });

                    }
                } else {
                    GT.err("非法的 查询实体类型");
                }
            } catch (Exception e) {
                Thread.runAndroid(new Runnable() {
                    @Override
                    public void run() {
                        callback.onError(call, e);
                    }
                });
            }

            Thread.runAndroid(new Runnable() {
                @Override
                public void run() {
                    callback.onEnd(call);
                }
            });

            return call;
        }

        //增强版请求接口
        public static interface CallbackListener<T> {

            public void onSuccess(T t, Call<T> call);

            public void onError(Call<T> call, Exception e);

        }

        //查询接口类
        public static abstract class Callback<T> implements CallbackListener<T> {

            public void onStart(Call<T> call) {
            }//开始查询

            public void onSuccess(T t, Call<T> call) {
            }//查询成功

            public void onError(Call<T> call, Exception e) {
            }//查询错误

            public void onEnd(Call<T> call) {
            }//结束操作

        }

        //数据库类结束
    }

    /**
     * 管理手机数据
     */
    public static class CleanDataUtils {

        //获取最大手机内存
        public static String getMaxMemory() {
            return FileUtils.formetFileSize(Runtime.getRuntime().maxMemory());
        }

        /**
         * 需要查下缓存大小
         *
         * @param context
         * @return
         */
        public static String getTotalCacheSize(Context context) throws Exception {
            long cacheSize = getFolderSize(context.getCacheDir());
            if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
                cacheSize += getFolderSize(context.getExternalCacheDir());
            }
            return getFormatSize(cacheSize);
        }

        /**
         * 清空缓存
         *
         * @param context
         */
        public static void clearAllCache(Context context) {
            deleteDir(context.getCacheDir());
            if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
                deleteDir(context.getExternalCacheDir());
            }

        }

        /**
         * 删除 dir 文件
         *
         * @param dir
         * @return
         */
        private static boolean deleteDir(File dir) {
            if (dir != null && dir.isDirectory()) {
                String[] children = dir.list();
                for (int i = 0; i < children.length; i++) {
                    boolean success = deleteDir(new File(dir, children[i]));
                    if (!success) {
                        return false;
                    }
                }
            }
            return dir.delete();
        }

        /**
         * 清除本应用内部缓存(/data/data/com.xxx.xxx/cache) * *
         *
         * @param context
         */
        public static void cleanInternalCache(Context context) {
            deleteFilesByDirectory(context.getCacheDir());
        }

        /**
         * 清除本应用所有数据库(/data/data/com.xxx.xxx/databases) * *
         *
         * @param context
         */
        public static void cleanDatabases(Context context) {
            deleteFilesByDirectory(new File("/data/data/" + context.getPackageName() + "/databases"));
        }

        /**
         * 清除本应用SharedPreference(/data/data/com.xxx.xxx/shared_prefs) *
         *
         * @param context
         */
        public static void cleanSharedPreference(Context context) {
            deleteFilesByDirectory(new File("/data/data/" + context.getPackageName() + "/shared_prefs"));
        }

        /**
         * 按名字清除本应用数据库 * *
         *
         * @param context
         * @param dbName
         */
        public static void cleanDatabaseByName(Context context, String dbName) {
            context.deleteDatabase(dbName);
        }

        /**
         * 清除/data/data/com.xxx.xxx/files下的内容 * *
         *
         * @param context
         */
        public static void cleanFiles(Context context) {
            deleteFilesByDirectory(context.getFilesDir());
        }

        /**
         * 清除外部cache下的内容(/mnt/sdcard/android/data/com.xxx.xxx/cache)
         *
         * @param context
         */
        public static void cleanExternalCache(Context context) {
            if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
                deleteFilesByDirectory(context.getExternalCacheDir());
            }
        }

        /**
         * 清除自定义路径下的文件，使用需小心，请不要误删。而且只支持目录下的文件删除 * *
         *
         * @param filePath
         */
        public static void cleanCustomCache(String filePath) {
            deleteFilesByDirectory(new File(filePath));
        }

        /**
         * 清除本应用所有的数据 * *
         *
         * @param context
         * @param filepath
         */
        public static void cleanApplicationData(Context context, String... filepath) {
            cleanInternalCache(context);
            cleanExternalCache(context);
            cleanDatabases(context);
            cleanSharedPreference(context);
            cleanFiles(context);
            if (filepath == null) {
                return;
            }
            for (String filePath : filepath) {
                cleanCustomCache(filePath);
            }
        }

        /**
         * 删除方法 这里只会删除某个文件夹下的文件，如果传入的directory是个文件，将不做处理 * *
         *
         * @param directory
         */
        private static void deleteFilesByDirectory(File directory) {
            if (directory != null && directory.exists() && directory.isDirectory()) {
                for (File item : directory.listFiles()) {
                    item.delete();
                }
            }
        }

        // 获取文件
        //Context.getExternalFilesDir() --> SDCard/Android/data/你的应用的包名/files/ 目录，一般放一些长时间保存的数据
        //Context.getExternalCacheDir() --> SDCard/Android/data/你的应用包名/cache/目录，一般存放临时缓存数据
        public static long getFolderSize(File file) throws Exception {
            long size = 0;
            try {
                File[] fileList = file.listFiles();
                for (int i = 0; i < fileList.length; i++) {
                    // 如果下面还有文件
                    if (fileList[i].isDirectory()) {
                        size = size + getFolderSize(fileList[i]);
                    } else {
                        size = size + fileList[i].length();
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return size;
        }

        /**
         * 删除指定目录下文件及目录
         *
         * @param deleteThisPath
         * @param filePath
         * @return
         */
        public static void deleteFolderFile(String filePath, boolean deleteThisPath) {
            if (!TextUtils.isEmpty(filePath)) {
                try {
                    File file = new File(filePath);
                    if (file.isDirectory()) {// 如果下面还有文件
                        File files[] = file.listFiles();
                        for (int i = 0; i < files.length; i++) {
                            deleteFolderFile(files[i].getAbsolutePath(), true);
                        }
                    }
                    if (deleteThisPath) {
                        if (!file.isDirectory()) {// 如果是文件，删除
                            file.delete();
                        } else {// 目录
                            if (file.listFiles().length == 0) {// 目录下没有文件或者目录，删除
                                file.delete();
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

        /**
         * 格式化单位
         *
         * @param size
         * @return
         */
        public static String getFormatSize(double size) {
            double kiloByte = size / 1024;
            //        if (kiloByte < 1) {
            //            return size + "Byte";
            //        }

            double megaByte = kiloByte / 1024;
            if (megaByte < 1) {
                BigDecimal result1 = new BigDecimal(Double.toString(kiloByte));
                return result1.setScale(2, BigDecimal.ROUND_HALF_UP)
                        .toPlainString() + "K";
            }

            double gigaByte = megaByte / 1024;
            if (gigaByte < 1) {
                BigDecimal result2 = new BigDecimal(Double.toString(megaByte));
                return result2.setScale(2, BigDecimal.ROUND_HALF_UP)
                        .toPlainString() + "M";
            }

            double teraBytes = gigaByte / 1024;
            if (teraBytes < 1) {
                BigDecimal result3 = new BigDecimal(Double.toString(gigaByte));
                return result3.setScale(2, BigDecimal.ROUND_HALF_UP)
                        .toPlainString() + "G";
            }
            BigDecimal result4 = new BigDecimal(teraBytes);
            return result4.setScale(2, BigDecimal.ROUND_HALF_UP).toPlainString()
                    + "T";
        }

        public static String getCacheSize(File file) throws Exception {
            return getFormatSize(getFolderSize(file));
        }

    }

    //设备信息与SD卡信息
    public static class DeviceInfoSDCardUtils {

        /**
         * 获取设备宽高（px）
         */
        public static String getDeviceWidthHeight(Context context) {
            return context.getResources().getDisplayMetrics().widthPixels + "px X " + context.getResources().getDisplayMetrics().heightPixels + "px";
        }

        /**
         * 获取设备宽度（px）
         */
        public static int getDeviceWidth(Context context) {
            return context.getResources().getDisplayMetrics().widthPixels;
        }

        /**
         * 获取设备高度（px）
         */
        public static int getDeviceHeight(Context context) {
            return context.getResources().getDisplayMetrics().heightPixels;
        }

        /**
         * 获取设备的唯一标识， 需要 “android.permission.READ_Phone_STATE”权限
         */
        public static String getIMEI(Context context) {
            TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
            String deviceId = tm.getDeviceId();
            if (deviceId == null) {
                return "UnKnown";
            } else {
                return deviceId;
            }
        }

        /**
         * 获取厂商名
         **/
        public static String getDeviceManufacturer() {
            return Build.MANUFACTURER;
        }

        /**
         * 获取产品名
         **/
        public static String getDeviceProduct() {
            return Build.PRODUCT;
        }

        /**
         * 获取手机品牌
         */
        public static String getDeviceBrand() {
            return Build.BRAND;
        }

        /**
         * 获取手机型号
         */
        public static String getDeviceModel() {
            return Build.MODEL;
        }

        /**
         * 获取手机主板名
         */
        public static String getDeviceBoard() {
            return Build.BOARD;
        }

        /**
         * 设备名
         **/
        public static String getDeviceDevice() {
            return Build.DEVICE;
        }

        /**
         * fingerprit 信息
         **/
        public static String getDeviceFubgerprint() {
            return Build.FINGERPRINT;
        }

        /**
         * 硬件名
         **/
        public static String getDeviceHardware() {
            return Build.HARDWARE;
        }

        /**
         * 主机
         **/
        public static String getDeviceHost() {
            return Build.HOST;
        }

        /**
         * 显示ID
         **/
        public static String getDeviceDisplay() {
            return Build.DISPLAY;
        }

        /**
         * ID
         **/
        public static String getDeviceId() {
            return Build.ID;
        }

        /**
         * 获取手机用户名
         **/
        public static String getDeviceUser() {
            return Build.USER;
        }

        /**
         * 获取手机 硬件序列号
         **/
        public static String getDeviceSerial() {
            return Build.SERIAL;
        }

        /**
         * 获取手机Android 系统SDK
         *
         * @return
         */
        public static int getDeviceSDK() {
            return Build.VERSION.SDK_INT;
        }

        /**
         * 获取手机Android 版本
         *
         * @return
         */
        public static String getDeviceAndroidVersion() {
            return Build.VERSION.RELEASE;
        }

        /**
         * 获取当前手机系统语言。
         */
        public static String getDeviceDefaultLanguage() {
            return Locale.getDefault().getLanguage();
        }

        /**
         * 获取当前系统上的语言列表(Locale列表)
         */
        public static String getDeviceSupportLanguage() {
            Log.e("wangjie", "Local:" + Locale.GERMAN);
            Log.e("wangjie", "Local:" + Locale.ENGLISH);
            Log.e("wangjie", "Local:" + Locale.US);
            Log.e("wangjie", "Local:" + Locale.CHINESE);
            Log.e("wangjie", "Local:" + Locale.TAIWAN);
            Log.e("wangjie", "Local:" + Locale.FRANCE);
            Log.e("wangjie", "Local:" + Locale.FRENCH);
            Log.e("wangjie", "Local:" + Locale.GERMANY);
            Log.e("wangjie", "Local:" + Locale.ITALIAN);
            Log.e("wangjie", "Local:" + Locale.JAPAN);
            Log.e("wangjie", "Local:" + Locale.JAPANESE);
            return Locale.getAvailableLocales().toString();
        }

        public static String getDeviceAllInfo(Context context) {

            return "\n\n1. IMEI:\n\t\t" + getIMEI(context)

                    + "\n\n2. 设备宽度:\n\t\t" + getDeviceWidth(context)

                    + "\n\n3. 设备高度:\n\t\t" + getDeviceHeight(context)

                    + "\n\n4. 是否有内置SD卡:\n\t\t" + isSDCardMount()

                    + "\n\n5. RAM 信息:\n\t\t" + getRAMInfo(context)

                    + "\n\n8. 是否联网:\n\t\t" + Network.isInternet(context)

                    + "\n\n9. 网络类型:\n\t\t" + Network.getNetworkState(context)

                    + "\n\n10. 系统默认语言:\n\t\t" + getDeviceDefaultLanguage()

                    + "\n\n11. 硬件序列号(设备名):\n\t\t" + Build.SERIAL

                    + "\n\n12. 手机型号:\n\t\t" + Build.MODEL

                    + "\n\n13. 生产厂商:\n\t\t" + Build.MANUFACTURER

                    + "\n\n14. 手机Fingerprint标识:\n\t\t" + Build.FINGERPRINT

                    + "\n\n15. Android 版本:\n\t\t" + Build.VERSION.RELEASE

                    + "\n\n16. Android SDK版本:\n\t\t" + Build.VERSION.SDK_INT

                    + "\n\n17. 安全patch 时间:\n\t\t" + Build.VERSION.SECURITY_PATCH

                    + "\n\n18. 发布时间:\n\t\t" + Build.TIME

                    + "\n\n19. 版本类型:\n\t\t" + Build.TYPE

                    + "\n\n20. 用户名:\n\t\t" + Build.USER

                    + "\n\n21. 产品名:\n\t\t" + Build.PRODUCT

                    + "\n\n22. ID:\n\t\t" + Build.ID

                    + "\n\n23. 显示ID:\n\t\t" + Build.DISPLAY

                    + "\n\n24. 硬件名:\n\t\t" + Build.HARDWARE

                    + "\n\n25. 产品名:\n\t\t" + Build.DEVICE

                    + "\n\n26. Bootloader:\n\t\t" + Build.BOOTLOADER

                    + "\n\n27. 主板名:\n\t\t" + Build.BOARD

                    + "\n\n28. CodeName:\n\t\t" + Build.VERSION.CODENAME + "\n\n29. 语言支持:\n\t\t" + getDeviceSupportLanguage();

        }

        private static final int INTERNAL_STORAGE = 0;
        private static final int EXTERNAL_STORAGE = 1;

        /**
         * 获取 手机 RAM 信息
         */
        public static String getRAMInfo(Context context) {
            long totalSize = 0;
            long availableSize = 0;

            ActivityManager activityManager = (ActivityManager) context.getSystemService(context.ACTIVITY_SERVICE);

            ActivityManager.MemoryInfo memoryInfo = new ActivityManager.MemoryInfo();
            activityManager.getMemoryInfo(memoryInfo);
            totalSize = memoryInfo.totalMem;
            availableSize = memoryInfo.availMem;

            return "可用/总共：" + Formatter.formatFileSize(context, availableSize) + "/" + Formatter.formatFileSize(context, totalSize);
        }

        /**
         * 判断SD是否挂载
         */
        public static boolean isSDCardMount() {
            return Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED);
        }

        /**
         * 获取 手机 RAM 信息 方法 一
         */
        public static String getTotalRAM(Context context) {
            long size = 0;
            ActivityManager activityManager = (ActivityManager) context.getSystemService(context.ACTIVITY_SERVICE);
            ActivityManager.MemoryInfo outInfo = new ActivityManager.MemoryInfo();
            activityManager.getMemoryInfo(outInfo);
            size = outInfo.totalMem;

            return Formatter.formatFileSize(context, size);
        }

        /**
         * 手机 RAM 信息 方法 二
         */
        public static String getTotalRAMOther(Context context) {
            String path = "/proc/meminfo";
            String firstLine = null;
            int totalRam = 0;
            try {
                FileReader fileReader = new FileReader(path);
                BufferedReader br = new BufferedReader(fileReader, 8192);
                firstLine = br.readLine().split("\\s+")[1];
                br.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            if (firstLine != null) {

                totalRam = (int) Math.ceil((new Float(Float.valueOf(firstLine) / (1024 * 1024)).doubleValue()));

                long totalBytes = 0;

            }

            return Formatter.formatFileSize(context, totalRam);
        }

        /**
         * 获取 手机 可用 RAM
         */
        public static String getAvailableRAM(Context context) {
            long size = 0;
            ActivityManager activityManager = (ActivityManager) context.getSystemService(context.ACTIVITY_SERVICE);
            ActivityManager.MemoryInfo outInfo = new ActivityManager.MemoryInfo();
            activityManager.getMemoryInfo(outInfo);
            size = outInfo.availMem;

            return Formatter.formatFileSize(context, size);
        }

        /**
         * 获取手机内部存储空间
         *
         * @param context
         * @return 以M, G为单位的容量
         */
        public static String getTotalInternalMemorySize(Context context) {
            File file = Environment.getDataDirectory();
            StatFs statFs = new StatFs(file.getPath());
            long blockSizeLong = statFs.getBlockSizeLong();
            long blockCountLong = statFs.getBlockCountLong();
            long size = blockCountLong * blockSizeLong;
            return Formatter.formatFileSize(context, size);
        }

        /**
         * 获取手机内部可用存储空间
         *
         * @param context
         * @return 以M, G为单位的容量
         */
        public static String getAvailableInternalMemorySize(Context context) {
            File file = Environment.getDataDirectory();
            StatFs statFs = new StatFs(file.getPath());
            long availableBlocksLong = statFs.getAvailableBlocksLong();
            long blockSizeLong = statFs.getBlockSizeLong();
            return Formatter.formatFileSize(context, availableBlocksLong * blockSizeLong);
        }

        /**
         * 获取手机外部存储空间
         *
         * @param context
         * @return 以M, G为单位的容量
         */
        public static String getTotalExternalMemorySize(Context context) {
            File file = Environment.getExternalStorageDirectory();
            StatFs statFs = new StatFs(file.getPath());
            long blockSizeLong = statFs.getBlockSizeLong();
            long blockCountLong = statFs.getBlockCountLong();
            return Formatter.formatFileSize(context, blockCountLong * blockSizeLong);
        }

        /**
         * 获取手机外部可用存储空间
         *
         * @param context
         * @return 以M, G为单位的容量
         */
        public static String getAvailableExternalMemorySize(Context context) {
            File file = Environment.getExternalStorageDirectory();
            StatFs statFs = new StatFs(file.getPath());
            long availableBlocksLong = statFs.getAvailableBlocksLong();
            long blockSizeLong = statFs.getBlockSizeLong();
            return Formatter.formatFileSize(context, availableBlocksLong * blockSizeLong);
        }

        /**
         * SD 卡信息
         */

        public static String getSDCardInfo() {

            SDCardInfo sd = new SDCardInfo();
            if (!isSDCardMount()) return "SD card 未挂载!";

            sd.isExist = true;
            StatFs sf = new StatFs(Environment.getExternalStorageDirectory().getPath());

            sd.totalBlocks = sf.getBlockCountLong();
            sd.blockByteSize = sf.getBlockSizeLong();
            sd.availableBlocks = sf.getAvailableBlocksLong();
            sd.availableBytes = sf.getAvailableBytes();
            sd.freeBlocks = sf.getFreeBlocksLong();
            sd.freeBytes = sf.getFreeBytes();
            sd.totalBytes = sf.getTotalBytes();
            return sd.toString();
        }

        public static class SDCardInfo {
            boolean isExist;
            long totalBlocks;
            long freeBlocks;
            long availableBlocks;
            long blockByteSize;
            long totalBytes;
            long freeBytes;
            long availableBytes;

            @Override
            public String toString() {
                return "isExist=" + isExist + "\ntotalBlocks=" + totalBlocks + "\nfreeBlocks=" + freeBlocks + "\navailableBlocks=" + availableBlocks + "\nblockByteSize=" + blockByteSize + "\ntotalBytes=" + totalBytes + "\nfreeBytes=" + freeBytes + "\navailableBytes=" + availableBytes;
            }
        }

        // add start by wangjie for SDCard TotalStorage
        public static String getSDCardTotalStorage(long totalByte) {

            double byte2GB = totalByte / 1024.00 / 1024.00 / 1024.00;
            double totalStorage;
            if (byte2GB > 1) {
                totalStorage = Math.ceil(byte2GB);
                if (totalStorage > 1 && totalStorage < 3) {
                    return 2.0 + "GB";
                } else if (totalStorage > 2 && totalStorage < 5) {
                    return 4.0 + "GB";
                } else if (totalStorage >= 5 && totalStorage < 10) {
                    return 8.0 + "GB";
                } else if (totalStorage >= 10 && totalStorage < 18) {
                    return 16.0 + "GB";
                } else if (totalStorage >= 18 && totalStorage < 34) {
                    return 32.0 + "GB";
                } else if (totalStorage >= 34 && totalStorage < 50) {
                    return 48.0 + "GB";
                } else if (totalStorage >= 50 && totalStorage < 66) {
                    return 64.0 + "GB";
                } else if (totalStorage >= 66 && totalStorage < 130) {
                    return 128.0 + "GB";
                }
            } else {
                // below 1G return get values
                totalStorage = totalByte / 1024.00 / 1024.00;

                if (totalStorage >= 515 && totalStorage < 1024) {
                    return 1 + "GB";
                } else if (totalStorage >= 260 && totalStorage < 515) {
                    return 512 + "MB";
                } else if (totalStorage >= 130 && totalStorage < 260) {
                    return 256 + "MB";
                } else if (totalStorage > 70 && totalStorage < 130) {
                    return 128 + "MB";
                } else if (totalStorage > 50 && totalStorage < 70) {
                    return 64 + "MB";
                }
            }

            return totalStorage + "GB";
        }


    }

    /**
     * 随机类
     */
    public static class GT_Random {

        private final static Random random = new Random();

        /**
         * 获取一个未知整数
         *
         * @return int
         */
        public static int getInt() {
            int value = 0;
            try {
                int min = -2147483648;
                int max = 2147483647;
                value = random.nextInt(max) % (max - min + 1) + min;
            } catch (Exception e) {
                value = random.nextInt(1079);
            }
            return value;
        }

        /**
         * 获取随机范围的数
         *
         * @param min
         * @param max
         * @return
         */
        public static int getInt(int min, int max) {
            int value = random.nextInt(max);
            if (value < min) {
                return getInt(min, max);
            }
            return value;
        }

        /**
         * 获取定义字符之间的随机字符
         *
         * @param startChar
         * @param closeChar
         * @return
         */
        public static char getChar(char startChar, char closeChar) {
            return (char) (startChar + Math.random() * (closeChar - startChar + 1));
        }

        /**
         * 随机获取一个名称
         *
         * @return
         */
        public static String getName(int nameLength) {
            if (nameLength < 1) return null;
            String sum = "";
            for (int i = 1; i < nameLength + 1; i++) {
                String str = "";
                int hightPos; //
                int lowPos;
                hightPos = (176 + Math.abs(random.nextInt(39)));
                lowPos = (161 + Math.abs(random.nextInt(93)));
                byte[] b = new byte[2];
                b[0] = (Integer.valueOf(hightPos)).byteValue();
                b[1] = (Integer.valueOf(lowPos)).byteValue();
                try {
                    str = new String(b, "GBK");
                } catch (UnsupportedEncodingException e) {
                    e.printStackTrace();
                    System.out.println("错误");
                }
                sum += str.charAt(0);
            }
            return sum;
        }

    }

    /**
     * 串口工具包
     */
    public static class SerialPortUtils {

        @Target(ElementType.FIELD)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface Build {
            String setComAll();       //默认SP名称

            int setBaudRate();

            boolean setISLog() default false;     //默认自动提交
        }


        public SerialPort serialPort;
        public SerialPortFinder serialPortFinder;
        public InputStream inputStream;
        public OutputStream outputStream;
        private int TYPE = 10;                  //默认十进制
        public static int FLAGS = 0;            //默认为 0
        private boolean isShowLog;              //是否显示串口内日志 true:显示  false:不显示
        public int defaultSpeed = 1000;         //默认速度
        public int waitingTime = defaultSpeed;  //默认等待读取数据时间 每次读取等待时间为 1 秒 注意：尽量使用默认的速率来读取数据，读取太快可能会读取数据异常
        public int readSpeed = 1000;            //读取速度
        public int readByteMax = 1024;          //读取字节的最大值
        private byte[] buffer;                  //读取数据的容器
        private boolean stopRead = false;       //停止读取标识

        /**
         * 停止读取
         *
         * @return
         */
        public SerialPortUtils stopRead() {
            stopRead = true;
            return this;
        }

        /**
         * @param context   上下文
         * @param COM_All   主板物理通讯地址
         * @param BAUD_RATE 波特率
         */
        public SerialPortUtils(Context context, String COM_All, int BAUD_RATE) {
            if (serialPortFinder == null) {
                serialPortFinder = new SerialPortFinder();
            }
            try {
                serialPort = new SerialPort(new File(COM_All), BAUD_RATE, FLAGS);
                inputStream = serialPort.getInputStream();
                outputStream = serialPort.getOutputStream();
                if (isShowLog) {
                    log(COM_All + "——打开串口成功!");
                    Toast.makeText(context, COM_All + "——打开串口成功!", Toast.LENGTH_LONG).show();
                }

                try {
                    HardwareInit.InitSerialPort(COM_All, BAUD_RATE);//初始化插件校准数据
                } catch (Exception e) {
                    log("初始化插件失败！");
                }

                buffer = new byte[readByteMax]; //读取数据的容器

            } catch (IOException e) {
                if (isShowLog) {
                    log(COM_All + "打开串口失败!");
                    Toast.makeText(context, COM_All + "打开串口失败!", Toast.LENGTH_LONG).show();
                }
            }
        }

        /**
         * @param context     上下文
         * @param COM_All     主板物理通讯地址
         * @param BAUD_RATE   波特率
         * @param readByteMax 读取Byte最大值
         */
        public SerialPortUtils(Context context, String COM_All, int BAUD_RATE, int readByteMax) {
            if (serialPortFinder == null) {
                serialPortFinder = new SerialPortFinder();
            }
            try {
                serialPort = new SerialPort(new File(COM_All), BAUD_RATE, FLAGS);
                inputStream = serialPort.getInputStream();
                outputStream = serialPort.getOutputStream();
                if (isShowLog) {
                    log(COM_All + "——打开串口成功!");
                    Toast.makeText(context, COM_All + "——打开串口成功!", Toast.LENGTH_LONG).show();
                }

                try {
                    HardwareInit.InitSerialPort(COM_All, BAUD_RATE);//初始化插件校准数据
                } catch (Exception e) {
                    log("初始化插件失败！");
                }

                buffer = new byte[readByteMax]; //读取数据的容器

            } catch (IOException e) {
                if (isShowLog) {
                    log(COM_All + "打开串口失败!");
                    if (context != null) {
                        Toast.makeText(context, COM_All + "打开串口失败!", Toast.LENGTH_LONG).show();
                    }
                }
            }
        }

        /**
         * @param context   上下文
         * @param COM_All   主板物理通讯地址
         * @param BAUD_RATE 波特率
         * @param isShowLog 是否显示内部日志
         */
        public SerialPortUtils(Context context, String COM_All, int BAUD_RATE, boolean isShowLog) {
            this.isShowLog = isShowLog;
            if (serialPortFinder == null) {
                serialPortFinder = new SerialPortFinder();
            }
            try {
                serialPort = new SerialPort(new File(COM_All), BAUD_RATE, FLAGS);
                inputStream = serialPort.getInputStream();
                outputStream = serialPort.getOutputStream();

                try {
                    HardwareInit.InitSerialPort(COM_All, BAUD_RATE);//初始化插件校准数据
                } catch (Exception e) {
                    log("初始化插件失败！");
                }

                if (isShowLog) {
                    log(COM_All + "——打开串口成功!");
                    if (context != null) {
                        Toast.makeText(context, COM_All + "——打开串口成功!", Toast.LENGTH_LONG).show();
                    }
                }

                buffer = new byte[readByteMax]; //读取数据的容器

            } catch (IOException e) {
                if (isShowLog) {
                    log(COM_All + "打开串口失败!");
                    Toast.makeText(context, COM_All + "打开串口失败!", Toast.LENGTH_LONG).show();
                }
            }
        }

        /**
         * @param context     上下文
         * @param COM_All     主板物理通讯地址
         * @param BAUD_RATE   波特率
         * @param readByteMax 读取Byte最大值
         */
        public SerialPortUtils(Context context, String COM_All, int BAUD_RATE, int readByteMax, boolean isShowLog) {
            this.isShowLog = isShowLog;
            if (serialPortFinder == null) {
                serialPortFinder = new SerialPortFinder();
            }
            try {
                serialPort = new SerialPort(new File(COM_All), BAUD_RATE, FLAGS);
                inputStream = serialPort.getInputStream();
                outputStream = serialPort.getOutputStream();

                try {
                    HardwareInit.InitSerialPort(COM_All, BAUD_RATE);//初始化插件校准数据
                } catch (Exception e) {
                    log("初始化插件失败！");
                }

                if (isShowLog) {
                    log(COM_All + "——打开串口成功!");
                    if (context != null) {
                        Toast.makeText(context, COM_All + "——打开串口成功!", Toast.LENGTH_LONG).show();
                    }
                }

                buffer = new byte[readByteMax]; //读取数据的容器

            } catch (IOException e) {
                if (isShowLog) {
                    log(COM_All + "打开串口失败!");
                    Toast.makeText(context, COM_All + "打开串口失败!", Toast.LENGTH_LONG).show();
                }
            }
        }


        /***************************************************** 其他功能性方法 *****************************************************/

        public SerialPortUtils setWaitingTimeAndReadSpeed(int waitingTime, int readSpeed) {
            this.defaultSpeed = waitingTime;
            this.readSpeed = readSpeed;
            return this;
        }

        public int getReadSpeed() {
            return readSpeed;
        }

        /**
         * 设置读取数据期间的速度
         *
         * @param readSpeed 设置读取到数据后的读取数据速度
         */
        public SerialPortUtils setReadSpeed(int readSpeed) {
            this.readSpeed = readSpeed;
            return this;
        }

        public int getWaitingTime() {
            return waitingTime;
        }

        /**
         * 设置等待下位机发送数据的等待间隔时间
         *
         * @param waitingTime
         */
        public SerialPortUtils setWaitingTime(int waitingTime) {
            this.defaultSpeed = waitingTime;
            return this;
        }

        public int getTYPE() {
            return TYPE;
        }

        public SerialPortUtils setTYPE(int TYPE) {
            this.TYPE = TYPE;
            return this;
        }

        //恢复默认的十进制
        private void closeParameter() {
            TYPE = 10;
        }

        /***************************************************** 读取下位机数据的原始方法 *****************************************************/

        /**
         * 按照次数读取数据
         *
         * @param count 本次读取多少次又有数据
         * @return
         */
        public byte[] readByteDataCount(int count) {
            stopRead = false;
            if (inputStream == null || count <= 0) {
                if (isShowLog)
                    log("读取数据失败！");
                return null;
            }
            //读取次数的
            List<byte[]> byteList = new ArrayList<>();
            int arrayMax = 0;

            while (true) {
                if (count <= 0) {
                    break;
                }

                //停止读取
                if (stopRead) {
                    return null;
                }

                try {
                    int size = inputStream.read(buffer);
                    if (isShowLog)
                        log("size:" + size);
                    if (size > 0) {
                        waitingTime = readSpeed;//加速
                        count--;
                        arrayMax += size;
                        byte[] readBytes = new byte[size];
                        System.arraycopy(buffer, 0, readBytes, 0, size);
                        byteList.add(readBytes);
                    } else {
                        waitingTime = defaultSpeed;//恢复默认速度
                    }
                } catch (IOException e) {
                    if (isShowLog)
                        log("读取失败:" + e);
                    break;
                }
                sleep(waitingTime);
            }

            //将所有的片段都组合在一起
            byte[] bufferAll = new byte[arrayMax];//最大容器
            int allIndex = 0;//最大容器的索引
            for (int i = 0; i < byteList.size(); i++) {
                byte[] bytes = byteList.get(i);
                for (int j = 0; j < bytes.length; j++) {
                    bufferAll[allIndex++] = bytes[j];
                }
            }
            return bufferAll;
        }

        /**
         * 按照时间读取数据
         *
         * @param time 读取多少秒的数据
         * @return
         */
        public byte[] readByteDataTime(int time) {

            stopRead = false;

            if (inputStream == null || time <= 0) {
                if (isShowLog)
                    log("读取数据失败！");
                return null;
            }
            //读取一个时间段的
            List<byte[]> byteList = new ArrayList<>();
            int arrayMax = 0;

            while (true) {
                if (time <= 0) {
                    break;
                }

                //停止读取
                if (stopRead) {
                    return null;
                }

                try {
                    int size = inputStream.read(buffer);
                    if (isShowLog)
                        log("size:" + size);
                    if (size > 0) {
                        waitingTime = readSpeed;
                        arrayMax += size;
                        byte[] readBytes = new byte[size];
                        System.arraycopy(buffer, 0, readBytes, 0, size);
                        byteList.add(readBytes);
                    } else {
                        waitingTime = defaultSpeed;
                    }
                } catch (IOException e) {
                    if (isShowLog)
                        log("读取失败:" + e);
                    break;
                }
                time--;
                sleep(waitingTime);
            }

            //将所有的片段都组合在一起
            byte[] bufferAll = new byte[arrayMax];//最大容器
            int allIndex = 0;//最大容器的索引
            for (int i = 0; i < byteList.size(); i++) {
                byte[] bytes = byteList.get(i);
                for (int j = 0; j < bytes.length; j++) {
                    bufferAll[allIndex++] = bytes[j];
                }
            }
            return bufferAll;
        }

        /**
         * 按照在一定时间内读取的次数来读取数据
         *
         * @param time 读取多少秒的数据
         * @return
         */
        public byte[] readByteDataTimeAddCount(int time, int count) {

            stopRead = false;

            if (inputStream == null || time <= 0 || count <= 0) {
                if (isShowLog)
                    log("读取数据失败！");
                return null;
            }
            //读取一个时间段的
            List<byte[]> byteList = new ArrayList<>();
            int arrayMax = 0;

            while (true) {
                if (time <= 0 || count <= 0) {
                    break;
                }

                //停止读取
                if (stopRead) {
                    return null;
                }

                try {
                    int size = inputStream.read(buffer);
                    if (isShowLog)
                        log("size:" + size);
                    if (size > 0) {
                        waitingTime = readSpeed;//加速
                        count--;
                        arrayMax += size;
                        byte[] readBytes = new byte[size];
                        System.arraycopy(buffer, 0, readBytes, 0, size);
                        byteList.add(readBytes);
                    } else {
                        waitingTime = defaultSpeed;//恢复默认速度
                    }
                } catch (IOException e) {
                    if (isShowLog)
                        log("读取失败:" + e);
                    break;
                }
                time--;
                sleep(waitingTime);
            }

            //将所有的片段都组合在一起
            byte[] bufferAll = new byte[arrayMax];//最大容器
            int allIndex = 0;//最大容器的索引
            for (int i = 0; i < byteList.size(); i++) {
                byte[] bytes = byteList.get(i);
                for (int j = 0; j < bytes.length; j++) {
                    bufferAll[allIndex++] = bytes[j];
                }
            }
            return bufferAll;
        }

        /**
         * 按照起始符与结束符开始读取数据
         *
         * @param start 开始读取的标识
         * @param close 结束读取的标识
         * @return
         */
        public byte[] readByteDataStartAddClose(String start, String close) {

            stopRead = false;

            if (inputStream == null || start == null || close == null) {
                if (isShowLog)
                    log("读取数据失败！");
                return null;
            }
            //读取一个区域间的
            List<byte[]> byteList = new ArrayList<>();//总数据
            int arrayMax = 0;//总数据索引
            boolean isRead = false;//是否开始读取数据

            //读取本次下位机发送的所有数据
            while (true) {

                //停止读取
                if (stopRead) {
                    return null;
                }

                try {
                    int size = inputStream.read(buffer);
                    if (isShowLog)
                        log("size:" + size);
                    if (size > 0) {
                        waitingTime = readSpeed;//加速
                        byte[] readBytes = new byte[size];
                        arrayMax += size;
                        System.arraycopy(buffer, 0, readBytes, 0, size);
                        byteList.add(readBytes);
                        isRead = true;
                    } else {
                        waitingTime = defaultSpeed;//恢复默认速度
                    }
                    if (isRead && size == -1) {//如果等于 true 表示开始读取数据
                        break;//结束本次读取
                    }
                } catch (IOException e) {
                    if (isShowLog)
                        log("读取失败:" + e);
                    break;
                }

                sleep(waitingTime);
            }

            //将所有的片段都组合在一起
            byte[] bufferAll = new byte[arrayMax];//最大容器
            int allIndex = 0;//最大容器的索引
            for (int i = 0; i < byteList.size(); i++) {
                byte[] bytes = byteList.get(i);
                for (int j = 0; j < bytes.length; j++) {
                    bufferAll[allIndex++] = bytes[j];
                }
            }

            //遍历截取起始符和结束符的数据
            String sumData = "";
            String startData = "";
            String closeData = "";

            //总数据
            for (byte str : bufferAll) {
                sumData += str + "-GT-";
            }
            //开始符数据
            for (byte str : start.getBytes()) {
                startData += str + "-GT-";
            }
            //结束符数据
            for (byte str : close.getBytes()) {
                closeData += str + "-GT-";
            }
            //截取需要的数据
            sumData = sumData.substring(sumData.indexOf(startData) + startData.length(), sumData.indexOf(closeData));

            String[] split = sumData.split("-GT-");
            bufferAll = new byte[split.length];//最大容器
            for (int i = 0; i < bufferAll.length; i++) {
                bufferAll[i] = Byte.parseByte(split[i]);
            }

            return bufferAll;
        }

        /**
         * 按照本次读取的所有数据
         *
         * @return
         */
        public byte[] readByteDataAll() {

            stopRead = false;

            if (inputStream == null) {
                if (isShowLog)
                    log("读取数据失败！");
                return null;
            }
            //读取一个区域间的
            List<byte[]> byteList = new ArrayList<>();//总数据
            int arrayMax = 0;//总数据索引
            boolean isRead = false;//是否开始读取数据

            //读取本次下位机发送的所有数据
            while (true) {

                //停止读取
                if (stopRead) {
                    return null;
                }

                try {
                    int size = inputStream.read(buffer);
                    if (isShowLog)
                        log("size:" + size);
                    if (size > 0) {
                        waitingTime = readSpeed;//加速
                        byte[] readBytes = new byte[size];
                        arrayMax += size;
                        System.arraycopy(buffer, 0, readBytes, 0, size);
                        byteList.add(readBytes);
                        isRead = true;
                    } else {
                        waitingTime = defaultSpeed;//恢复默认速度
                    }
                    if (isRead && size == -1) {//如果等于 true 表示开始读取数据
                        break;//结束本次读取
                    }
                } catch (IOException e) {
//                e.printStackTrace();
                    if (isShowLog)
                        log("读取失败:" + e);
                    break;
                }

                sleep(waitingTime);
            }

            //将所有的片段都组合在一起
            byte[] bufferAll = new byte[arrayMax];//最大容器
            int allIndex = 0;//最大容器的索引
            for (int i = 0; i < byteList.size(); i++) {
                byte[] bytes = byteList.get(i);
                for (int j = 0; j < bytes.length; j++) {
                    bufferAll[allIndex++] = bytes[j];
                }
            }

            return bufferAll;
        }


        /***************************************************** 读取数据方法 *****************************************************/

        /**
         * 按照次数读取数据
         *
         * @param count 读取数据的次数
         * @return
         */
        public String readDataCount(int count) {
            byte[] bytes = readByteDataCount(count);
            if (bytes != null) {
                return returnTypeData(bytes);
            }
            return null;
        }

        /**
         * 按时间读取数据
         *
         * @param time 读取数据的时间
         * @return
         */
        public String readDataTime(int time) {
            byte[] bytes = readByteDataTime(time);
            if (bytes != null) {
                return returnTypeData(bytes);
            }
            return null;
        }

        /**
         * 按照在一定时间内读取的次数来读取数据
         *
         * @param time  读取数据的时间
         * @param count 在规定的时间内读取数据的次数
         * @return
         */
        public String readDataTimeAddCount(int time, int count) {
            byte[] bytes = readByteDataTimeAddCount(time, count);
            if (bytes != null) {
                return returnTypeData(bytes);
            }
            return null;
        }

        /**
         * 按照起始符与结束符读取数据
         *
         * @param start 开始读取数据的开始符号
         * @param close 结束读取数据的结束符号
         * @return
         */
        public String readDataStartAddClose(String start, String close) {
            byte[] bytes = readByteDataStartAddClose(start, close);
            if (bytes != null) {
                return returnTypeData(bytes);
            }
            return null;
        }

        /**
         * 读取本次所有数据
         *
         * @return
         */
        public String readDataAll() {
            byte[] bytes = readByteDataAll();
            if (bytes != null) {
                return returnTypeData(bytes);
            }
            return null;

        }

        /**
         * 读取曲线数据
         * 格式：,T:0.000,C:-3.620;90,91,92,91,91,91,91,91,91,90,90,90,91,91,90,90,92,91
         *
         * @param spValue 检测值与曲线值的分隔符
         * @return
         */
        public String readCurveData(String spValue) {
            if (spValue == null) {
                if (isShowLog)
                    log("读取数据失败！");
                return null;
            }
            byte[] bytes = readByteDataAll();//读取本次所有下位机发送的数据
            if (bytes != null) {
                //确定前后区数组大小
                byte[] startByte = null;
                byte[] closeByte = null;
                for (int i = 0; i < bytes.length; i++) {
                    byte aByte = bytes[i];
                    if (aByte == spValue.getBytes()[0]) {
                        startByte = new byte[i + 1];
                        closeByte = new byte[bytes.length - startByte.length];
                        break;
                    }
                }
                String startStr = null, closeStr = null;
                try {
                    //处理分割区前的数据
                    System.arraycopy(bytes, 0, startByte, 0, startByte.length);
                    startStr = returnTypeData(startByte);
                    //处理分割区后的数据
                    System.arraycopy(bytes, startByte.length, closeByte, 0, closeByte.length);
                    closeStr = setTYPE(16).returnTypeData(closeByte);
                } catch (Exception e) {//NullPointerException
                    log("串口读取异常:" + e);
                }

                return startStr + closeStr;
            }
            return null;
        }

        /***************************************************** 发送数据方法 *****************************************************/

        /**
         * 发送数据
         * 比如：Charset.forName("GB2312")
         *
         * @param sendData 发送数据的内容
         * @param charset  发送数据的格式
         */
        public SerialPortUtils sendData(final String sendData, Charset charset) {
            if (outputStream == null || sendData == null) {
                if (isShowLog)
                    log("发送数据失败！");
                return this;
            }

            if (isShowLog)
                log("发送给下位机的数据:" + sendData);

            //设置发送数据的格式
            byte[] bytes;
            if (charset == null) {
                bytes = sendData.getBytes();
            } else {
                bytes = sendData.getBytes(charset);//发给打印机的
            }

            try {
                outputStream.write(bytes);
                outputStream.flush();
                if (isShowLog)
                    log("发送数据成功！");
            } catch (IOException e) {
                e.printStackTrace();
                if (isShowLog)
                    log("发送数据失败！");
            }
            return this;
        }

        /**
         * 发送数据
         *
         * @param sendData
         * @return
         */
        public SerialPortUtils sendData(final String sendData) {
            if (outputStream == null || sendData == null) {
                if (isShowLog)
                    log("发送数据失败！");
                return this;
            }

            if (isShowLog)
                log("发送给下位机的数据:" + sendData);

            //设置发送数据的格式
            byte[] bytes = sendData.getBytes();
            try {
                outputStream.write(bytes);
                outputStream.flush();
                if (isShowLog)
                    log("发送数据成功！");
            } catch (IOException e) {
                e.printStackTrace();
                if (isShowLog)
                    log("发送数据失败！");
            }
            return this;
        }


        /***************************************************** 数据进制转换方法 *****************************************************/

        /**
         * 返回转换好的进制数据
         *
         * @param bytes 需要转换进制的数据
         * @return
         */
        public String returnTypeData(byte[] bytes) {
            String readData = "";
            switch (TYPE) {
                case 10:
                    readData = new String(bytes, Charset.forName("gbk"));
                    break;
                case 16:
                    int[] ints = DataUtils.byte2Int(bytes);
                    for (int value : ints) {
                        readData += value + ",";
                    }
                    break;
            }
            closeParameter();
            return readData;
        }

        /**
         * 释放资源
         */
        public void close() {
            if (inputStream != null) {
                try {
                    inputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            if (outputStream != null) {
                try {
                    outputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            if (serialPort != null) {
                serialPort.close();
                serialPort = null;
            }

            if (serialPortFinder != null) {
                serialPortFinder = null;
            }

        }

        /**
         * 日志
         *
         * @param msg
         */
        private static void log(Object msg, String... tag) {
            Log.d((tag.length != 0 && tag[0].length() != 0) ? tag[0] : LOG.LOG_TAG, msg.toString());
            DataSendReception.sendUpdateUiBroadcast(SerialPortUtils.class.getName(), msg.toString());
        }


        /**
         * 睡眠
         *
         * @param millis
         */
        public static void sleep(long millis) {
            try {
                java.lang.Thread.sleep(millis);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }


    }

    /**
     * 语言框架
     */
    public static class LanguageUtils {

        private static Context context;

        @SuppressLint("NewApi")
        public static void updateLanguage(Locale locale) {
            //获取想要切换的语言类型
            Resources resources = context.getResources();//获得res资源对象
            Configuration configuration = resources.getConfiguration();//获得设置对象
            configuration.setLocale(locale);//设置语言
            DisplayMetrics dm = resources.getDisplayMetrics();//获得屏幕参数：主要是分辨率，像素等。
            resources.updateConfiguration(configuration, dm);//更新语言,更新完后重启即可
        }


        public static String getString(int stringID) {
            return context.getResources().getString(stringID);
        }

/**

 国家/地区	语言代码	国家/地区	语言代码
 简体中文(中国)	zh-rCN	繁体中文(台湾地区)	zh-rTW
 繁体中文(香港)	zh-rHK	英语(香港)	en-rHK
 英语(美国)	en-rUS	英语(英国)	en-rQB
 英语(全球)	en-rWW	英语(加拿大)	en-rCA
 英语(澳大利亚)	en-rAU	英语(爱尔兰)	en-rIE
 英语(芬兰)	en-rFI	芬兰语(芬兰)	fi-rFI
 英语(丹麦)	en-rDK	丹麦语(丹麦)	da-rDK
 英语(以色列)	en-rIL	希伯来语(以色列)	he-rIL
 英语(南非)	en-rZA	英语(印度)	en-rIN
 英语(挪威)	en-rNO	英语(新加坡)	en-rSG
 英语(新西兰)	en-rNZ	英语(印度尼西亚)	en-rID
 英语(菲律宾)	en-rPH	英语(泰国)	en-rTH
 英语(马来西亚)	en-rMY	英语(阿拉伯)	en-rXA
 韩文(韩国)	ko-rKR	日语(日本)	ja-rJP
 荷兰语(荷兰)	nl-rNL	荷兰语(比利时)	nl-rBE
 葡萄牙语(葡萄牙)	pt-rPT	葡萄牙语(巴西)	pt-rBR
 法语(法国)	fr-rFR	法语(卢森堡)	fr-rLU
 法语(瑞士)	fr-rCH	法语(比利时)	fr-rBE
 法语(加拿大)	fr-rCA	西班牙语(拉丁美洲)	es-rLA
 西班牙语(西班牙)	es-rES	西班牙语(阿根廷)	es-rAR
 西班牙语(美国)	es-rUS	西班牙语(墨西哥)	es-rMX
 西班牙语(哥伦比亚)	es-rCO	西班牙语(波多黎各)	es-rPR
 德语(德国)	de-rDE	德语(奥地利)	de-rAT
 德语(瑞士)	de-rCH	俄语(俄罗斯)	ru-rRU
 意大利语(意大利)	it-rIT	希腊语(希腊)	el-rGR
 挪威语(挪威)	no-rNO	匈牙利语(匈牙利)	hu-rHU
 土耳其语(土耳其)	tr-rTR	捷克语(捷克共和国)	cs-rCZ
 斯洛文尼亚语	sl-rSL	波兰语(波兰)	pl-rPl
 瑞典语(瑞典)	sv-rSE	西班牙语 (智利)	es-rCL 1
 **/

    }

    /**
     * 数据转换工具类
     */
    public static class DataUtils {

        /**
         * 16进制 byte 转10进制 int
         *
         * @param data
         * @return
         */
        public static int[] byte2Int(byte[] data) {
            int[] result = new int[data.length / 2];
            int value;
            int extra = 0;
            if (data.length % 2 != 0) {
                extra = 2;
            }
            for (int i = 0; i < data.length - extra; i += 2) {
                int int1 = (data[i] & 0xff) << 8;
                value = int1 + (data[i + 1] & 0xff);
                result[i / 2] = value;
            }
            return result;
        }

        // 判断奇数或偶数，位运算，最后一位是1则为奇数，为0是偶数
        public static int isOdd(int num) {
            return num & 1;
        }

        //Hex字符串转int
        public static int HexToInt(String inHex) {
            return Integer.parseInt(inHex, 16);
        }

        public static String IntToHex(int intHex) {
            return Integer.toHexString(intHex);
        }

        //Hex字符串转byte
        public static byte HexToByte(String inHex) {
            return (byte) Integer.parseInt(inHex, 16);
        }

        //1字节转2个Hex字符
        public static String Byte2Hex(Byte inByte) {
            return String.format("%02x", new Object[]{inByte}).toUpperCase();
        }

        //字节数组转转hex字符串
        public static String ByteArrToHex(byte[] inBytArr) {
            StringBuilder strBuilder = new StringBuilder();
            for (byte valueOf : inBytArr) {
                strBuilder.append(Byte2Hex(Byte.valueOf(valueOf)));
                strBuilder.append(" ");
            }
            return strBuilder.toString();
        }

        //字节数组转转hex字符串，可选长度
        public static String ByteArrToHex(byte[] inBytArr, int offset, int byteCount) {
            StringBuilder strBuilder = new StringBuilder();
            int j = byteCount;
            for (int i = offset; i < j; i++) {
                strBuilder.append(Byte2Hex(Byte.valueOf(inBytArr[i])));
            }
            return strBuilder.toString();
        }

        //转hex字符串转字节数组
        public static byte[] HexToByteArr(String inHex) {
            byte[] result;
            int hexlen = inHex.length();
            if (isOdd(hexlen) == 1) {
                hexlen++;
                result = new byte[(hexlen / 2)];
                inHex = "0" + inHex;
            } else {
                result = new byte[(hexlen / 2)];
            }
            int j = 0;
            for (int i = 0; i < hexlen; i += 2) {
                result[j] = HexToByte(inHex.substring(i, i + 2));
                j++;
            }
            return result;
        }

        /**
         * 按照指定长度切割字符串
         *
         * @param inputString 需要切割的源字符串
         * @param length      指定的长度
         * @return
         */
        public static List<String> getDivLines(String inputString, int length) {
            List<String> divList = new ArrayList<>();
            int remainder = (inputString.length()) % length;
            // 一共要分割成几段
            int number = (int) Math.floor((inputString.length()) / length);
            for (int index = 0; index < number; index++) {
                String childStr = inputString.substring(index * length, (index + 1) * length);
                divList.add(childStr);
            }
            if (remainder > 0) {
                String cStr = inputString.substring(number * length, inputString.length());
                divList.add(cStr);
            }
            return divList;
        }

        /**
         * 计算长度，两个字节长度
         *
         * @param val value
         * @return 结果
         */
        public static String twoByte(String val) {
            if (val.length() > 4) {
                val = val.substring(0, 4);
            } else {
                int l = 4 - val.length();
                for (int i = 0; i < l; i++) {
                    val = "0" + val;
                }
            }
            return val;
        }

        /**
         * 校验和
         *
         * @param cmd 指令
         * @return 结果
         */
        public static String sum(String cmd) {
            List<String> cmdList = getDivLines(cmd, 2);
            int sumInt = 0;
            for (String c : cmdList) {
                sumInt += HexToInt(c);
            }
            String sum = IntToHex(sumInt);
            sum = twoByte(sum);
            cmd += sum;
            return cmd.toUpperCase();
        }

        /**
         * 把中文转成Unicode码
         *
         * @param str
         * @return
         */
        public static String chinaToUnicode(String str) {
            String result = "";
            for (int i = 0; i < str.length(); i++) {
                int chr1 = (char) str.charAt(i);
                if (chr1 >= 19968 && chr1 <= 171941) {// 汉字范围 \u4e00-\u9fa5 (中文)
                    result += "\\u" + Integer.toHexString(chr1);
                } else {
                    result += str.charAt(i);
                }
            }
            return result;
        }

        /**
         * 判断是否为中文字符
         *
         * @param c
         * @return
         */
        public static boolean isChinese(char c) {
            Character.UnicodeBlock ub = Character.UnicodeBlock.of(c);
            if (ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS
                    || ub == Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS
                    || ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A
                    || ub == Character.UnicodeBlock.GENERAL_PUNCTUATION
                    || ub == Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION
                    || ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS) {
                return true;
            }
            return false;
        }

        //Unicode转中文
        public static String decodeUnicode(final String unicode) {
            StringBuffer string = new StringBuffer();

            String[] hex = unicode.split("\\\\u");

            for (int i = 0; i < hex.length; i++) {

                try {
                    // 汉字范围 \u4e00-\u9fa5 (中文)
                    if (hex[i].length() >= 4) {//取前四个，判断是否是汉字
                        String chinese = hex[i].substring(0, 4);
                        try {
                            int chr = Integer.parseInt(chinese, 16);
                            boolean isChinese = isChinese((char) chr);
                            //转化成功，判断是否在  汉字范围内
                            if (isChinese) {//在汉字范围内
                                // 追加成string
                                string.append((char) chr);
                                //并且追加  后面的字符
                                String behindString = hex[i].substring(4);
                                string.append(behindString);
                            } else {
                                string.append(hex[i]);
                            }
                        } catch (NumberFormatException e1) {
                            string.append(hex[i]);
                        }

                    } else {
                        string.append(hex[i]);
                    }
                } catch (NumberFormatException e) {
                    string.append(hex[i]);
                }
            }

            return string.toString();
        }

        /**
         * 将输入流转换成字符串
         *
         * @param is 从网络获取的输入流
         * @return
         */
        public static String streamToString(InputStream is) {
            try {
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                byte[] buffer = new byte[1024];
                int len = 0;
                while ((len = is.read(buffer)) != -1) {
                    baos.write(buffer, 0, len);
                }
                baos.close();
                is.close();
                byte[] byteArray = baos.toByteArray();
                return new String(byteArray);
            } catch (Exception e) {
                GT.errs(e.toString());
                return null;
            }
        }

    }

    /**
     * GT 内部缓存
     */
    public static class GT_Cache {

        private volatile static GT_SharedPreferences sp;

        //本地缓存
        public static void initCache(Context context) {
            if (sp == null) {
                sp = new GT_SharedPreferences(context, context.getPackageName());
            }
        }

        //存储 本地缓存
        public static void putCacheData(String key, Object bean_json) {
            try {
                if (sp == null && GT.getActivity() != null) initCache(GT.getActivity());
                if (sp == null) return;
                sp.save(key, bean_json);
            } catch (Exception e) {
            }
        }

        //存储 更多 本地缓存
        public static void putCacheMap(Map<String, Object> map) {
            try {
                if (sp == null && GT.getActivity() != null) initCache(GT.getActivity());
                if (sp == null) return;

                for (String key : map.keySet()) {
                    Object obj = map.get(key);
                    sp.save(key, obj);
                }
            } catch (Exception e) {
            }
        }

        //获取 本地缓存
        public static <T> T getCacheData(String key, Class<T> classz) {
            try {
                if (sp == null && GT.getActivity() != null) initCache(GT.getActivity());
                if (sp == null) return null;
                return sp.query(key, classz);
            } catch (Exception e) {
                return null;
            }
        }

        private volatile static Map<Class<ViewModel>, ViewModel> vewiModelMap = new ArrayMap<>();//HttpCall 存储缓存

        public static void addViewModel(Class<ViewModel> viewModelClass, ViewModel viewModel) {
            /*Set<Class<ViewModel>> key = vewiModelMap.keySet();
            if (!key.contains(viewModelClass)) {
                vewiModelMap.put(viewModelClass, viewModel);
            }*/
        }

        public static ViewModel getViewModel(Class<ViewModel> viewModelClass) {
            return vewiModelMap.get(viewModelClass);
        }

        public static void updateViewModel(Class<ViewModel> viewModelClass, ViewModel viewModel) {
            Set<Class<ViewModel>> key = vewiModelMap.keySet();
            if (key.contains(viewModelClass)) {
                vewiModelMap.put(viewModelClass, viewModel);
            }
        }

        public static void deleteViewModel(Class<ViewModel> viewModelClass) {
            Set<Class<ViewModel>> key = vewiModelMap.keySet();
            if (key.contains(viewModelClass)) {
                vewiModelMap.remove(viewModelClass);
            }
        }

        public static void emptyViewModel() {
            Set<Class<ViewModel>> key = vewiModelMap.keySet();
            for (Class<ViewModel> classz : key) {
                ViewModel viewModel = vewiModelMap.get(classz);
                viewModel = null;
                vewiModelMap.remove(viewModel);
            }
            vewiModelMap.clear();
        }


        private static Context context;
        private static SoftReference softReference;

        public static void setContext(Context context) {
            if (context == null) return;
            softReference = new SoftReference<>(context);
        }

        public static Context getContext() {
            if (softReference != null) return (Context) softReference.get();
            return context;
        }

        private volatile static Map<String, GT_SharedPreferences> sp_cache = new ArrayMap<>();//sp存储缓存

        /**
         * 处理过的存储 缓存
         *
         * @param key
         * @return
         */
        public static synchronized GT_SharedPreferences getSP(String key) {
            try {
                if (sp_cache != null && sp_cache.containsKey(key)) {
                    return sp_cache.get(key);
                }
            } catch (Exception e) {

            }
            return null;
        }

        /**
         * 处理过的获取 缓存
         *
         * @param key
         * @param sp
         */
        public static synchronized void putSP(String key, GT_SharedPreferences obj) {
            try {
                if (sp_cache != null && !sp_cache.containsKey(key)) {
                    sp_cache.put(key, obj);
                }
            } catch (Exception e) {

            }
        }

        private volatile static Map<String, Hibernate> hibernate_cache = new ArrayMap<>();//数据库 Hibernate 缓存

        /**
         * 处理过的存储 缓存
         *
         * @param key
         * @return
         */
        public static synchronized Hibernate getHibernate(String key) {
            try {
                if (hibernate_cache != null && hibernate_cache.containsKey(key)) {
                    return hibernate_cache.get(key);
                }
            } catch (Exception e) {
            }
            return null;
        }

        /**
         * 处理过的获取 缓存
         *
         * @param key
         * @param sp
         */
        public static synchronized void putHibernate(String key, Hibernate obj) {
            try {
                if (hibernate_cache != null && !hibernate_cache.containsKey(key)) {
                    hibernate_cache.put(key, obj);
                }
            } catch (Exception e) {

            }
        }

        private volatile static Map<String, Object> http_cache = new ArrayMap<>();//HttpCall 存储缓存

        /**
         * 处理过的存储 缓存
         *
         * @param key
         * @return
         */
        public static synchronized <T> T getHttpCall(Class<T> key) {
            try {
                if (http_cache != null && http_cache.containsKey(key.getName())) {
                    return (T) http_cache.get(key.getName());
                }
            } catch (Exception e) {

            }
            return null;
        }

        /**
         * 处理过的获取 缓存
         *
         * @param key
         * @param sp
         */
        public static synchronized void putHttpCall(String key, Object obj) {
            try {
                if (http_cache != null && !http_cache.containsKey(key)) {
                    http_cache.put(key, obj);
                }
            } catch (Exception e) {

            }
        }

        private volatile static Map<String, SerialPortUtils> serialPort_cache = new ArrayMap<>();//串口通信 缓存

        /**
         * 处理过的存储 缓存
         *
         * @param key
         * @return
         */
        public static synchronized SerialPortUtils getSerialPort(String key) {
            try {
                if (serialPort_cache != null && serialPort_cache.containsKey(key)) {
                    return serialPort_cache.get(key);
                }
            } catch (Exception e) {

            }
            return null;
        }

        /**
         * 处理过的获取 缓存
         *
         * @param key
         * @param sp
         */
        public static synchronized void putSerialPort(String key, SerialPortUtils obj) {
            try {
                if (serialPort_cache != null && !serialPort_cache.containsKey(key)) {
                    serialPort_cache.put(key, obj);
                }
            } catch (Exception e) {

            }
        }

        private volatile static Map<String, GT_Socket.TCP> socketTCP_cache = new ArrayMap<>();//socketTCP 缓存

        /**
         * 处理过的存储 缓存
         *
         * @param key
         * @return
         */
        public static synchronized GT_Socket.TCP getSocketTCP(String key) {
            try {
                if (socketTCP_cache != null && socketTCP_cache.containsKey(key)) {
                    return socketTCP_cache.get(key);
                }
            } catch (Exception e) {

            }
            return null;
        }

        /**
         * 处理过的获取 缓存
         *
         * @param key
         * @param sp
         */
        public static synchronized void putSocketTCP(String key, GT_Socket.TCP obj) {
            try {
                if (socketTCP_cache != null) {
                    socketTCP_cache.put(key, obj);
                }
            } catch (Exception e) {

            }
        }

        //释放掉所有缓存,建议只有在app完全退出的时候才调用
        public static void close() {
            try {
                if (vewiModelMap != null) {
                    vewiModelMap.clear();
                    vewiModelMap = null;
                }

                if (sp_cache != null) {
                    sp_cache.clear();
                    sp_cache = null;
                }

                if (hibernate_cache != null) {
                    hibernate_cache.clear();
                    hibernate_cache = null;
                }

                if (serialPort_cache != null) {
                    serialPort_cache.clear();
                    serialPort_cache = null;
                }

                if (socketTCP_cache != null) {
                    socketTCP_cache.clear();
                    socketTCP_cache = null;
                }
            } catch (Exception e) {

            }
        }
    }

//=========================================== 网络类 =========================================

    /**
     * network 网络类
     */
    public static class Network {

        /**
         * 监听网络状态 true 网络正常  false 网络异常
         *
         * @param context 上下文
         * @return boolean  true 为当前网络正常    false 则反之
         */
        @SuppressLint("MissingPermission")
        public static boolean netWorkStatus(Context context) {
            ConnectivityManager cwjManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
            if (cwjManager.getActiveNetworkInfo() != null) {
                return cwjManager.getActiveNetworkInfo().isAvailable();
            }
            return false;
        }

        /**
         * 获取手机 IP 地址
         *
         * @param context 上下文
         * @return String   返回当前 ip 地址
         */
        public static String getIPAddress(Context context) {
            @SuppressLint("MissingPermission") NetworkInfo info = ((ConnectivityManager) context
                    .getSystemService(Context.CONNECTIVITY_SERVICE)).getActiveNetworkInfo();
            if (info != null && info.isConnected()) {
                if (info.getType() == ConnectivityManager.TYPE_MOBILE) {//当前使用2G/3G/4G网络
                    try {
                        //Enumeration<NetworkInterface> en=NetworkInterface.getNetworkInterfaces();
                        for (Enumeration<NetworkInterface> en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements(); ) {
                            NetworkInterface intf = en.nextElement();
                            for (Enumeration<InetAddress> enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements(); ) {
                                InetAddress inetAddress = enumIpAddr.nextElement();
                                if (!inetAddress.isLoopbackAddress() && inetAddress instanceof Inet4Address) {
                                    return inetAddress.getHostAddress();
                                }
                            }
                        }
                    } catch (SocketException e) {
                        e.printStackTrace();
                    }


                } else if (info.getType() == ConnectivityManager.TYPE_WIFI) {//当前使用无线网络
                    WifiManager wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
                    @SuppressLint("MissingPermission") WifiInfo wifiInfo = wifiManager.getConnectionInfo();

                    int ipAddress1 = wifiInfo.getIpAddress();
                    String ipAddress = (ipAddress1 & 0xFF) + "." +
                            ((ipAddress1 >> 8) & 0xFF) + "." +
                            ((ipAddress1 >> 16) & 0xFF) + "." +
                            (ipAddress1 >> 24 & 0xFF);
                    return ipAddress;
                }
            } else {
                //当前无网络连接,请在设置中打开网络
                GT.toast_s("当前无网络");
            }
            return null;
        }

        //检测当前手机是否可上网
        public static boolean isInternet(Context context) {
            ConnectivityManager manager = (ConnectivityManager) context.getSystemService(context.CONNECTIVITY_SERVICE);
            @SuppressLint("MissingPermission") NetworkInfo info = manager.getActiveNetworkInfo();// 检查网络连接，如果无网络可用，就不需要进行连网操作等
            if (info == null || !manager.getBackgroundDataSetting()) {
                return false;
            }
            return true;
        }

        /**
         * 获取当前网络属于 无网络(返回0)、WF(返回1)、2G(返回2)、3G(返回3)、4G(返回4) 网络
         *
         * @param context
         * @return
         */
        public static int getNetworkState(Context context) {
            return IntenetUtil.getNetworkState(context);
        }

        /**
         * 获取当前网络属于 无网络、WF、2G、3G、4G网络
         * //没有网络连接
         * public static final int NETWORN_NONE = 0;
         * //wifi连接
         * public static final int NETWORN_WIFI = 1;
         * //手机网络数据连接类型
         * public static final int NETWORN_2G = 2;
         * public static final int NETWORN_3G = 3;
         * public static final int NETWORN_4G = 4;
         * public static final int NETWORN_MOBILE = 5;
         */
        private static class IntenetUtil {

            //没有网络连接
            public static final int NETWORN_NONE = 0;
            //wifi连接
            public static final int NETWORN_WIFI = 1;
            //手机网络数据连接类型
            public static final int NETWORN_2G = 2;
            public static final int NETWORN_3G = 3;
            public static final int NETWORN_4G = 4;
            public static final int NETWORN_MOBILE = 5;

            /**
             * 获取当前网络连接类型
             *
             * @param context
             * @return
             */
            public static int getNetworkState(Context context) {
                //获取系统的网络服务
                ConnectivityManager connManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
                //如果当前没有网络
                if (null == connManager)
                    return NETWORN_NONE;
                //获取当前网络类型，如果为空，返回无网络
                @SuppressLint("MissingPermission") NetworkInfo activeNetInfo = connManager.getActiveNetworkInfo();
                if (activeNetInfo == null || !activeNetInfo.isAvailable()) {
                    return NETWORN_NONE;
                }
                // 判断是不是连接的是不是wifi
                @SuppressLint("MissingPermission") NetworkInfo wifiInfo = connManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
                if (null != wifiInfo) {
                    NetworkInfo.State state = wifiInfo.getState();
                    if (null != state)
                        if (state == NetworkInfo.State.CONNECTED || state == NetworkInfo.State.CONNECTING) {
                            return NETWORN_WIFI;
                        }
                }
                // 如果不是wifi，则判断当前连接的是运营商的哪种网络2g、3g、4g等
                @SuppressLint("MissingPermission") NetworkInfo networkInfo = connManager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
                if (null != networkInfo) {
                    NetworkInfo.State state = networkInfo.getState();
                    String strSubTypeName = networkInfo.getSubtypeName();
                    if (null != state)
                        if (state == NetworkInfo.State.CONNECTED || state == NetworkInfo.State.CONNECTING) {
                            switch (activeNetInfo.getSubtype()) {
                                //如果是2g类型
                                case TelephonyManager.NETWORK_TYPE_GPRS: // 联通2g
                                case TelephonyManager.NETWORK_TYPE_CDMA: // 电信2g
                                case TelephonyManager.NETWORK_TYPE_EDGE: // 移动2g
                                case TelephonyManager.NETWORK_TYPE_1xRTT:
                                case TelephonyManager.NETWORK_TYPE_IDEN:
                                    return NETWORN_2G;
                                //如果是3g类型
                                case TelephonyManager.NETWORK_TYPE_EVDO_A: // 电信3g
                                case TelephonyManager.NETWORK_TYPE_UMTS:
                                case TelephonyManager.NETWORK_TYPE_EVDO_0:
                                case TelephonyManager.NETWORK_TYPE_HSDPA:
                                case TelephonyManager.NETWORK_TYPE_HSUPA:
                                case TelephonyManager.NETWORK_TYPE_HSPA:
                                case TelephonyManager.NETWORK_TYPE_EVDO_B:
                                case TelephonyManager.NETWORK_TYPE_EHRPD:
                                case TelephonyManager.NETWORK_TYPE_HSPAP:
                                    return NETWORN_3G;
                                //如果是4g类型
                                case TelephonyManager.NETWORK_TYPE_LTE:
                                    return NETWORN_4G;
                                default:
                                    //中国移动 联通 电信 三种3G制式
                                    if (strSubTypeName.equalsIgnoreCase("TD-SCDMA") || strSubTypeName.equalsIgnoreCase("WCDMA") || strSubTypeName.equalsIgnoreCase("CDMA2000")) {
                                        return NETWORN_3G;
                                    } else {
                                        return NETWORN_MOBILE;
                                    }
                            }
                        }
                }
                return NETWORN_NONE;
            }
        }

        //实时显示 网络速递 <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
        public static class NetWorkSpeedUtils {

            private Context context;
            private onSendSpeed onSendSpeed;
            private Timer timer;
            private boolean isStart;
            private long lastTotalRxBytes = 0;
            private long lastTimeStamp = 0;

            public NetWorkSpeedUtils(Context context, onSendSpeed onSendSpeed) {
                this.context = context;
                this.onSendSpeed = onSendSpeed;
            }

            TimerTask task = new TimerTask() {
                @Override
                public void run() {
                    if (isStart) {
                        showNetSpeed();
                    }
                }
            };


            public NetWorkSpeedUtils startShowNetSpeed() {
                isStart = true;
                lastTotalRxBytes = getTotalRxBytes();
                lastTimeStamp = System.currentTimeMillis();
                timer = new Timer();
                timer.schedule(task, 1000, 1000); // 1s后启动任务，每2s执行一次
                return this;
            }


            public void start() {
                isStart = true;
            }

            public void stop() {
                isStart = false;
            }


            public void cancel() {
                if (task != null) {
                    task.cancel();
                    task = null;
                }
                if (timer != null) {
                    timer.cancel();
                    timer = null;
                }
            }

            private long getTotalRxBytes() {
                return TrafficStats.getUidRxBytes(context.getApplicationInfo().uid) == TrafficStats.UNSUPPORTED ? 0 : (TrafficStats.getTotalRxBytes() / 1024);//转为KB
            }

            private void showNetSpeed() {
                long nowTotalRxBytes = getTotalRxBytes();
                long nowTimeStamp = System.currentTimeMillis();
                long speed = ((nowTotalRxBytes - lastTotalRxBytes) * 1000 / (nowTimeStamp - lastTimeStamp));//毫秒转换
                long speed2 = ((nowTotalRxBytes - lastTotalRxBytes) * 1000 % (nowTimeStamp - lastTimeStamp));//毫秒转换
                lastTimeStamp = nowTimeStamp;
                lastTotalRxBytes = nowTotalRxBytes;
                String data = speed + "." + speed2 + " kb/s";
                onSendSpeed.onSend(data);
            }

            interface onSendSpeed {

                void onSend(String data);

            }


        }

    }

    /**
     * JSON 接口解析 json 与 Bean 互转
     * 装换实体类需要用规则的创建，构造、set、get、toString、都有才行
     */
    public static class JSON {

        private static Gson gson = new Gson();

        /**
         * 临时解决方法
         *
         * @return
         */
        public static Gson getGson() {
            return gson;
        }

        /**
         * 临时解决方法
         *
         * @param obj
         * @return
         */
        public static String toJson2(Object obj) {
            return gson.toJson(obj);
        }

        /**
         * 临时解决方法
         *
         * @param jsonStr
         * @param clazz
         * @param <T>
         * @return
         */
        public static <T> T fromJson2(String jsonStr, Class<T> clazz) {
            return gson.fromJson(jsonStr, clazz);
        }

        /**
         * 将对象转换成Json字符串
         * 装换实体类需要用规则的创建，构造、set、get、toString、都有才行
         *
         * @param obj
         * @return json类型字符串
         */
        public static String toJson(Object obj) {
            JSONStringer js = new JSONStringer();
            serialize(js, obj);
            return js.toString();
        }

        /**
         * 序列化为JSON
         *
         * @param js json对象
         * @param o  待需序列化的对象
         */
        private static void serialize(JSONStringer js, Object o) {
            if (isNull(o)) {
                try {
                    js.value(null);
                } catch (JSONException e) {
                    //空异常
                }
                return;
            }

            Class<?> clazz = o.getClass();
            if (isObject(clazz)) { // 对象
                serializeObject(js, o);
            } else if (isArray(clazz)) { // 数组
                serializeArray(js, o);
            } else if (isCollection(clazz)) { // 集合
                Collection<?> collection = (Collection<?>) o;
                serializeCollect(js, collection);
            } else if (isMap(clazz)) { // Map
                ArrayMap<?, ?> collection = (ArrayMap<?, ?>) o;
                serializeMap(js, collection);
            } else { // 单个值
                try {
                    js.value(o);
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }

        /**
         * 序列化数组
         *
         * @param js    json对象
         * @param array 数组
         */
        private static void serializeArray(JSONStringer js, Object array) {
            try {
                js.array();
                for (int i = 0; i < Array.getLength(array); ++i) {
                    Object o = Array.get(array, i);
                    serialize(js, o);
                }
                js.endArray();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        /**
         * 序列化集合
         *
         * @param js         json对象
         * @param collection 集合
         */
        private static void serializeCollect(JSONStringer js, Collection<?> collection) {
            try {
                js.array();
                for (Object o : collection) {
                    serialize(js, o);
                }
                js.endArray();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        /**
         * 序列化Map
         *
         * @param js  json对象
         * @param map map对象
         */
        private static void serializeMap(JSONStringer js, Map<?, ?> map) {
            try {
                js.object();
                Map<?, Object> valueMap = (Map<?, Object>) map;
                Iterator<? extends Map.Entry<?, Object>> it = valueMap.entrySet().iterator();
                while (it.hasNext()) {
                    Map.Entry<?, Object> entry = (Map.Entry<?, Object>) it.next();
                    js.key(entry.getKey().toString());
                    serialize(js, entry.getValue());
                }
                js.endObject();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        /**
         * 序列化对象
         *
         * @param js  json对象
         * @param obj 待序列化对象
         */
        private static void serializeObject(JSONStringer js, Object obj) {
            try {
                js.object();
                Class<? extends Object> objClazz = obj.getClass();
                //获取所有的数组
                Method[] methods = objClazz.getDeclaredMethods();
                //获取所有的字段
                Field[] fields = objClazz.getDeclaredFields();
                //遍历这个对象
                for (Field field : fields) {
                    try {
                        String fieldType = field.getType().getSimpleName();
                        String fieldGetName = parseMethodName(field.getName(), "get");
                        if (!haveMethod(methods, fieldGetName)) {
                            continue;
                        }
                        Method fieldGetMet = objClazz.getMethod(fieldGetName, new Class[]{});
                        Object fieldVal = fieldGetMet.invoke(obj, new Object[]{});
                        Object result = null;
                        if ("Date".equals(fieldType)) {
                            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US);
                            result = sdf.format((Date) fieldVal);

                        } else {
                            if (null != fieldVal) {
                                result = fieldVal;
                            }
                        }
                        js.key(field.getName());
                        serialize(js, result);
                    } catch (Exception e) {
                        continue;
                    }
                }
                js.endObject();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        /**
         * 判断是否存在某属性的 get方法
         *
         * @param methods     引用方法的数组
         * @param fieldMethod 方法名称
         * @return true或者false
         */
        public static boolean haveMethod(Method[] methods, String fieldMethod) {
            for (Method met : methods) {
                if (fieldMethod.equals(met.getName())) {
                    return true;
                }
            }
            return false;
        }

        /**
         * 拼接某属性的 get或者set方法
         *
         * @param fieldName  字段名称
         * @param methodType 方法类型
         * @return 方法名称
         */
        public static String parseMethodName(String fieldName, String methodType) {
            if (null == fieldName || "".equals(fieldName)) {
                return null;
            }
            return methodType + fieldName.substring(0, 1).toUpperCase() + fieldName.substring(1);
        }

        /**
         * 给字段赋值
         *
         * @param obj    实例对象
         * @param valMap 值集合
         */
        public static void setFieldValue(Object obj, Map<String, String> valMap) {
            Class<?> cls = obj.getClass();
            // 取出bean里的所有方法
            Method[] methods = cls.getDeclaredMethods();
            Field[] fields = cls.getDeclaredFields();

            for (Field field : fields) {
                try {
                    String setMetodName = parseMethodName(field.getName(), "set");
                    if (!haveMethod(methods, setMetodName)) {
                        continue;
                    }
                    Method fieldMethod = cls.getMethod(setMetodName, field
                            .getType());
                    String value = valMap.get(field.getName());
                    if (null != value && !"".equals(value)) {
                        String fieldType = field.getType().getSimpleName();
                        if ("String".equals(fieldType)) {
                            fieldMethod.invoke(obj, value);
                        } else if ("Date".equals(fieldType)) {
                            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US);
                            Date temp = sdf.parse(value);
                            fieldMethod.invoke(obj, temp);
                        } else if ("Integer".equals(fieldType)
                                || "int".equals(fieldType)) {
                            Integer intval = Integer.parseInt(value);
                            fieldMethod.invoke(obj, intval);
                        } else if ("Long".equalsIgnoreCase(fieldType)) {
                            Long temp = Long.parseLong(value);
                            fieldMethod.invoke(obj, temp);
                        } else if ("Double".equalsIgnoreCase(fieldType)) {
                            Double temp = Double.parseDouble(value);
                            fieldMethod.invoke(obj, temp);
                        } else if ("Boolean".equalsIgnoreCase(fieldType)) {
                            Boolean temp = Boolean.parseBoolean(value);
                            fieldMethod.invoke(obj, temp);
                        } else {
                            System.out.println("setFieldValue not supper type:" + fieldType);
                        }
                    }
                } catch (Exception e) {
                    continue;
                }
            }

        }

        /**
         * bean对象转Map
         *
         * @param obj 实例对象
         * @return map集合
         */
        public static Map<String, String> beanToMap(Object obj) {
            Class<?> cls = obj.getClass();
            Map<String, String> valueMap = new ArrayMap<String, String>();
            // 取出bean里的所有方法
            Method[] methods = cls.getDeclaredMethods();
            Field[] fields = cls.getDeclaredFields();
            for (Field field : fields) {
                try {
                    String fieldType = field.getType().getSimpleName();
                    String fieldGetName = parseMethodName(field.getName(), "get");
                    if (!haveMethod(methods, fieldGetName)) {
                        continue;
                    }
                    Method fieldGetMet = cls.getMethod(fieldGetName, new Class[]{});
                    Object fieldVal = fieldGetMet.invoke(obj, new Object[]{});
                    String result = null;
                    if ("Date".equals(fieldType)) {
                        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.CHINA);
                        result = sdf.format((Date) fieldVal);

                    } else {
                        if (null != fieldVal) {
                            result = String.valueOf(fieldVal);
                        }
                    }
                    valueMap.put(field.getName(), result);
                } catch (Exception e) {
                    continue;
                }
            }
            return valueMap;

        }

        /**
         * 给对象的字段赋值
         *
         * @param obj            类实例
         * @param fieldSetMethod 字段方法
         * @param fieldType      字段类型
         * @param value
         */
        public static void setFiedlValue(Object obj, Method fieldSetMethod, String fieldType, Object value) {

            try {
                if (null != value && !"".equals(value)) {
                    if ("String".equals(fieldType)) {
                        fieldSetMethod.invoke(obj, value.toString());
                    } else if ("Date".equals(fieldType)) {
                        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.CHINA);
                        Date temp = sdf.parse(value.toString());
                        fieldSetMethod.invoke(obj, temp);
                    } else if ("Integer".equals(fieldType)
                            || "int".equals(fieldType)) {
                        Integer intval = Integer.parseInt(value.toString());
                        fieldSetMethod.invoke(obj, intval);
                    } else if ("Long".equalsIgnoreCase(fieldType)) {
                        Long temp = Long.parseLong(value.toString());
                        fieldSetMethod.invoke(obj, temp);
                    } else if ("Double".equalsIgnoreCase(fieldType)) {
                        Double temp = Double.parseDouble(value.toString());
                        fieldSetMethod.invoke(obj, temp);
                    } else if ("Boolean".equalsIgnoreCase(fieldType)) {
                        Boolean temp = Boolean.parseBoolean(value.toString());
                        fieldSetMethod.invoke(obj, temp);
                    } else if ("Map".equals(fieldType)) {

                        Map map = fromJson(value.toString(), Map.class);


                        fieldSetMethod.invoke(obj, map);
                    } else if ("List".equals(fieldType)) {
                        fieldSetMethod.invoke(obj, fromJson(value.toString(), List.class));
                    } else if ("Set".equals(fieldType)) {
                        fieldSetMethod.invoke(obj, fromJson(value.toString(), Set.class));
                    } else {
                        fieldSetMethod.invoke(obj, value);
                    }
                }

            } catch (Exception e) {
                e.printStackTrace();
            }

        }

        /**
         * 将Map中存在JSON的数据转为 实体类
         *
         * @param mapJSON
         * @param tClass
         * @param <T>
         * @return
         */
        public static <T> Map<?, T> mapJSONToMapObj(Map<?, ?> mapJSON, Class<T> tClass) {
            Map<Object, T> map = null;
            try {
                map = fromJson(mapJSON.toString(), Map.class);
                for (Object key : map.keySet()) {
                    T o = map.get(key);
                    T t = fromJson(o.toString(), tClass);
                    map.put(key, t);
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return map;
        }

        /**
         * 反序列化简单对象
         *
         * @param jo    json对象
         * @param clazz 实体类类型
         * @return 反序列化后的实例
         * @throws JSONException
         */
        public static <T> T fromJson(JSONObject jo, Class<T> clazz) throws JSONException {
            if (clazz == null || isNull(jo)) {
                return null;
            }

            T t = newInstance(clazz);
            if (t == null) {
                return null;
            }
            if (isMap(clazz)) {
                setField(t, jo);
            } else {
                // 取出bean里的所有方法
                Method[] methods = clazz.getDeclaredMethods();
                Field[] fields = clazz.getDeclaredFields();
                for (Field f : fields) {
                    String setMetodName = parseMethodName(f.getName(), "set");
                    if (!haveMethod(methods, setMetodName)) {
                        continue;
                    }
                    try {
                        Method fieldMethod = clazz.getMethod(setMetodName, f.getType());
                        setField(t, fieldMethod, f, jo);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
            return t;
        }

        /**
         * 反序列化简单对象
         *
         * @param jsonStr json字符串
         * @param clazz   实体类类型
         * @return 反序列化后的实例
         * @throws JSONException
         */
        public static <T> T fromJson(String jsonStr, Class<T> clazz) throws JSONException {
            if (clazz == null || jsonStr == null || jsonStr.length() == 0) {
                return null;
            }

            JSONObject jo = new JSONObject(jsonStr);
            if (isNull(jo)) {
                return null;
            }

            return fromJson(jo, clazz);
        }

        /**
         * 反序列化数组对象
         *
         * @param ja    json数组
         * @param clazz 实体类类型
         * @return 反序列化后的数组
         */
        public static <T> T[] fromJsonArray(JSONArray ja, Class<T> clazz) throws JSONException {
            if (clazz == null || isNull(ja)) {
                return null;
            }

            int len = ja.length();

            @SuppressWarnings("unchecked")
            T[] array = (T[]) Array.newInstance(clazz, len);

            for (int i = 0; i < len; ++i) {
                JSONObject jo = ja.getJSONObject(i);
                T o = fromJson(jo, clazz);
                array[i] = o;
            }

            return array;
        }


        /**
         * 反序列化数组对象
         *
         * @param jsonStr json字符串
         * @param clazz   实体类类型
         * @return 序列化后的数组
         */
        public static <T> T[] fromJsonArray(String jsonStr, Class<T> clazz) throws JSONException {
            if (clazz == null || jsonStr == null || jsonStr.length() == 0) {
                return null;
            }
            JSONArray jo = null;
            try {
                jo = new JSONArray(jsonStr);
            } catch (JSONException e) {
                e.printStackTrace();
            }

            if (isNull(jo)) {
                return null;
            }

            return fromJsonArray(jo, clazz);
        }

        /**
         * 反序列化泛型集合
         *
         * @param ja              json数组
         * @param collectionClazz 集合类型
         * @param genericType     实体类类型
         * @return
         * @throws JSONException
         */
        @SuppressWarnings("unchecked")
        public static <T> Collection<T> parseCollection(JSONArray ja, Class<?> collectionClazz,
                                                        Class<T> genericType) throws JSONException {

            if (collectionClazz == null || genericType == null || isNull(ja)) {
                return null;
            }

            Collection<T> collection = (Collection<T>) newInstance(collectionClazz);

            for (int i = 0; i < ja.length(); ++i) {
                try {
                    JSONObject jo = ja.getJSONObject(i);
                    T o = fromJson(jo, genericType);
                    collection.add(o);
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }

            return collection;
        }

        /**
         * 反序列化泛型集合
         *
         * @param jsonStr         json字符串
         * @param collectionClazz 集合类型
         * @param genericType     实体类类型
         * @return 反序列化后的数组
         * @throws JSONException
         */
        public static <T> Collection<T> parseCollection(String jsonStr, Class<?> collectionClazz,
                                                        Class<T> genericType) throws JSONException {
            if (collectionClazz == null || genericType == null || jsonStr == null
                    || jsonStr.length() == 0) {
                return null;
            }
            JSONArray jo = null;
            try {
                //如果为数组，则此处转化时，需要去掉前面的键，直接后面的[]中的值
                int index = jsonStr.indexOf("[");
                String arrayString = null;

                //获取数组的字符串
                if (-1 != index) {
                    arrayString = jsonStr.substring(index);
                }

                //如果为数组，使用数组转化
                if (null != arrayString) {
                    jo = new JSONArray(arrayString);
                } else {
                    jo = new JSONArray(jsonStr);
                }

            } catch (JSONException e) {
                e.printStackTrace();
            }

            if (isNull(jo)) {
                return null;
            }

            return parseCollection(jo, collectionClazz, genericType);
        }

        /**
         * 根据类型创建对象
         *
         * @param clazz 待创建实例的类型
         * @return 实例对象
         * @throws JSONException
         */
        @SuppressWarnings({"unchecked", "rawtypes"})
        private static <T> T newInstance(Class<T> clazz) throws JSONException {
            if (clazz == null)
                return null;
            T obj = null;
            if (clazz.isInterface()) {
                if (clazz.equals(Map.class)) {
                    obj = (T) new ArrayMap();
                } else if (clazz.equals(List.class)) {
                    obj = (T) new ArrayList();
                } else if (clazz.equals(Set.class)) {
                    obj = (T) new HashSet();
                } else {
                    throw new JSONException("unknown interface: " + clazz);
                }
            } else {
                try {
                    obj = clazz.newInstance();//实体化
                } catch (IllegalAccessException e) {
                    return null;
                } catch (InstantiationException e) {
                    e.printStackTrace();
                    return null;
                }
            }
            return obj;
        }

        /**
         * 设定Map的值
         *
         * @param obj 待赋值字段的对象
         * @param jo  json实例
         */
        private static void setField(Object obj, JSONObject jo) {
            try {
                Iterator<String> keyIter = jo.keys();
                String key;
                Object value;
                @SuppressWarnings("unchecked")
                Map<String, Object> valueMap = (Map<String, Object>) obj;
                while (keyIter.hasNext()) {
                    key = (String) keyIter.next();
                    value = jo.get(key);
                    valueMap.put(key, value);
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }

        /**
         * 设定字段的值
         *
         * @param obj            待赋值字段的对象
         * @param fieldSetMethod 字段方法名
         * @param field          字段
         * @param jo             json实例
         */
        private static void setField(Object obj, Method fieldSetMethod, Field field, JSONObject jo) {

            String name = field.getName();
            Class<?> clazz = field.getType();

            try {
                if (isArray(clazz)) { // 数组
                    Class<?> c = clazz.getComponentType();
                    JSONArray ja = jo.optJSONArray(name);
                    if (!isNull(ja)) {
                        Object array = fromJsonArray(ja, c);
                        setFiedlValue(obj, fieldSetMethod, clazz.getSimpleName(), array);
                    }
                } else if (isCollection(clazz)) { // 泛型集合
                    // 获取定义的泛型类型
                    Class<?> c = null;
                    Type gType = field.getGenericType();
                    if (gType instanceof ParameterizedType) {
                        ParameterizedType ptype = (ParameterizedType) gType;
                        Type[] targs = ptype.getActualTypeArguments();
                        if (targs.length > 0) {
                            Type t = targs[0];
                            c = (Class<?>) t;
                        }
                    }

                    JSONArray ja = jo.optJSONArray(name);
                    if (!isNull(ja)) {
                        Object o = parseCollection(ja, clazz, c);
                        setFiedlValue(obj, fieldSetMethod, clazz.getSimpleName(), o);
                    }
                } else if (isSingle(clazz)) { // 值类型
                    Object o = jo.opt(name);
                    if (o != null) {
                        setFiedlValue(obj, fieldSetMethod, clazz.getSimpleName(), o);
                    }
                } else if (isObject(clazz)) { // 对象
                    JSONObject j = jo.optJSONObject(name);
                    if (!isNull(j)) {
                        Object o = fromJson(j, clazz);
                        setFiedlValue(obj, fieldSetMethod, clazz.getSimpleName(), o);
                    }
                } else if (isList(clazz) || isMap(clazz) || isSet(clazz)) { // list 或 Map 或 Set
                    JSONObject j = jo.optJSONObject(name);
                    if (!isNull(j)) {
                        Object o = fromJson(j, clazz);
                        setFiedlValue(obj, fieldSetMethod, clazz.getSimpleName(), o);
                    }
                } else {
                    //或者位置类型
                    JSONObject j = jo.optJSONObject(name);
                    if (!isNull(j)) {
                        Object o = fromJson(j, clazz);
                        setFiedlValue(obj, fieldSetMethod, clazz.getSimpleName(), o);
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        /**
         * 设定字段的值
         *
         * @param obj   待赋值字段的对象
         * @param field 字段
         * @param jo    json实例
         */
        @SuppressWarnings("unused")
        private static void setField(Object obj, Field field, JSONObject jo) {
            String name = field.getName();
            Class<?> clazz = field.getType();
            try {
                if (isArray(clazz)) { // 数组
                    Class<?> c = clazz.getComponentType();
                    JSONArray ja = jo.optJSONArray(name);
                    if (!isNull(ja)) {
                        Object array = fromJsonArray(ja, c);
                        field.set(obj, array);
                    }
                } else if (isCollection(clazz)) { // 泛型集合
                    // 获取定义的泛型类型
                    Class<?> c = null;
                    Type gType = field.getGenericType();
                    if (gType instanceof ParameterizedType) {
                        ParameterizedType ptype = (ParameterizedType) gType;
                        Type[] targs = ptype.getActualTypeArguments();
                        if (targs != null && targs.length > 0) {
                            Type t = targs[0];
                            c = (Class<?>) t;
                        }
                    }
                    JSONArray ja = jo.optJSONArray(name);
                    if (!isNull(ja)) {
                        Object o = parseCollection(ja, clazz, c);
                        field.set(obj, o);
                    }
                } else if (isSingle(clazz)) { // 值类型
                    Object o = jo.opt(name);
                    if (o != null) {
                        field.set(obj, o);
                    }
                } else if (isObject(clazz)) { // 对象
                    JSONObject j = jo.optJSONObject(name);
                    if (!isNull(j)) {
                        Object o = fromJson(j, clazz);
                        field.set(obj, o);
                    }
                } else if (isList(clazz)) { // 列表
                    JSONObject j = jo.optJSONObject(name);
                    if (!isNull(j)) {
                        Object o = fromJson(j, clazz);
                        field.set(obj, o);
                    }
                } else {
                    throw new Exception("unknow type!");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        /**
         * 判断对象是否为空
         *
         * @param obj 实例
         * @return
         */
        private static boolean isNull(Object obj) {
            if (obj instanceof JSONObject) {
                return JSONObject.NULL.equals(obj);
            }
            return obj == null;
        }

        /**
         * 判断是否是值类型
         *
         * @param clazz
         * @return
         */
        private static boolean isSingle(Class<?> clazz) {
            return isBoolean(clazz) || isNumber(clazz) || isString(clazz);
        }

        /**
         * 是否布尔值
         *
         * @param clazz
         * @return
         */
        public static boolean isBoolean(Class<?> clazz) {
            return (clazz != null)
                    && ((Boolean.TYPE.isAssignableFrom(clazz)) || (Boolean.class
                    .isAssignableFrom(clazz)));
        }

        /**
         * 是否数值
         *
         * @param clazz
         * @return
         */
        public static boolean isNumber(Class<?> clazz) {
            return (clazz != null)
                    && ((Byte.TYPE.isAssignableFrom(clazz)) || (Short.TYPE.isAssignableFrom(clazz))
                    || (Integer.TYPE.isAssignableFrom(clazz))
                    || (Long.TYPE.isAssignableFrom(clazz))
                    || (Float.TYPE.isAssignableFrom(clazz))
                    || (Double.TYPE.isAssignableFrom(clazz)) || (Number.class
                    .isAssignableFrom(clazz)));
        }

        /**
         * 判断是否是字符串
         *
         * @param clazz
         * @return
         */
        public static boolean isString(Class<?> clazz) {
            return (clazz != null)
                    && ((String.class.isAssignableFrom(clazz))
                    || (Character.TYPE.isAssignableFrom(clazz)) || (Character.class
                    .isAssignableFrom(clazz)));
        }

        /**
         * 判断是否是对象
         *
         * @param clazz
         * @return
         */
        private static boolean isObject(Class<?> clazz) {
            return clazz != null && !isSingle(clazz) && !isArray(clazz) && !isCollection(clazz) && !isMap(clazz);
        }

        /**
         * 判断是否是数组
         *
         * @param clazz
         * @return
         */
        public static boolean isArray(Class<?> clazz) {
            return clazz != null && clazz.isArray();
        }

        /**
         * 判断是否是集合
         *
         * @param clazz
         * @return
         */
        public static boolean isCollection(Class<?> clazz) {
            return clazz != null && Collection.class.isAssignableFrom(clazz);
        }

        /**
         * 判断是否是Map
         *
         * @param clazz
         * @return
         */
        public static boolean isMap(Class<?> clazz) {
            return clazz != null && Map.class.isAssignableFrom(clazz);
        }

        /**
         * 判断是否是列表
         *
         * @param clazz
         * @return
         */
        public static boolean isList(Class<?> clazz) {
            return clazz != null && List.class.isAssignableFrom(clazz);
        }

        /**
         * 判断是否是列表
         *
         * @param clazz
         * @return
         */
        public static boolean isSet(Class<?> clazz) {
            return clazz != null && Set.class.isAssignableFrom(clazz);
        }

    }

    /**
     * 第一代 网络请求，不支持下载上传
     * HttpUtil 原始网络请求类
     * 支持明文传输，在配置文件里的 <application 下添加这个即可：android:usesCleartextTraffic="true"
     * https://apis.map.qq.com/ws/geocoder/v1/?location=22.5948,114.3069163&get_poi=1&key=J6HBZ-N3K33-D2B3V-YH7I4-37AVE-NJFMT
     */
    public static class HttpUtil<T> {

        private final String UTF_8 = "utf-8";
        public static final String GET = "GET";
        public static final String POST = "POST";

        private String type = "text";//请求参数的类型

        private boolean isBody = false;//是否采用 body

        public boolean isBody() {
            return isBody;
        }

        public void setBody(boolean body) {
            isBody = body;
        }

        public void setTextType() {
            type = "text";
        }

        public void setJsonType() {
            type = "json";
        }

        /**
         * Map转参数
         *
         * @param paramMap
         * @return
         */
        public String mapToParams(Map<String, Object> paramMap) {
            StringBuffer stringBuffer = new StringBuffer();
            if (paramMap != null && paramMap.size() > 0) {
                stringBuffer.append("?");//url 与 请求参数的分隔符
                for (Map.Entry<String, Object> entry : paramMap.entrySet()) {
                    stringBuffer.append(entry.getKey());
                    stringBuffer.append("=");
                    stringBuffer.append(entry.getValue());
                    stringBuffer.append("&");
                }
                stringBuffer.deleteCharAt(stringBuffer.length() - 1);//去掉最后一个 & 字符
                return stringBuffer.toString();
            }

            return null;
        }

        /**
         * 最终请求
         *
         * @param url      请求域名
         * @param listener 请求接口
         */
        private void getRequest(final String url, final OnLoadDataListener<T> listener) {
            if (url == null || listener == null) {
                return;
            }
            HttpURLConnection conn = null;
            try {
                URL path = new URL(url);//获取 Url
                conn = (HttpURLConnection) path.openConnection();//打开连接
                conn.setRequestMethod(GET);    //设置请求方式
                int code = conn.getResponseCode();
                if (code == 200) {//应答码200表示请求成功
                    try {
                        onSuccess(listener, conn);//请求成功
                    } catch (Exception e1) {
                        if (LOG.GT_LOG_TF) {
                            err("e:" + e1);
                        }
                    }
                } else {
                    GT.err("向服务器get请求返回的code:" + code);
                }
            } catch (Exception error) {
                try {
                    onError(listener, error, conn);//请求失败
                } catch (Exception e1) {
                    if (LOG.GT_LOG_TF) {
                        err("e:" + e1);
                    }
                }
            }
        }

        /**
         * @param url               请求域名
         * @param listener          请求接口
         * @param isSynchronization 是否同步
         */
        public void getRequest(final String url, final OnLoadDataListener<T> listener, boolean... isSynchronization) {
            if (isSynchronization.length > 0 && isSynchronization[0]) {
                getRequest(url, listener);
                return;
            }

            Thread.getInstance(0).execute(new Runnable() {
                @Override
                public void run() {
                    getRequest(url, listener);//将解析好的参数直接调用 getRequest 进行get请求参数
                }
            });

        }

        /**
         * get请求封装
         *
         * @param url               请求域名
         * @param paramMap          请求体
         * @param listener          请求接口
         * @param isSynchronization 是否同步
         */
        public void getRequest(final String url, final Map<String, Object> paramMap, final OnLoadDataListener<T> listener, boolean... isSynchronization) {
            if (url == null || listener == null) {
                return;
            }

            String params = mapToParams(paramMap);
            if (params == null) {
                err(getLineInfo(), "请求参数不能为null");
                return;
            }

            if (isSynchronization.length > 0 && isSynchronization[0]) {
                getRequest(url + params, listener, isSynchronization);
                return;
            }

            Thread.getInstance(0).execute(new Runnable() {
                @Override
                public void run() {
                    //将解析好的参数直接调用 getRequest 进行get请求参数
                    getRequest(url + params, listener, isSynchronization);
                }
            });

        }

        /**
         * post请求
         *
         * @param url      请求的url
         * @param map      请求体
         * @param listener 请求接口
         */
        public void postRequest(final String url, final Map<String, Object> map, final OnLoadDataListener<T> listener, boolean... isSynchronization) {
            String params = mapToParams(map);
            if (params == null) {
                err(getLineInfo(), "请求参数不能为null");
            }

            if (isSynchronization.length > 0 && isSynchronization[0]) {
                postRequest(url + "?" + params, null, listener);
                return;
            }

            Thread.getInstance(0).execute(new Runnable() {
                @Override
                public void run() {
                    postRequest(url + "?" + params, null, listener);
                }
            });


        }

        /**
         * @param url       请求的url
         * @param map       请求体
         * @param mapHeader 请求头
         * @param listener  请求接口
         */
        public void postRequest(final String url, final Map<String, Object> map, Map<String, Object> mapHeader, final OnLoadDataListener<T> listener, boolean... isSynchronization) {
            String params = mapToParams(map);
            if (url == null || params == null) {
                err(getLineInfo(), "请求参数不能为null");
            }

            if (isSynchronization.length > 0 && isSynchronization[0]) {
                postRequest(url + params, mapHeader, listener);
                return;
            }

            Thread.getInstance(0).execute(new Runnable() {
                @Override
                public void run() {
                    postRequest(url + params, mapHeader, listener);
                }
            });


        }

        /**
         * @param url       请求地址
         * @param mapHeader 请求体
         * @param listener  反馈接口
         */
        public void postRequest(final String url, Map<String, Object> mapHeader, final OnLoadDataListener<T> listener) {
            if (url == null || listener == null) {
                return;
            }
            String value = "";// 初始化
            String url3 = "";// 初始化

            if (url.contains("?")) {
                String[] arrayUrl = url.split("\\?");
                if (arrayUrl.length >= 2) {
                    url3 = arrayUrl[0];
                    for (int i = 1; i < arrayUrl.length; i++) {
                        value += arrayUrl[i];
                    }
                } else {
                    return;
                }
            } else {
                url3 = url;
            }

            String finalUrl = url3;
            String finalValue = value;
            HttpURLConnection conn = null;
            try {
                // 打开连接
                URL path = new URL(finalUrl);// 1. 生成URL
                conn = (HttpURLConnection) path.openConnection();// 2. HttpURLConnection 打开连接
                conn.setRequestMethod(POST);// 3. 设置为 POST 请求
                conn.setDoInput(true);//可向连接中写入
                conn.setDoOutput(true);//可向连接中读取数据
                conn.setUseCaches(false);//禁止使用缓存
                conn.setInstanceFollowRedirects(true);//自动执行Http重定向

                //请求头添加处
                if (type.equals("text")) {
                    // Text 请求
                    conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");//4. Content-Type,这里是固定写法，发送内容的类型
                } else {
                    // json 请求
                    conn.setRequestProperty("Content-Type", "application/json; charset=UTF-8");// 设置文件类型:
                }
                conn.setRequestProperty("Connection", "Keep-Alive");
                conn.setRequestProperty("Charset", "UTF-8");
                conn.setRequestProperty("accept", "application/json");

                //添加自定义的请求头
                if (mapHeader != null) {
                    for (String key : mapHeader.keySet()) {
                        String value2 = String.valueOf(mapHeader.get(key));
                        conn.setRequestProperty(key, value2);
                    }
                }

                // 向服务器提交请求数据
                conn.setDoOutput(true);// 5. output，这里要记得开启输出流，将自己要添加的参数用这个输出流写进去，传给服务端，这是socket的基本结构
                OutputStream os = conn.getOutputStream();// 获取输出流
                if (isBody) {
                    finalValue = toBodyData(finalValue);
                }
                os.write(finalValue.getBytes(UTF_8));// 一定要记得将自己的参数转换为字节，编码格式是utf-8
                os.flush();// 关闭输出流
                int code = conn.getResponseCode();
                if (code == 200) {
                    // 应答码200表示请求成功
                    try {
                        onSuccess(listener, conn);// 请求成功
                    } catch (Exception e1) {
                        if (LOG.GT_LOG_TF) {
                            err("e:" + e1);
                        }
                    }
                } else {
                    onError(listener, new Exception(), conn);
                }

            } catch (Exception e) {
                try {
                    onError(listener, e, conn);
                } catch (Exception e1) {
                    if (LOG.GT_LOG_TF) {
                        err("e:" + e1);
                    }
                }
            }

        }


        /**
         * @param url               请求域名
         * @param map               请求体
         * @param listener          请求接口
         * @param isSynchronization 是否同步
         * @param type              请求类型 Get 或 Post
         */
        public void httpRequest(final String url, final Map<String, Object> map, final OnLoadDataListener<T> listener, boolean isSynchronization, String... types) {
            String type = "POST";
            if (types.length != 0) {
                type = types[0];
            }
            if ("POST".equals(type) || "post".equals(type)) {
                postRequest(url, map, listener, isSynchronization);
            } else {
                getRequest(url, map, listener, isSynchronization);
            }
        }

        /**
         * @param url      请求域名
         * @param map      请求体
         * @param listener 请求接口
         * @param type     请求类型 Get 或 Post
         */
        public void httpRequest(final String url, final Map<String, Object> map, final OnLoadDataListener<T> listener, String... types) {
            String type = "POST";
            if (types.length != 0) {
                type = types[0];
            }
            if ("POST".equals(type) || "post".equals(type)) {
                httpRequest(url, map, null, listener, types);
            } else {
                getRequest(url, map, listener);
            }
        }

        /**
         * @param url      网络请求网址
         * @param map      请求体
         * @param mapHead  post 请求头(仅仅对 post 请求有效)
         * @param listener 反馈接口
         * @param types    切换 get 或 post
         */
        public void httpRequest(final String url, final Map<String, Object> map, final Map<String, Object> mapHead, final OnLoadDataListener<T> listener, String... types) {
            String type = "POST";
            if (types.length != 0) {
                type = types[0];
            }
            if ("POST".equals(type) || "post".equals(type)) {
                postRequest(url, map, mapHead, listener, false);
            } else {
                getRequest(url, map, listener);
            }
        }

        /**
         * @param url      网络请求网址
         * @param map      请求体
         * @param mapHead  post 请求头(仅仅对 post 请求有效)
         * @param listener 反馈接口
         * @param isBody   请求参数格式是否为 body （默认为 text）
         * @param types    切换 get 或 post
         */
        public void httpRequest(final String url, final Map<String, Object> map, final Map<String, Object> mapHead, final OnLoadDataListener<T> listener, boolean isBody, String... types) {
            String type = "POST";
            if (types.length != 0) {
                type = types[0];
            }

            //设置请求参数的格式
            if (isBody) {
                setJsonType();
                setBody(true);
            } else {
                setTextType();
                setBody(false);
            }

            if ("POST".equals(type) || "post".equals(type)) {
                postRequest(url, map, mapHead, listener, false);
            } else {
                getRequest(url, map, listener);
            }
        }


        /**
         * text 参数转 body
         *
         * @param value
         * @return
         */
        private static String toBodyData(String value) {
            try {
                if (value != null && value.contains("=")) {
                    if (!value.contains("&")) {// 单个参数
                        String[] split = value.split("=");
                        value = "{\n" +
                                "    \"" + split[0] + "\":\"" + split[1] + "\"" +
                                "\n}";
                    } else {//多个参数
                        String[] split = value.split("&");
                        value = "{\n";
                        for (int i = 0; i < split.length; i++) {
                            String str = split[i];
                            if (!str.contains("="))
                                continue;// 过滤掉非正常的
                            String[] split2 = str.split("=");
                            if (i != split.length - 1) {
                                value += "    \"" + split2[0] + "\":\"" + split2[1] + "\",\n";
                            } else {
                                value += "    \"" + split2[0] + "\":\"" + split2[1] + "\"";
                            }
                        }
                        value += "\n}";
                    }
                }
            } catch (Exception e) {

            }
            return value;
        }


        /**
         * 判断是否停止
         */
        private static boolean mIsCancel = false;

        public static boolean ismIsCancel() {
            return mIsCancel;
        }

        /**
         * 是否停止下载
         *
         * @param mIsCancel
         */
        public static void setmIsCancel(boolean mIsCancel) {
            HttpUtil.mIsCancel = mIsCancel;
        }

        /**
         * 下载File
         *
         * @param url
         * @param savePath
         * @param saveFileName
         * @param listener
         * @param iscache      是否开启网络缓存
         */
        public static void downloadFile(final String url, final String savePath, final OnLoadData listener, boolean... iscache) {
            Thread.getInstance(0).execute(new Runnable() {
                @Override
                public void run() {
                    HttpURLConnection conn;
                    try {
                        conn = (HttpURLConnection) new URL(url).openConnection();
                        if (iscache != null && iscache.length > 0 && iscache[0]) {
                            conn.setUseCaches(true); //设置使用网络缓存
                        }
                        conn.connect();
                        InputStream is = conn.getInputStream();
                        int length = conn.getContentLength();

                        //如果下载文件保存的目录不存在，那就默认创建该路径目录
                        String path = savePath.substring(0, savePath.lastIndexOf("/"));
                        File file2 = new File(path);
                        if (!file2.exists()) {
                            file2.mkdirs();
                        }

                        File file = new File(savePath);
                        FileOutputStream fos = new FileOutputStream(file);

                        int count = 0;
                        byte[] buffer = new byte[1024];
                        Thread.runAndroid(new Runnable() {
                            @Override
                            public void run() {
                                //开始下载
                                listener.onDownloadStart(file);
                            }
                        });

                        final int[] oldProgress = {0};//旧的进度条

                        while (!mIsCancel) {
                            int numread = is.read(buffer);
                            count += numread;
                            // 计算进度条的当前位置
                            int mProgress = (int) (((float) count / length) * 100);
                            //下载中更新进度条
                            Thread.runAndroid(new Runnable() {
                                @Override
                                public void run() {
                                    if (oldProgress[0] != mProgress) {
                                        oldProgress[0] = mProgress;
                                        listener.onDownloading(mProgress);
                                    }
                                }
                            });
                            if (numread < 0) {
                                //下载完成
                                Thread.runAndroid(new Runnable() {
                                    @Override
                                    public void run() {
                                        listener.onDownloadSuccess(file);
                                    }
                                });
                                break;
                            }
                            fos.write(buffer, 0, numread);
                        }
                        fos.close();
                        is.close();

                    } catch (IOException e) {
                        Thread.runAndroid(new Runnable() {
                            @Override
                            public void run() {
                                listener.onDownloadFailed(e);
                            }
                        });
                    }
                }
            });
        }

        /**
         * 反馈失败
         *
         * @param listener
         * @param onError
         */
        private void onError(final OnLoadDataListener<T> listener, final Exception onError, HttpURLConnection conn) {
            conn.disconnect();//断开连接
            Thread.runAndroid(new Runnable() {
                @Override
                public void run() {
                    try {
                        T t = null;
                        Class<?> aClass = AnnotationAssist.abstractClasstoGenericity(listener.getClass());
                        if (aClass != null) {
                            t = (T) JSON.fromJson2(onError.toString(), aClass);
                        }
                        listener.onError(onError.toString(), t);
                    } catch (Exception e) {
                        listener.onError(onError.toString(), null);
                    }

                }
            });
        }

        /**
         * 反馈成功
         *
         * @param listener
         * @param con
         * @throws IOException
         */
        private void onSuccess(final OnLoadDataListener<T> listener, HttpURLConnection con) throws IOException {
            InputStream inputStream = con.getInputStream();
            ByteArrayOutputStream baos = new ByteArrayOutputStream();//创建内存输出流
            int len;
            byte[] bytes = new byte[1024];
            if (inputStream != null) {
                while ((len = inputStream.read(bytes)) != -1) {
                    baos.write(bytes, 0, len);
                }
                final String str = new String(baos.toByteArray(), UTF_8);
                Thread.runAndroid(new Runnable() {
                    @Override
                    public void run() {
                        T t = null;
                        try {
                            Class<?> aClass = AnnotationAssist.abstractClasstoGenericity(listener.getClass());
                            if (aClass != null) {
                                t = (T) JSON.fromJson2(str, aClass);
                            }
                            listener.onSuccess(str, t);
                        } catch (Exception e) {
                            listener.onSuccess(str, t);
                        }
                    }
                });
                inputStream.close();//关闭
                con.disconnect();//断开连接
            }
        }

        //增强版请求接口
        public static interface OnLoadDataListener<T> {

            public void onSuccess(String response, T t);

            public void onError(String response, T t);

        }

        //增强版请求接口
        public static abstract class OnLoadData<T> implements OnLoadDataListener<T> {
            public void onSuccess(String response, T t) {
            }//请求成功单个

            public void onError(String response, T t) {
            }//请求错误

            /**
             * 下载成开始
             */
            public void onDownloadStart(File file) {
            }

            /**
             * 下载进度
             */
            public void onDownloading(int progress) {
            }

            /**
             * 下载成功
             */
            public void onDownloadSuccess(File file) {
            }

            /**
             * 下载异常信息
             */
            public void onDownloadFailed(Exception e) {
            }

        }

    }

    /**
     * 第二代 网络请求，支持下载上传
     * 支持明文传输，在配置文件里的 <application 下添加这个即可：android:usesCleartextTraffic="true"
     */
    public static class HttpCall<T> {

        /**
         * API类
         *
         * @Concurrence(2)
         * @URL("http://gsls.3vfree.cn/") public interface HttpApi {
         * @GET("hnn-manage/market/show") Call<JsonRootBean> loginGet0(int page, int rows, int domainId, LoginBean loginBean);
         * @GET("hnn-manage/market/show") Call<JsonRootBean> loginGet1(int page, int rows, int domainId);
         * @POST("user/v1/login") Call<LoginBean> loginGet2(int type, String identifier, String password);
         * @GET("/order/v1/merchant/shops/{shopId}/merge/orders/{voucherid}") Call<LoginBean> loginGet3(int shopId, String voucherid);
         * @GET("Servers/GT/gt-DataBinding.jar") Call<File> loginGetFile(@FileDownload("filePath") String filePath, String key);
         * @GET("Servers/GT/gt-DataBinding.jar") Call<File> loginGetFile2(@FileDownload("file") File file, String key);
         * @GET("Servers/GT/gt-DataBinding.jar") Call<File> loginGetFile3(@FileUploading("file") File file, String key);
         * <p>
         * }
         */
        private static AnnotationAssist annotationAssist = new AnnotationAssist();
        private static Map<String, String[]> parameterNameMap = new ArrayMap<>();//存储一个接口里方法的形参名称

        //构建 HttpCall 对象
        @Target(ElementType.FIELD)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface Build {

        }

        //当前总域名
        @Target(ElementType.TYPE)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface URL {
            String value();
        }

        //同时并发
        @Target(ElementType.TYPE)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface Concurrence {
            int value() default 10;//默认支持并发10个
        }

        //添加多个请求头部
        @Retention(RUNTIME)
        public @interface Headers {
            String[] value();
        }

        //字符集
        @Retention(RUNTIME)
        public @interface Charset {
            String value() default "UTF-8";//默认字符集
        }

        //是否重定向
        @Retention(RUNTIME)
        public @interface Redirects {
            boolean value() default true;//默认自动进行重定向
        }

        //是否使用缓存
        @Retention(RUNTIME)
        public @interface Cache {
            boolean value() default false;//默认自动进行重定向
        }

        //连接超时
        @Retention(RUNTIME)
        public @interface ConnectTimeout {
            int value() default 8000;//默认超时
        }

        //读取超时
        @Retention(RUNTIME)
        public @interface ReadTimeout {
            int value() default 8000;//默认超时
        }

        //请求服务器的内容格式
        @Retention(RUNTIME)
        public @interface ContentType {
            //常用格式
            String FORM = "application/x-www-form-urlencoded;";//表单格式数据
            String JSON = "application/json;";//json格式数据
            String DOWNLOAD = "application/octet-stream;";//下载文件

            //其他格式
            String HTML = "text/html;";
            String PLAIN = "text/plain;";
            String XML_T = "text/xml;";
            String GIF = "image/gif;";
            String PNG = "image/png;";

            //application开头媒体格式类型
            String XHTML = "application/xhtml+xml;";
            String XML_A = "application/xml;";
            String ATOM_XML = "application/atom+xml;";
            String PDF = "application/pdf;";
            String WORD = "application/msword;";

            //其余的可自定义

            String value() default FORM; //form json 或者可以自定义其他的
        }

        //是否进行转码
        @Retention(RUNTIME)
        public @interface Unicode {
            boolean value() default true;//默认不进行转码 Unicode
        }

        //下载文件
        @Documented
        @Target(PARAMETER)
        @Retention(RUNTIME)
        public @interface FileDownload {
            String value();//标识文件路径的关键字
        }

        //上传文件
        @Documented
        @Target(PARAMETER)
        @Retention(RUNTIME)
        public @interface FileUploading {
            String value();
        }

        @Documented
        @Target(PARAMETER)
        @Retention(RUNTIME)
        public @interface Query {
            String value();
        }

        //**************************************** 请求方式 ***********************************
        @Target(ElementType.METHOD)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface GET {
            String value();
        }

        @Target(ElementType.METHOD)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface POST {
            String value();
        }

        @Target(ElementType.METHOD)
        @Retention(RetentionPolicy.SOURCE)
        public @interface PATH {
            String value();
        }

        @Target(ElementType.METHOD)
        @Retention(RetentionPolicy.SOURCE)
        public @interface PUT {
            String value();
        }

        @Target(ElementType.METHOD)
        @Retention(RetentionPolicy.SOURCE)
        public @interface DELETE {
            String value();
        }

        @Target(ElementType.METHOD)
        @Retention(RetentionPolicy.SOURCE)
        public @interface HEAD {
            String value();
        }

        @Target(ElementType.METHOD)
        @Retention(RetentionPolicy.SOURCE)
        public @interface OPTION {
            String value();
        }

        @Target(ElementType.METHOD)
        @Retention(RetentionPolicy.SOURCE)
        public @interface HTTP {
            String value();
        }

        /**
         * 创建动态代理对象
         *
         * @param classz
         * @param onRunMethod
         * @param <T>
         * @return
         */
        public static <T> T create(Class<T> classz) {
            //设置并发请求个数
            ExecutorService executor = null;
            Concurrence concurrenceAnnotation = classz.getAnnotation(Concurrence.class);
            GT_HttpCallBuild httpCallBuild = classz.getAnnotation(GT_HttpCallBuild.class);
            if (concurrenceAnnotation != null) {
                executor = Thread.getInstance(concurrenceAnnotation.value(), true);
            } else {
                executor = Thread.getInstance(10, true);
            }

            //如果该类被 GT_HttpCallBuild 所标识，那就进行反射获取绑定对象进行解析
            if (httpCallBuild != null) {
                Object object = AnnotationAssist.classToObject(classz.getName() + "Binding");
                if (object != null) {
                    String javaCode = object.toString();
                    if (javaCode != null) {
                        String[] parameterNameArrays = javaCode.split(" ");
                        for (String parameterName : parameterNameArrays) {
                            int indexOf = parameterName.indexOf("[");
                            if (indexOf != -1) {
                                String key = parameterName.substring(0, indexOf);
                                String value = parameterName.substring(indexOf + 1, parameterName.length() - 1);
                                parameterNameMap.put(key, value.split(","));
                            }
                        }
                    }
                }
            }

            //采用动态代理进行解析接口类
            ExecutorService finalExecutor = executor;
            return MethodProxy.getInstance().create(classz, new MethodProxy.OnRunMethod() {
                @Override
                public Object runMethod(Object proxy, Method method, Object[] args) {
                    String methodName = method.getName();
                    Call<T> call = new Call<T>();
                    call.executor = finalExecutor;//设置线程池

                    FileDownload fileDownload = null;
                    FileUploading fileUploading = null;
                    List<Annotation> methodAllAnnotation = AnnotationAssist.getMethodParameterAnnotation(method);
                    for (Annotation annotation : methodAllAnnotation) {
                        if (annotation instanceof FileDownload) {
                            fileDownload = (FileDownload) annotation;
                            call.contentType = ContentType.DOWNLOAD;
                            call.charset = "";
                        } else if (annotation instanceof FileUploading) {
                            fileUploading = (FileUploading) annotation;
                            call.contentType = ContentType.DOWNLOAD;
                            call.charset = "";
                        }
                    }

                    //获取T类型，用于 json to Bean
                    try {
                        Type genericReturnType = method.getGenericReturnType();
                        String typeName = genericReturnType.toString();
//                        String typeName = genericReturnType.getTypeName();
                        if (typeName.indexOf("Call<") != -1) {
                            typeName = typeName.substring(typeName.indexOf("Call<") + "Call<".length(), typeName.length() - 1);
                        }
                        //如果不是下载夜班不是上传文件，那就根据 class 反射出实体类
                        if (fileDownload == null && fileUploading == null) {
                            call.t = (T) AnnotationAssist.classToObject(typeName);
                        }
                    } catch (Exception e) {
                        call.exception = e;
                    }

                    //先整合 请求类名上的注解
                    URL urlAnnotation = classz.getAnnotation(URL.class);//获取该类 ContextView 的注解类
                    Headers headerAnnotation = classz.getAnnotation(Headers.class);

                    //设置请求格式参数
                    setRequiredParameter(call, classz);

                    //添加 URL 总域名
                    if (urlAnnotation != null) {
                        String value = urlAnnotation.value();
                        //转码
                        if (ApplicationUtils.isLetterDigitOrChinese(value)) {
                            try {
                                value = URLEncoder.encode(value, "UTF-8");
                            } catch (UnsupportedEncodingException e) {
                                e.printStackTrace();
                            }
                        }
                        call.url = value;
                    }

                    //添加总头部信息
                    if (headerAnnotation != null) {
                        String[] headers = headerAnnotation.value();
                        for (String header : headers) {
                            if (!header.contains(":") || header.split(":").length != 2)
                                continue;//过滤掉有问题的头部信息
                            String[] split = header.split(":");
                            if (!call.getHeaderMap().containsKey(split[0])) {
                                call.addHeader(split[0], split[1]);
                            }
                        }
                    }


                    //再把具体请求的方法进行整合
                    GET get = method.getAnnotation(GET.class);
                    POST post = method.getAnnotation(POST.class);
                    PATH path = method.getAnnotation(PATH.class);
                    PUT put = method.getAnnotation(PUT.class);
                    DELETE delete = method.getAnnotation(DELETE.class);
                    HEAD head = method.getAnnotation(HEAD.class);
                    OPTION option = method.getAnnotation(OPTION.class);
                    headerAnnotation = method.getAnnotation(Headers.class);

                    //设置请求格式参数
                    setRequiredParameter(call, method);

                    //请求第二段地址
                    String urlValue = "";
                    //请求类型
                    if (get != null) {
                        call.type = "GET";
                        urlValue = get.value();
                    } else if (post != null) {
                        call.type = "POST";
                        urlValue = post.value();
                    } else if (path != null) {
                        call.type = "PATH";
                        urlValue = path.value();
                    } else if (put != null) {
                        call.type = "PUT";
                        urlValue = put.value();
                    } else if (delete != null) {
                        call.type = "DELETE";
                        urlValue = delete.value();
                    } else if (head != null) {
                        call.type = "HEAD";
                        urlValue = head.value();
                    } else if (option != null) {
                        call.type = "OPTION";
                        urlValue = option.value();
                    }

                    //获取方法形参的类型
                    Class<?>[] parameterTypes = method.getParameterTypes();

                    String[] parameterArray = null;

                    //第一种方法：通过 JDK1.8 获取方法形参的名称
                    if (httpCallBuild == null) {
                        try {
                            Parameter[] parameters = method.getParameters();
                            parameterArray = new String[parameters.length];
                            for (int i = 0; i < parameters.length; i++) {
                                parameterArray[i] = parameters[i].getName();
                            }
                        } catch (NoSuchMethodError e) {
                            if (LOG.GT_LOG_TF) {
                                GT.errt("method.getParameters 方法无效:" + e);
                            }
                        }
                    }

                    //第二种方法：使用 GT_DataBinding 进行获取方法形参
                    if (parameterArray == null || parameterArray.length == 0 || httpCallBuild != null) {
                        try {
                            String GT_KEY = classz.getName() + "+" + methodName + "-";
                            for (Class<?> cla : parameterTypes) {
                                String parameterType = cla.toString();
                                if (parameterType.contains(".")) {
                                    String[] split = parameterType.split("\\.");
                                    GT_KEY += split[split.length - 1] + "-";
                                } else {
                                    GT_KEY += parameterType + "-";
                                }
                            }
                            GT_KEY = GT_KEY.substring(0, GT_KEY.length() - 1);
                            parameterArray = parameterNameMap.get(GT_KEY);
                        } catch (Exception e) {
                            GT.errt("通过注解请求方式异常:" + e);
                        }
                    }

                    //第三种方法：使用注解的方式获取方法形参名
                    if (parameterArray == null || parameterArray.length == 0) {
                        Annotation[][] declaredAnnotations = method.getParameterAnnotations();
                        List<String> list = new ArrayList<>();
                        //获取 注解上的方法名称
                        for (Annotation[] annotation1 : declaredAnnotations) {
                            for (Annotation annotation2 : annotation1) {
                                if (annotation2 instanceof Query) {
                                    Query query = (Query) annotation2;
                                    list.add(query.value());
                                } else if (annotation2 instanceof FileDownload) {
                                    FileDownload query = (FileDownload) annotation2;
                                    list.add(query.value());
                                } else if (annotation2 instanceof FileUploading) {
                                    FileUploading query = (FileUploading) annotation2;
                                    list.add(query.value());
                                }

                            }
                        }

                        if (list.size() >= 1) {
                            parameterArray = new String[list.size()];
                            for (int i = 0; i < list.size(); i++) {
                                parameterArray[i] = list.get(i);
                            }
                        }
                    }

                    //三种方法还为 null 那就无能为力，只能提示错误
                    if (parameterArray == null) {
                        GT.errt("获取 GT.HttpCall 方法种的形参出错，无法进行请求操作，正确使用教程请参考官网教程：https://blog.csdn.net/qq_39799899");
                        return call;
                    }

                    if (headerAnnotation != null) {
                        String[] headers = headerAnnotation.value();
                        for (String header : headers) {
                            if (!header.contains(":") || header.split(":").length != 2)
                                continue;//过滤掉有问题的头部信息
                            String[] split = header.split(":");
                            if (!call.getHeaderMap().containsKey(split[0])) {
                                call.addHeader(split[0], split[1]);
                            }
                        }
                    }

                    if (args != null) {
                        for (int i = 0; i < args.length; i++) {
                            if (args[i] == null) continue;//跳过为 null 的参数
                            String aClass = AnnotationAssist.returnType(parameterTypes[i]).toString();
                            if (aClass.contains("Map")) {
                                if (args[i] instanceof Map) {
                                    Map<String, Object> map = (Map<String, Object>) args[i];
                                    for (String key : map.keySet()) {
                                        if (!call.getParamMap().containsKey(key)) {
                                            call.addParam(key, map.get(key));
                                        }
                                    }
                                }
                            } else if (aClass.contains("Object")) {
                                if (!call.getParamMap().containsKey(parameterArray[i])) {
                                    call.addParam(parameterArray[i], args[i].toString());
                                }
                            } else {
                                if (fileDownload != null && parameterArray[i].equals(fileDownload.value())) {
                                    //下载
                                    call.uploadingOrDownload = false;
                                    if (aClass.contains("String")) {
                                        call.fileState = true;
                                        call.filePath = String.valueOf(args[i]);
                                        call.file = new File(call.filePath);
                                    } else if (aClass.contains("File")) {
                                        call.fileState = true;
                                        File file = (File) args[i];
                                        call.file = file;
                                        call.filePath = file.getPath();
                                    }
                                } else if (fileUploading != null && parameterArray[i].equals(fileUploading.value())) {
                                    //上传
                                    call.uploadingOrDownload = true;
                                    if (aClass.contains("String")) {
                                        call.fileState = true;
                                        call.filePath = String.valueOf(args[i]);
                                        call.file = new File(call.filePath);
                                    } else if (aClass.contains("File")) {
                                        call.fileState = true;
                                        File file = (File) args[i];
                                        call.file = file;
                                        call.filePath = file.getPath();
                                    }
                                } else {
                                    //形参传下来的形参具体值,不添加重复的形参,有重复的以第一个为准
                                    if (!call.getParamMap().containsKey(parameterArray[i])) {
                                        call.addParam(parameterArray[i], args[i]);
                                    }
                                }
                            }

                        }
                    }

                    disposalPath(urlValue, call);
                    call.url += call.keyList.get(call.keyList.size() - 1);
                    call.keyList.remove(call.keyList.size() - 1);
                    call.method = method;
                    return call;
                }
            });
        }

        /**
         * 设置网络请求格式参数
         *
         * @param call
         * @param object
         * @param <T>
         */
        private static <T> void setRequiredParameter(Call<T> call, Object object) {

            ContentType contentTypeAnnotation = null;
            Charset charset = null;
            Redirects redirects = null;
            Cache cache = null;
            ConnectTimeout connectTimeout = null;
            ReadTimeout readTimeout = null;
            Unicode unicode = null;

            if (object instanceof Class) {
                Class<T> classz = (Class<T>) object;
                contentTypeAnnotation = classz.getAnnotation(ContentType.class);
                charset = classz.getAnnotation(Charset.class);
                redirects = classz.getAnnotation(Redirects.class);
                cache = classz.getAnnotation(Cache.class);
                connectTimeout = classz.getAnnotation(ConnectTimeout.class);
                readTimeout = classz.getAnnotation(ReadTimeout.class);
                unicode = classz.getAnnotation(Unicode.class);
            } else if (object instanceof Method) {
                Method method = (Method) object;
                contentTypeAnnotation = method.getAnnotation(ContentType.class);
                charset = method.getAnnotation(Charset.class);
                redirects = method.getAnnotation(Redirects.class);
                cache = method.getAnnotation(Cache.class);
                connectTimeout = method.getAnnotation(ConnectTimeout.class);
                readTimeout = method.getAnnotation(ReadTimeout.class);
                unicode = method.getAnnotation(Unicode.class);
            } else {

            }

            //请求内容类型
            if (contentTypeAnnotation != null) {
                String value = contentTypeAnnotation.value();
                call.contentType = value;
            }

            //设置请求的字符集
            if (charset != null) {
                call.charset = charset.value();
            }

            //是否重定向
            if (redirects != null) {
                call.redirects = redirects.value();
            }

            //是否使用缓存
            if (cache != null) {
                call.cache = cache.value();
            }

            //请求超时
            if (connectTimeout != null) {
                call.connectTimeout = connectTimeout.value();
            }

            //读取超时
            if (readTimeout != null) {
                call.readTimeout = readTimeout.value();
            }

            //unicode 转码
            if (unicode != null) {
                call.unicode = unicode.value();
            }

        }

        //请求数据载体
        public static class Call<T> {

            private String url;
            private String type = "GET";
            private String contentType = "application/x-www-form-urlencoded;";
            private String filePath = "";
            private File file;
            private boolean fileState = false;//文件 上传下载 开关
            private boolean filePause = false;//文件 上传下载 暂停
            private boolean uploadingOrDownload = false;//默认是下载
            private List<String> keyList = new ArrayList<>(); //为了保证方法参数的顺序
            private Map<String, Object> paramMap = new ArrayMap<>();
            private Map<String, Object> headerMap = new ArrayMap<>();
            private ExecutorService executor;//线程池
            private String charset = "UTF-8";//请求字符集格式
            private boolean redirects = true;//默认自动进行重定向
            private boolean cache = false;//默认不使用缓存
            private boolean unicode = false;//默认不使进行 unicode 转码
            private int connectTimeout = 8000;//默认连接超时
            private int readTimeout = 8000;//默认连接超时

            private String response;
            private Method method;
            private T t;
            private Class<T> tClass;
            private int code;
            private Exception exception;

            /**
             * 经典的请求方式 ：
             * new Call<>(Bean.class).addUrl(url).newCall();
             *
             * @param tClass
             */
            public Call(Class<T>... tClass) {
                executor = Thread.getInstance(0);
                if (tClass.length > 0) {
                    Class tClass1 = tClass[0];
                    this.tClass = tClass1;

                }

            }

            public Call<T> setUrl(String url) {
                this.url = url;
                return this;
            }

            public boolean isFileState() {
                return fileState;
            }

            public Call<T> setFileState(boolean fileState) {
                this.fileState = fileState;
                return this;
            }

            public boolean isFilePause() {
                return filePause;
            }

            public Call<T> setFilePause(boolean filePause) {
                this.filePause = filePause;
                return this;
            }

            public File getFile() {
                return file;
            }

            public Call<T> addFile(File file) {
                this.file = file;
                return this;
            }

            public String getFilePath() {
                return filePath;
            }

            public Call<T> addFilePath(String filePath) {
                this.filePath = filePath;
                return this;
            }

            public Exception getException() {
                return exception;
            }

            public int getReadTimeout() {
                return readTimeout;
            }

            public Call<T> setReadTimeout(int readTimeout) {
                this.readTimeout = readTimeout;
                return this;
            }

            public boolean isCache() {
                return cache;
            }

            public Call<T> setCache(boolean cache) {
                this.cache = cache;
                return this;
            }

            public int getConnectTimeout() {
                return connectTimeout;
            }

            public Call<T> setConnectTimeout(int connectTimeout) {
                this.connectTimeout = connectTimeout;
                return this;
            }

            public boolean isRedirects() {
                return redirects;
            }

            public Call<T> setRedirects(boolean redirects) {
                this.redirects = redirects;
                return this;
            }

            public String getCharset() {
                return charset;
            }

            public Call<T> setCharset(String charset) {
                this.charset = charset;
                return this;
            }

            public List<String> getKeyList() {
                return keyList;
            }

            public Call<T> setKeyList(List<String> keyList) {
                this.keyList = keyList;
                return this;
            }

            public String getContentType() {
                return contentType;
            }

            public Call<T> setContentType(String contentType) {
                this.contentType = contentType;
                return this;
            }

            public Call<T> addUrl(String url) {
                this.url = url;
                return this;
            }

            public String getType() {
                return type;
            }

            public Call<T> setType(String type) {
                this.type = type;
                return this;
            }

            public Map<String, Object> getParamMap() {
                return paramMap;
            }

            public Call<T> addParam(String key, Object obj) {
                if (paramMap != null) {
                    paramMap.put(key, obj);
                    keyList.add(key);
                }
                return this;
            }

            /**
             * 添加 Map
             *
             * @param map
             * @return
             */
            public Call<T> addParamMap(Map<String, Object> map) {
                if (paramMap != null && map != null) {
                    for (String key : map.keySet()) {
                        if (!paramMap.containsKey(key)) {
                            paramMap.put(key, map.get(key));
                            keyList.add(key);
                        }
                    }
                }
                return this;
            }

            /**
             * 添加 Map
             *
             * @param map
             * @return
             */
            public Call<T> addParamBody(String key, Object obj) {
                if (!paramMap.containsKey(key)) {
                    paramMap.put(key, obj.toString());
                    keyList.add(key);
                }
                return this;
            }

            /**
             * 添加 JSONObject 类型的请求参数
             *
             * @param jsonObject
             * @return
             */
            public Call<T> addParamJSONObject(JSONObject jsonObject) {
                if (jsonObject == null) return this;
                for (Iterator<String> it = jsonObject.keys(); it.hasNext(); ) {
                    String key = it.next();
                    try {
                        Object obj = jsonObject.get(key);
                        if (!paramMap.containsKey(key)) {
                            paramMap.put(key, String.valueOf(obj));
                            keyList.add(key);
                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
                return this;
            }

            public Map<String, Object> getHeaderMap() {
                return headerMap;
            }

            public Call<T> addHeader(String key, Object obj) {
                if (headerMap != null) {
                    headerMap.put(key, obj);
                }
                return this;
            }

            public int getCode() {
                return code;
            }

            public Method getMethod() {
                return method;
            }

            public String getUrl() {
                return url;
            }

            public String getData() {
                return response;
            }

            public T body() {
                return t;
            }

            @Override
            public String toString() {
                return "Call{" +
                        "url='" + url + '\'' +
                        ", type='" + type + '\'' +
                        ", contentType='" + contentType + '\'' +
                        ", filePath='" + filePath + '\'' +
                        ", file=" + file +
                        ", fileState=" + fileState +
                        ", filePause=" + filePause +
                        ", uploadingOrDownload=" + uploadingOrDownload +
                        ", keyList=" + keyList +
                        ", paramMap=" + paramMap +
                        ", headerMap=" + headerMap +
                        ", executor=" + executor +
                        ", charset='" + charset + '\'' +
                        ", redirects=" + redirects +
                        ", cache=" + cache +
                        ", unicode=" + unicode +
                        ", connectTimeout=" + connectTimeout +
                        ", readTimeout=" + readTimeout +
                        ", response='" + response + '\'' +
                        ", method=" + method +
                        ", t=" + t +
                        ", tClass=" + tClass +
                        ", code=" + code +
                        ", exception=" + exception +
                        '}';
            }

            //异步需要填参数，同步请求无需填参数
            public Call<T> newCall(Callback<T>... callback) {
                return callRequest(this, callback);
            }

            public void close() {
                url = null;
                response = null;
                t = null;
                exception = null;
                code = 0;
                if (paramMap != null) {
                    paramMap.clear();
                    paramMap = null;
                }
                if (headerMap != null) {
                    headerMap.clear();
                    headerMap = null;
                }
            }

        }

        /**
         * 具体请求
         *
         * @param call
         * @param callBack
         * @param <T>
         */
        private static <T> Call<T> callRequest(Call<T> call, Callback<T>... callbacks) {
            Callback<T> callBack = null;
            if (callbacks.length > 0) {
                callBack = callbacks[0];
            }

            if (callBack != null) {
                Callback<T> finalCallBack = callBack;
                call.executor.execute(new Runnable() {
                    @Override
                    public void run() {
                        if (call.filePath != null && call.filePath.length() == 0) {
                            callSynchronization(call, finalCallBack);
                        } else {
                            if (call.uploadingOrDownload) {
                                callSynchronizationUploadingFile(call, finalCallBack);
                            } else {
                                callSynchronizationDownloadFile(call, finalCallBack);
                            }
                        }

                    }
                });
            } else {
                if (call.filePath != null && call.filePath.length() == 0) {
                    return callSynchronization(call, callBack);
                } else {
                    if (call.uploadingOrDownload) {
                        return callSynchronizationUploadingFile(call, callBack);
                    } else {
                        return callSynchronizationDownloadFile(call, callBack);
                    }
                }
            }

            return call;
        }

        /**
         * 上传文件
         *
         * @param call
         * @param callback
         * @param <T>
         * @return
         */
        private static <T> Call<T> callSynchronizationUploadingFile(Call<T> call, Callback<T> callback) {
            try {
                //开始请求
                if (callback != null)
                    Thread.runAndroid(new Runnable() {
                        @Override
                        public void run() {
                            callback.onStart(call);
                        }
                    });

                //请求参数
                String urlParam = mapToParams(call.paramMap, call.keyList);

                //转码
                if (ApplicationUtils.isLetterDigitOrChinese(urlParam)) {
                    try {
                        urlParam = URLEncoder.encode(urlParam, "UTF-8");
                    } catch (UnsupportedEncodingException e) {
                        e.printStackTrace();
                    }
                }

                if (call.t != null) {
                    call.tClass = (Class<T>) call.t.getClass();
                }

                //设置 gei OR post url格式
                switch (call.type) {
                    case "GET":
                        call.url += urlParam;
                        break;
                    default:
                        if (urlParam.contains("?")) {
                            urlParam = urlParam.replaceAll("\\?", "");
                        }
                        break;
                }

                File file = call.file;
                //新建url对象
                java.net.URL url = new java.net.URL(call.url);
                //通过HttpURLConnection对象,向网络地址发送请求
                HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                conn.setDoOutput(true);//设置该连接允许读取
                conn.setDoInput(true);//设置该连接允许写入
                conn.setUseCaches(call.cache);//设置不能适用缓存
                conn.setInstanceFollowRedirects(call.redirects);//自动执行Http重定向
                conn.setConnectTimeout(call.connectTimeout);//连接超时
                conn.setReadTimeout(call.readTimeout);//读取超时
                conn.setRequestMethod(call.type);//设置连接方法post
                conn.setRequestProperty("connection", "Keep-Alive");//设置维持长连接
                conn.setRequestProperty("Accept-Charset", "UTF-8");//设置文件字符集
                conn.setRequestProperty("Content-Type", call.contentType + "boundary=" + call.charset);// 设置文件类型:

                //添加自定义的请求头
                for (String key : call.headerMap.keySet()) {
                    String value = String.valueOf(call.headerMap.get(key));
                    conn.setRequestProperty(key, value);
                }

                String name = file.getName();
                DataOutputStream requestStream = new DataOutputStream(conn.getOutputStream());
                requestStream.writeBytes("--" + "*****" + "\r\n");

                //发送文件参数信息
                switch (call.type) {
                    case "GET":
                        break;
                    default:
                        // 向服务器提交请求数据
                        conn.setDoOutput(true);// 5. output，这里要记得开启输出流，将自己要添加的参数用这个输出流写进去，传给服务端，这是socket的基本结构
                        OutputStream os = conn.getOutputStream();// 获取输出流
                        os.write(urlParam.getBytes(call.charset));// 一定要记得将自己的参数转换为字节，编码格式是utf-8
                        os.flush();// 关闭输出流
                        break;
                }


                //发送文件数据
                FileInputStream fileInput = new FileInputStream(file);
                int numread;
                int count = 0;
                long length = file.length();
                byte[] buffer = new byte[1024];
                DataInputStream in = new DataInputStream(new FileInputStream(file));
                while ((numread = in.read(buffer)) != -1) {
                    while (call.fileState && call.filePause) {
                        Thread.sleep(100);//暂停
                    }
                    count += numread;
                    // 计算进度条的当前位置
                    int mProgress = (int) (((float) count / length) * 100);
                    if (numread < 0) {
                        //下载完成
                        Thread.runAndroid(new Runnable() {
                            @Override
                            public void run() {
                                callback.onUploadingSuccess(call.file);
                            }
                        });
                        break;
                    }
                    //下载中更新进度条
                    int finalCount = count;
                    Thread.runAndroid(new Runnable() {
                        @Override
                        public void run() {
                            callback.onUploading(call.file, mProgress, finalCount, length, FileUtils.formetFileSize(length));
                        }
                    });
                    requestStream.write(buffer, 0, numread);
                }
                requestStream.writeBytes("\r\n");
                requestStream.flush();
                requestStream.writeBytes("--" + "*****" + "--" + "\r\n");
                requestStream.flush();
                fileInput.close();
                int statusCode = conn.getResponseCode();
                String result = null;
                if (statusCode == HttpURLConnection.HTTP_OK) {
                    result = DataUtils.streamToString(conn.getInputStream());// 获取返回的数据
                } else {
                    result = "上传失败";
                }

                String finalResult = result;
                Thread.runAndroid(new Runnable() {
                    @Override
                    public void run() {
                        callback.onSuccess(finalResult, call);
                    }
                });

            } catch (IOException e) {
                Thread.runAndroid(new Runnable() {
                    @Override
                    public void run() {
                        callback.onError(call, e.toString());
                    }
                });
            } finally {
                Thread.runAndroid(new Runnable() {
                    @Override
                    public void run() {
                        callback.onEnd(call);
                    }
                });
            }
            return call;
        }

        /**
         * 下载文件
         *
         * @param call
         * @param callback
         * @param <T>
         * @return
         */
        private static <T> Call<T> callSynchronizationDownloadFile(Call<T> call, Callback<T> callback) {
            HttpURLConnection conn = null;
            try {
                Thread.runAndroid(new Runnable() {
                    @Override
                    public void run() {
                        callback.onStart(call);
                    }
                });

                //请求参数
                String urlParam = mapToParams(call.paramMap, call.keyList);
                //转码
                if (ApplicationUtils.isLetterDigitOrChinese(urlParam)) {
                    try {
                        urlParam = URLEncoder.encode(urlParam, "UTF-8");
                    } catch (UnsupportedEncodingException e) {
                        e.printStackTrace();
                    }
                }

                if (call.t != null) {
                    call.tClass = (Class<T>) call.t.getClass();
                }

                //设置 gei OR post url格式
                switch (call.type) {
                    case "GET":
                        call.url += urlParam;
                        break;
                    default:
                        if (urlParam.contains("?")) {
                            urlParam = urlParam.replaceAll("\\?", "");
                        }
                        break;
                }

                conn = (HttpURLConnection) new java.net.URL(call.url).openConnection();
                conn.setRequestMethod(call.type);    //设置请求方式
                //下面属性需要可支持自定义
                conn.setInstanceFollowRedirects(call.redirects);//自动执行Http重定向
                conn.setUseCaches(call.cache);//禁止使用缓存
                conn.setConnectTimeout(call.connectTimeout);//连接超时
                conn.setReadTimeout(call.readTimeout);//读取超时
                //请求头添加处
                conn.setRequestProperty("Content-Type", call.contentType + "charset=" + call.charset);// 设置文件类型:
                conn.setRequestProperty("Connection", "Keep-Alive");
                conn.setRequestProperty("Charset", call.charset);
                //添加自定义的请求头
                for (String key : call.headerMap.keySet()) {
                    String value = String.valueOf(call.headerMap.get(key));
                    conn.setRequestProperty(key, value);
                }
                //各种请求的区别
                switch (call.type) {
                    case "GET":
                        break;
                    default:
                        // 向服务器提交请求数据
                        conn.setDoOutput(true);// 5. output，这里要记得开启输出流，将自己要添加的参数用这个输出流写进去，传给服务端，这是socket的基本结构
                        OutputStream os = conn.getOutputStream();// 获取输出流
                        os.write(urlParam.getBytes(call.charset));// 一定要记得将自己的参数转换为字节，编码格式是utf-8
                        os.flush();// 关闭输出流
                        break;
                }

                conn.connect();
                InputStream is = conn.getInputStream();
                int length = conn.getContentLength();
                FileOutputStream fos = new FileOutputStream(call.file);

                int count = 0;
                byte[] buffer = new byte[1024];
                while (call.fileState) {

                    while (call.fileState && call.filePause) {
                        Thread.sleep(100);//暂停
                    }

                    int numread = is.read(buffer);
                    count += numread;
                    // 计算进度条的当前位置
                    int mProgress = (int) (((float) count / length) * 100);
                    if (numread < 0) {
                        //下载完成
                        Thread.runAndroid(new Runnable() {
                            @Override
                            public void run() {
                                callback.onDownloadSuccess(call.file);
                            }
                        });
                        break;
                    }
                    //下载中更新进度条
                    int finalCount = count;
                    Thread.runAndroid(new Runnable() {
                        @Override
                        public void run() {
                            callback.onDownloading(call.file, mProgress, finalCount, length, FileUtils.formetFileSize(finalCount), FileUtils.formetFileSize(length), FileUtils.formetFileSize(length));
                        }
                    });
                    fos.write(buffer, 0, numread);
                }
                fos.close();
                is.close();
                Thread.runAndroid(new Runnable() {
                    @Override
                    public void run() {
                        callback.onSuccess(call.filePath, call);
                    }
                });
            } catch (IOException e) {
                Thread.runAndroid(new Runnable() {
                    @Override
                    public void run() {
                        callback.onError(call, e.toString());
                    }
                });
            } finally {
                Thread.runAndroid(new Runnable() {
                    @Override
                    public void run() {
                        callback.onEnd(call);
                    }
                });
            }
            return call;
        }

        /**
         * 普通的请求
         *
         * @param call
         * @param callback
         * @param <T>
         * @return
         */
        private static <T> Call<T> callSynchronization(Call<T> call, Callback<T> callback) {
            //开始请求
            if (callback != null) {
                if (call.tClass == null) {
                    try {
                        call.tClass = (Class<T>) AnnotationAssist.abstractClasstoGenericity(callback.getClass());
                    } catch (Exception e) {
                    }
                }
                Thread.runAndroid(new Runnable() {
                    @Override
                    public void run() {
                        callback.onStart(call);
                    }
                });

            }


            //请求参数
            String urlParam = mapToParams(call.paramMap, call.keyList);

            //转码
            if (ApplicationUtils.isLetterDigitOrChinese(urlParam)) {
                try {
                    urlParam = URLEncoder.encode(urlParam, "UTF-8");
                } catch (UnsupportedEncodingException e) {
                    e.printStackTrace();
                }
            }

            if (call.t != null) {
                call.tClass = (Class<T>) call.t.getClass();
            }

            //设置 gei OR post url格式
            switch (call.type) {
                case "GET":
                    call.url += urlParam;
                    break;
                default:
                    if (urlParam.contains("?")) {
                        urlParam = urlParam.replaceAll("\\?", "");
                    }
                    break;
            }

            HttpURLConnection conn = null;
            try {
                java.net.URL path = new java.net.URL(call.url);//获取 Url
                conn = (HttpURLConnection) path.openConnection();//打开连接
                conn.setRequestMethod(call.type);    //设置请求方式

                if (!"Get".equals(call.type) && !"GET".equals(call.type) && !"get".equals(call.type)) {
                    conn.setDoInput(true);//可向连接中写入
                    conn.setDoOutput(true);//可向连接中读取数据
                }

                //下面属性需要可支持自定义
                conn.setInstanceFollowRedirects(call.redirects);//自动执行Http重定向
                conn.setUseCaches(call.cache);//禁止使用缓存
                conn.setConnectTimeout(call.connectTimeout);//连接超时
                conn.setReadTimeout(call.readTimeout);//读取超时

                //请求头添加处
                conn.setRequestProperty("Content-Type", call.contentType + "charset=" + call.charset);// 设置文件类型:
                conn.setRequestProperty("Connection", "Keep-Alive");
                conn.setRequestProperty("Charset", call.charset);
                conn.setRequestProperty("accept", "application/json");

                //添加自定义的请求头
                for (String key : call.headerMap.keySet()) {
                    String value = String.valueOf(call.headerMap.get(key));
                    conn.setRequestProperty(key, value);
                }

                //各种请求的区别
                switch (call.type) {
                    case "GET":
                        break;
                    default:
                        // 向服务器提交请求数据
                        conn.setDoOutput(true);// 5. output，这里要记得开启输出流，将自己要添加的参数用这个输出流写进去，传给服务端，这是socket的基本结构
                        OutputStream os = conn.getOutputStream();// 获取输出流
                        os.write(urlParam.getBytes(call.charset));// 一定要记得将自己的参数转换为字节，编码格式是utf-8
                        os.flush();// 关闭输出流
                        break;
                }

                //获取 Code
                //获取服务器返回的 code
                call.code = conn.getResponseCode();
                if (call.code == HttpURLConnection.HTTP_OK) {
                    // 应答码200表示请求成功
                    try {
                        ByteArrayOutputStream baos = null;
                        baos = new ByteArrayOutputStream();//创建内存输出流
                        InputStream inputStream = conn.getInputStream();
                        int len;
                        byte[] bytes = new byte[1024];
                        if (inputStream != null) {
                            while ((len = inputStream.read(bytes)) != -1) {
                                baos.write(bytes, 0, len);
                            }

                            call.response = new String(baos.toByteArray(), call.charset);

                            //进过处理乱码
                            if (call.unicode && baos != null) {
                                call.response = DataUtils.decodeUnicode(call.response);
                            }

                            if (callback != null) {
                                Thread.runAndroid(new Runnable() {
                                    @Override
                                    public void run() {
                                        callback.onSuccess(call.response, call);
                                    }
                                });
                            }

                            try {
                                call.t = (T) JSON.fromJson2(call.response, call.tClass);
                            } catch (Exception e) {
                                call.exception = e;
                            } finally {
                                if (callback != null)
                                    Thread.runAndroid(new Runnable() {
                                        @Override
                                        public void run() {
                                            callback.onSuccess(call.t, call);
                                        }
                                    });
                            }

                            if (baos != null)
                                baos.close();
                            inputStream.close();//关闭
                            conn.disconnect();//断开连接
                        }
                    } catch (Exception e1) {
                        conn.disconnect();//断开连接
                        if (callback != null)
                            Thread.runAndroid(new Runnable() {
                                @Override
                                public void run() {
                                    callback.onError(call, e1.toString());
                                }
                            });
                    } finally {
                        //结束请求
                        if (callback != null)
                            Thread.runAndroid(new Runnable() {
                                @Override
                                public void run() {
                                    callback.onEnd(call);
                                }
                            });
                    }

                } else {
                    conn.disconnect();//断开连接
                    if (callback != null)
                        Thread.runAndroid(new Runnable() {
                            @Override
                            public void run() {
                                callback.onError(call, "code :" + call.code);
                            }
                        });
                }

            } catch (Exception e) {
                if (conn != null) {
                    conn.disconnect();//断开连接
                }
                if (callback != null)
                    Thread.runAndroid(new Runnable() {
                        @Override
                        public void run() {
                            callback.onError(call, e.toString());
                        }
                    });
            } finally {
                //结束请求
                if (callback != null)
                    Thread.runAndroid(new Runnable() {
                        @Override
                        public void run() {
                            callback.onEnd(call);
                        }
                    });
            }
            return call;
        }

        /**
         * 处理 Path
         *
         * @param url
         * @param keyList
         */
        private static <T> void disposalPath(String url, Call<T> call) {
            if (url.contains("{") && url.contains("}")) {
                String pahtName = url.substring(url.indexOf("{"), url.indexOf("}") + 1);
                String name = url.substring(url.indexOf("{") + 1, url.indexOf("}"));
                Object obj = call.getParamMap().get(name);
                url = url.replace(pahtName, String.valueOf(obj));
                call.keyList.remove(name);
                call.getParamMap().remove(name);
                if (url.contains("{") && url.contains("}")) {
                    disposalPath(url, call);//回调进行遍历
                } else {
                    call.keyList.add(url);
                }
            } else {
                call.keyList.add(url);
            }
        }

        /**
         * Map转参数
         *
         * @param paramMap
         * @return
         */
        public static String mapToParams(Map<String, Object> paramMap) {
            if (paramMap != null && paramMap.size() > 0) {
                StringBuffer stringBuffer = new StringBuffer();
                stringBuffer.append("?");//url 与 请求参数的分隔符
                for (Map.Entry<String, Object> entry : paramMap.entrySet()) {
                    stringBuffer.append(entry.getKey());
                    stringBuffer.append("=");
                    stringBuffer.append(entry.getValue());
                    stringBuffer.append("&");
                }
                stringBuffer.deleteCharAt(stringBuffer.length() - 1);//去掉最后一个 & 字符
                return stringBuffer.toString();
            }

            return null;
        }

        /**
         * map 转 请求参数，按照 List 顺序进行装换
         *
         * @param paramMap
         * @param list
         * @return
         */
        public static String mapToParams(Map<String, Object> paramMap, List<String> list) {
            if (paramMap != null && list != null && list.size() > 0) {
                StringBuffer stringBuffer = new StringBuffer();
                stringBuffer.append("?");//url 与 请求参数的分隔符
                for (String key : list) {
                    stringBuffer.append(key);
                    stringBuffer.append("=");
                    stringBuffer.append(paramMap.get(key));
                    stringBuffer.append("&");
                }
                stringBuffer.deleteCharAt(stringBuffer.length() - 1);//去掉最后一个 & 字符
                return stringBuffer.toString();
            }
            return "";
        }

        //增强版请求接口
        public static interface CallbackListener<T> {

            public void onSuccess(T t, Call<T> call);

            public void onError(Call<T> call, String e);

        }

        //请求接口类
        public static abstract class Callback<T> implements CallbackListener<T> {

            public void onStart(Call<T> call) {
            }//开始请求

            public void onSuccess(T t, Call<T> call) {
            }//请求成功单个

            public void onSuccess(String data, Call call) {
            }//请求成功多个

            public void onError(Call<T> call, String e) {
            }//请求错误

            public void onEnd(Call<T> call) {
            }//结束请求

            //下载进度
//            public void onDownloading(File file, int progress, int fileProgress, int fileProgressMax, String fileSize) {
//            }

            public void onDownloading(File file, int progress, int fileProgress, int fileProgressMax, String fileProgressValue, String fileProgressMaxValue, String fileSize) {
            }

            //下载成功之后的文件
            public void onDownloadSuccess(File file) {
            }

            //上传进度
            public void onUploading(File file, int progress, int fileProgress, long fileProgressMax, String fileSize) {
            }

            //上传成功之后的文件
            public void onUploadingSuccess(File file) {
            }

        }
    }

    /**
     * 图片加载-支持功能
     * 1.加载图片								Glide.with(this).load(file).into(imageView);
     * 2.支持三级缓存,可设置是否缓存             默认进行三级缓存
     * 3.占位图（图片完成前的图）				Glide.with(this).load(file).placeholder(R.drawable.loading).into(imageView);
     * 4.异常图（图片加载异常的）				Glide.with(this).load(file).error(R.drawable.error).into(imageView);
     * 5.支持GIF                             支持动态图的加载
     * 6.指定图片大小							Glide.with(this).load(file).override(100, 100).into(imageView);
     * 7.支持圆角图片
     */
    public static class Glide {
        private static Glide glide = null;//定义 GT 对象
        private static final Map<Integer, String> objList = new ArrayMap<>();//缓存加载对象
        public static final ConcurrentHashMap<Object, Movie> gifCacheMovieList = new ConcurrentHashMap<>();//动态图缓存加载对象
        private static boolean isCache = true;//是否缓存
        private static String CACHE_PATH = null;//默认的本地缓存位置
        private final int gifTagId = 107;//动态图tagId
        private static final ExecutorService instance = GT.Thread.getInstance(0);//Glide 线程池

        //设置 内存缓存
        public static void setCacheImg(String key, Bitmap bitmap) {
            LruCacheUtil.initCache();
            LruCacheUtil.addBitmapToMemoryCache(key, bitmap);
        }

        //图片一级缓存 内存缓存
        public static class LruCacheUtil {

            private static LruCache<String, Bitmap> mMemoryCache;

            // 获取到可用内存的最大值，使用内存超出这个值会引起OutOfMemory异常。
            private static int mTotalSize = (int) Runtime.getRuntime().totalMemory();

            //初始化
            public static LruCache<String, Bitmap> initCache() {
                if (mMemoryCache != null) return mMemoryCache;
                // 使用最大可用内存值的1/5作为缓存的大小
                mMemoryCache = new LruCache<String, Bitmap>(mTotalSize / 5) {
                    @Override
                    protected int sizeOf(String key, Bitmap bitmap) {
                        // 重写此方法来衡量每张图片的大小，默认返回图片数量。
                        return bitmap.getByteCount() / 1024;
                    }
                };
                return mMemoryCache;
            }

            //添加图片到缓存
            public static synchronized void addBitmapToMemoryCache(String key, Bitmap bitmap) {
                if (getBitmapFromMemCache(key) == null) {
                    if (key != null && bitmap != null) {
                        mMemoryCache.put(key, bitmap);
                    }
                }
            }

            //从缓存获取图片
            public static synchronized Bitmap getBitmapFromMemCache(String key) {
                if (key != null) {
                    return mMemoryCache.get(key);
                } else {
                    return null;
                }
            }

            //清除缓存
            public static void clearCache() {
                if (mMemoryCache != null) {
                    if (mMemoryCache.size() > 0) {
                        mMemoryCache.evictAll();
                    }
                    mMemoryCache = null;
                }
            }

            //获取添加到缓存的图片数量
            public static int getPutCount() {
                return mMemoryCache.putCount();
            }

        }

        //图片信息
        private class GlideBean {

            private Object imgObjet;//处理好的图片资源
            private Object resource;//图片资源
            private Object placeholder;//占位图
            private Object error;//异常图
            private boolean isCaches = true;//是否缓存
            private boolean isThumbnail = false;//是否缩略图
            private boolean isGIF = false;//是否动态图
            private int gifSpeed = 16;//动态图速度
            private int width, height;//缩略图的宽高
            private boolean isAnimation = true;//是否采用透明渐变动画
            private double compressionRatio = -1;//压缩比例
            private float blurRadius = 0;//高斯模糊
            private int roundCorner = 0;//全角
            private int roundCorner_topLeft = 0;//左上
            private int roundCorner_topRight = 0;//右上
            private int roundCorner_bottomLeft = 0;//左下
            private int roundCorner_bottomRight = 0;//右下
            private boolean isCompression = true;//是否支持压缩图片

            @Override
            public String toString() {
                return "GlideBean{" + "imgObjet=" + imgObjet + ", resource=" + resource + ", placeholder=" + placeholder + ", error=" + error + ", isCaches=" + isCaches + ", isThumbnail=" + isThumbnail + ", isGIF=" + isGIF + ", width=" + width + ", height=" + height + ", isAnimation=" + isAnimation + ", compressionRatio=" + compressionRatio + ", blurRadius=" + blurRadius + ", roundCorner=" + roundCorner + ", roundCorner_topLeft=" + roundCorner_topLeft + ", roundCorner_topRight=" + roundCorner_topRight + ", roundCorner_bottomLeft=" + roundCorner_bottomLeft + ", roundCorner_bottomRight=" + roundCorner_bottomRight + ", isCompression=" + isCompression + '}';
            }
        }

        private Glide() {
        }

        private static Glide getInstance(Object obj) {
            if (glide == null) {
                synchronized (Glide.class) {
                    if (glide == null) {
                        glide = new Glide();
                        try {

                            Context context = null;
                            if (obj instanceof Activity) {
                                context = (Context) obj;
                            }

                            if (obj instanceof Context) {
                                context = (Context) obj;
                            }

                            context = getActivity();
                            if (context != null) {
                                CACHE_PATH = FileUtils.getGTPath(context) + "img/";
                            }
                        } catch (Exception e) {

                        } finally {
                            File file = new File(CACHE_PATH);
                            if (!file.exists()) {
                                file.mkdirs();
                            }
                        }
                    }
                }
            }
            return glide;
        }

        private GlideBean glideBean2;

        /**
         * 设置加载图片的页面
         *
         * @param obj
         * @return
         */
        public static Glide with(Object obj) {
//            ide = getInstance();
            glide = new Glide();
            if (LruCacheUtil.mMemoryCache == null) {
                instance.execute(new Runnable() {
                    @Override
                    public void run() {
                        LruCacheUtil.initCache();
                    }
                });
            }
            if (CACHE_PATH == null) {
                try {
                    Context context = null;
                    if (obj instanceof Activity) {
                        context = (Context) obj;
                    }

                    if (context == null && obj instanceof Context) {
                        context = (Context) obj;
                    }
                    if (context == null) {
                        context = getActivity();
                    }
                    if (context != null) {
                        Context finalContext = context;
                        CACHE_PATH = FileUtils.getGTPath(finalContext) + "img/";
                        File file = new File(CACHE_PATH);
                        if (!file.exists()) {
                            file.mkdirs();
                        }
                    }

                } catch (Exception e) {

                }
            }
            return glide;
        }

        /**
         * 占位图
         * 支持的类型:
         * Bitmap
         * Drawable
         * R资源
         * ImageView
         *
         * @param resource
         * @return
         */
        public Glide placeholder(Object resource) {
            if (resource == null) return glide;
            if (glideBean2 == null) {
                glideBean2 = new GlideBean();
            }
            glideBean2.placeholder = resource;
            return glide;
        }

        /**
         * 压缩比例设置
         *
         * @param ratio
         * @return
         */
        public Glide compressionRatio(double ratio) {
            if (glideBean2 == null) {
                glideBean2 = new GlideBean();
            }
            glideBean2.compressionRatio = ratio;
            return glide;
        }

        /**
         * 是否压缩
         *
         * @param ratio
         * @return
         */
        public Glide isCompression(boolean compression) {
            if (glideBean2 == null) {
                glideBean2 = new GlideBean();
            }
            glideBean2.isCompression = compression;
            return glide;
        }

        /**
         * 是否缩略图
         *
         * @param ratio
         * @return
         */
        public Glide isThumbnail(boolean thumbnail) {
            if (glideBean2 == null) {
                glideBean2 = new GlideBean();
            }
            glideBean2.isThumbnail = thumbnail;
            return glide;
        }

        /**
         * 高斯模糊
         *
         * @param ratio
         * @return
         */
        public Glide blurTransformation(float ambiguity) {
            if (glideBean2 == null) {
                glideBean2 = new GlideBean();
            }
            glideBean2.blurRadius = ambiguity;
            return glide;
        }

        /**
         * 圆角
         *
         * @param roundedAll 全角的圆角
         * @return
         */
        public Glide roundedCorners(int roundedAll) {
            if (glideBean2 == null) {
                glideBean2 = new GlideBean();
            }
            if (glideBean2.isGIF) {
                glideBean2.roundCorner = ImageViewTools.getGIFRoundedValue(roundedAll);
            } else {
                glideBean2.roundCorner = ImageViewTools.getRoundedValue(roundedAll);
            }
            return glide;
        }

        /**
         * 设置圆角
         *
         * @param topLeft     左上圆角
         * @param topRight    右上圆角
         * @param bottomLeft  左下圆角
         * @param bottomRight 右下圆角
         * @return
         */
        public Glide roundedCorners(int topLeft, int topRight, int bottomLeft, int bottomRight) {
            if (glideBean2 == null) {
                glideBean2 = new GlideBean();
            }
            if (glideBean2.isGIF) {
                glideBean2.roundCorner_topLeft = ImageViewTools.getGIFRoundedValue(topLeft);
                glideBean2.roundCorner_topRight = ImageViewTools.getGIFRoundedValue(topRight);
                glideBean2.roundCorner_bottomLeft = ImageViewTools.getGIFRoundedValue(bottomLeft);
                glideBean2.roundCorner_bottomRight = ImageViewTools.getGIFRoundedValue(bottomRight);
            } else {
                glideBean2.roundCorner_topLeft = ImageViewTools.getRoundedValue(topLeft);
                glideBean2.roundCorner_topRight = ImageViewTools.getRoundedValue(topRight);
                glideBean2.roundCorner_bottomLeft = ImageViewTools.getRoundedValue(bottomLeft);
                glideBean2.roundCorner_bottomRight = ImageViewTools.getRoundedValue(bottomRight);
            }
            return glide;
        }


        /**
         * 设置圆角
         *
         * @param topLeft_topRight_bottomLeft_bottomRight
         * @return
         */
        public Glide roundedCorners(int... topLeft_topRight_bottomLeft_bottomRight) {
            if (topLeft_topRight_bottomLeft_bottomRight == null) return this;

            if (glideBean2 == null) {
                glideBean2 = new GlideBean();
            }

            if (glideBean2.isGIF) {
                switch (topLeft_topRight_bottomLeft_bottomRight.length) {
                    case 1:
                        glideBean2.roundCorner_topLeft = ImageViewTools.getGIFRoundedValue(topLeft_topRight_bottomLeft_bottomRight[0]);
                        break;
                    case 2:
                        glideBean2.roundCorner_topLeft = ImageViewTools.getGIFRoundedValue(topLeft_topRight_bottomLeft_bottomRight[0]);
                        glideBean2.roundCorner_topRight = ImageViewTools.getGIFRoundedValue(topLeft_topRight_bottomLeft_bottomRight[1]);
                        break;
                    case 3:
                        glideBean2.roundCorner_topLeft = ImageViewTools.getGIFRoundedValue(topLeft_topRight_bottomLeft_bottomRight[0]);
                        glideBean2.roundCorner_topRight = ImageViewTools.getGIFRoundedValue(topLeft_topRight_bottomLeft_bottomRight[1]);
                        glideBean2.roundCorner_bottomLeft = ImageViewTools.getGIFRoundedValue(topLeft_topRight_bottomLeft_bottomRight[2]);
                        break;
                    case 4:
                        glideBean2.roundCorner_topLeft = ImageViewTools.getGIFRoundedValue(topLeft_topRight_bottomLeft_bottomRight[0]);
                        glideBean2.roundCorner_topRight = ImageViewTools.getGIFRoundedValue(topLeft_topRight_bottomLeft_bottomRight[1]);
                        glideBean2.roundCorner_bottomLeft = ImageViewTools.getGIFRoundedValue(topLeft_topRight_bottomLeft_bottomRight[2]);
                        glideBean2.roundCorner_bottomRight = ImageViewTools.getGIFRoundedValue(topLeft_topRight_bottomLeft_bottomRight[3]);
                        break;
                }
            } else {
                switch (topLeft_topRight_bottomLeft_bottomRight.length) {
                    case 1:
                        glideBean2.roundCorner_topLeft = ImageViewTools.getRoundedValue(topLeft_topRight_bottomLeft_bottomRight[0]);
                        break;
                    case 2:
                        glideBean2.roundCorner_topLeft = ImageViewTools.getRoundedValue(topLeft_topRight_bottomLeft_bottomRight[0]);
                        glideBean2.roundCorner_topRight = ImageViewTools.getRoundedValue(topLeft_topRight_bottomLeft_bottomRight[1]);
                        break;
                    case 3:
                        glideBean2.roundCorner_topLeft = ImageViewTools.getRoundedValue(topLeft_topRight_bottomLeft_bottomRight[0]);
                        glideBean2.roundCorner_topRight = ImageViewTools.getRoundedValue(topLeft_topRight_bottomLeft_bottomRight[1]);
                        glideBean2.roundCorner_bottomLeft = ImageViewTools.getRoundedValue(topLeft_topRight_bottomLeft_bottomRight[2]);
                        break;
                    case 4:
                        glideBean2.roundCorner_topLeft = ImageViewTools.getRoundedValue(topLeft_topRight_bottomLeft_bottomRight[0]);
                        glideBean2.roundCorner_topRight = ImageViewTools.getRoundedValue(topLeft_topRight_bottomLeft_bottomRight[1]);
                        glideBean2.roundCorner_bottomLeft = ImageViewTools.getRoundedValue(topLeft_topRight_bottomLeft_bottomRight[2]);
                        glideBean2.roundCorner_bottomRight = ImageViewTools.getRoundedValue(topLeft_topRight_bottomLeft_bottomRight[3]);
                        break;
                }
            }


            return glide;
        }

        /**
         * 是否动态图
         *
         * @param isAutomaticPauses 是否自动暂停
         * @return
         */
        public Glide asGif(boolean isGif, int... gifSpeeds) {
            if (glideBean2 == null) {
                glideBean2 = new GlideBean();
            }
            if (gifSpeeds != null && gifSpeeds.length > 0) {
                glideBean2.gifSpeed = gifSpeeds[0];
            }
            glideBean2.isGIF = isGif;
            return glide;
        }

        /**
         * 是否动态图
         *
         * @param isAutomaticPauses 是否自动暂停
         * @return
         */
        public Glide asGif() {
            if (glideBean2 == null) {
                glideBean2 = new GlideBean();
            }
            glideBean2.isGIF = true;
            return glide;
        }

        /**
         * 加载异常图
         * 支持的类型:
         * Bitmap
         * Drawable
         * R资源
         * ImageView
         *
         * @param resource
         * @return
         */
        public Glide error(Object resource) {
            if (resource == null) return glide;
            if (glideBean2 == null) {
                glideBean2 = new GlideBean();
            }
            glideBean2.error = resource;
            return glide;
        }


        /**
         * 剪切指定大小图片
         *
         * @param resource 图片地址
         * @param width    宽度
         * @param height   高度
         * @param isCaches 是否缓存
         * @return
         */
        public Glide loadThumbnail(Object resource, int width, int height, boolean... isCaches) {
            if (glideBean2 == null) {
                glideBean2 = new GlideBean();
            }
            glideBean2.width = width;
            glideBean2.height = height;
            glideBean2.isThumbnail = true;
            return load(resource, isCaches);
        }


        /**
         * 是否使用缓存,建议单独使用
         *
         * @param isCache
         * @return
         */
        public static Glide diskCacheStrategy(boolean isCache) {
            Glide.isCache = isCache;
            return glide;
        }


        /**
         * 处理图片缓存
         * 目前支持的类型:
         * String 网络地址
         * String FilePaht
         * File 本地图片
         * byte[] 二进制流
         * Uri uri
         * Bitmap bitmap
         * Drawable drawable
         * int R资源
         * ImageView 图片组件
         *
         * @param resource
         * @param keys     自定义缓存的 key
         * @return
         */
        public Glide load(Object resource, boolean... isCaches) {
            if (resource == null) return glide;
            if (glideBean2 == null) {
                glideBean2 = new GlideBean();
            }
            glideBean2.resource = resource;
            if (isCaches.length > 0) {
                glideBean2.isCaches = isCaches[0];
            }
            return glide;
        }


        /**
         * 加载图片
         *
         * @param iv
         * @return
         */
        public Glide into(ImageView iv, boolean... isAnimations) {
            final View[] view = {null};
            Object gifTag = iv.getTag(iv.getId() + gifTagId);//读取是否有 gif 缓存
            if (!(iv instanceof GT.ViewUtils.GTImageView) || gifTag != null) {
                //设置是否需要显示 加载显示动画
                Object tag = iv.getTag(iv.getId());
                if (tag == null) {
                    iv.setTag(iv.getId(), iv.getAlpha());
                }
                if (isAnimations.length > 0) {
                    glideBean2.isAnimation = isAnimations[0];
                } else {
                    //如果是第一次设置图片才设置默认动画
                    if (iv.getDrawable() == null) {
                        glideBean2.isAnimation = true;
                    } else {
                        glideBean2.isAnimation = false;
                    }
                }
            }

            //开始设置 占位图
            try {
                Thread.runAndroid(new Runnable() {
                    public void run() {
                        if (iv != null && iv.getDrawable() == null && !(iv instanceof GT.ViewUtils.GTImageView) || gifTag != null) {
                            try {
                                if (iv != null || glideBean2.placeholder != null) {
                                    if (glideBean2.placeholder instanceof Bitmap) {
                                        Bitmap bitmap = (Bitmap) glideBean2.placeholder;
                                        iv.setImageBitmap(bitmap);
                                    } else if (glideBean2.placeholder instanceof Drawable) {
                                        Drawable drawable = (Drawable) glideBean2.placeholder;
                                        iv.setImageDrawable(drawable);
                                    } else if (glideBean2.placeholder instanceof Integer) {
                                        iv.setImageResource((Integer) glideBean2.placeholder);
                                    }
                                }
                            } catch (Exception e) {
                                loadError(glideBean2, iv, e);
                            }
                        }
                        if (!glideBean2.isGIF) {
                            glideBean2.placeholder = null;
                        }
                    }
                });
            } catch (Exception e) {

            }

            try {
                final String[] key = {null};
                boolean finalIsCache = glideBean2.isCaches;
                Observable.getDefault().execute(new Observable.RunJavaR<GlideBean>() {
                    @Override
                    public GlideBean run() {
                        ViewUtils.GTImageView gtIv = null;
                        if (glideBean2.isGIF) {
                            if (iv instanceof GT.ViewUtils.GTImageView || gifTag != null) {
                                if (gifTag != null) {
                                    gtIv = (ViewUtils.GTImageView) gifTag;
                                } else {
                                    gtIv = (ViewUtils.GTImageView) iv;
                                }
                                if (glideBean2.roundCorner != 0) {
                                    gtIv.setRadius(glideBean2.roundCorner);
                                } else {
                                    gtIv.setLeftTopRadius(glideBean2.roundCorner_topLeft);
                                    gtIv.setRightTopRadius(glideBean2.roundCorner_topRight);
                                    gtIv.setLeftBottomRadius(glideBean2.roundCorner_bottomLeft);
                                    gtIv.setRightBottomRadius(glideBean2.roundCorner_bottomRight);
                                }
                                gtIv.setGifResource(glideBean2.resource);
                                return null;
                            }

                            //GIF 处理逻辑
                            if (gtIv == null) {
                                //ImageView 第一次加载 gif 会走下面逻辑
                                if (glideBean2.roundCorner != 0) {
                                    gtIv = new ViewUtils.GTImageView(getActivity(), glideBean2.roundCorner);
                                } else {
                                    gtIv = new ViewUtils.GTImageView(getActivity(), glideBean2.roundCorner_topLeft, glideBean2.roundCorner_topRight, glideBean2.roundCorner_bottomLeft, glideBean2.roundCorner_bottomRight);
                                }
                                iv.setTag(iv.getId() + gifTagId, gtIv);//缓存第一次创建的 gif 加载组件
                            }
                            gtIv.setUrl(String.valueOf(glideBean2.resource));
                            glideBean2.imgObjet = gtIv;
                        } else {
                            //缓存图片
                            Bitmap bitmapFromMemCache = null;

                            //非 GIF 处理逻辑
                            boolean isSaveSD = false;
                            try {
                                if (glideBean2.resource instanceof String) { //网络请求 或 本地路径加载 ,需要三级缓存
                                    String url = glideBean2.resource.toString();
                                    if (key[0] == null) {
                                        key[0] = url;
                                    }

                                    //是否有缓存
                                    bitmapFromMemCache = LruCacheUtil.getBitmapFromMemCache(key[0]);

                                    //使用缓存，内存缓存
                                    if (isCache && finalIsCache && bitmapFromMemCache != null) {
                                        glideBean2.imgObjet = bitmapFromMemCache;
                                        if (glideBean2.imgObjet != null && LOG.GT_LOG_TF) {
                                            logt("使用 使用内存缓存图片");
                                        }
                                    }

                                    //从本地取图片，本地缓存
                                    if (isCache && finalIsCache && glideBean2.imgObjet == null) {
                                        glideBean2.imgObjet = ImageViewTools.getBitmapFromLocal(key[0], CACHE_PATH, true);
                                        if (glideBean2.imgObjet != null && LOG.GT_LOG_TF) {
                                            logt("使用 本地缓存");
                                        }
                                    }

                                    //使用网络缓存或请求,开启网络缓存
                                    if (glideBean2.imgObjet == null) {
                                        //网络加载或本地加载图片
                                        if (url.contains("http")) {
                                            glideBean2.imgObjet = ImageViewTools.getImageBitmap(url);//Bitmap 网络
                                            if (glideBean2.imgObjet != null && LOG.GT_LOG_TF) {
                                                logt("使用 网络下载图片");
                                            }
                                        } else {
                                            glideBean2.imgObjet = ImageViewTools.getLoacalBitmap(url);//Bitmap 本地
                                            if (glideBean2.imgObjet != null && LOG.GT_LOG_TF) {
                                                logt("使用 本地图片");
                                            }
                                        }
                                        isSaveSD = true;
                                    }

                                    if (glideBean2.imgObjet == null) {
                                        glideBean2.imgObjet = GT.ImageViewTools.base64ToBitmap(key[0]);
                                    }

                                } else if (glideBean2.resource instanceof File) {
                                    //加载本地图片(需要加缓存)
                                    String filePath = ((File) glideBean2.resource).getPath();
                                    if (key[0] == null) {
                                        key[0] = filePath;
                                    }
                                    bitmapFromMemCache = LruCacheUtil.getBitmapFromMemCache(key[0]);
                                    //使用缓存
                                    if (isCache && finalIsCache && bitmapFromMemCache != null) {
                                        isCache = true;
                                        glideBean2.imgObjet = bitmapFromMemCache;
                                    }

                                    if (glideBean2.imgObjet == null) {
                                        glideBean2.imgObjet = ImageViewTools.getLoacalBitmap(filePath);//Bitmap
                                        isSaveSD = true;
                                    }
                                } else if (glideBean2.resource instanceof Byte[]) {
                                    //流加载图片(需要加缓存)
                                    byte[] bytes = (byte[]) glideBean2.resource;
                                    String byteStr = glideBean2.resource.toString();
                                    if (key[0] == null) {
                                        key[0] = byteStr;
                                    }

                                    bitmapFromMemCache = LruCacheUtil.getBitmapFromMemCache(key[0]);

                                    //使用缓存
                                    if (isCache && finalIsCache && bitmapFromMemCache != null) {
                                        isCache = true;
                                        glideBean2.imgObjet = bitmapFromMemCache;
                                    }

                                    if (glideBean2.imgObjet == null) {
                                        Bitmap bitmap = BitmapFactory.decodeByteArray(bytes, 0, bytes.length);
                                        bitmap.copyPixelsFromBuffer(ByteBuffer.wrap(bytes));
                                        glideBean2.imgObjet = bitmap;//Bitmap
                                        isSaveSD = true;
                                    }
                                } else if (glideBean2.resource instanceof Uri) {
                                    //加载路径图片(需要加缓存)
                                    String uriKey = String.valueOf(glideBean2.resource);
                                    if (key[0] == null) {
                                        key[0] = uriKey;
                                    }

                                    bitmapFromMemCache = LruCacheUtil.getBitmapFromMemCache(key[0]);

                                    //使用缓存
                                    if (isCache && finalIsCache && bitmapFromMemCache != null) {
                                        isCache = true;
                                        glideBean2.imgObjet = bitmapFromMemCache;
                                    }

                                    if (glideBean2.imgObjet == null) {
                                        Uri uri = (Uri) glideBean2.resource;

                                        Context context = iv.getContext();

                                        if (context == null) {
                                            context = getActivity();
                                        }
                                        if (context == null) {
                                            context = GT_Fragment.getGt_fragment().getActivity();
                                        }

                                        glideBean2.imgObjet = ImageViewTools.uriToBitmap(context, uri);//Bitmap
                                        isSaveSD = true;
                                    }
                                } else if (glideBean2.resource instanceof Bitmap) {
                                    //加载 Bitmap 资源
                                    Bitmap bitmap = (Bitmap) glideBean2.resource;
                                    if (key[0] == null) {
                                        key[0] = String.valueOf(bitmap.hashCode());
                                    }
                                    glideBean2.imgObjet = bitmap;//Bitmap
                                } else if (glideBean2.resource instanceof Integer) {
                                    //加载项目中已有资源
                                    if (key[0] == null) {
                                        key[0] = String.valueOf(glideBean2.resource);
                                    }
                                    glideBean2.imgObjet = ImageViewTools.getBitmap((Integer) glideBean2.resource);
                                } else if (glideBean2.resource instanceof Drawable) {
                                    //加载 Drawable 资源
                                    Drawable drawable = (Drawable) glideBean2.resource;
                                    if (key[0] == null) {
                                        key[0] = String.valueOf(drawable.hashCode());
                                    }

                                    Bitmap bitmap = ImageViewTools.drawable2Bitmap(drawable);

                                    glideBean2.imgObjet = bitmap;//Bitmap
                                } else if (glideBean2.resource instanceof ImageView) {
                                    //加载组件图片
                                    ImageView iv2 = (ImageView) glideBean2.resource;
                                    if (key[0] == null) {
                                        key[0] = String.valueOf(iv2.hashCode());
                                    }
                                    glideBean2.imgObjet = iv2;//ImageView
                                }

                                //开始内部缓存图片
                                if (glideBean2.imgObjet instanceof Bitmap) {
                                    LruCacheUtil.addBitmapToMemoryCache(key[0], (Bitmap) glideBean2.imgObjet);//存储缓存
                                }

                                //开始处理图片
                                if (glideBean2.imgObjet instanceof Bitmap) {

                                    Bitmap bitmap = (Bitmap) glideBean2.imgObjet;

                                    //是否缩略图
                                    if (glideBean2.isThumbnail) {
                                        bitmap = ImageViewTools.getThumbnail(bitmap, glideBean2.width, glideBean2.height);
                                        glideBean2.isThumbnail = false;
                                    }

                                    //是否压缩
                                    if (glideBean2.isCompression) {
                                        // 检测到文件太大，就需要做压缩处理(默认执行压缩处理)
                                        if (glideBean2.compressionRatio != -1) {
                                            bitmap = ImageViewTools.compressImage(bitmap, glideBean2.compressionRatio);
                                        } else {//在进过压缩的时候，再返回 异步框架会来不及
                                            bitmap = ImageViewTools.comp(bitmap);
                                        }
                                    } else {
                                        glideBean2.compressionRatio = -1;
                                        glideBean2.isCompression = true;
                                    }

                                    //高斯模糊
                                    if (glideBean2.blurRadius != 0) {
                                        bitmap = ImageViewTools.blurBitmap(getActivity(), bitmap, glideBean2.blurRadius);
                                        glideBean2.blurRadius = 0;
                                    }

                                    int width = 0, height = 0;

                                    //处理圆角
                                    if (glideBean2.roundCorner > 0) {
                                        bitmap = ImageViewTools.RoundedCorners.fillet(bitmap, glideBean2.roundCorner, ImageViewTools.RoundedCorners.CORNER_ALL, width, height);
                                    } else if (glideBean2.roundCorner_topLeft > 0 || glideBean2.roundCorner_topRight > 0 || glideBean2.roundCorner_bottomLeft > 0 || glideBean2.roundCorner_bottomRight > 0) {

                                        //上圆角
                                        if (glideBean2.roundCorner_topLeft > 0 && glideBean2.roundCorner_topRight > 0 && glideBean2.roundCorner_topLeft == glideBean2.roundCorner_topRight) {
                                            bitmap = ImageViewTools.RoundedCorners.fillet(bitmap, glideBean2.roundCorner_topLeft, ImageViewTools.RoundedCorners.CORNER_TOP, width, height);
                                            glideBean2.roundCorner_topLeft = glideBean2.roundCorner_topRight = 0;
                                        }

                                        //下圆角
                                        if (glideBean2.roundCorner_bottomLeft > 0 && glideBean2.roundCorner_bottomRight > 0 && glideBean2.roundCorner_bottomLeft == glideBean2.roundCorner_bottomRight) {
                                            bitmap = ImageViewTools.RoundedCorners.fillet(bitmap, glideBean2.roundCorner_bottomLeft, ImageViewTools.RoundedCorners.CORNER_BOTTOM, width, height);
                                            glideBean2.roundCorner_bottomLeft = glideBean2.roundCorner_bottomRight = 0;
                                        }

                                        //左圆角
                                        if (glideBean2.roundCorner_topLeft > 0 && glideBean2.roundCorner_bottomLeft > 0 && glideBean2.roundCorner_topLeft == glideBean2.roundCorner_bottomLeft) {
                                            bitmap = ImageViewTools.RoundedCorners.fillet(bitmap, glideBean2.roundCorner_topLeft, ImageViewTools.RoundedCorners.CORNER_LEFT, width, height);
                                            glideBean2.roundCorner_topLeft = glideBean2.roundCorner_bottomLeft = 0;
                                        }

                                        //右圆角
                                        if (glideBean2.roundCorner_topRight > 0 && glideBean2.roundCorner_bottomRight > 0 && glideBean2.roundCorner_topRight == glideBean2.roundCorner_bottomRight) {
                                            bitmap = ImageViewTools.RoundedCorners.fillet(bitmap, glideBean2.roundCorner_topRight, ImageViewTools.RoundedCorners.CORNER_RIGHT, width, height);
                                            glideBean2.roundCorner_topRight = glideBean2.roundCorner_bottomRight = 0;
                                        }


                                        //左上圆角
                                        if (glideBean2.roundCorner_topLeft > 0) {
                                            bitmap = ImageViewTools.RoundedCorners.fillet(bitmap, glideBean2.roundCorner_topLeft, ImageViewTools.RoundedCorners.CORNER_TOP_LEFT, width, height);
                                        }

                                        //右上
                                        if (glideBean2.roundCorner_topRight > 0) {
                                            bitmap = ImageViewTools.RoundedCorners.fillet(bitmap, glideBean2.roundCorner_topRight, ImageViewTools.RoundedCorners.CORNER_TOP_RIGHT, width, height);
                                        }

                                        //左下圆角
                                        if (glideBean2.roundCorner_bottomLeft > 0) {
                                            bitmap = ImageViewTools.RoundedCorners.fillet(bitmap, glideBean2.roundCorner_bottomLeft, ImageViewTools.RoundedCorners.CORNER_BOTTOM_LEFT, width, height);
                                        }

                                        //右下圆角
                                        if (glideBean2.roundCorner_bottomRight > 0) {
                                            bitmap = ImageViewTools.RoundedCorners.fillet(bitmap, glideBean2.roundCorner_bottomRight, ImageViewTools.RoundedCorners.CORNER_BOTTOM_RIGHT, width, height);
                                        }

                                        //全部初始化
                                        glideBean2.roundCorner = 0;
                                        glideBean2.roundCorner_topLeft = 0;
                                        glideBean2.roundCorner_topRight = 0;
                                        glideBean2.roundCorner_bottomLeft = 0;
                                        glideBean2.roundCorner_bottomRight = 0;
                                    }
                                    //是否保存本地
                                    if (isSaveSD && isCache) {
                                        Bitmap finalBitmap = bitmap;
                                        instance.execute(new Runnable() {
                                            @Override
                                            public void run() {
                                                ImageViewTools.saveBitmapToLocal(key[0], finalBitmap, CACHE_PATH, true);
                                            }
                                        });
                                    }

                                    glideBean2.imgObjet = bitmap;
                                }

                            } catch (Exception e) {
                                if (LOG.GT_LOG_TF) {
                                    GT.err("loadGlideError:" + e);
                                }

                            }
                        }
                        return glideBean2;
                    }
                }).execute(new Observable.RunAndroidV<GlideBean>() {
                    @Override
                    public void run(GlideBean glideBean) {
                        if (iv == null || glideBean == null || glideBean.imgObjet == null) {
                            loadError(glideBean, iv, new Exception("图片组件或资源为空"));
                            return;
                        }

                        //已加载图片 如果与 即将要加载的图片是一样的，那就跳过，不进行重复加载
                        String obj2 = objList.get(iv.hashCode());
                        if (obj2 != null && obj2 == glideBean.imgObjet.toString()) {
                            return;
                        }

                        try {
                            if (glideBean.isAnimation) {
                                iv.setAlpha(0.1f);
                            }

                            if (String.valueOf(glideBean.imgObjet).contains(ViewUtils.GTImageView.class.getSimpleName())) {
                                ViewUtils.GTImageView gtIv = null;
                                //GIF
                                if (!(iv instanceof GT.ViewUtils.GTImageView)) {
                                    gtIv = (ViewUtils.GTImageView) glideBean.imgObjet;
                                    gtIv.setId(iv.getId());
                                    gtIv.setAlpha(iv.getAlpha());
                                    gtIv.setBackground(iv.getBackground());
                                    gtIv.setScaleType(iv.getScaleType());
                                    gtIv.setTag(iv.getTag());
                                    gtIv.setGifSpeed(glideBean.gifSpeed);
                                    gtIv.setVisibility(iv.getVisibility());
                                    gtIv.setMaxWidth(iv.getMaxWidth());
                                    gtIv.setMaxHeight(iv.getMaxHeight());
                                    gtIv.setLayoutParams(iv.getLayoutParams());
                                    gtIv.setPlaceholder(glideBean.placeholder);
                                    gtIv.setError(glideBean.error);
                                    gtIv.setGifResource(glideBean.resource);
                                    gtIv.setAnimation(iv.getAnimation());
                                    gtIv.setClickable(iv.isClickable());
                                    gtIv.setFocusable(iv.isFocusable());
                                    gtIv.setBaseline(iv.getBaseline());
                                    gtIv.setClipBounds(iv.getClipBounds());
                                    gtIv.setImageMatrix(iv.getMatrix());
                                    gtIv.setMinimumHeight(iv.getMinimumHeight());
                                    gtIv.setMinimumWidth(iv.getMinimumWidth());
                                    gtIv.setScrollX(iv.getScrollX());
                                    gtIv.setScrollY(iv.getScrollY());

                                    //拷贝view事件
                                    GT.AnnotationAssist.copyViewEvent(iv, gtIv, View.OnClickListener.class, true);
                                    GT.AnnotationAssist.copyViewEvent(iv, gtIv, View.OnLongClickListener.class, true);
                                    GT.AnnotationAssist.copyViewEvent(iv, gtIv, View.OnTouchListener.class, true);
                                    GT.AnnotationAssist.copyViewEvent(iv, gtIv, View.OnFocusChangeListener.class, true);
                                    GT.AnnotationAssist.copyViewEvent(iv, gtIv, View.OnKeyListener.class, true);

                                    //替换视图
                                    GT.ImageViewTools.replacementView(iv, gtIv);
                                } else {
                                    gtIv = (ViewUtils.GTImageView) iv;
                                    gtIv.setGifResource(glideBean.resource);
                                }
                                view[0] = gtIv;
                            } else {
                                //非 GIF
                                if (glideBean.imgObjet instanceof Bitmap) {
                                    Bitmap bitmap = (Bitmap) glideBean.imgObjet;
                                    iv.setImageBitmap(bitmap);
                                } else if (glideBean.imgObjet instanceof Drawable) {
                                    Drawable drawable = (Drawable) glideBean.imgObjet;
                                    iv.setImageDrawable(drawable);
                                } else if (glideBean.imgObjet instanceof Integer) {
                                    Resources resources = iv.getResources();
                                    iv.setImageResource((Integer) glideBean.imgObjet);
                                }
                                view[0] = iv;
                            }
                        } catch (Exception e) {
                            loadError(glideBean, iv, e);
                        } finally {
                            if (view != null && view[0] != null)
                                objList.put(view[0].hashCode(), glideBean.imgObjet.toString());
                            if (glideBean.isAnimation) {
                                Thread.getInstance(0).execute(new Runnable() {
                                    @Override
                                    public void run() {
                                        //最大显示不能大于 设置的默认透明度
                                        if (view[0] == null) return;
                                        Object tag = view[0].getTag(iv.getId());
                                        if (tag != null && tag instanceof Float) {
                                            float alpha = (float) tag;
                                            for (float i = 0; i < alpha; ) {
                                                i += 0.1f;
                                                Thread.sleep(1);
                                                if (view[0] == null) {
                                                    view[0].setAlpha(1f);
                                                    break;
                                                }
                                                if (i > alpha) i = alpha;
                                                float finalI = i;
                                                Thread.runAndroid(new Runnable() {
                                                    @Override
                                                    public void run() {
                                                        if (view[0] == null) {
                                                            view[0].setAlpha(1f);
                                                            return;
                                                        }
                                                        view[0].setAlpha(finalI);
                                                        if (finalI >= alpha) {
                                                            view[0].setTag(iv.getId(), null);
                                                        }

                                                    }
                                                });
                                            }
                                        } else {
                                            view[0].setAlpha(1f);
                                        }
                                    }
                                });
                            }
                            //释放资源
                            glideBean.imgObjet = null;
                            glideBean.resource = null;
                            glideBean.placeholder = null;
                            glideBean.error = null;
                            glideBean = null;

                            glideBean2.imgObjet = null;
                            glideBean2.resource = null;
                            glideBean2.placeholder = null;
                            glideBean2.error = null;
                            glideBean2 = null;
                        }

                    }
                });
            } catch (Exception e) {
                if (LOG.GT_LOG_TF) {
                    logt("e:" + e);
                }
            } finally {
                //是否总资源
                glideBean2.imgObjet = null;
                glideBean2.placeholder = null;
                glideBean2.error = null;
            }
            return glide;
        }


        /**
         * 加载异常图
         *
         * @param iv
         */
        private void loadError(GlideBean glideBean, ImageView iv, Exception e) {

            if (LOG.GT_LOG_TF) {
                GT.errt("loadGlideError:" + e);
            }

            if (iv != null && glideBean != null && glideBean.error != null) {
                try {
                    if (iv != null || glideBean.error != null) {
                        if (glideBean.error instanceof Bitmap) {
                            Bitmap bitmap = (Bitmap) glideBean.error;
                            iv.setImageBitmap(bitmap);
                        } else if (glideBean.error instanceof Drawable) {
                            Drawable drawable = (Drawable) glideBean.error;
                            iv.setImageDrawable(drawable);
                        } else if (glideBean.error instanceof Integer) {
                            iv.setImageResource((Integer) glideBean.error);
                        } else if (glideBean.error instanceof ImageView) {
                            ImageView iv2 = (ImageView) glideBean.error;
                            iv.setBackground(iv2.getBackground());
                            iv.setImageBitmap(iv2.getDrawingCache());
                            iv.setImageDrawable(iv2.getDrawable());
                            iv.setScaleType(iv2.getScaleType());
                            iv.setTag(iv2.getTag());
                            iv.setVisibility(iv2.getVisibility());
                            iv.setMaxWidth(iv2.getMaxWidth());
                            iv.setMaxHeight(iv2.getMaxHeight());
                        }
                    }
                } catch (Exception e1) {

                }
                if (!glideBean.isGIF) {
                    glideBean.error = null;
                }
            }

        }

        //释放缓存
        public static void close() {
            gifCacheMovieList.clear();
            objList.clear();
            LruCacheUtil.clearCache();
            Runtime.getRuntime().gc();
        }

    }

    /**
     * WebWiew 工具类
     */
    public static class WebViewUtils {

        /**
         * 需要添加 xml/network_security_config.xml
         * 配置文件:android:networkSecurityConfig="@xml/network_security_config"
         * <p>
         * <?xml version="1.0" encoding="utf-8"?>
         * <network-security-config>
         * <base-config cleartextTrafficPermitted="true" />
         * </network-security-config>
         * <p>
         * 前提网络权限
         * <uses-permission android:name="android.permission.INTERNET"/>
         */

        private static long webSize = -1;
        public static boolean isRun = true;

        /**
         * 获取网页代码
         *
         * @param htmlUrl               网页地址
         * @param htmlSize              网页大小(可以直接获取 onGetClose 上获取到确切值)
         * @param onGetHtmlCodeListener 对应接口
         */
        public static void getHtmlData2(String htmlUrl, int htmlSize, OnGetHtmlCodeListener onGetHtmlCodeListener) {
            isRun = true;
            Thread.getInstance(0).execute(new Runnable() {
                @Override
                public void run() {
                    if (htmlUrl == null || onGetHtmlCodeListener == null) {
                        onGetHtmlCodeListener.onGetError(htmlUrl, "The parameter cannot be empty");
                        return;
                    }
                    try {
                        HttpURLConnection conn = (HttpURLConnection) new URL(htmlUrl).openConnection();
                        if (conn == null) return;
                        conn.setRequestMethod("GET");
                        conn.setConnectTimeout(5 * 1000);
                        onGetHtmlCodeListener.onGetStart(htmlUrl);
                        webSize = -1;
                        byte[] data = readInputStream(conn, htmlSize, onGetHtmlCodeListener);
                        String html = new String(data, "UTF-8");
                        onGetHtmlCodeListener.onGetClose(htmlUrl, html, webSize);
                    } catch (Exception e) {
                        onGetHtmlCodeListener.onGetError(htmlUrl, e);
                        return;
                    }
                }
            });

        }

        /**
         * 获取 html 源码
         *
         * @param htmlUrl
         * @param onGetHtmlCodeListener
         */
        public static void getHtmlData(String htmlUrl, OnGetHtmlCodeListener onGetHtmlCodeListener) {
            isRun = true;
            Observable.getDefault().execute(new Observable.RunJavaR<Integer>() {
                @Override
                public Integer run() {
                    if (htmlUrl == null || onGetHtmlCodeListener == null) {
                        onGetHtmlCodeListener.onGetError(htmlUrl, "The parameter cannot be empty");
                        return 0;
                    }
                    int sumLen = 0;
                    int len = 0;
                    byte[] buffer = new byte[1024];
                    try {
                        HttpURLConnection conn = (HttpURLConnection) new URL(htmlUrl).openConnection();
                        if (conn == null) return 0;
                        conn.setRequestMethod("GET");
                        conn.setConnectTimeout(5 * 1000);
                        InputStream inStream = conn.getInputStream();//通过输入流获取html数据
                        ByteArrayOutputStream outStream = new ByteArrayOutputStream();
                        while (isRun) {
                            len = inStream.read(buffer);
                            sumLen += len;
                            if (len < 0) break;
                            outStream.write(buffer, 0, len);
                        }
                        inStream.close();
                    } catch (Exception e) {
                        return 0;
                    }
                    return sumLen;
                }
            }).execute(new Observable.RunJavaV<Integer>() {
                @Override
                public void run(Integer size) {
                    getHtmlData2(htmlUrl, size, onGetHtmlCodeListener);
                }
            });
        }


        private static byte[] readInputStream(HttpURLConnection conn, int webSize2, OnGetHtmlCodeListener onGetHtmlCodeListener) throws Exception {
            InputStream inStream = conn.getInputStream();//通过输入流获取html数据
            ByteArrayOutputStream outStream = new ByteArrayOutputStream();
            try {
                int sumLen = 0;
                int len = 0;
                byte[] buffer = new byte[1024];
                while (isRun) {
                    len = inStream.read(buffer);
                    sumLen += len;
                    int mProgress = (int) (((float) sumLen / webSize2) * 100);
                    if (len < 0) break;
                    onGetHtmlCodeListener.onGetProgress(mProgress);
                    outStream.write(buffer, 0, len);
                }
                inStream.close();
                webSize = sumLen;
            } catch (OutOfMemoryError e) {

            }
            return outStream.toByteArray();
        }

        public interface OnGetHtmlCodeListener {

            /**
             * @加载开始
             */
            void onGetStart(String url);

            /**
             * @加载中
             */
            void onGetProgress(int progress);

            /**
             * @加载结束
             */
            void onGetClose(String url, String htmlCode, long htmlSize);

            /**
             * @加载错误
             */
            void onGetError(String url, Object errorMessage);

        }

        /**
         * 加载 PC 版的网页
         *
         * @param webView 网页对象
         * @param url     要加载的网页
         */
        @SuppressLint("SetJavaScriptEnabled")
        public static WebView loadPCHtml(Context context, WebView webView, String url) {
            if (webView == null) return null;

            //设置PC网
            webView.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE);//不使用缓存，只从网络获取数据.
            webView.getSettings().setUserAgentString(GT_WebView.BaseWebView.defaultPC);
            webView.requestFocusFromTouch();//支持获取手势焦点
            webView.clearCache(true);

            if (url != null) {
                webView.loadUrl(url);
            }

            return webView;

        }

        private static boolean isLoadSuccess = false;

        /**
         * 加载 App 网页
         *
         * @param webView
         * @param url
         */
        @SuppressLint("SetJavaScriptEnabled")
        public static WebView loadAppHtml(Context context, WebView webView, String url) {
            if (webView == null || context == null) return webView;

            //手机版
            webView.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE);//不使用缓存，只从网络获取数据.
            webView.getSettings().setUserAgentString(GT_WebView.BaseWebView.defaultPhone);
            webView.clearCache(true);

            if (url != null) {
                webView.loadUrl(url);
            }

            return webView;

        }

        /**
         * 添加监听器
         *
         * @param webView
         * @param onLoadWebViewListener
         */
        public static void addListener(WebView webView, OnLoadWebViewListener onLoadWebViewListener) {
            if (onLoadWebViewListener == null) return;
            //获得网页的加载进度并显示
            webView.setWebChromeClient(new WebChromeClient() {

                @Override
                public boolean onConsoleMessage(ConsoleMessage consoleMessage) {
                    return onLoadWebViewListener.onConsoleMessage(consoleMessage);
                }

                @Override
                public boolean onCreateWindow(WebView view, boolean isDialog, boolean isUserGesture, Message resultMsg) {
                    return onLoadWebViewListener.onCreateWindow(view, isDialog, isUserGesture, resultMsg);

                }

                @Override
                public boolean onJsBeforeUnload(WebView view, String url, String message, JsResult result) {
                    return onLoadWebViewListener.onJsBeforeUnload(view, url, message, result);
                }

                @Override
                public boolean onJsConfirm(WebView view, String url, String message, JsResult result) {
                    return onLoadWebViewListener.onJsConfirm(view, url, message, result);
                }

                @Override
                public boolean onJsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result) {
                    return onLoadWebViewListener.onJsPrompt(view, url, message, defaultValue, result);

                }

                @Override
                public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback, FileChooserParams fileChooserParams) {
                    return onLoadWebViewListener.onShowFileChooser(webView, filePathCallback, fileChooserParams);
                }

                @Override
                public void onCloseWindow(WebView window) {
                    onLoadWebViewListener.onCloseWindow(window);
                }

                @Override
                public void onGeolocationPermissionsHidePrompt() {
                    onLoadWebViewListener.onGeolocationPermissionsHidePrompt();
                }

                @Override
                public void onGeolocationPermissionsShowPrompt(String origin, GeolocationPermissions.Callback callback) {
                    onLoadWebViewListener.onGeolocationPermissionsShowPrompt(origin, callback);
                }

                @Override
                public void onHideCustomView() {
                    onLoadWebViewListener.onHideCustomView();
                }

                @Override
                public void onPermissionRequest(PermissionRequest request) {
                    onLoadWebViewListener.onPermissionRequest(request);
                }

                @Override
                public void onPermissionRequestCanceled(PermissionRequest request) {
                    onLoadWebViewListener.onPermissionRequestCanceled(request);
                }

                @Override
                public void onReceivedIcon(WebView view, Bitmap icon) {
                    onLoadWebViewListener.onReceivedIcon(view, icon);
                }

                @Override
                public void onReceivedTitle(WebView view, String title) {
                    onLoadWebViewListener.onReceivedTitle(view, title);
                }

                @Override
                public void onReceivedTouchIconUrl(WebView view, String url, boolean precomposed) {
                    onLoadWebViewListener.onReceivedTouchIconUrl(view, url, precomposed);
                }

                @Override
                public void onRequestFocus(WebView view) {
                    onLoadWebViewListener.onRequestFocus(view);
                }

                @Override
                public void onShowCustomView(View view, CustomViewCallback callback) {
                    onLoadWebViewListener.onShowCustomView(view, callback);
                }

                @Override
                public boolean onJsTimeout() {
                    return onLoadWebViewListener.onJsTimeout();
                }


                @Override
                public void onShowCustomView(View view, int requestedOrientation, CustomViewCallback callback) {
                    onLoadWebViewListener.onShowCustomView(view, requestedOrientation, callback);
                }

                @Override
                public void onConsoleMessage(String message, int lineNumber, String sourceID) {
                    onLoadWebViewListener.onConsoleMessage(message, lineNumber, sourceID);
                }

                @Override
                public void onExceededDatabaseQuota(String url, String databaseIdentifier, long quota, long estimatedDatabaseSize, long totalQuota, WebStorage.QuotaUpdater quotaUpdater) {
                    onLoadWebViewListener.onExceededDatabaseQuota(url, databaseIdentifier, quota, estimatedDatabaseSize, totalQuota, quotaUpdater);
                }

                @Override
                public boolean onJsAlert(WebView view, String url, String message, JsResult result) {
                    return onLoadWebViewListener.onJsAlert(view, url, message, result);
                }

                @Override
                public void onProgressChanged(WebView view, int newProgress) {
                    onLoadWebViewListener.onProgressChanged(view, newProgress);
                    if (newProgress <= 100 && !isLoadSuccess) {
                        if (newProgress == 100) {
                            isLoadSuccess = true;
                        }
                        onLoadWebViewListener.onLoadingProgress(view, newProgress);
                    }
                }

            });
            //设置加载Web的生命周期
            webView.setWebViewClient(new WebViewClient() {

                @Override
                public void onTooManyRedirects(WebView view, Message cancelMsg, Message continueMsg) {
                    onLoadWebViewListener.onTooManyRedirects(view, cancelMsg, continueMsg);
                }

                @Nullable
                @Override
                public WebResourceResponse shouldInterceptRequest(WebView view, String url) {
                    return onLoadWebViewListener.shouldInterceptRequest(view, url);
                }

                @Nullable
                @Override
                public WebResourceResponse shouldInterceptRequest(WebView view, WebResourceRequest request) {

                    return onLoadWebViewListener.shouldInterceptRequest(view, request);
                }

                @Override
                public void onUnhandledKeyEvent(WebView view, KeyEvent event) {
                    onLoadWebViewListener.onUnhandledKeyEvent(view, event);

                }

                @Override
                public void onScaleChanged(WebView view, float oldScale, float newScale) {
                    onLoadWebViewListener.onScaleChanged(view, oldScale, newScale);
                }

                @Override
                public void onSafeBrowsingHit(WebView view, WebResourceRequest request, int threatType, SafeBrowsingResponse callback) {
                    onLoadWebViewListener.onSafeBrowsingHit(view, request, threatType, callback);
                }

                @Override
                public void onReceivedLoginRequest(WebView view, String realm, @Nullable String account, String args) {
                    onLoadWebViewListener.onReceivedLoginRequest(view, realm, account, args);
                }

                @Override
                public void onReceivedHttpError(WebView view, WebResourceRequest request, WebResourceResponse errorResponse) {
                    onLoadWebViewListener.onReceivedHttpError(view, request, errorResponse);
                }

                @Override
                public void onReceivedHttpAuthRequest(WebView view, HttpAuthHandler handler, String host, String realm) {
                    onLoadWebViewListener.onReceivedHttpAuthRequest(view, handler, host, realm);
                }

                @Override
                public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {
                    onLoadWebViewListener.onReceivedError(view, request, error);
                }

                @Override
                public void onPageCommitVisible(WebView view, String url) {
                    onLoadWebViewListener.onPageCommitVisible(view, url);
                }

                @Override
                public void onLoadResource(WebView view, String url) {
                    onLoadWebViewListener.onLoadResource(view, url);
                }

                @Override
                public void onFormResubmission(WebView view, Message dontResend, Message resend) {
                    onLoadWebViewListener.onFormResubmission(view, dontResend, resend);
                }

                @Override
                public boolean onRenderProcessGone(WebView view, RenderProcessGoneDetail detail) {
                    return onLoadWebViewListener.onRenderProcessGone(view, detail);
                }

                @Override
                public void onReceivedClientCertRequest(WebView view, ClientCertRequest request) {
                    onLoadWebViewListener.onReceivedClientCertRequest(view, request);

                }

                @Override
                public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
                    onLoadWebViewListener.onReceivedSslError(view, handler, error);
                    handler.cancel();
                }

                @Override
                public boolean shouldOverrideUrlLoading(WebView view, String url) {
                    if (url.startsWith("http://") || url.startsWith("https://")) {
                        view.loadUrl(url);//防止加载网页时调起系统浏览器
                        return true;
                    }
                    onLoadWebViewListener.shouldOverrideUrlLoading(view, url);
                    return true;
                }

                @Override
                public void onPageStarted(WebView view, String url, Bitmap favicon) {
                    onLoadWebViewListener.onPageStarted(view, url, favicon);
                    onLoadWebViewListener.onLoadStart(view, url, favicon);
                }

                @Override
                public void onPageFinished(WebView view, String url) {
                    onLoadWebViewListener.onPageFinished(view, url);
                    onLoadWebViewListener.onLoadClose(view, url);
                }

                @Override
                public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
                    onLoadWebViewListener.onReceivedError(view, errorCode, description, failingUrl);
                    onLoadWebViewListener.onLoadError(view, errorCode, description, failingUrl);
                }
            });
        }


        /**
         * 加载 html
         *
         * @param context               活动
         * @param isPC                  是否电脑端
         * @param webView               WebView
         * @param url                   加载的网址
         * @param isCache               是否缓存
         * @param onLoadWebViewListener 接口监听
         * @return
         */
        public static WebView loadHtml(Context context, boolean isPC, WebView webView, String url) {
            if (isPC) {
                return loadPCHtml(context, webView, url);
            } else {
                return loadAppHtml(context, webView, url);
            }
        }

        /**
         * 仅仅加强 WebView
         *
         * @param context
         * @param webView
         * @param isCache          是否允许Web缓存
         * @param downloadListener 监听下载文件
         * @return
         */
        public static WebView setWebView(Context context, WebView webView, boolean isCache, DownloadListener... downloadListener) {
            setWebViewKernel(context, webView, isCache, false, downloadListener);
            return webView;
        }

        /**
         * 仅仅加强 WebView
         *
         * @param context
         * @param webView
         * @param isCache          是否允许web缓存
         * @param isZoom           是否支持web缩放
         * @param downloadListener 监听下载文件
         * @return
         */
        public static WebView setWebView(Context context, WebView webView, boolean isCache, boolean isZoom, DownloadListener... downloadListener) {
            setWebViewKernel(context, webView, isCache, isZoom, downloadListener);
            return webView;
        }

        /**
         * @param context
         * @param webView
         * @param isCache          是否允许web缓存
         * @param isZoom           是否支持web缩放
         * @param downloadListener 监听下载文件
         * @return
         */
        public static WebView setWebViewKernel(Context context, WebView webView, boolean isCache, boolean isZoom, DownloadListener... downloadListener) {
            if (webView == null || context == null) return webView;

            //声明WebSettings子类
            WebSettings webSettings = webView.getSettings();

            //设置下载监听
            if (downloadListener.length > 0) {
                webView.setDownloadListener(downloadListener[0]);
            }

            webSettings.setJavaScriptEnabled(true);

            webSettings.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NARROW_COLUMNS);//设置布局算法
            webSettings.setSupportMultipleWindows(true);//设置支持多窗口
            webSettings.setGeolocationEnabled(true);//设置地理位置使

            //关闭密码保存功能
            webSettings.setSavePassword(false);

            //支持插件
            webSettings.setPluginState(WebSettings.PluginState.ON_DEMAND);

            //设置自适应屏幕，两者合用
            webSettings.setUseWideViewPort(true); //将图片调整到适合webview的大小
            webSettings.setLoadWithOverviewMode(true); // 缩放至屏幕的大小

            webSettings.setRenderPriority(WebSettings.RenderPriority.HIGH);// 提高网页渲染的优先级

            //缩放操作
            webSettings.setSupportZoom(isZoom); //支持缩放，默认为true。是下面那个的前提。
            webSettings.setBuiltInZoomControls(isZoom); //设置内置的缩放控件。若为false，则该WebView不可缩放
            webSettings.setDisplayZoomControls(isZoom); //隐藏原生的缩放控件

            //其他细节操作
            webSettings.setAllowFileAccess(true); //设置可以访问文件
            webSettings.setJavaScriptCanOpenWindowsAutomatically(true); //支持通过JS打开新窗口
            webSettings.setLoadsImagesAutomatically(true); //支持自动加载图片
            webSettings.setDefaultTextEncodingName("utf-8");//设置编码格式
            webSettings.setAllowUniversalAccessFromFileURLs(false);//不允许通过 file url 加载的 Javascript 可以访问其他的源(包括http、https等源)
            webSettings.setDomStorageEnabled(true); //开启 DOM storage API 功能(允许 H5 使用的技术)
            webSettings.setDatabaseEnabled(true);   //开启 database storage API 功能(允许 H5 使用的技术)

            //新增
            webSettings.setAllowContentAccess(true); // 是否可访问Content Provider的资源，默认值 true
            webSettings.setAllowFileAccessFromFileURLs(true); // 是否允许通过file url加载的Javascript读取本地文件，默认值 false
            webSettings.setAllowUniversalAccessFromFileURLs(false);// 是否允许通过file url加载的Javascript读取全部资源(包括文件,http,https)，默认值 false

            if (isCache) {
//                webSettings.setAppCacheMaxSize(Long.MAX_VALUE);//设置 app缓存最大值
                // 通过设置WebView的settings实现
                String cacheDirPath = FileUtils.getGTPath(context) + "WebCache/";
                webSettings.setDatabasePath(cacheDirPath);
                webSettings.setGeolocationDatabasePath(cacheDirPath);

                //使用缓存:
                webSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);

            } else {
                //不使用缓存:
                webSettings.setCacheMode(WebSettings.LOAD_NO_CACHE);
            }

            //缓存模式如下：
            //LOAD_CACHE_ONLY: 不使用网络，只读取本地缓存数据
            //LOAD_DEFAULT: （默认）根据cache-control决定是否从网络上取数据。
            //LOAD_NO_CACHE: 不使用缓存，只从网络获取数据.
            //LOAD_CACHE_ELSE_NETWORK，只要本地有，无论是否过期，或者no-cache，都使用缓存中的数据。

            return webView;
        }


        /**
         * 加载一个网页
         *
         * @param webView
         * @param url
         * @return
         */
        public static boolean loadURL(WebView webView, String url) {
            if (webView == null || url == null) return false;
            try {
                webView.loadUrl(url);
            } catch (Exception e) {
                return false;
            }
            return true;
        }

        /**
         * 加载一个Asset 文件里的 html 文件
         *
         * @param webView
         * @param htmlFile 需要加上后缀名 如：test.html
         * @return
         */
        public static boolean loadAsset(WebView webView, String htmlFile) {
            if (webView == null || htmlFile == null) return false;
            try {
                webView.loadUrl("file:///android_asset/" + htmlFile);
            } catch (Exception e) {
                return false;
            }
            return true;
        }

        /**
         * 加载一个 SD卡里的
         *
         * @param webView
         * @param htmlFile
         * @return
         */
        public static boolean loadSdCard(WebView webView, String htmlFile) {
            if (webView == null || htmlFile == null) return false;
            try {
                webView.loadUrl("content://com.android.htmlfileprovider/sdcard/" + htmlFile);
            } catch (Exception e) {
                return false;
            }
            return true;
        }

        /**
         * 加载富文本
         */
        public static boolean loadHtmlCode(WebView webView, String htmlCode) {
            if (webView == null || htmlCode == null) return false;
            String head = "<head>"
                    + "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no/\"> "
                    + "<style>img{max-width: 100%; width:100%; height:auto;}*{margin:0px;}</style>"
                    + "</head>";
            String htmlData = "<html>" + head + "<body>" + htmlCode + "</body></html>";
            try {
                webView.loadData(htmlData, "text/html", "UTF-8");
            } catch (Exception e) {
                return false;
            }
            return true;
        }

        /**
         * 加载富文本
         *
         * @param activity
         * @param htmlCode
         * @param viewGroup
         * @return
         */
        public static boolean loadHtmlCode(Activity activity, String htmlCode, ViewGroup viewGroup) {
            if (activity == null || viewGroup == null || htmlCode == null) return false;
            String head = "<head>"
                    + "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no/\"> "
                    + "<style>img{max-width: 100%; width:100%; height:auto;}*{margin:0px;}</style>"
                    + "</head>";
            String htmlData = "<html>" + head + "<body>" + htmlCode + "</body></html>";
            try {
                WebView webView = new WebView(activity);
                viewGroup.addView(webView);
                webView.loadData(htmlData, "text/html", "UTF-8");
            } catch (Exception e) {
                return false;
            }
            return true;
        }

        //加载网页接口
        public abstract static class OnLoadWebViewListener extends WebChromeClient {

            /**
             * @加载开始
             */
            protected void onLoadStart(WebView view, String url, Bitmap favicon) {
            }

            /**
             * @加载中
             */
            protected void onLoadingProgress(WebView view, int progress) {
            }

            /**
             * @加载结束
             */
            protected void onLoadClose(WebView view, String url) {
            }

            /**
             * @加载错误
             */
            protected void onLoadError(WebView view, int errorCode, String description, String failingUrl) {
            }


            @Deprecated
            public boolean shouldOverrideUrlLoading(WebView view, String url) {
                return false;
            }

            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
                return shouldOverrideUrlLoading(view, request.getUrl().toString());
            }

            public void onPageStarted(WebView view, String url, Bitmap favicon) {
            }

            public void onPageFinished(WebView view, String url) {
            }

            public void onLoadResource(WebView view, String url) {
            }

            public void onPageCommitVisible(WebView view, String url) {
            }

            @Deprecated
            @Nullable
            public WebResourceResponse shouldInterceptRequest(WebView view, String url) {
                return null;
            }

            @Nullable
            public WebResourceResponse shouldInterceptRequest(WebView view, WebResourceRequest request) {
                return shouldInterceptRequest(view, request.getUrl().toString());
            }

            @Deprecated
            public void onTooManyRedirects(WebView view, Message cancelMsg, Message continueMsg) {
            }

            @Deprecated
            public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
            }

            public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {

            }

            public void onReceivedHttpError(WebView view, WebResourceRequest request, WebResourceResponse errorResponse) {
            }

            public void onFormResubmission(WebView view, Message dontResend, Message resend) {

            }

            public void doUpdateVisitedHistory(WebView view, String url, boolean isReload) {
            }

            public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
            }

            public void onReceivedClientCertRequest(WebView view, ClientCertRequest request) {
            }

            public void onReceivedHttpAuthRequest(WebView view, HttpAuthHandler handler, String host, String realm) {
            }

            public boolean shouldOverrideKeyEvent(WebView view, KeyEvent event) {
                return false;
            }


            public void onUnhandledKeyEvent(WebView view, KeyEvent event) {

            }

            public void onUnhandledInputEvent(WebView view, InputEvent event) {

            }

            private void onUnhandledInputEventInternal(WebView view, InputEvent event) {

            }

            public void onScaleChanged(WebView view, float oldScale, float newScale) {
            }

            public void onReceivedLoginRequest(WebView view, String realm, String account, String args) {
            }


            public boolean onRenderProcessGone(WebView view, RenderProcessGoneDetail detail) {
                return false;
            }

            public void onSafeBrowsingHit(WebView view, WebResourceRequest request, int threatType, SafeBrowsingResponse callback) {

            }


        }


        private static final int defaultMaxCount = 10000;//默认解析数量
        private static int maxCount = defaultMaxCount;

        /**
         * 解析 html 代码
         *
         * @param htmlCode
         * @param maxCount2 自定义 解析数量
         * @return
         */
        public static Map<String, List<String>> analysisHtmlCode(String htmlCode, int maxCount2) {
            if (htmlCode == null || !htmlCode.contains("http") || !htmlCode.contains("."))
                return null;
            Map<String, List<String>> map = new HashMap<>();
            maxCount = maxCount2;
            addHttpData(htmlCode, map);
            return analysisHtmlCode(htmlCode);
        }

        /**
         * 解析 html 代码
         *
         * @param htmlCode
         * @return
         */
        public static Map<String, List<String>> analysisHtmlCode(String htmlCode) {
            if (htmlCode == null || !htmlCode.contains("http") || !htmlCode.contains("."))
                return null;
            Map<String, List<String>> map = new HashMap<>();
            maxCount = defaultMaxCount;
            addHttpData(htmlCode, map);
            return map;
        }


        /**
         * 回调解析
         *
         * @param htmlCode
         * @param map
         */
        public static void addHttpData(String htmlCode, Map<String, List<String>> map) {
            if (maxCount <= 0) return;
            int indexOf1 = htmlCode.indexOf("http://");
            int indexOf2 = htmlCode.indexOf("https://");
            if (indexOf1 <= 0 && indexOf2 <= 0)
                return;
            int indexOf = 0;
            if (indexOf1 > 0) {
                indexOf = indexOf1;
            }
            if (indexOf2 > 0 && indexOf2 > indexOf) {
                indexOf = indexOf2;
            }
            int lastIndex = htmlCode.indexOf("\"", indexOf);
            String url = htmlCode.substring(indexOf, lastIndex);
            if (!url.contains(".")) {
                htmlCode = htmlCode.substring(lastIndex, htmlCode.length());
                addHttpData(htmlCode, map);
                return;
            }

            int lastIndexOf = url.lastIndexOf(".");
            String type = url.substring(lastIndexOf + 1, url.length());
            List<String> list;
            if (map.keySet().contains(type))
                list = map.get(type);
            else {
                list = new ArrayList<>();
            }
            maxCount--;
            if (!list.contains(url))
                list.add(url);
            map.put(type, list);
            htmlCode = htmlCode.substring(lastIndexOf, htmlCode.length());
            addHttpData(htmlCode, map);
        }

    }

    /**
     * 网络连接
     */
    public static class GT_Socket {

        public static boolean isLog = false;//是否打开日志

        public interface OnStateListener {
            void start(Object obj);

            void loading(int progress);

            void close(Object obj);
        }

        //待更新升级
        public static class TCP {

            //构建 GT_SharedPreferences
            @Target(ElementType.FIELD)
            @Retention(RetentionPolicy.RUNTIME)
            public @interface Build {
                String setIP() default "null";      //默认IP地址 127.0.0.1

                int setPort();                      //默认的端口号

                boolean isLog() default false;      //是否使用日志
            }

            private ServerSocket serverSocket;//服务器套接字
            private Socket socket;//服务器、客户端套接字

            //文字
            private PrintStream printStream;//输出
            private BufferedReader bufferedReader;//输入
            //图片
            private DataOutputStream dataOutputStream;//输出
            private DataInputStream dataInputStream;//输入

            private int port = -1;//端口号：必须大于1023 0~1023为系统保留端口
            private String ip = "";//IP地址
            private boolean isDisconnect = false;//是否断开网络

            /**
             * 创建服务器
             *
             * @param port
             */
            public TCP(int port) {
                isDisconnect = false;
                this.port = port;
                Thread.getInstance(0).execute(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            serverSocket = new ServerSocket(port);//创建服务器
                            if (isLog)
                                GT.log("服务器：创建好服务器，等待连接");
                            while (!isDisconnect) {
                                if (socket == null) {
                                    socket = serverSocket.accept();//开始等待客户端连接
                                    if (isLog)
                                        GT.log("服务器：有客户端连接");
                                    //文字
                                    printStream = new PrintStream(socket.getOutputStream());//服务器 输出
                                    bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));//服务器 输入
                                    //图片
                                    dataOutputStream = new DataOutputStream(socket.getOutputStream());//服务器 输出
                                    dataInputStream = new DataInputStream(socket.getInputStream());//服务器 输入
                                } else {
                                    //等待断开重连
                                    Thread.sleep(2000);
                                    socket = null;
                                }

                            }

                        } catch (IOException e) {
                            e.printStackTrace();
                        }


                    }
                });
            }

            /**
             * 创建客户端
             *
             * @param port
             */
            public TCP(String ip, int port) {
                isDisconnect = false;
                this.port = port;
                this.ip = ip;
                Thread.getInstance(0).execute(new Runnable() {
                    @Override
                    public void run() {

                        while (!isDisconnect) {
                            if (socket == null) {
                                try {
                                    if (isLog)
                                        GT.log("客户端：开始连接服务器");
                                    socket = new Socket(ip, port);//连接服务器
                                    if (isLog)
                                        GT.log("客户端：连接服务器成功！");
                                    //文字
                                    printStream = new PrintStream(socket.getOutputStream());//客户端 输出
                                    bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));//客户端 输入
                                    //图片
                                    dataOutputStream = new DataOutputStream(socket.getOutputStream());//客户端 输出
                                    dataInputStream = new DataInputStream(socket.getInputStream());//客户端 输入
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }
                            } else {
                                //断线重连
                                Thread.sleep(2000);
//                                logt("客户端等待:" + socket);

//                                if (socket != null) {
//                                    socket = null;
//                                }
                            }


                        }


                    }
                });
            }

            /**
             * 发送文本数据
             *
             * @param data
             * @return
             */
            public TCP sendText(Object data) {
//                logt("发送流:" + printStream);
                if (printStream == null) return this;
                Thread.getInstance(0).execute(new Runnable() {
                    @Override
                    public void run() {
                        printStream.println(String.valueOf(data));
                    }
                });
                return this;
            }

            /**
             * 读取文本数据
             *
             * @return
             */
            public String readText() {
//                logt("接收流:" + bufferedReader);
//                logt("输出流:" + printStream);
                if (bufferedReader == null) {
                    return null;
                }
                String data = null;
                try {
                    data = bufferedReader.readLine();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                return data;
            }

            /**
             * 发送图片
             *
             * @param bitmap 将你的图片资源转为 Bitmap
             * @return
             */
            public TCP sendImg(Bitmap bitmap) {
                if (dataOutputStream == null) return this;
                Thread.getInstance(0).execute(new Runnable() {
                    @Override
                    public void run() {
                        try {
//                            GT.log("bitmap:" + bitmap);
                            ByteArrayOutputStream bout = new ByteArrayOutputStream();
                            bitmap.compress(Bitmap.CompressFormat.PNG, 100, bout);
                            int len = bout.size();           //写入字节的长度，再写入图片的字节
                            dataOutputStream.writeInt(len);  //这里打印一下发送的长度
                            dataOutputStream.write(bout.toByteArray());
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                });
                return this;
            }

            /***
             * 读取图片带进度的
             * @param onReadData
             * @return
             */
            public Bitmap readImg(OnStateListener stateListener) {
                if (dataInputStream == null) return null;
                Bitmap bmp = null;
                int size = 0;
                try {
                    size = dataInputStream.readInt();
                    byte[] data = new byte[size];
                    int len = 0;
                    stateListener.start(size);
                    while (len < size) {
                        len += dataInputStream.read(data, len, size - len);
                        int mProgress = (int) (((float) len / size) * 100);
                        stateListener.loading(mProgress);
                    }
                    ByteArrayOutputStream output = new ByteArrayOutputStream();
                    bmp = BitmapFactory.decodeByteArray(data, 0, data.length);
                    bmp.compress(Bitmap.CompressFormat.PNG, 100, output);
                    stateListener.close(bmp);
                } catch (IOException e) {
                    e.printStackTrace();
                }
                return bmp;
            }

            /**
             * 读取图片
             *
             * @return
             */
            public Bitmap readImg() {
                if (dataInputStream == null) return null;
                Bitmap bmp = null;
                int size = 0;
                try {
                    size = dataInputStream.readInt();
                    byte[] data = new byte[size];
                    int len = 0;
                    while (len < size) {
                        len += dataInputStream.read(data, len, size - len);
                    }
                    ByteArrayOutputStream output = new ByteArrayOutputStream();
                    bmp = BitmapFactory.decodeByteArray(data, 0, data.length);
                    bmp.compress(Bitmap.CompressFormat.PNG, 100, output);
                } catch (IOException e) {
                    e.printStackTrace();
                }
                return bmp;
            }

            /**
             * 发送图片
             *
             * @param imgPath
             * @return
             */
            public TCP sendImg(String imgFilePath) {
                if (dataOutputStream == null) return this;
                Thread.getInstance(0).execute(new Runnable() {
                    @Override
                    public void run() {
                        FileInputStream fis = null;
                        try {
                            fis = new FileInputStream(imgFilePath);
                            int size = fis.available();
                            byte[] data = new byte[size];
                            fis.read(data);
                            dataOutputStream.writeInt(size);
                            dataOutputStream.write(data);
                            dataOutputStream.flush();
                            fis.close();
                        } catch (FileNotFoundException e) {
                            e.printStackTrace();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                });
                return this;
            }

            /**
             * 读取图片
             *
             * @param saveFilePath 保存读取到的图片文件路径
             * @return
             */
            public boolean readImg(String saveFilePath) {
                if (dataInputStream == null) return false;
                int len = 0;
                try {
                    len = dataInputStream.readInt();
                    byte[] bytes = new byte[(int) len];  //然后在读这个长度的字节到字节数组
                    dataInputStream.readFully(bytes);  //将独到的内容保存为文件到本地
                    File file = new File(saveFilePath);
                    if (!file.exists()) {
                        file.mkdirs();
                    }
                    FileOutputStream fileOutputStream = new FileOutputStream(file);
                    fileOutputStream.write(bytes);
                    return true;
                } catch (IOException e) {
                    e.printStackTrace();
                }
                return false;
            }

            /**
             * 发送文件
             *
             * @param path            文件路径
             * @param fileName        文件名称
             * @param onStateListener 状态接口
             * @return
             */
            public boolean sendFile(String path, String fileName, OnStateListener onStateListener) {
                Thread.getInstance(0).execute(new Runnable() {
                    @Override
                    public void run() {
                        onStateListener.start(fileName);
                        printStream.println(fileName);//发送文件名
                        OutputStream outputData = null;
                        try {
                            outputData = socket.getOutputStream();
                            FileInputStream fileInput = new FileInputStream(path + fileName);
                            int size = -1;
                            byte[] buffer = new byte[1024];
//                            GT.log("开始读取...");
                            while (true) {
//                                GT.log("开始read");
                                int i = size = fileInput.read(buffer, 0, 1024);
//                                GT.log("结束read：" + i);
                                if (i == -1) {
//                                    GT.log("跳出循环...");
                                    break;
                                }
//                                GT.log("读取中...");
                                onStateListener.loading(size);
//                                GT.log("开始写入...");
                                outputData.write(buffer, 0, size);
//                                GT.log("写入完毕...");
                            }
//                            GT.log("结束读取...");
                            onStateListener.close("ok");
                            outputData.close();
                            fileInput.close();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                });

                return false;
            }

            /**
             * 读取文件
             *
             * @param saveFilePath 保存文件的路径
             */
            public String readFile(String saveFile, OnStateListener onStateListener) {
                if (saveFile == null) return null;
                String fileName = "";
                try {
                    fileName = bufferedReader.readLine();
                    onStateListener.start(fileName);
                } catch (IOException e) {
                    e.printStackTrace();
                }

                //获取文件路径
                String filePath = saveFile.substring(0, saveFile.lastIndexOf("/") + 1);
                // 创建文件的存储路径
                File file = new File(filePath);
                if (!file.exists()) {
                    file.mkdirs();
                }

                //将文件存储到本地
                InputStream dataStream = null;
                try {
                    dataStream = socket.getInputStream();
                    FileOutputStream fileOutputStream = new FileOutputStream(saveFile, false);
                    byte[] buffer = new byte[1024];
                    int size = -1;
                    while ((size = dataStream.read(buffer)) != -1) {
                        fileOutputStream.write(buffer, 0, size);
                        onStateListener.loading(size);
                    }
                    fileOutputStream.close();
                    dataStream.close();
                    onStateListener.close(saveFile);
                } catch (IOException e) {
                    e.printStackTrace();
                    return null;
                }


                return saveFile;
            }


            /**
             * 释放资源
             */
            public void close() {

                GT_Cache.putSocketTCP(ip + port, null);

                isDisconnect = true;
                //关闭输入输出流
                if (socket != null) {
                    try {
                        socket.shutdownInput();
                        socket.shutdownOutput();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }

                if (bufferedReader != null) {
                    try {
                        bufferedReader.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    bufferedReader = null;
                }

                if (printStream != null) {
                    printStream.close();
                    printStream = null;
                }

                if (dataOutputStream != null) {
                    try {
                        dataOutputStream.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    dataOutputStream = null;
                }

                if (dataInputStream != null) {
                    try {
                        dataInputStream.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    dataInputStream = null;
                }

                if (socket != null) {
                    try {
                        socket.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    socket = null;
                }


            }

        }

        public static class UDP {


        }

    }

//============================================= 小工具类 =======================================

    /**
     * data 日期类
     */
    public static class GT_Date {

        public static long startTime() {
            return System.currentTimeMillis();
        }

        public static long endTime(long... startTimes) {
            long endTime = System.currentTimeMillis();
            if (startTimes != null && startTimes.length > 0 && startTimes[0] != 0) {
                endTime -= startTimes[0];
            }
            return endTime;
        }

        /**
         * 使用案例
         * long currentTimeMillis = System.currentTimeMillis();
         * <p>
         * 输出：输入的时间：1567233280386
         * System.out.println("输入的时间：" + currentTimeMillis);
         * <p>
         * currentTimeMillis = 1538364324000L;
         * <p>
         * Lunar lunar = new Lunar(currentTimeMillis);//初始化高级功能
         * 节气: 如果指定的日期有节气则返回当天节气，如果没有则返回 "" 空字符串 不是 null
         * System.out.println("节气:" + lunar.getTermString());
         * <p>
         * 生肖:狗
         * System.out.println("生肖:" + lunar.getAnimalString());
         * <p>
         * 星期：2
         * System.out.println("星期：" + lunar.getDayOfWeek());//星期几(星期日为:1, 星期六为:7)
         * <p>
         * 干支历:戊戌年辛酉月丙寅日
         * System.out.println("干支历:" + lunar.getCyclicalDateString());
         * <p>
         * 农历:戊戌年八月廿二日
         * System.out.println("农历:" + lunar.getLunarDateString());
         * <p>
         * 当前是否为 农历节日:true
         * boolean lFestival = lunar.isLFestival();
         * System.out.println("当前是否为 农历节日:" + lFestival);
         * <p>
         * 农历节日:燃灯佛诞
         * if(lFestival){
         * System.out.println("农历节日:" + lunar.getLFestivalName());
         * }
         * <p>
         * 当前是否为公历节日:true
         * boolean sFestival = lunar.isSFestival();
         * System.out.println("当前是否为公历节日:" + lFestival);
         * if(sFestival){
         * 公历节日:国庆节
         * System.out.println("公历节日:" + lunar.getSFestivalName());
         * }
         * <p>
         * 当前是否为节日:true
         * boolean festival = lunar.isFestival();
         * System.out.println("当前是否为节日:" + festival);
         * <p>
         * 当前是否放假:true
         * boolean holiday = lunar.isHoliday();
         * System.out.println("当前是否放假:" + holiday);
         * <p>
         * <p>
         * Date[] jieqi = Lunar.jieqilist(2019);
         * for (int i = 0; i < Lunar.solarTerm.length; i++) {
         * System.out.print(Lunar.solarTerm[i]);
         *
         * @SuppressWarnings("deprecation") int month = jieqi[i].getMonth();
         * month += 1;
         * System.out.print(month + "月");
         * System.out.println(jieqi[i].getDate());
         * }
         * //对应结果
         * 小寒1月6
         * 大寒1月20
         * 立春2月4
         * 雨水2月19
         * 惊蛰3月6
         * 春分3月21
         * 清明4月5
         * 谷雨4月21
         * 立夏5月6
         * 小满5月22
         * 芒种6月6
         * 夏至6月22
         * 小暑7月8
         * 大暑7月23
         * 立秋8月8
         * 处暑8月24
         * 白露9月8
         * 秋分9月24
         * 寒露10月9
         * 霜降10月24
         * 立冬11月8
         * 小雪11月23
         * 大雪12月8
         * 冬至12月22
         */

        /**
         * 时间与时间戳互转
         *
         * @param timeOrTimestamp 时间或时间戳
         * @param timeFormat      转换格式
         * @return
         * @throws ParseException
         */
        public static String timeToTimestampToTime(String timeOrTimestamp, String timeFormat) throws ParseException {
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat(timeFormat);
            Date date;
            try {
                //时间戳转时间
                long timeLong = Long.parseLong(timeOrTimestamp);
                date = new Date(timeLong);
                return simpleDateFormat.format(date);
            } catch (Exception e) {
                try {
                    //时间转时间戳
                    date = simpleDateFormat.parse(timeOrTimestamp);
                    assert date != null;
                    long ts = date.getTime();
                    return String.valueOf(ts);
                } catch (Exception e1) {
                    //如果是因为时间格式有问题，那就返回当前时间并提示
                    err("The date format is wrong");
                    return dateToStamp(GT_Date.getDateTime_CH(), "yyyy-MM-dd HH:mm:ss");
                }
            }
        }

        private Lunar lunar = null;

        /**
         * @return the lunar
         */
        public Lunar getLunar() {
            return lunar;
        }

        /**
         * @param lunar the lunar to set
         */
        public void setLunar(Lunar lunar) {
            this.lunar = lunar;
        }

        /**
         * 获取中国日期
         *
         * @return
         */
        public static String getDateTime_CH() {
            SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");//设置日期格式
            return df.format(new Date());   //获取当时间
        }

        /**
         * 获取美国日期
         *
         * @return
         */
        public static String getDateTime_US() {
            SimpleDateFormat df = new SimpleDateFormat("ss:mm:HH dd-MM-yyyy");//设置日期格式
            return df.format(new Date());   //获取当时间
        }

        /**
         * 日期格式
         *
         * @param dateTimeFormat
         * @return
         */
        public static String getDateTime(String dateTimeFormat) {
            SimpleDateFormat df = new SimpleDateFormat(dateTimeFormat);//设置日期格式
            return df.format(new Date());   //获取当时间
        }

        /**
         * 初始化时间 基础功能
         */
        public GT_Date() {
            SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");//设置日期格式
            time = df.format(new Date());   //获取当时间
            times = time.split(" ");        //分割时间 年月日  时分秒 数组
            ymd = times[0].split("-");    //分割年月日 数组
            hms = times[1].split(":");    //分割时分秒 数组
        }

        /**
         * 初始化时间 高级功能
         */
        public GT_Date(long timestamp) {

            //初始化基本的时间
            SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");//设置日期格式
            time = df.format(new Date());   //获取当时间
            times = time.split(" ");        //分割时间 年月日  时分秒 数组
            ymd = times[0].split("-");    //分割年月日 数组
            hms = times[1].split(":");    //分割时分秒 数组

            //初始化高级功能
            lunar = new Lunar(timestamp);

        }

        /**
         * 将多少秒转换成 时分秒 如：100秒 = 1分钟40秒
         *
         * @param seconds 秒数
         * @param units   动态设置 时分秒 单位
         * @return
         */
        public static String secondsToTime(int seconds) {
            int h = seconds / 3600; // 小时
            int m = (seconds % 3600) / 60; // 分钟
            int s = (seconds % 3600) % 60; // 秒
            if (h > 0) {
                if (s == 0) return h + "小时" + m + "分钟";
                return h + "小时" + m + "分钟" + s + "秒";
            }
            if (m > 0) {
                if (s == 0) return m + "分钟";
                return m + "分钟" + s + "秒";
            }
            return s + "秒";
        }

        public static String secondsToTime2(int seconds, String... units) {
            int h = seconds / 3600; // 小时
            int m = (seconds % 3600) / 60; // 分钟
            int s = (seconds % 3600) % 60; // 秒

            String XS = "小时";
            String FZ = "分钟";
            String M = "秒";

            if (units != null && units.length > 0) {
                switch (units.length) {
                    case 1: {
                        M = units[0];
                        break;
                    }
                    case 2: {
                        M = units[0];
                        FZ = units[1];
                        break;
                    }
                    case 3: {
                        M = units[0];
                        FZ = units[1];
                        XS = units[2];
                        break;
                    }
                }
            }

            if (h > 0) {
                return h + XS + m + FZ + s + M;
            }
            if (m > 0) {
                return m + FZ + s + M;
            }
            return s + M;
        }

        /**
         * ***************日历工具的基础功能*******************
         */

        private static String time;        //定义返回的 时间整体字符串
        private static String[] times;     //定义分割后产生的 年月日 / 时分秒 数组
        private static String[] ymd;       //定义分割后产生的 年月日 数组
        private static String[] hms;       //定义分割后产生的 时分秒 数组

        /**
         * 获取当前星期
         *
         * @return
         */
        public static String getWeekOfDateString() {
            String[] weekDays = {"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"};
            Calendar cal = Calendar.getInstance();
            cal.setTime(new Date());
            int w = cal.get(Calendar.DAY_OF_WEEK) - 1;
            if (w < 0)
                w = 0;
            return weekDays[w];
        }

        /**
         * 获取当前星期
         *
         * @return
         */
        public static int getWeekOfDateInt() {
            int[] weekDays = {0, 1, 2, 3, 4, 5, 6};
            Calendar cal = Calendar.getInstance();
            cal.setTime(new Date());
            int w = cal.get(Calendar.DAY_OF_WEEK) - 1;
            if (w < 0)
                w = 0;
            return weekDays[w];
        }

        /**
         * 获取当前 年月日
         *
         * @return
         */
        public String getYearMonthDay() {
            return times[0];
        }

        /**
         * 获取年
         *
         * @return
         */
        public String getYear() {
            return ymd[0];
        }

        /**
         * 获取月
         *
         * @return
         */
        public String getMonth() {
            return ymd[1];
        }

        /**
         * 获取日
         *
         * @return
         */
        public String getDay() {
            return ymd[2];
        }

        /**
         * /获取当前 时分秒
         *
         * @return
         */
        public String getHourMinuteSecond() {
            return times[1];
        }

        /**
         * 获取时
         *
         * @return
         */
        public String getHour() {
            return hms[0];
        }

        /**
         * 获取分
         *
         * @return
         */
        public String getMinute() {
            return hms[1];
        }

        /**
         * 获取秒
         *
         * @return
         */
        public String getSecond() {
            return hms[2];
        }

        /**
         * 时间戳转 时间 YYYY-MM-DD 00:00:00
         *
         * @param dataTime "yyyy-MM-dd HH:mm:ss"
         * @return
         */
        public static String toTime(String dataTime, String timeFormat) {
            SimpleDateFormat formatter = new SimpleDateFormat(timeFormat, Locale.getDefault());
            long myTime = Long.parseLong(dataTime);
            long lt = new Long(myTime * 1000);//返回来的时间戳1476929029是毫秒，这里要乘1000才是正确的北京时间
            Date date = new Date(lt);
            String time = formatter.format(date);
            return time;
        }

        /**
         * 时间转时间戳
         *
         * @param time 如：2021-07-23 16:36:12  格式必须为这样，单数也要前加 0 可以这样：2021-07-23 00:00:00
         * @return 返回时间戳
         */
        public static long toTimestamp(String time) {
            long times = 0;
            try {
                times = (int) ((Timestamp.valueOf(time).getTime()) / 1000);
            } catch (Exception e) {
                e.printStackTrace();
            }
            return times;
        }

        /**
         * 时分秒
         *
         * @param dataTime
         * @return
         */
        public static String toTime_hms(String dataTime) {
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault());
            long myTime = Long.parseLong(dataTime);
            long lt = new Long(myTime * 1000);//返回来的时间戳1476929029是毫秒，这里要乘1000才是正确的北京时间
            Date date = new Date(lt);
            String time = formatter.format(date);
            time = time.substring(time.length() - 8, time.length());
            return time;
        }

        /**
         * 离现在过去几小时
         *
         * @param dataTime
         * @return
         */
        public String toPastTime(String dataTime) {
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault());
            //算 时、分、秒
            long myTime = Long.parseLong(dataTime);
            long lt = new Long(myTime * 1000);//返回来的时间戳1476929029是毫秒，这里要乘1000才是正确的北京时间
            Date date = new Date(lt);
            String time = formatter.format(date);
            time = time.substring(time.length() - 8, time.length());
            time = time.substring(0, 2);
            String hour = getHour();
            int timeInt = Integer.parseInt(time);
            int hourInt = Integer.parseInt(hour);
            int showTime;
            if (hourInt < timeInt) {
                timeInt = 24 - timeInt; //一天减去 当时发送的时间
                showTime = hourInt + timeInt;
            } else {
                showTime = hourInt - timeInt;
            }
            //判断当前过去的时间是否大于0 最小为 1小时前
            if (showTime > 0) {
                time = showTime + "小时前";
            } else {
                //否则 进行分钟判断
                time = formatter.format(date);
                time = time.substring(time.length() - 8, time.length());
                time = time.substring(3, 5);

                timeInt = Integer.parseInt(time);
                hourInt = Integer.parseInt(getMinute());
                showTime = hourInt - timeInt;

                if (showTime > 0) {
                    time = showTime + "分钟前";
                } else {
                    time = "刚刚";
                }
            }
            return time;
        }

        /**
         * 离现在有多少 年 月 日 ，时 分 秒
         * 仅仅支持 这种格式的时间(yyyy-MM-dd HH:mm:ss)或者时间戳
         *
         * @param time2
         * @return
         */
        public static String toPastTimeX(String time2) {
            try {
                if (time2 == null) return "";
                if (!time2.contains("-") && !time2.contains(":")) {
                    time2 = toTime(time2, "yyyy-MM-dd HH:mm:ss");
                }
                SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault());
                String time = formatter.format(new Date());

                String[] split1 = time.split(" ");// 当前的时间
                if (split1.length != 2)
                    return "";
                String nyr = split1[0];// 年月日
                String sfm = split1[1];// 时分秒

                String[] split2 = time2.split(" ");// 传入的时间
                if (split2.length != 2)
                    return "";
                String nyr2 = split2[0];// 年月日
                String sfm2 = split2[1];// 时分秒

                String[] nyr_array1 = nyr.split("-");
                String[] nyr_array2 = nyr2.split("-");
                if (nyr_array1.length != 3)
                    return "";
                if (nyr_array1.length != 3)
                    return "";

                int n1 = Integer.parseInt(nyr_array1[0]);
                int y1 = Integer.parseInt(nyr_array1[1]);
                int r1 = Integer.parseInt(nyr_array1[2]);

                int n2 = Integer.parseInt(nyr_array2[0]);
                int y2 = Integer.parseInt(nyr_array2[1]);
                int r2 = Integer.parseInt(nyr_array2[2]);

                String[] sfm_Array1 = sfm.split(":");
                String[] sfm_Array2 = sfm2.split(":");
                if (sfm_Array1.length != 3)
                    return "";
                if (sfm_Array2.length != 3)
                    return "";

                int s1 = Integer.parseInt(sfm_Array1[0]);
                int f1 = Integer.parseInt(sfm_Array1[1]);
                int m1 = Integer.parseInt(sfm_Array1[2]);

                int s2 = Integer.parseInt(sfm_Array2[0]);
                int f2 = Integer.parseInt(sfm_Array2[1]);
                int m2 = Integer.parseInt(sfm_Array2[2]);

                int year = 0;
                int month = 0;
                int day = 0;

                int hour = 0;
                int minute = 0;
                int second = 0;

                year = n1 - n2;
                month = y1 - y2;
                day = r1 - r2;

                hour = s1 - s2;
                minute = f1 - f2;
                second = m1 - m2;

                time = null;
                if (year > 0) {
                    time = year + "年前";
                } else if (year < 0) {
                    time = year + "年后";
                }

                if (time == null) {
                    if (month > 0) {
                        time = month + "月前";
                    } else if (month < 0) {
                        time = month + "月后";
                    }
                }

                if (time == null) {
                    if (day > 0) {
                        time = day + "天前";
                    } else if (day < 0) {
                        time = day + "天后";
                    }
                }

                if (time == null) {
                    long timestamp = toTimestamp(time2);
                    time = toPastTime(String.valueOf(timestamp), String.valueOf(s1), String.valueOf(f1), m1, m2);
                }
                return time.replaceAll("-", "");
            } catch (Exception e) {

            }
            return time2;
        }


        /**
         * 时间戳转 时分秒
         *
         * @param time
         * @return
         */
        public static String secondsToHMS(int time) {
            if (time <= 0) return "00:00";
            else if (time < 60) return String.format(Locale.getDefault(), "00:%02d", time % 60);
            else if (time < 3600)
                return String.format(Locale.getDefault(), "%02d:%02d", time / 60, time % 60);
            else
                return String.format(Locale.getDefault(), "%02d:%02d:%02d", time / 3600, time % 3600 / 60, time % 60);
        }


        //将长度转换为时间
        public static String stringForTime(int timeMs) {
            StringBuilder mFormatBuilder = new StringBuilder();
            java.util.Formatter mFormatter = new java.util.Formatter(mFormatBuilder, Locale.getDefault());

            int totalSeconds = timeMs / 1000;

            int seconds = totalSeconds % 60;
            int minutes = (totalSeconds / 60) % 60;
            int hours = totalSeconds / 3600;

            mFormatBuilder.setLength(0);
            if (hours > 0) {
                return mFormatter.format("%d:%02d:%02d", hours, minutes, seconds).toString();
            } else {
                return mFormatter.format("%02d:%02d", minutes, seconds).toString();
            }
        }


        /**
         * 获取时间戳
         */
        public static long getTimestamp() {
            return System.currentTimeMillis();
        }


        /**
         * 获取最大的时间 可以时间与 时间戳，时间格式仅仅支持 yyyy-MM-dd HH:mm:ss
         *
         * @param time
         * @return
         */
        public static String getMaxTime(String timeStr1, String timeStr2) {
            long time1 = 0;
            long time2 = 0;
            try {
                if (timeStr1.contains("-") && timeStr1.contains(":")) {//时间格式
                    time1 = toTimestamp(timeStr1);
                } else {
                    time1 = Long.parseLong(timeStr1);
                }
                if (timeStr2.contains("-") && timeStr2.contains(":")) {//时间格式
                    time2 = toTimestamp(timeStr2);
                } else {
                    time2 = Long.parseLong(timeStr2);
                }
            } catch (Exception e) {

            }
            return String.valueOf((time1 > time2 ? timeStr1 : timeStr2));
        }

        /**
         * 离现在有多少 时分秒
         *
         * @param dataTime
         * @param hour2
         * @param minute2
         * @param m1
         * @param m2
         * @return
         */
        private static String toPastTime(String dataTime, String hour2, String minute2, int m1, int m2) {
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault());
            // 算 时、分、秒
            long myTime = Long.parseLong(dataTime);
            long lt = new Long(myTime * 1000);// 返回来的时间戳1476929029是毫秒，这里要乘1000才是正确的北京时间
            Date date = new Date(lt);
            String time = formatter.format(date);
            time = time.substring(time.length() - 8, time.length());
            time = time.substring(0, 2);
            String hour = hour2;
            int timeInt = Integer.parseInt(time);
            int hourInt = Integer.parseInt(hour);
            int showTime;

            if (hourInt < timeInt) {
                timeInt = 24 - timeInt; // 一天减去 当时发送的时间
                showTime = hourInt + timeInt;
            } else {
                showTime = hourInt - timeInt;
            }

            // 判断当前过去的时间是否大于0 最小为 1小时前
            if (showTime > 0) {
                time = showTime + "小时前";
            } else {
                // 否则 进行分钟判断
                time = formatter.format(date);
                time = time.substring(time.length() - 8, time.length());
                time = time.substring(3, 5);

                timeInt = Integer.parseInt(time);
                hourInt = Integer.parseInt(minute2);
                showTime = hourInt - timeInt;

                if (showTime > 0) {
                    time = showTime + "分钟前";
                } else {
                    if (showTime == 0) {
                        int m = m1 - m2;
                        if (m == 0) {
                            time = "刚刚";
                        } else if (m > 0) {
                            time = m + "秒前";
                        } else if (m < 0) {
                            time = m + "秒后";
                        }

                    } else if (showTime > 0) {
                        time = showTime + "分钟前";
                    } else if (showTime < 0) {
                        time = Math.abs(showTime) + "分钟后";
                    }

                }
            }

            // 算天数，过去 与 未来

            // 2022-07-04 12:31:21
            // 2022-07-04 12:31:21

            return time;
        }


        /**
         * 时间戳转 年月日
         *
         * @param dataTime
         * @return
         */
        public static String toYearMonthDay(String dataTime) {
            SimpleDateFormat formatter = new SimpleDateFormat("yy-MM-dd", Locale.getDefault());
            long myTime = Long.parseLong(dataTime);
            long lt = new Long(myTime * 1000);//返回来的时间戳1476929029是毫秒，这里要乘1000才是正确的北京时间
            Date date = new Date(lt);
            String time = formatter.format(date);
            return time;
        }

        /**
         * 时间戳转时间
         *
         * @param dataTime
         * @return
         */
        public static String stampToDate(String s, String timeFormat) throws ParseException {
            String res;
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat(timeFormat);
            long lt = new Long(s);
            Date date = new Date(lt);
            res = simpleDateFormat.format(date);
            return res;
        }

        public static String dateToStamp(String s, String timeFormat) throws ParseException {
            String res;
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat(timeFormat);
            Date date = simpleDateFormat.parse(s);
            long ts = date.getTime();
            res = String.valueOf(ts);
            return res;
        }

        /**
         * ***********************日历的高级功能***********************
         */

        public static class Lunar {

            /**
             * 获得某天前个节气日期差
             *
             * @return 日期数
             */
            public static long getbeforesolarTerm(int year, Date date) {
                List<Date> jieqi = Alljieqi(year);
                int[] jieqibeforeafter = getnearsolarTerm(year, date);
                return MyDate.DateDays(date, jieqi.get(jieqibeforeafter[0]));
            }

            /**
             * 获得某天后个节气日期差
             *
             * @return 日期数
             */
            public static long getaftersolarTerm(int year, Date date) {
                List<Date> jieqi = Alljieqi(year);
                int[] jieqibeforeafter = getnearsolarTerm(year, date);
                return MyDate.DateDays(date, jieqi.get(jieqibeforeafter[1]));

            }

            public static List<Date> Alljieqi(int year) {

                List<Date> jieqi = new ArrayList<Date>();
                Date[] temp;
                temp = jieqilist(year - 1);
                jieqi.addAll(Arrays.asList(temp));
                temp = jieqilist(year);
                jieqi.addAll(Arrays.asList(temp));
                temp = jieqilist(year + 1);
                jieqi.addAll(Arrays.asList(temp));
                return jieqi;
            }


            /**
             * 获得某天前后两个节气序号
             *
             * @return
             */
            public static int[] getnearsolarTerm(int year, Date date) {
                List<Date> jieqi = Alljieqi(year);

                int[] returnValue = new int[2];
                for (int i = 0; i < jieqi.size(); i++) {
                    if (date.getTime() > jieqi.get(i).getTime()) {
                        continue;
                    }
                    if (i % 2 == 0) {//只管气
                        returnValue[0] = i - 2;
                        returnValue[1] = i;
                    } else {
                        returnValue[0] = i - 1;
                        returnValue[1] = i + 1;

                    }
                    break;
                }

                return returnValue;
            }


            /**
             * 获得某年中所有节气Date
             *
             * @return
             */
            public static Date[] jieqilist(int year) {
                Date[] returnvalue = new Date[solarTerm.length];

                for (int i = 0; i < solarTerm.length; i++) {

                    Date t = getSolarTermCalendar(year, i);
                    returnvalue[i] = t;

                }
                return returnvalue;
            }


            private final static int[] lunarInfo = {
                    0x4bd8, 0x4ae0, 0xa570, 0x54d5, 0xd260, 0xd950, 0x5554, 0x56af,
                    0x9ad0, 0x55d2, 0x4ae0, 0xa5b6, 0xa4d0, 0xd250, 0xd295, 0xb54f,
                    0xd6a0, 0xada2, 0x95b0, 0x4977, 0x497f, 0xa4b0, 0xb4b5, 0x6a50,
                    0x6d40, 0xab54, 0x2b6f, 0x9570, 0x52f2, 0x4970, 0x6566, 0xd4a0,
                    0xea50, 0x6a95, 0x5adf, 0x2b60, 0x86e3, 0x92ef, 0xc8d7, 0xc95f,
                    0xd4a0, 0xd8a6, 0xb55f, 0x56a0, 0xa5b4, 0x25df, 0x92d0, 0xd2b2,
                    0xa950, 0xb557, 0x6ca0, 0xb550, 0x5355, 0x4daf, 0xa5b0, 0x4573,
                    0x52bf, 0xa9a8, 0xe950, 0x6aa0, 0xaea6, 0xab50, 0x4b60, 0xaae4,
                    0xa570, 0x5260, 0xf263, 0xd950, 0x5b57, 0x56a0, 0x96d0, 0x4dd5,
                    0x4ad0, 0xa4d0, 0xd4d4, 0xd250, 0xd558, 0xb540, 0xb6a0, 0x95a6,
                    0x95bf, 0x49b0, 0xa974, 0xa4b0, 0xb27a, 0x6a50, 0x6d40, 0xaf46,
                    0xab60, 0x9570, 0x4af5, 0x4970, 0x64b0, 0x74a3, 0xea50, 0x6b58,
                    0x5ac0, 0xab60, 0x96d5, 0x92e0, 0xc960, 0xd954, 0xd4a0, 0xda50,
                    0x7552, 0x56a0, 0xabb7, 0x25d0, 0x92d0, 0xcab5, 0xa950, 0xb4a0,
                    0xbaa4, 0xad50, 0x55d9, 0x4ba0, 0xa5b0, 0x5176, 0x52bf, 0xa930,
                    0x7954, 0x6aa0, 0xad50, 0x5b52, 0x4b60, 0xa6e6, 0xa4e0, 0xd260,
                    0xea65, 0xd530, 0x5aa0, 0x76a3, 0x96d0, 0x4afb, 0x4ad0, 0xa4d0,
                    0xd0b6, 0xd25f, 0xd520, 0xdd45, 0xb5a0, 0x56d0, 0x55b2, 0x49b0,
                    0xa577, 0xa4b0, 0xaa50, 0xb255, 0x6d2f, 0xada0, 0x4b63, 0x937f,
                    0x49f8, 0x4970, 0x64b0, 0x68a6, 0xea5f, 0x6b20, 0xa6c4, 0xaaef,
                    0x92e0, 0xd2e3, 0xc960, 0xd557, 0xd4a0, 0xda50, 0x5d55, 0x56a0,
                    0xa6d0, 0x55d4, 0x52d0, 0xa9b8, 0xa950, 0xb4a0, 0xb6a6, 0xad50,
                    0x55a0, 0xaba4, 0xa5b0, 0x52b0, 0xb273, 0x6930, 0x7337, 0x6aa0,
                    0xad50, 0x4b55, 0x4b6f, 0xa570, 0x54e4, 0xd260, 0xe968, 0xd520,
                    0xdaa0, 0x6aa6, 0x56df, 0x4ae0, 0xa9d4, 0xa4d0, 0xd150, 0xf252, 0xd520
            };


            private final static int[] solarTermInfo = {
                    0, 21208, 42467, 63836, 85337, 107014, 128867, 150921,
                    173149, 195551, 218072, 240693, 263343, 285989, 308563, 331033,
                    353350, 375494, 397447, 419210, 440795, 462224, 483532, 504758
            };
            public final static String[] Tianan = {
                    "甲", "乙", "丙", "丁", "戊", "己", "庚", "辛", "壬", "癸"
            };
            public final static String[] Deqi = {
                    "子", "丑", "寅", "卯", "辰", "巳", "午", "未", "申", "酉", "戌", "亥"
            };
            public final static String[] Animals = {
                    "鼠", "牛", "虎", "兔", "龙", "蛇", "马", "羊", "猴", "鸡", "狗", "猪"
            };
            public final static String[] solarTerm = {
                    "小寒", "大寒", "立春", "雨水", "惊蛰", "春分",
                    "清明", "谷雨", "立夏", "小满", "芒种", "夏至",
                    "小暑", "大暑", "立秋", "处暑", "白露", "秋分",
                    "寒露", "霜降", "立冬", "小雪", "大雪", "冬至"
            };
            public final static String[] lunarString1 = {
                    "零", "一", "二", "三", "四", "五", "六", "七", "八", "九"
            };
            public final static String[] lunarString2 = {
                    "初", "十", "廿", "卅", "正", "腊", "冬", "闰"
            };
            /**
             * 国历节日 *表示放假日
             */
            private final static String[] sFtv = {
                    "0101*元旦", "0214 情人节", "0308 妇女节", "0312 植树节",
                    "0315 消费者权益日", "0401 愚人节", "0501*劳动节", "0504 青年节",
                    "0509 郝维节", "0512 护士节", "0601 儿童节", "0701 建党节 香港回归纪念",
                    "0801 建军节", "0808 父亲节", "0816 燕衔泥节", "0909 毛泽东逝世纪念",
                    "0910 教师节", "0928 孔子诞辰", "1001*国庆节", "1006 老人节",
                    "1024 联合国日", "1111 光棍节", "1112 孙中山诞辰纪念", "1220 澳门回归纪念",
                    "1225 圣诞节", "1226 毛泽东诞辰纪念"
            };
            /**
             * 农历节日 *表示放假日
             */
            private final static String[] lFtv = {
                    "0101*春节、弥勒佛诞", "0106 定光佛诞", "0115 元宵节",
                    "0208 释迦牟尼佛出家", "0215 释迦牟尼佛涅槃", "0209 海空上师诞",
                    "0219 观世音菩萨诞", "0221 普贤菩萨诞", "0316 准提菩萨诞",
                    "0404 文殊菩萨诞", "0408 释迦牟尼佛诞", "0415 佛吉祥日——释迦牟尼佛诞生、成道、涅槃三期同一庆(即南传佛教国家的卫塞节)",
                    "0505 端午节", "0513 伽蓝菩萨诞", "0603 护法韦驮尊天菩萨诞",
                    "0619 观世音菩萨成道——此日放生、念佛，功德殊胜",
                    "0707 七夕情人节", "0713 大势至菩萨诞", "0715 中元节",
                    "0724 龙树菩萨诞", "0730 地藏菩萨诞", "0815 中秋节",
                    "0822 燃灯佛诞", "0909 重阳节", "0919 观世音菩萨出家纪念日",
                    "0930 药师琉璃光如来诞", "1005 达摩祖师诞", "1107 阿弥陀佛诞",
                    "1208 释迦如来成道日，腊八节", "1224 小年",
                    "1229 华严菩萨诞", "0100*除夕"
            };
            /**
             * 某月的第几个星期几
             */
            private static String[] wFtv = {
                    "0520 母亲节", "0716 合作节", "0730 被奴役国家周"
            };

            private static int toInt(String str) {
                try {
                    return Integer.parseInt(str);
                } catch (Exception e) {
                    return -1;
                }
            }

            private final static Pattern sFreg = Pattern.compile("^(\\d{2})(\\d{2})([\\s\\*])(.+)$");
            private final static Pattern wFreg = Pattern.compile("^(\\d{2})(\\d)(\\d)([\\s\\*])(.+)$");

            private synchronized void findFestival() {
                System.out.println("进入节日获取");
                int sM = this.getSolarMonth();
                int sD = this.getSolarDay();
                int lM = this.getLunarMonth();
                int lD = this.getLunarDay();
                int sy = this.getSolarYear();
                Matcher m;
                for (int i = 0; i < Lunar.sFtv.length; i++) {
                    m = Lunar.sFreg.matcher(Lunar.sFtv[i]);

                    if (m.find()) {
                        if (sM == Lunar.toInt(m.group(1)) && sD == Lunar.toInt(m.group(2))) {
                            this.isSFestival = true;
                            this.sFestivalName = m.group(4);
                            if ("*".equals(m.group(3))) {
                                this.isHoliday = true;
                            }
                            break;
                        }
                    }
                }
                for (int i = 0; i < Lunar.lFtv.length; i++) {
                    m = Lunar.sFreg.matcher(Lunar.lFtv[i]);
                    if (m.find()) {
                        if (lM == Lunar.toInt(m.group(1)) && lD == Lunar.toInt(m.group(2))) {
                            this.isLFestival = true;
                            this.lFestivalName = m.group(4);
                            if ("*".equals(m.group(3))) {
                                this.isHoliday = true;
                            }
                            break;
                        }
                    }
                }
                // 月周节日
                int w, d;
                for (int i = 0; i < Lunar.wFtv.length; i++) {
                    m = Lunar.wFreg.matcher(Lunar.wFtv[i]);
                    if (m.find()) {
                        if (this.getSolarMonth() == Lunar.toInt(m.group(1))) {
                            w = Lunar.toInt(m.group(2));
                            d = Lunar.toInt(m.group(3));
                            if (this.solar.get(Calendar.WEEK_OF_MONTH) == w
                                    && this.solar.get(Calendar.DAY_OF_WEEK) == d) {
                                this.isSFestival = true;
                                this.sFestivalName += "|" + m.group(5);
                                if ("*".equals(m.group(4))) {
                                    this.isHoliday = true;
                                }
                            }
                        }
                    }
                }
                if (sy > 1874 && sy < 1909) {
                    this.description = "光绪" + (((sy - 1874) == 1) ? "元" : "" + (sy - 1874));
                }
                if (sy > 1908 && sy < 1912) {
                    this.description = "宣统" + (((sy - 1908) == 1) ? "元" : String.valueOf(sy - 1908));
                }
                if (sy > 1911 && sy < 1950) {
                    this.description = "民国" + (((sy - 1911) == 1) ? "元" : String.valueOf(sy - 1911));
                }
                if (sy > 1949) {
                    this.description = "共和国" + (((sy - 1949) == 1) ? "元" : String.valueOf(sy - 1949));
                }
                this.description += "年";
                this.sFestivalName = this.sFestivalName.replaceFirst("^\\|", "");
                this.isFinded = true;
            }

            private boolean isFinded = false;
            private boolean isSFestival = false;
            private boolean isLFestival = false;
            private String sFestivalName = "";
            private String lFestivalName = "";
            private String description = "";
            private boolean isHoliday = false;

            /**
             * 返回农历年闰月月份
             *
             * @param lunarYear 指定农历年份(数字)
             * @return 该农历年闰月的月份(数字, 没闰返回0)
             */
            private static int getLunarLeapMonth(int lunarYear) {
                // 数据表中,每个农历年用16bit来表示,
                // 前12bit分别表示12个月份的大小月,最后4bit表示闰月
                // 若4bit全为1或全为0,表示没闰, 否则4bit的值为闰月月份
                int leapMonth = Lunar.lunarInfo[lunarYear - 1900] & 0xf;
                leapMonth = (leapMonth == 0xf ? 0 : leapMonth);
                return leapMonth;
            }


            /**
             * 返回农历年闰月的天数
             *
             * @param lunarYear 指定农历年份(数字)
             * @return 该农历年闰月的天数(数字)
             */
            private static int getLunarLeapDays(int lunarYear) {
                // 下一年最后4bit为1111,返回30(大月)
                // 下一年最后4bit不为1111,返回29(小月)
                // 若该年没有闰月,返回0
                return Lunar.getLunarLeapMonth(lunarYear) > 0 ? ((Lunar.lunarInfo[lunarYear - 1899] & 0xf) == 0xf ? 30
                        : 29)
                        : 0;
            }

            /**
             * 返回农历年的总天数
             *
             * @param lunarYear 指定农历年份(数字)
             * @return 该农历年的总天数(数字)
             */
            private static int getLunarYearDays(int lunarYear) {
                // 按小月计算,农历年最少有12 * 29 = 348天
                int daysInLunarYear = 348;
                // 数据表中,每个农历年用16bit来表示,
                // 前12bit分别表示12个月份的大小月,最后4bit表示闰月
                // 每个大月累加一天
                for (int i = 0x8000; i > 0x8; i >>= 1) {
                    daysInLunarYear += ((Lunar.lunarInfo[lunarYear - 1900] & i) != 0) ? 1
                            : 0;
                }
                // 加上闰月天数
                daysInLunarYear += Lunar.getLunarLeapDays(lunarYear);

                return daysInLunarYear;
            }

            /**
             * 返回农历年正常月份的总天数
             *
             * @param lunarYear  指定农历年份(数字)
             * @param lunarMonth 指定农历月份(数字)
             * @return 该农历年闰月的月份(数字, 没闰返回0)
             */
            private static int getLunarMonthDays(int lunarYear, int lunarMonth) {
                // 数据表中,每个农历年用16bit来表示,
                // 前12bit分别表示12个月份的大小月,最后4bit表示闰月
                int daysInLunarMonth = ((Lunar.lunarInfo[lunarYear - 1900] & (0x10000 >> lunarMonth)) != 0) ? 30
                        : 29;
                return daysInLunarMonth;
            }


            /**
             * 取 Date 对象中用全球标准时间 (UTC) 表示的日期
             *
             * @param date 指定日期
             * @return UTC 全球标准时间 (UTC) 表示的日期
             */
            public static synchronized int getUTCDay(Date date) {
                Lunar.makeUTCCalendar();
                synchronized (utcCal) {
                    utcCal.clear();
                    utcCal.setTimeInMillis(date.getTime());
                    return utcCal.get(Calendar.DAY_OF_MONTH);
                }
            }

            private static GregorianCalendar utcCal = null;

            private static synchronized void makeUTCCalendar() {
                if (Lunar.utcCal == null) {
                    Lunar.utcCal = new GregorianCalendar(TimeZone.getTimeZone("UTC"));
                }
            }

            /**
             * 返回全球标准时间 (UTC) (或 GMT) 的 1970 年 1 月 1 日到所指定日期之间所间隔的毫秒数。
             *
             * @param y   指定年份
             * @param m   指定月份
             * @param d   指定日期
             * @param h   指定小时
             * @param min 指定分钟
             * @param sec 指定秒数
             * @return 全球标准时间 (UTC) (或 GMT) 的 1970 年 1 月 1 日到所指定日期之间所间隔的毫秒数
             */
            public static synchronized long UTC(int y, int m, int d, int h, int min, int sec) {
                Lunar.makeUTCCalendar();
                synchronized (utcCal) {
                    utcCal.clear();
                    utcCal.set(y, m, d, h, min, sec);
                    return utcCal.getTimeInMillis();
                }
            }

            /**
             * 返回公历年节气的日期
             *
             * @param solarYear 指定公历年份(数字)
             * @param index     指定节气序号(数字,0从小寒算起)
             * @return 日期(数字, 所在月份的第几天)
             */
            private static int getSolarTermDay(int solarYear, int index) {

                return Lunar.getUTCDay(getSolarTermCalendar(solarYear, index));
            }

            /**
             * 返回公历年节气的日期
             *
             * @param solarYear 指定公历年份(数字)
             * @param index     指定节气序号(数字,0从小寒算起)
             * @return 日期(数字, 所在月份的第几天)
             */
            public static Date getSolarTermCalendar(int solarYear, int index) {
                long l = (long) 31556925974.7 * (solarYear - 1900)
                        + solarTermInfo[index] * 60000L;
                l = l + Lunar.UTC(1900, 0, 6, 2, 5, 0);
                return new Date(l);
            }

            private Calendar solar;
            private int lunarYear;
            private int lunarMonth;
            private int lunarDay;
            private boolean isLeap;
            private boolean isLeapYear;
            private int solarYear;
            private int solarMonth;
            private int solarDay;
            private int cyclicalYear = 0;
            private int cyclicalMonth = 0;
            private int cyclicalDay = 0;
            private int maxDayInMonth = 29;

            /**
             * 通过 Date 对象构建农历信息
             *
             * @param date 指定日期对象
             */
            public Lunar(Date date) {
                if (date == null) {
                    date = new Date();
                }
                this.init(date.getTime());
            }

            /**
             * 通过 TimeInMillis 构建农历信息
             *
             * @param TimeInMillis
             */
            public Lunar(long TimeInMillis) {
                this.init(TimeInMillis);
            }

            private void init(long TimeInMillis) {
                this.solar = Calendar.getInstance();
                this.solar.setTimeInMillis(TimeInMillis);
                Calendar baseDate = new GregorianCalendar(1900, 0, 31);
                long offset = (TimeInMillis - baseDate.getTimeInMillis()) / 86400000;
                // 按农历年递减每年的农历天数，确定农历年份
                this.lunarYear = 1900;
                int daysInLunarYear = Lunar.getLunarYearDays(this.lunarYear);
                while (this.lunarYear < 2100 && offset >= daysInLunarYear) {
                    offset -= daysInLunarYear;
                    daysInLunarYear = Lunar.getLunarYearDays(++this.lunarYear);
                }
                // 农历年数字

                // 按农历月递减每月的农历天数，确定农历月份
                int lunarMonth = 1;
                // 所在农历年闰哪个月,若没有返回0
                int leapMonth = Lunar.getLunarLeapMonth(this.lunarYear);
                // 是否闰年
                this.isLeapYear = leapMonth > 0;
                // 闰月是否递减
                boolean leapDec = false;
                boolean isLeap = false;
                int daysInLunarMonth = 0;
                while (lunarMonth < 13 && offset > 0) {
                    if (isLeap && leapDec) { // 如果是闰年,并且是闰月
                        // 所在农历年闰月的天数
                        daysInLunarMonth = Lunar.getLunarLeapDays(this.lunarYear);
                        leapDec = false;
                    } else {
                        // 所在农历年指定月的天数
                        daysInLunarMonth = Lunar.getLunarMonthDays(this.lunarYear, lunarMonth);
                    }
                    if (offset < daysInLunarMonth) {
                        break;
                    }
                    offset -= daysInLunarMonth;

                    if (leapMonth == lunarMonth && isLeap == false) {
                        // 下个月是闰月
                        leapDec = true;
                        isLeap = true;
                    } else {
                        // 月份递增
                        lunarMonth++;
                    }
                }
                this.maxDayInMonth = daysInLunarMonth;
                // 农历月数字
                this.lunarMonth = lunarMonth;
                // 是否闰月
                this.isLeap = (lunarMonth == leapMonth && isLeap);
                // 农历日数字
                this.lunarDay = (int) offset + 1;
                // 取得干支历
                this.getCyclicalData();
            }

            /**
             * 取干支历 不是历年，历月干支，而是中国的从立春节气开始的节月，是中国的太阳十二宫，阳历的。
             */
            private void getCyclicalData() {
                this.solarYear = this.solar.get(Calendar.YEAR);
                this.solarMonth = this.solar.get(Calendar.MONTH);
                this.solarDay = this.solar.get(Calendar.DAY_OF_MONTH);
                // 干支历
                int cyclicalYear = 0;
                int cyclicalMonth = 0;
                int cyclicalDay = 0;

                // 干支年 1900年立春後为庚子年(60进制36)
                int term2 = Lunar.getSolarTermDay(solarYear, 2); // 立春日期
                // 依节气调整二月分的年柱, 以立春为界
                if (solarMonth < 1 || (solarMonth == 1 && solarDay < term2)) {
                    cyclicalYear = (solarYear - 1900 + 36 - 1) % 60;
                } else {
                    cyclicalYear = (solarYear - 1900 + 36) % 60;
                }

                // 干支月 1900年1月小寒以前为 丙子月(60进制12)
                int firstNode = Lunar.getSolarTermDay(solarYear, solarMonth * 2); // 传回当月「节」为几日开始
                // 依节气月柱, 以「节」为界
                if (solarDay < firstNode) {
                    cyclicalMonth = ((solarYear - 1900) * 12 + solarMonth + 12) % 60;
                } else {
                    cyclicalMonth = ((solarYear - 1900) * 12 + solarMonth + 13) % 60;
                }

                // 当月一日与 1900/1/1 相差天数
                // 1900/1/1与 1970/1/1 相差25567日, 1900/1/1 日柱为甲戌日(60进制10)
                cyclicalDay = (int) (Lunar.UTC(solarYear, solarMonth, solarDay, 0, 0, 0) / 86400000 + 25567 + 10) % 60;
                this.cyclicalYear = cyclicalYear;
                this.cyclicalMonth = cyclicalMonth;
                this.cyclicalDay = cyclicalDay;
            }

            /**
             * 取农历年生肖
             *
             * @return 农历年生肖(例 : 龙)
             */
            public String getAnimalString() {
                return Lunar.Animals[(this.lunarYear - 4) % 12];
            }

            /**
             * 返回公历日期的节气字符串
             *
             * @return 二十四节气字符串, 若不是节气日, 返回空串(例 : 冬至)
             */
            public String getTermString() {
                // 二十四节气
                String termString = "";
                if (Lunar.getSolarTermDay(solarYear, solarMonth * 2) == solarDay) {
                    termString = Lunar.solarTerm[solarMonth * 2];
                } else if (Lunar.getSolarTermDay(solarYear, solarMonth * 2 + 1) == solarDay) {
                    termString = Lunar.solarTerm[solarMonth * 2 + 1];
                }
                return termString;
            }

            /**
             * 取得干支历字符串
             *
             * @return 干支历字符串(例 : 甲子年甲子月甲子日)
             */
            public String getCyclicalDateString() {
                return this.getCyclicaYear() + "年" + this.getCyclicaMonth() + "月"
                        + this.getCyclicaDay() + "日";
            }

            /**
             * 年份天干
             *
             * @return 年份天干
             */
            public int getTiananY() {
                return Lunar.getTianan(this.cyclicalYear);
            }

            /**
             * 月份天干
             *
             * @return 月份天干
             */
            public int getTiananM() {
                return Lunar.getTianan(this.cyclicalMonth);
            }

            /**
             * 日期天干
             *
             * @return 日期天干
             */
            public int getTiananD() {
                return Lunar.getTianan(this.cyclicalDay);
            }

            /**
             * 年份地支
             *
             * @return 年分地支
             */
            public int getDeqiY() {
                return Lunar.getDeqi(this.cyclicalYear);
            }

            /**
             * 月份地支
             *
             * @return 月份地支
             */
            public int getDeqiM() {
                return Lunar.getDeqi(this.cyclicalMonth);
            }

            /**
             * 日期地支
             *
             * @return 日期地支
             */
            public int getDeqiD() {
                return Lunar.getDeqi(this.cyclicalDay);
            }

            /**
             * 取得干支年字符串
             *
             * @return 干支年字符串
             */
            public String getCyclicaYear() {
                return Lunar.getCyclicalString(this.cyclicalYear);
            }

            /**
             * 取得干支月字符串
             *
             * @return 干支月字符串
             */
            public String getCyclicaMonth() {
                return Lunar.getCyclicalString(this.cyclicalMonth);
            }

            /**
             * 取得干支日字符串
             *
             * @return 干支日字符串
             */
            public String getCyclicaDay() {
                return Lunar.getCyclicalString(this.cyclicalDay);
            }

            /**
             * 返回农历日期字符串
             *
             * @return 农历日期字符串
             */
            public String getLunarDayString() {
                return Lunar.getLunarDayString(this.lunarDay);
            }

            /**
             * 返回农历日期字符串
             *
             * @return 农历日期字符串
             */
            public String getLunarMonthString() {
                return (this.isLeap() ? "闰" : "") + Lunar.getLunarMonthString(this.lunarMonth);
            }

            /**
             * 返回农历日期字符串
             *
             * @return 农历日期字符串
             */
            public String getLunarYearString() {
                return Lunar.getLunarYearString(this.lunarYear);
            }

            /**
             * 返回农历表示字符串
             *
             * @return 农历字符串(例 : 甲子年正月初三)
             */
            public String getLunarDateString() {
                return this.getLunarYearString() + "年"
                        + this.getLunarMonthString() + "月"
                        + this.getLunarDayString() + "日";
            }

            /**
             * 农历年是否是闰月
             *
             * @return 农历年是否是闰月
             */
            public boolean isLeap() {
                return isLeap;
            }

            /**
             * 农历年是否是闰年
             *
             * @return 农历年是否是闰年
             */
            public boolean isLeapYear() {
                return isLeapYear;
            }

            /**
             * 当前农历月是否是大月
             *
             * @return 当前农历月是大月
             */
            public boolean isBigMonth() {
                return this.getMaxDayInMonth() > 29;
            }

            /**
             * 当前农历月有多少天
             *
             * @return 当前农历月有多少天
             */
            public int getMaxDayInMonth() {
                return this.maxDayInMonth;
            }

            /**
             * 农历日期
             *
             * @return 农历日期
             */
            public int getLunarDay() {
                return lunarDay;
            }

            /**
             * 农历月份
             *
             * @return 农历月份
             */
            public int getLunarMonth() {
                return lunarMonth;
            }

            /**
             * 农历年份
             *
             * @return 农历年份
             */
            public int getLunarYear() {
                return lunarYear;
            }

            /**
             * 公历日期
             *
             * @return 公历日期
             */
            public int getSolarDay() {
                return solarDay;
            }

            /**
             * 公历月份
             *
             * @return 公历月份 (不是从0算起)
             */
            public int getSolarMonth() {
                return solarMonth + 1;
            }

            /**
             * 公历年份
             *
             * @return 公历年份
             */
            public int getSolarYear() {
                return solarYear;
            }

            /**
             * 星期几
             *
             * @return 星期几(星期日为 : 1, 星期六为 : 7)
             */
            public int getDayOfWeek() {
                return this.solar.get(Calendar.DAY_OF_WEEK);
            }

            /**
             * 黑色星期五
             *
             * @return 是否黑色星期五
             */
            public boolean isBlackFriday() {
                return (this.getSolarDay() == 13 && this.solar.get(Calendar.DAY_OF_WEEK) == 6);
            }

            /**
             * 是否是今日
             *
             * @return 是否是今日
             */
            public boolean isToday() {
                Calendar clr = Calendar.getInstance();
                return clr.get(Calendar.YEAR) == this.solarYear
                        && clr.get(Calendar.MONTH) == this.solarMonth
                        && clr.get(Calendar.DAY_OF_MONTH) == this.solarDay;
            }

            /**
             * 取得公历节日名称
             *
             * @return 公历节日名称, 如果不是节日返回空串
             */
            public String getSFestivalName() {
                return this.sFestivalName;
            }

            /**
             * 取得农历节日名称
             *
             * @return 农历节日名称, 如果不是节日返回空串
             */
            public String getLFestivalName() {
                return this.lFestivalName;
            }

            /**
             * 是否是农历节日
             *
             * @return 是否是农历节日
             */
            public boolean isLFestival() {
                if (!this.isFinded) {
                    this.findFestival();
                }
                return this.isLFestival;
            }

            /**
             * 是否是公历节日
             *
             * @return 是否是公历节日
             */
            public boolean isSFestival() {
                if (!this.isFinded) {
                    this.findFestival();
                }
                return this.isSFestival;
            }

            /**
             * 是否是节日
             *
             * @return 是否是节日
             */
            public boolean isFestival() {
                return this.isSFestival() || this.isLFestival();
            }

            /**
             * 是否是放假日
             *
             * @return 是否是放假日
             */
            public boolean isHoliday() {
                if (!this.isFinded) {
                    this.findFestival();
                }
                return this.isHoliday;
            }

            /**
             * 其它日期说明
             *
             * @return 日期说明(如 : 民国2年)
             */
            public String getDescription() {
                if (!this.isFinded) {
                    this.findFestival();
                }
                return this.description;
            }

            /**
             * 干支字符串
             *
             * @param cyclicalNumber 指定干支位置(数字,0为甲子)
             * @return 干支字符串
             */
            private static String getCyclicalString(int cyclicalNumber) {
                return Lunar.Tianan[Lunar.getTianan(cyclicalNumber)] + Lunar.Deqi[Lunar.getDeqi(cyclicalNumber)];
            }

            /**
             * 获得地支
             *
             * @param cyclicalNumber
             * @return 地支 (数字)
             */
            private static int getDeqi(int cyclicalNumber) {
                return cyclicalNumber % 12;
            }

            /**
             * 获得天干
             *
             * @param cyclicalNumber
             * @return 天干 (数字)
             */
            private static int getTianan(int cyclicalNumber) {
                return cyclicalNumber % 10;
            }

            /**
             * 返回指定数字的农历年份表示字符串
             *
             * @param lunarYear 农历年份(数字,0为甲子)
             * @return 农历年份字符串
             */
            private static String getLunarYearString(int lunarYear) {
                return Lunar.getCyclicalString(lunarYear - 1900 + 36);
            }

            /**
             * 返回指定数字的农历月份表示字符串
             *
             * @param lunarMonth 农历月份(数字)
             * @return 农历月份字符串 (例:正)
             */
            private static String getLunarMonthString(int lunarMonth) {
                String lunarMonthString = "";
                if (lunarMonth == 1) {
                    lunarMonthString = Lunar.lunarString2[4];
                } else {
                    if (lunarMonth > 9) {
                        lunarMonthString += Lunar.lunarString2[1];
                    }
                    if (lunarMonth % 10 > 0) {
                        lunarMonthString += Lunar.lunarString1[lunarMonth % 10];
                    }
                }
                return lunarMonthString;
            }

            /**
             * 返回指定数字的农历日表示字符串
             *
             * @param lunarDay 农历日(数字)
             * @return 农历日字符串 (例: 廿一)
             */
            private static String getLunarDayString(int lunarDay) {
                if (lunarDay < 1 || lunarDay > 30) {
                    return "";
                }
                int i1 = lunarDay / 10;
                int i2 = lunarDay % 10;
                String c1 = Lunar.lunarString2[i1];
                String c2 = Lunar.lunarString1[i2];
                if (lunarDay < 11) {
                    c1 = Lunar.lunarString2[0];
                }
                if (i2 == 0) {
                    c2 = Lunar.lunarString2[1];
                }
                return c1 + c2;
            }


            //日期工具辅助类
            private static class MyDate {

                private static final int[] dayMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
                public int day;
                @SuppressWarnings("unused")
                public int dayCyl;
                @SuppressWarnings("unused")
                public boolean isLeap;
                @SuppressWarnings("unused")
                public int monCyl;
                public int month;
                public int year;
                @SuppressWarnings("unused")
                public int yearCyl;

                @SuppressWarnings("unused")
                public MyDate() {
                }

                @SuppressWarnings("unused")
                public MyDate(int paramInt1, int paramInt2, int paramInt3) {
                    this.year = paramInt1;
                    this.month = paramInt2;
                    this.day = paramInt3;
                }

                @SuppressWarnings("unused")
                public static int GetNumDayOfMonth(int paramInt1, int paramInt2) {
                    int i = dayMonth[(paramInt2 - 1)];
                    if ((IsBigYear(paramInt1)) && (paramInt2 == 2)) {
                        i++;
                    }
                    return i;
                }

                public static boolean IsBigYear(int paramInt) {
                    if (paramInt % 400 == 0) {
                        return true;
                    }
                    return (paramInt % 4 == 0) && (paramInt % 100 != 0);
                }

                public static long DateDays(Date aDate, Date aDate2) {
                    long myTime;
                    long myTime2;
                    long days = 0;
                    myTime = (aDate.getTime() / 1000);
                    // SimpleDateFormat formatter =new SimpleDateFormat("yyyy-MM-dd");
                    myTime2 = (aDate2.getTime() / 1000);
                    if (myTime > myTime2) {
                        days = (myTime - myTime2) / (1 * 60 * 60 * 24);
                    } else {
                        days = (myTime2 - myTime) / (1 * 60 * 60 * 24);
                    }
                    return days;

                }
                // 求2个日期的天数

                @SuppressWarnings("unused")
                public static long DateDays(String date1, String date2) throws ParseException {

                    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                    long myTime;
                    Date aDate2;
                    Date aDate;
                    long myTime2;
                    long days = 0;

                    aDate = formatter.parse(date1);// 任意日期，包括当前日期
                    myTime = (aDate.getTime() / 1000);

                    // SimpleDateFormat formatter =new SimpleDateFormat("yyyy-MM-dd");
                    aDate2 = formatter.parse(date2);// 任意日期，包括当前日期
                    myTime2 = (aDate2.getTime() / 1000);

                    if (myTime > myTime2) {
                        days = (myTime - myTime2) / (1 * 60 * 60 * 24);
                    } else {
                        days = (myTime2 - myTime) / (1 * 60 * 60 * 24);
                    }


                    return days;

                }

                // 求2个日期的天数
                public static long DateDays2(int year1, int month1, int day1, int year2,
                                             int month2, int day2) throws ParseException, ParseException {

                    String date1;
                    String date2;
                    date1 = year1 + "-" + month1 + "-" + day1;
                    date2 = year2 + "-" + month2 + "-" + day2;
                    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                    long myTime;
                    Date aDate;
                    Date aDate2;
                    long myTime2;
                    long days = 0;

                    aDate = formatter.parse(date1);// 任意日期，包括当前日期
                    myTime = (aDate.getTime() / 1000);

                    // SimpleDateFormat formatter =new SimpleDateFormat("yyyy-MM-dd");
                    aDate2 = formatter.parse(date2);// 任意日期，包括当前日期
                    myTime2 = (aDate2.getTime() / 1000);

                    if (myTime > myTime2) {
                        days = (myTime - myTime2) / (1 * 60 * 60 * 24);
                    } else {
                        days = (myTime2 - myTime) / (1 * 60 * 60 * 24);
                    }


                    return days;

                }

                public int GetNumDayFrom19000101() {
                    int day = 0;
                    try {
                        day = (int) DateDays2(this.year, this.month, this.day, 1900, 1, 1);
                    } catch (ParseException ex) {
                        System.out.println(ex.getMessage());
                    }
                    return day;
                }

                @SuppressWarnings("unused")
                public long GetSFrom19000101() {
                    return 86400L * (1L + GetNumDayFrom19000101());
                }

            }


        }

        public static class DateHelper {

            public static final long ONE_MINUTE = 60000L;
            public static final long ONE_HOUR = 3600000L;
            public static final long ONE_DAY = 86400000L;
            public static final long ONE_WEEK = 604800000L;
            private static final String ONE_SECOND_AGO = "秒前";
            private static final String ONE_MINUTE_AGO = "分钟前";
            private static final String ONE_HOUR_AGO = "小时前";
            private static final String ONE_DAY_AGO = "天前";
            private static final String ONE_MONTH_AGO = "月前";
            private static final String ONE_YEAR_AGO = "年前";

            private static long toSeconds(long date) {
                return date / 1000L;
            }

            private static long toMinutes(long date) {
                return toSeconds(date) / 60L;
            }

            private static long toHours(long date) {
                return toMinutes(date) / 60L;
            }

            private static long toDays(long date) {
                return toHours(date) / 24L;
            }

            private static long toMonths(long date) {
                return toDays(date) / 30L;
            }

            private static long toYears(long date) {
                return toMonths(date) / 365L;
            }

            public static String getPastTime(Long sentTime) {
                long delta = new Date().getTime() - sentTime;
                if (delta < 1L * ONE_MINUTE) {
                    long seconds = toSeconds(delta);
                    return (seconds <= 0 ? 1 : seconds) + ONE_SECOND_AGO;
                }
                if (delta < 45L * ONE_MINUTE) {
                    long minutes = toMinutes(delta);
                    return (minutes <= 0 ? 1 : minutes) + ONE_MINUTE_AGO;
                }
                if (delta < 24L * ONE_HOUR) {
                    long hours = toHours(delta);
                    return (hours <= 0 ? 1 : hours) + ONE_HOUR_AGO;
                }
                if (delta < 48L * ONE_HOUR) {
                    return "昨天";
                }
                if (delta < 30L * ONE_DAY) {
                    long days = toDays(delta);
                    return (days <= 0 ? 1 : days) + ONE_DAY_AGO;
                }
                if (delta < 12L * 4L * ONE_WEEK) {
                    long months = toMonths(delta);
                    return (months <= 0 ? 1 : months) + ONE_MONTH_AGO;
                } else {
                    long years = toYears(delta);
                    return (years <= 0 ? 1 : years) + ONE_YEAR_AGO;
                }
            }

        }


    }

    /**
     * @AppUtils 应用程序的小工具集合
     */
    public static class ApplicationUtils {

        /**
         * 字符串的压缩
         *
         * @param str 待压缩的字符串
         * @return 返回压缩后的字符串
         */
        public static String compress(String str) {
            if (null == str || str.length() == 0) {
                return str;
            }
            // 创建一个新的输出流
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            // 使用默认缓冲区大小创建新的输出流
            String str2 = "";
            try {
                GZIPOutputStream gzip = new GZIPOutputStream(out);
                // 将字节写入此输出流
                gzip.write(str.getBytes("utf-8")); // 因为后台默认字符集有可能是GBK字符集，所以此处需指定一个字符集
                gzip.close();
                str2 = out.toString("ISO-8859-1");
            } catch (IOException e) {

            }

            // 使用指定的 charsetName，通过解码字节将缓冲区内容转换为字符串
            return str2;
        }

        /**
         * 字符串的解压
         *
         * @param str 对字符串解压
         * @return 返回解压缩后的字符串
         */
        public static String unCompress(String str) {
            if (null == str || str.length() == 0) {
                return str;
            }
            String str2 = "";
            try {
                // 创建一个新的输出流
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                // 创建一个 ByteArrayInputStream，使用 buf 作为其缓冲区数组
                ByteArrayInputStream in = new ByteArrayInputStream(str.getBytes("ISO-8859-1"));
                // 使用默认缓冲区大小创建新的输入流
                GZIPInputStream gzip = null;
                gzip = new GZIPInputStream(in);
                byte[] buffer = new byte[256];
                int n = 0;

                // 将未压缩数据读入字节数组
                while ((n = gzip.read(buffer)) >= 0) {
                    out.write(buffer, 0, n);
                }
                // 使用指定的 charsetName，通过解码字节将缓冲区内容转换为字符串
                str2 = out.toString("utf-8");

            } catch (IOException e) {

            }
            return str2;
        }

        /**
         * 判断app应用是否存在手机里
         *
         * @param context
         * @param pName
         * @return
         */
        public static boolean checkAppInstalled(Context context, String pName) {

            List<String> appAllPackName = ApplicationUtils.getAppAllPackName();

            if (pName == null || pName.isEmpty()) {
                return false;
            }
            final PackageManager packageManager = context.getPackageManager();
            List<PackageInfo> info = packageManager.getInstalledPackages(0);
            if (info == null || info.isEmpty()) {
                return false;
            }
            for (int i = 0; i < info.size(); i++) {
                String packageName = info.get(i).packageName;
                if (pName.equals(packageName)) {
                    return true;
                }
            }
            return false;
        }


        /**
         * 打印 对象属性
         *
         * @param obj
         * @return
         */
        public static String toStrings(Object obj) {
            try {
                StringBuilder stringBuilder = new StringBuilder();
                Class<?> javaClass = obj.getClass();
                String className = javaClass.getSimpleName();
                stringBuilder.append(className + "{");
                for (Field field : javaClass.getDeclaredFields()) {
                    field.setAccessible(true);
                    Class<?> type = field.getType();
                    String name = field.getName();
                    Object value = field.get(obj);
                    if (type == String.class) {
                        stringBuilder.append(name + "='" + value + "', ");
                    } else if (type == Boolean.class) {
                        stringBuilder.append(name + "=" + value + ", ");
                    } else if (type == Short.class) {
                        stringBuilder.append(name + "=" + value + ", ");
                    } else if (type == Integer.class) {
                        stringBuilder.append(name + "=" + value + ", ");
                    } else if (type == Long.class) {
                        stringBuilder.append(name + "=" + value + ", ");
                    } else if (type == Float.class) {
                        stringBuilder.append(name + "=" + value + ", ");
                    } else if (type == Double.class) {
                        stringBuilder.append(name + "=" + value + ", ");
                    } else if (type == ArrayList.class) {
                        stringBuilder.append(name + "=" + value + ", ");
                    } else if (type == Map.class) {
                        stringBuilder.append(name + "=" + value + ", ");
                    } else {
                        stringBuilder.append(name + "=" + value + ", ");
                    }
                }
                String toString = stringBuilder.toString();
                toString = toString.substring(0, toString.length() - 2) + "}";
                return toString;
            } catch (IllegalAccessException e) {
                throw new RuntimeException(e);
            }

        }

        //获取状态栏高度
        public static int getStatusBarHeight(Context context) {
            int result = 0;
            int resourceId = context.getResources().getIdentifier("status_bar_height", "dimen", "android");
            if (resourceId > 0) {
                result = context.getResources().getDimensionPixelSize(resourceId);
            }
            return result;
        }

        /**
         * 添加快捷方式
         * 用法:
         * //自定义意图,可以跳转 网页，可以跳转Activity
         * Intent intent = new Intent();
         * Uri content_url = Uri.parse("https://www.baidu.com");
         * intent.setData(content_url);
         * //最后添加
         * GT.ApplicationUtils.addShortCut(MainActivity2.this, intent, "快捷方式名称", "231", com.gsls.gt.R.mipmap.gt_logo);
         *
         * @param context
         * @param intent
         * @param title
         * @param id
         * @param resId
         */
        public static void addShortCut(Context context, Intent intent, String title, String id, @DrawableRes int resId) {
            if (context == null || intent == null) return;
            if (Build.VERSION.SDK_INT > Build.VERSION_CODES.O) {
                ShortcutManager shortcutManager = (ShortcutManager) context.getSystemService(Context.SHORTCUT_SERVICE);
                if (shortcutManager.isRequestPinShortcutSupported()) {
                    intent.setAction(Intent.ACTION_VIEW);
                    if (title == null) {
                        title = GT.ApplicationUtils.getAppName(context) + ".lnk";
                    }
                    ShortcutInfo info = new ShortcutInfo.Builder(context, id)
                            .setIcon(Icon.createWithResource(context, resId))
                            .setShortLabel(title).setIntent(intent).build();
                    PendingIntent pendingIntent = PendingIntent.getBroadcast(context, 0, intent, PendingIntent.FLAG_MUTABLE);
                    shortcutManager.requestPinShortcut(info, pendingIntent.getIntentSender());
                }
            }
        }

        /**
         * 跳转QQ个人聊天界面
         *
         * @param context
         * @param qq      跳转的QQ号
         * @return true:跳转成功 false:跳转失败
         */
        public static boolean joinQQ(Context context, String qq) {
            try {
                //第二种方式：可以跳转到添加好友，如果qq号是好友了，直接聊天
                String url = "mqqwpa://im/chat?chat_type=wpa&uin=" + qq;//uin是发送过去的qq号码
                context.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(url)));
                return true;
            } catch (Exception e) {
//                e.printStackTrace();
                return false;
            }
        }

        /**
         * 跳转QQ群界面
         *
         * @param context
         * @param key       添加的群秘钥
         * @param isNewTask 是否启动新的进程，true:按下返回进入QQ,false:按下返回进入App
         * @return
         */
        public static boolean joinQQGroup(Context context, String key, boolean isNewTask) {
            Intent intent = new Intent();
            intent.setData(Uri.parse("mqqopensdkapi://bizAgent/qm/qr?url=http%3A%2F%2Fqm.qq.com%2Fcgi-bin%2Fqm%2Fqr%3Ffrom%3Dapp%26p%3Dandroid%26jump_from%3Dwebapi%26k%3D" + key));
            if (isNewTask) {
                // 此Flag可根据具体产品需要自定义，如设置，则在加群界面按返回，返回手Q主界面，不设置，按返回会返回到呼起产品界面
                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            }
            try {
                context.startActivity(intent);
                return true;
            } catch (Exception e) {
                // 未安装手Q或安装的版本不支持
                return false;
            }
        }

        /**
         * 跳抖音指定的个人主页
         *
         * @param context
         * @param userId  跳转到这个抖音用户的主页，userId在 抖音设置里的最底下，有一个抖音版本号，连续多点版本号就会展示
         * @return
         */
        public static boolean joinTiktok(Context context, String userId) {
            Intent intent = new Intent();
            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            try {
                intent.setData(Uri.parse("snssdk1128://user/profile/" + userId));//抖音
                context.startActivity(intent);
            } catch (Exception e1) {
                try {
                    intent.setData(Uri.parse("snssdk1112://user/profile/" + userId));//抖音极速版
                    context.startActivity(intent);
                } catch (Exception e2) {
                    try {
                        intent.setData(Uri.parse("snssdk1112://profile?id=" + userId));//抖音火山版
                        context.startActivity(intent);
                    } catch (Exception e3) {
                        return false;
                    }
                }
            }
            return true;
        }

        /**
         * 发送邮箱
         *
         * @param context 上下文
         * @param sender  发送人邮箱
         * @param cc      抄送人邮箱
         * @param title   邮件标题 (非必填)
         * @param content 邮件内容 (非必填)
         */
        public static boolean senEmail(Activity context, String sender, String cc, String title, String content) {
            if (context == null) return false;
            try {
                Intent intent = new Intent(Intent.ACTION_SENDTO);

                intent.setData(Uri.parse("mailto:"));
                Intent emailIntent = new Intent(Intent.ACTION_SEND);
                if (sender != null && sender.length() > 0) {
                    emailIntent.putExtra(Intent.EXTRA_EMAIL, new String[]{sender});
                }
                if (cc != null && cc.length() > 0) {
                    emailIntent.putExtra(Intent.EXTRA_CC, new String[]{cc});
                }
                if (title != null && title.length() > 0) {
                    emailIntent.putExtra(Intent.EXTRA_SUBJECT, title);
                }
                if (content != null && content.length() > 0) {
                    emailIntent.putExtra(Intent.EXTRA_TEXT, content);
                }
                emailIntent.setSelector(intent);
                context.startActivity(emailIntent);
                return true;
            } catch (android.content.ActivityNotFoundException e) {
                return false;
            }
        }

        private static long exitTime = 0;

        /**
         * 连续点击2次退出
         */
        public static void clickTwice(Context context, OnListener<Boolean> onListener, long... times) {
            long time = 2000;
            if (times != null && times.length > 0) {
                time = times[0];
            }
            if ((System.currentTimeMillis() - exitTime) > time) {
                exitTime = System.currentTimeMillis();
                onListener.onListener(false);
            } else {
                onListener.onListener(true);
            }
        }

        /**
         * 过滤掉屏蔽字库
         *
         * @param msg      需要检测的字符
         * @param arrayKey 屏蔽字库关键字
         * @return
         */
        public static String shieldedCharacterLibrary(String msg, String[] arrayKey) {
            List<String> strings = Arrays.asList(arrayKey);
            return shieldedCharacterLibrary(msg, strings);
        }

        /**
         * 过滤掉屏蔽字库
         *
         * @param msg     需要检测的字符
         * @param keyList 屏蔽字库关键字
         * @return
         */
        public static String shieldedCharacterLibrary(String msg, List<String> keyList) {
            String str = msg.replaceAll("\\s*", "");
            for (String key : keyList) {
                if (key != null && key.length() > 0 && str.contains(key)) {
                    String t = "";
                    for (int i = 0; i < key.length(); i++) {
                        t += "*";
                    }
                    msg = str.replaceAll(key, t);
                    str = msg;
                }
            }
            return msg;
        }

        /**
         * 去掉结尾为0的
         *
         * @param msg
         * @return
         */
        public static String removeZero(Object msg, String... symbols) {
            String valueOf = String.valueOf(msg);

            if ("null".equals(valueOf) || valueOf.length() == 0) return "0";

            try {
                while (true) {
                    if (valueOf.contains(".")) {
                        String substring = valueOf.substring(valueOf.length() - 1);
                        if ("0".equals(substring) || ".".equals(substring)) {
                            valueOf = valueOf.substring(0, valueOf.length() - 1);
                        } else {
                            break;
                        }
                    } else {
                        break;
                    }
                }
            } catch (Exception e) {
            }
            String symbol = "";
            if (symbols.length > 0) {
                symbol = symbols[0];
            }

            try {
                if (valueOf.contains(".")) {
                    String str = valueOf.substring(valueOf.indexOf("."));
                    if (str.length() > 3) {
                        valueOf = valueOf.substring(0, valueOf.indexOf(".") + 3);
                    }

                }
            } catch (Exception e) {

            }

            return symbol + valueOf;
        }

        /**
         * 防止空数据的方法
         *
         * @param obj        正规数据
         * @param defaultStr 若为空，则显示补救数据
         * @return
         */
        public static String notyNull(Object obj, String... defaultStr) {
            String str = String.valueOf(obj);
            if ("null".equals(str)) {
                if (defaultStr.length >= 1) {
                    return defaultStr[0];
                }
                return "";
            }
            return str;
        }

        /**
         * 获取 字符串中的 电话号码
         *
         * @param str
         * @param isFixedNumber 是否 检测固定电话号码(默认是检测的)
         * @return
         */
        public static List<String> checkCellphone(String str, boolean... isFixedNumber) {
            List<String> list = new ArrayList<>();
            Pattern pattern = Pattern.compile("((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(18[0,5-9]))\\d{8}");
            // 创建匹配给定输入与此模式的匹配器。
            Matcher matcher = pattern.matcher(str);
            // 查找字符串中是否有符合的子字符串
            while (matcher.find()) {
                // 查找到符合的即输出
                list.add(matcher.group());
            }

            if (isFixedNumber == null || isFixedNumber.length == 0 || isFixedNumber[0]) {
                // 将给定的正则表达式编译到模式中
                Pattern pattern2 = Pattern.compile("(0\\d{2}-\\d{8}(-\\d{1,4})?)|(0\\d{3}-\\d{7,8}(-\\d{1,4})?)");
                // 创建匹配给定输入与此模式的匹配器。
                Matcher matcher2 = pattern2.matcher(str);
                // 查找字符串中是否有符合的子字符串
                while (matcher2.find()) {
                    // 查找到符合的即输出
                    list.add(matcher2.group());
                }
            }

            return list;
        }

        /**
         * 保存方法
         * 需要添加这个配置：AUTHORITY == com.gsls.gt.fileprovider
         * <provider
         * android:name="androidx.core.content.FileProvider"
         * android:authorities="com.gsls.gt.fileprovider"
         * android:exported="false"
         * android:grantUriPermissions="true">
         * <meta-data
         * android:name="android.support.FILE_PROVIDER_PATHS"
         * android:resource="@xml/file_paths" />
         * </provider>
         * file_paths.xml :
         * <paths>
         * <external-path path="." name="external_storage_root" />
         * </paths>
         *
         * @param context
         * @param bitmap    图片资源
         * @param savePath  保存路径(不需要加文件名)
         * @param fileName  文件名字(需要加文件扩展名)
         * @param AUTHORITY 这个需要添加上面的配置文件
         * @return
         */
        public static Uri saveBitmapToSD(Context context, Bitmap bitmap, String savePath, String fileName, String AUTHORITY) {
            File file = new File(savePath);
            if (!file.exists()) {
                file.mkdirs();
            }

            //删除旧的分享文件
            file = new File(savePath, fileName);
            List<String> strings = FileUtils.queryFilePathFileNumber(savePath);
            if (strings != null && strings.size() != 0) {
                FileUtils.deleteAllFiles(savePath, false);
            }

            try {
                FileOutputStream out = new FileOutputStream(file);
                bitmap.compress(Bitmap.CompressFormat.PNG, 90, out);
                Uri uri;
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && AUTHORITY != null) {
                    uri = FileProvider.getUriForFile(context, AUTHORITY, file);
                } else {
                    uri = Uri.fromFile(file);
                }
                out.flush();
                out.close();
                return uri;

            } catch (IOException e) {
                e.printStackTrace();
            }
            return null;
        }

        /**
         * 截图
         *
         * @param activity
         * @return
         */
        public static Bitmap takeScreenShot(Activity activity) {
            View dView = activity.getWindow().getDecorView();
            dView.setDrawingCacheEnabled(true);
            dView.buildDrawingCache();
            return Bitmap.createBitmap(dView.getDrawingCache());
        }

        /**
         * View 转 Bitmap
         *
         * @param view
         * @return
         */
        public static Bitmap createBitmapFromView(View view) {
            //是ImageView直接获取
            if (view instanceof ImageView) {
                Drawable drawable = ((ImageView) view).getDrawable();
                if (drawable instanceof BitmapDrawable) {
                    return ((BitmapDrawable) drawable).getBitmap();
                }
            }
            view.clearFocus();
            int width = view.getWidth();
            int height = view.getHeight();
            if (width <= 0 || height <= 0) {
                return null;
            }
            Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
            if (bitmap != null) {
                Canvas canvas = new Canvas(bitmap);
                view.draw(canvas);
                canvas.setBitmap(null);
            }
            return bitmap;
        }

        /**
         * 保存图片
         *
         * @param context  上下文
         * @param view     保存图片的组件
         * @param fileName 文件名
         */
        public static void saveImage(Activity activity, View view, String savePath, String fileName) {

            // 保存图片
            Bitmap bm = Bitmap.createBitmap(view.getWidth(), view.getHeight(), Bitmap.Config.ARGB_8888);
            Canvas canvas = new Canvas(bm);
            view.draw(canvas);

            // 更新图库
            File file = new File(savePath);
            if (!file.exists()) {
                file.mkdirs();// 创建整个目录
            }

            try {
                FileOutputStream out = new FileOutputStream(savePath + fileName);
                bm.compress(Bitmap.CompressFormat.PNG, 90, out);
                out.flush();
                out.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }

            // 通知系统更新图库
            if (file.exists()) {
                try {
                    MediaStore.Images.Media.insertImage(activity.getContentResolver(), savePath + fileName, fileName, null);// 把文件插入到系统图库
                    activity.sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.fromFile(new File(savePath + fileName))));// 发送广播通知系统
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }

            }

        }

        /**
         * 保存图片
         *
         * @param activity
         * @param bitmap
         * @param savePath
         * @param fileName
         */
        public static void saveImage(Activity activity, Bitmap bitmap, String savePath, String fileName) {

            // 更新图库
            File file = new File(savePath);
            if (!file.exists()) {
                file.mkdirs();// 创建整个目录
            }

            try {
                FileOutputStream out = new FileOutputStream(savePath + fileName);
                bitmap.compress(Bitmap.CompressFormat.PNG, 90, out);
                out.flush();
                out.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }

            // 通知系统更新图库
            if (file.exists()) {
                try {
                    MediaStore.Images.Media.insertImage(activity.getContentResolver(), savePath + fileName, fileName, null);// 把文件插入到系统图库
                    activity.sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.fromFile(new File(savePath + fileName))));// 发送广播通知系统
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }

            }

        }

        /**
         * 截图到相册
         *
         * @param activity
         * @param savePath
         * @param fileName
         */
        public static void screenshotToPhoto(Activity activity, String savePath, String fileName) {

            View dView = activity.getWindow().getDecorView();
            dView.setDrawingCacheEnabled(true);
            dView.buildDrawingCache();
            Bitmap bitmap = Bitmap.createBitmap(dView.getDrawingCache());

            // 更新图库
            File file = new File(savePath);
            if (!file.exists()) {
                file.mkdirs();// 创建整个目录
            }

            try {
                FileOutputStream out = new FileOutputStream(savePath + fileName);
                bitmap.compress(Bitmap.CompressFormat.PNG, 90, out);
                out.flush();
                out.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }

            // 通知系统更新图库
            if (file.exists()) {
                try {
                    MediaStore.Images.Media.insertImage(activity.getContentResolver(), savePath + fileName, fileName, null);// 把文件插入到系统图库
                    activity.sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.fromFile(new File(savePath + fileName))));// 发送广播通知系统
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }

            }

        }

        /********************************************* 其他功能 *********************************/

        /**
         * 弹出软件盘
         *
         * @param editText
         * @param activity
         */
        public static void editKeyboard(EditText editText, Activity activity) {
            InputMethodManager imm = (InputMethodManager) activity.getSystemService(Context.INPUT_METHOD_SERVICE);
            imm.showSoftInput(editText, InputMethodManager.RESULT_SHOWN);
            imm.toggleSoftInput(InputMethodManager.SHOW_FORCED, InputMethodManager.HIDE_IMPLICIT_ONLY);
            editText.requestFocus();// 为搜索框 获取光标
        }

        /**
         * 收起软键盘
         *
         * @param editText
         * @param activity
         */
        public static void editKeyShrink(EditText editText, Activity activity) {
            InputMethodManager inputMethodManager = (InputMethodManager) activity
                    .getSystemService(Context.INPUT_METHOD_SERVICE);
            inputMethodManager.hideSoftInputFromWindow(editText.getWindowToken(), 0);
        }

        /**
         * 监听软键盘高度
         *
         * @param activity
         * @param onListener
         */
        public static void monitorSoftKeyboardHeight(Activity activity, GT.OneListener<Integer> onListener) {
            if (activity == null || onListener == null) return;
            monitorSoftKeyboardHeight(activity.getWindow().getDecorView(), onListener);
        }

        /**
         * 监听软键盘高度
         *
         * @param decorView  建议是 activity.getWindow().getDecorView();
         * @param onListener
         */
        public static void monitorSoftKeyboardHeight(View decorView, GT.OneListener<Integer> onListener) {
            if (decorView == null || onListener == null) return;
            decorView.setOnApplyWindowInsetsListener((v, insets) -> {
                int bottom;
                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.R) {
                    bottom = insets.getInsets(WindowInsets.Type.ime()).bottom;
                    decorView.setPadding(0, 0, 0, bottom);
                    onListener.onOneListener(bottom);
                } else {
                    int height = decorView.getHeight();
                    if (height >= 2400) {
                        bottom = (int) (decorView.getHeight() / 2.55);//2412
                    } else {
                        bottom = (int) (decorView.getHeight() / 2.2);//2160
                    }
                    onListener.onOneListener(bottom);
                }
                return insets;
            });
        }

        /**
         * 更新图库
         *
         * @param activity
         * @param file
         */
        public static void updateImg(Activity activity, File file) {
            if (activity == null || file == null) return;
            String path = file.getPath();
            String fileName = GT.FileUtils.getFileName(path);
            // 通知系统更新图库
            if (file.exists()) {
                try {
                    MediaStore.Images.Media.insertImage(activity.getContentResolver(), path, fileName, null);// 把文件插入到系统图库
                    activity.sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.fromFile(new File(path))));// 发送广播通知系统
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
            }
        }

        /**
         * 将字符串复制到粘贴板上
         *
         * @param context
         * @param text
         */
        public static void copyToClipboard(Context context, String text) {
            ClipboardManager systemService = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);
            systemService.setPrimaryClip(ClipData.newPlainText("text", text));
        }

        /**
         * 获取粘贴板的内容
         *
         * @param context
         * @return
         */
        public static String getClipboardContentTest(Context context) {
            ClipboardManager cm = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);
            if (cm != null) {
                ClipData data = cm.getPrimaryClip();
                if (data != null) {
                    ClipData.Item item = data.getItemAt(0);
                    if (item != null) {
                        return item.getText().toString();
                    }
                }
            }
            return null;
        }

        /**
         * 获取App名字
         *
         * @param activity
         * @return
         */
        public static String getAppName(Context context) {
            try {
                PackageManager packageManager = context.getPackageManager();
                PackageInfo packageInfo = packageManager.getPackageInfo(context.getPackageName(), 0);
                int labelRes = packageInfo.applicationInfo.labelRes;
                return context.getResources().getString(labelRes);
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

        /**
         * 获取软件版本号
         *
         * @param mContext
         * @return
         */
        public static int getVersionCode(Context mContext) {
            int versionCode = 0;
            try {
                // 获取软件版本号，对应AndroidManifest.xml下android:versionCode
                versionCode = mContext.getPackageManager().getPackageInfo(mContext.getPackageName(), 0).versionCode;
            } catch (PackageManager.NameNotFoundException e) {
                e.printStackTrace();
            }
            return versionCode;
        }

        /**
         * 获取版本号名称
         *
         * @param context
         * @return
         */
        public static String getVerName(Context context) {
            String verName = "";
            try {
                verName = context.getPackageManager().getPackageInfo(context.getPackageName(), 0).versionName;
            } catch (PackageManager.NameNotFoundException e) {
                e.printStackTrace();
            }
            return verName;
        }

        /**
         * 获取当前apk包名
         *
         * @param context
         * @return
         */
        public static String getPackageName(Context context) {
            try {
                PackageManager packageManager = context.getPackageManager();
                PackageInfo packageInfo = packageManager.getPackageInfo(context.getPackageName(), 0);
                return packageInfo.packageName;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

        /**
         * @获取当前手机里的应用列表
         */
        public static class PrintPhoneAppList {

            public List<String> getAllAppList(Activity activity) {
                List<ResolveInfo> resolveInfos = getResolveInfos(activity);
                List<String> appData = getAppData(resolveInfos, activity);
                return appData;
            }

            private List<ResolveInfo> getResolveInfos(Activity activity) {
                List<ResolveInfo> appList = null;

                Intent intent = new Intent(Intent.ACTION_MAIN, null);
                intent.addCategory(Intent.CATEGORY_LAUNCHER);
                PackageManager pm = activity.getPackageManager();
                appList = pm.queryIntentActivities(intent, 0);
                Collections.sort(appList, new ResolveInfo.DisplayNameComparator(pm));

                return appList;

            }

            private List<String> getAppData(List<ResolveInfo> resolveInfos, Activity activity) {

                List<String> appData = new ArrayList<>();
                PackageManager packageManager = activity.getPackageManager();
                for (int i = 0; i < resolveInfos.size(); i++) {
                    String pkg = resolveInfos.get(i).activityInfo.packageName;
                    String cls = resolveInfos.get(i).activityInfo.name;
                    String title = null;

                    try {
                        ApplicationInfo applicationInfo = packageManager.getPackageInfo(pkg, i).applicationInfo;
                        title = applicationInfo.loadLabel(packageManager).toString();
                    } catch (Exception e) {

                    }
                    appData.add(title + "：" + pkg + "/" + cls);
                }
                return appData;
            }

        }

        /**
         * 获取当前手机所有App信息
         *
         * @param context
         * @return
         */
        public static ArrayList<ArrayMap<String, Object>> getAllAppData(Context context) {
            PackageManager pckMan = context.getPackageManager();
            ArrayList<ArrayMap<String, Object>> items = new ArrayList<ArrayMap<String, Object>>();
            List<PackageInfo> packageInfo = pckMan.getInstalledPackages(0);
            for (PackageInfo pInfo : packageInfo) {
                ArrayMap<String, Object> item = new ArrayMap<String, Object>();
                item.put("appimage", pInfo.applicationInfo.loadIcon(pckMan));
                item.put("packageName", pInfo.packageName);
                item.put("versionCode", pInfo.versionCode);
                item.put("versionName", pInfo.versionName);
                item.put("appName", pInfo.applicationInfo.loadLabel(pckMan).toString());
                items.add(item);
            }
            return items;
        }

        /**
         * 是否在前台
         *
         * @param context
         * @return
         */
        public static boolean isFrontDesk(Context context) {
            try {
                ActivityManager am = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
                List<ActivityManager.RunningAppProcessInfo> runnings = am.getRunningAppProcesses();
                for (ActivityManager.RunningAppProcessInfo running : runnings) {
                    if (running.processName.equals(ApplicationUtils.getPackageName(context))) {
                        if (running.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND
                                || running.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_VISIBLE) {
                            return true;
                        } else {
                            return false;
                        }
                    }
                }
            } catch (Exception e) {

            }
            return false;
        }

        /**
         * 提示错误消息
         *
         * @param editText
         * @param errorMessage
         */
        public static void hintErrorMessage(EditText editText, String errorMessage) {
            editText.setFocusable(true);
            editText.setFocusableInTouchMode(true);
            editText.requestFocus();
            editText.setError(Html.fromHtml("<font color='white'>" + errorMessage + "</font>"));
        }

        /**
         * 是否在后台
         *
         * @param context
         * @return 后台返回 false 前台返回 true
         */
        public static boolean isBackground(Context context) {
            ActivityManager activityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
            List<ActivityManager.RunningAppProcessInfo> appProcesses = activityManager.getRunningAppProcesses();
            for (ActivityManager.RunningAppProcessInfo appProcess : appProcesses) {
                if (appProcess.processName.equals(context.getPackageName())) {
                    if (appProcess.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_BACKGROUND) {
                        return false;
                    } else {
                        return true;
                    }
                }
            }
            return true;
        }

        /**
         * 获取所有APPName
         *
         * @return
         */
        public static List<String> getAppAllPackName() {
            List<String> packages = new ArrayList<String>();
            try {
                Process p = Runtime.getRuntime().exec("pm list packages");
                InputStreamReader isr = new InputStreamReader(p.getInputStream(), "utf-8");
                BufferedReader br = new BufferedReader(isr);
                String line = br.readLine();
                while (line != null) {
                    line = line.trim();
                    if (line.length() > 8) {
                        String prefix = line.substring(0, 8);
                        if (prefix.equalsIgnoreCase("package:")) {
                            line = line.substring(8).trim();
                            if (!TextUtils.isEmpty(line)) {
                                packages.add(line);
                            }
                        }
                    }
                    line = br.readLine();
                }
                br.close();
                p.destroy();
            } catch (Exception e) {
//                GT.log("异常");
            }
            return packages;
        }

        /**
         * 判断手机号码是否规则
         *
         * @param input
         * @return
         */
        public static boolean isPhoneNumber(String input) {
            String pattern = "^(13[0-9]|15[012356789]|17[013678]|18[0-9]|14[57]|19[89]|166)[0-9]{8}";
            Pattern r = Pattern.compile(pattern);
            Matcher m = r.matcher(input);
            return m.matches();
        }

        /**
         * 判断当前应用是否是debug状态
         *
         * @param context
         * @return 是 debug版本就返回 true
         */
        public static boolean isApkInDebug(Context context) {
            if (context == null) return true;
            try {
                ApplicationInfo info = context.getApplicationInfo();
                return (info.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;
            } catch (Exception e) {
                return false;
            }
        }

        /**
         * 是否存在汉字
         *
         * @param str
         * @return
         */
        public static boolean isLetterDigitOrChinese(String str) {
            if (str == null) return false;
            String regex = "^[a-z0-9A-Z\u4e00-\u9fa5]+$";
            return str.matches(regex);
        }

        /**
         * 获取PID
         *
         * @return
         */
        public static int getPID() {
            try {
                return android.os.Process.myPid();
            } catch (Exception e) {
                return 0;
            }
        }

        /**
         * 验证 字母+数字
         *
         * @param pass
         * @param values
         * @return
         */
        public static boolean validatePhonePass(String data, int... values) {
            String passRegex = "";
            switch (values.length) {
                case 0:
                    passRegex = "^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{6,16}$";
                    break;
                case 2:
                    passRegex = "^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]*" + values[0] + "," + values[1] + "}$";
                    break;
            }
            return !TextUtils.isEmpty(data) && data.matches(passRegex);
        }

        /**
         * 身份证是否合格
         *
         * @param str
         * @return
         */
        public static boolean validateIdentityCard(String str) {
            try {
                if (str.length() != 18) {
                    return false;
                }
                String[] array = {"1", "0", "x", "9", "8", "7", "6", "5", "4",
                        "3", "2"};
                int sum = 0;
                int count = 17;
                for (int i = 0; i < str.length() - 1; i++) {
                    int a = Integer.parseInt("" + str.charAt(i));
                    sum += a * Math.pow(2, count);
                    count--;
                }
                return (str.charAt(str.length() - 1) + "")
                        .equalsIgnoreCase(array[sum % 11]);
            } catch (Exception e) {
                return false;
            }
        }

        /**
         * 设置限制输入 数字+字母+中文
         *
         * @param editText
         * @param max      限制输入的长度
         */
        public static void setFilters(EditText editText, int max) {
            editText.setFilters(new InputFilter[]{new InputFilter() {
                @Override
                public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
                    Pattern p = Pattern.compile("[0-9a-zA-Z|\u4e00-\u9fa5]+");
                    Matcher m = p.matcher(source.toString());
                    if (!m.matches()) return "";
                    return null;
                }
            }, new InputFilter.LengthFilter(max)});
        }

        /**
         * 获取最大的版本号
         *
         * @param versionName1
         * @param versionName2
         * @param defaultVersion 异常时，默认的版本
         * @return
         */
        public static String getMaxVersion(String versionName1, String versionName2, String... defaultVersion) {
            if (versionName1 == null)
                return versionName2;
            if (versionName2 == null)
                return versionName1;

            String v1 = "", v2 = "", versionName = "";

            try {
                v1 = versionName1.replaceAll("v", "").replaceAll("V", "").replaceAll("\\.", "");
                v2 = versionName2.replaceAll("v", "").replaceAll("V", "").replaceAll("\\.", "");
                versionName = Math.max(Integer.parseInt(v1), Integer.parseInt(v2)) == Integer.parseInt(v1) ? versionName1
                        : versionName2;
            } catch (Exception e) {
                //如果这里报错，那说明你没有按照 "v1.0.0" 这个格式来升级版本号，此处算法仅仅用于这个格式来判断，如有更改，可能算法也需要更改
                GT.errt("获取最大版本号报错:" + e);
                if (defaultVersion != null && defaultVersion.length > 0) {
                    versionName = defaultVersion[0];
                }
            }

            return versionName;
        }

        /**
         * 支付密码校验算法
         *
         * @param onListener
         * @param editTexts
         */
        public static List<EditText> payPasswordEntryAlgorithm(OnListener<String> onListener, boolean isEmptyText, boolean isOneFocus, EditText... editTexts) {
            List<EditText> editTextList = new ArrayList<>();
            if (editTexts.length == 0) return editTextList;
            if (isOneFocus) {
                editTexts[0].requestFocus();//设置第一个获取焦点
            }
            for (EditText editText : editTexts) {
                if (isEmptyText) editText.setText("");
                editTextList.add(editText);
            }

            final int[] index = {0};
            //设置每个单独密码的事件
            for (int i = 0; i < editTextList.size(); i++) {
                EditText editText = editTextList.get(i);
                editText.setTag(i);//设置吗每个 EditText 索引
                int finalI = i;
                editText.addTextChangedListener(new TextWatcher() {
                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                    }

                    @Override
                    public void onTextChanged(CharSequence s, int start, int before, int count) {
                    }

                    @Override
                    public void afterTextChanged(Editable s) {
                        String s1 = editText.getText().toString();
                        editText.setSelection(s1.length());
                        if (s1.length() == 0) {//删除的时候
                            index[0] = Integer.parseInt(editText.getTag().toString());
                            if (index[0] - 1 >= 0) {
                                EditText editText1 = editTextList.get(index[0] - 1);
                                editText1.requestFocus();
                            }
                            if (index[0] > 0)
                                index[0]--;
                        } else if (s1.length() == 1) {//输入的时候
                            if (finalI + 1 <= editTextList.size() - 1) {
                                EditText editText1 = editTextList.get(finalI + 1);
                                editText1.requestFocus();
                                index[0] = Integer.parseInt(editText1.getTag().toString());
                            }
                        }
                        transactionPasswordAuthentication();
                    }

                    //验证交易密码是否全部输入
                    private void transactionPasswordAuthentication() {
                        boolean isOk = true;
                        String apppwd = "";
                        for (int i = 0; i < editTextList.size(); i++) {
                            EditText editText1 = editTextList.get(i);
                            String s = editText1.getText().toString();
                            if (s.length() == 0) {
                                isOk = false;
                            }
                            apppwd += s;
                        }
                        if (!isOk) return;
                        //清空文本
                        if (isEmptyText) {
                            for (EditText editText : editTexts) {
                                editText.setText("");
                            }
                        }
                        onListener.onListener(apppwd);
                    }
                });
            }
            return editTextList;
        }

        /**
         * 获取添加零
         *
         * @param obj
         * @return
         */
        public static String getAddZero(Object obj) {
            try {
                int i = Integer.parseInt(String.valueOf(obj));
                if (i < 10) {
                    return "0" + i;
                } else {
                    return String.valueOf(obj);
                }
            } catch (Exception e) {
                return String.valueOf(obj);
            }
        }

        /**
         * dp to px
         *
         * @param context
         * @param dipValue
         * @return
         */
        public static int dip2px(Context context, float dipValue) {
            if (context == null) return 0;
            Resources r = context.getResources();
            return (int) TypedValue.applyDimension(
                    TypedValue.COMPLEX_UNIT_DIP, dipValue, r.getDisplayMetrics());
        }

        /**
         * 根据手机的分辨率从 px(像素) 的单位 转成为 dp
         *
         * @param context
         * @param pxValue
         * @return
         * @author SHANHY
         * @date 2015年10月28日
         */
        public static int px2dip(Context context, float pxValue) {
            final float scale = context.getResources().getDisplayMetrics().density;
            return (int) (pxValue / scale + 0.5f);
        }

        /**
         * 设置 日期选择器
         *
         * @param dp
         * @param isSelectOld  是否可以选择过去的日期
         * @param isHideHeader 是否隐藏头部UI
         * @param onListener
         */
        public static DatePicker setDatePicker(DatePicker dp, boolean isSelectOld, boolean isHideHeader, OnListener<String> onListener, int... initYMD) {
            //监听日期反馈的数据
            Calendar calendar = Calendar.getInstance();
            int year = calendar.get(Calendar.YEAR);
            int monday = calendar.get(Calendar.MONDAY) + 1;
            int date = calendar.get(Calendar.DATE);

            //手动赋值 初始化的日期
            if (initYMD.length >= 3) {
                year = Math.abs(initYMD[0]);
                monday = Math.abs(initYMD[1]);
                date = Math.abs(initYMD[2]);
            }

            //初始的日期
            onListener.onListener(String.valueOf(year), String.valueOf(monday), String.valueOf(date));

            //监听选择日期
            dp.init(year, monday - 1, date, (view1, year2, monthOfYear, dayOfMonth) -> {
                onListener.onListener(String.valueOf(year2), String.valueOf(monthOfYear), String.valueOf(dayOfMonth));
            });

            //是否可选择旧的日期
            if (!isSelectOld) {
                dp.setMinDate(System.currentTimeMillis() - 1000);
            }

            //是否隐藏头部UI
            if (isHideHeader) {
                try {
                    ViewGroup rootView = (ViewGroup) dp.getChildAt(0);
                    if (rootView == null) {
                        return dp;
                    }
                    View headView = rootView.getChildAt(0);
                    if (headView == null) {
                        return dp;
                    }
                    //6.0+及以上
                    int headerId = dp.getContext().getResources().getIdentifier("date_picker_header", "id", "android");
                    if (headerId == headView.getId()) {
                        headView.setVisibility(View.GONE);//隐藏并且不占位置
                    }
                } catch (Exception e) {

                }
            }
            return dp;
        }

        /**
         * 数字处理单位
         */
        public static class NumberUtils {

            private static final String MILLION_UNIT = "万";
            private static final String BILLION_UNIT = "亿";
            private static final BigDecimal ONE_HUNDRED_THOUSAND = new BigDecimal(100000);
            private static final BigDecimal ONE_HUNDRED_MILLION = new BigDecimal(100000000);
            private static final BigDecimal TEN_THOUSAND = new BigDecimal(10000);

            public static String addUnit(int value) {
                try {
                    if (value < 100000000) {
                        return amountConversion(new BigDecimal(value));
                    } else {
                        return amountConversionBillion(new BigDecimal(value)) + "亿";
                    }
                } catch (Exception e) {
                    return String.valueOf(value);
                }

            }

            /**
             * 将数字转换成以万为单位或者以亿为单位，因为在前端数字太大显示有问题
             *
             * @param amount
             * @return
             */
            @SuppressWarnings("deprecation")
            public static String amountConversion(BigDecimal amount) {
                if (amount == null) {
                    return null;
                }
                if (amount.abs().compareTo(ONE_HUNDRED_THOUSAND) < 0) {
                    // 如果小于10万
                    return amount.stripTrailingZeros().toPlainString();
                }
                if (amount.abs().compareTo(ONE_HUNDRED_MILLION) < 0) {
                    // 如果大于10万小于1亿
                    return amount.divide(TEN_THOUSAND, 4, BigDecimal.ROUND_HALF_UP).stripTrailingZeros().toPlainString()
                            + MILLION_UNIT;
                }
                return amount.divide(ONE_HUNDRED_MILLION, 4, BigDecimal.ROUND_HALF_UP).stripTrailingZeros().toPlainString()
                        + BILLION_UNIT;
            }

            /**
             * 将数字转换成以亿为单位
             *
             * @param amount
             * @return
             */
            @SuppressWarnings("deprecation")
            public static Double amountConversionBillion(BigDecimal amount) {
                if (amount == null) {
                    return null;
                }
                return amount.divide(ONE_HUNDRED_MILLION, 2, BigDecimal.ROUND_HALF_UP).stripTrailingZeros().doubleValue();
            }

        }

        //是否为平板
        public static boolean isPad(Context context) {
            boolean isPad = (context.getResources().getConfiguration().screenLayout
                    & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_LARGE;

            WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
            Display display = wm.getDefaultDisplay();
            DisplayMetrics dm = new DisplayMetrics();
            display.getMetrics(dm);
            double x = Math.pow(dm.widthPixels / dm.xdpi, 2);
            double y = Math.pow(dm.heightPixels / dm.ydpi, 2);
            double screenInches = Math.sqrt(x + y); // 屏幕尺寸
            return isPad || screenInches >= 7.0;
        }

        //是否为平板
        public static boolean isPad2(AppCompatActivity appCompatActivity) {
            int width = WindowUtils.getWindowUtilsWidth(appCompatActivity);
            int height = WindowUtils.getWindowUtilsHeight(appCompatActivity);
            if (width * 2 < height) {
                return false;
            } else {
                return true;
            }
        }

        //获取当前手机所有app信息
        public static List<AppBean> getAllAppData2(Context context) {
            List<AppBean> appBeanList = new ArrayList<>();
            PackageManager packageManager = context.getPackageManager();
            List<PackageInfo> list = packageManager.getInstalledPackages(PackageManager.GET_PERMISSIONS);
            for (PackageInfo packageInfo : list) {
                ApplicationInfo applicationInfo = packageInfo.applicationInfo;
                AppBean appBean = new AppBean(
                        packageInfo.packageName,//包名
                        String.valueOf(applicationInfo.loadLabel(packageManager)),//应用名称
                        applicationInfo.loadIcon(packageManager),//app图标
                        null,//触发的方法
                        packageInfo.versionName,//版本名称
                        packageInfo.versionCode//版本号
                );
                if (packageInfo.permissions != null) {
                    for (PermissionInfo p : packageInfo.permissions) {
                        appBean.permissions.add(p.name);
                    }
                }
                appBeanList.add(appBean);
            }
            return appBeanList;
        }

        public static class AppBean {

            public String packName;
            public String name;
            public Object appIcon;
            public String function;
            public List<String> permissions = new ArrayList<>();
            public String versionName;
            public int versionCode;

            public AppBean() {
                super();
            }

            public AppBean(String packName, String name, Object appIcon, String function, String versionName, int versionCode) {
                this.packName = packName;
                this.name = name;
                this.appIcon = appIcon;
                this.function = function;
                this.versionName = versionName;
                this.versionCode = versionCode;
            }

            @Override
            public String toString() {
                return "AppBean{" +
                        "packName='" + packName + '\'' +
                        ", name='" + name + '\'' +
                        ", appIcon=" + appIcon +
                        ", function='" + function + '\'' +
                        ", permissions=" + permissions +
                        ", versionName='" + versionName + '\'' +
                        ", versionCode=" + versionCode +
                        '}';
            }
        }

        /**
         * 数组替换字符串
         *
         * @param data   替换的主体内容
         * @param key    被替换的 样式
         * @param values 遍历替换的数组
         * @return
         */
        private static String replaceArray(String data, String key, String[] values) {
            if (data == null || data.length() == 0 || values == null || values.length == 0)
                return null;

            for (String value : values) {
                data = data.replaceFirst(key, value);
            }
            return data;
        }

        /**
         * 清除所有空格
         *
         * @param data
         * @return
         */
        public static String notBlanks(String data) {
            if (data == null) return "";
            return data.replaceAll("\\s*", "");
        }

        /**
         * 获取 Assets 文件里的具体值
         *
         * @param context
         * @param assetsName
         * @return
         */
        public static void getAssetsValue(Context context, String assetsName, OnListener<String> onListener) {
            Thread.getInstance(0).execute(new Runnable() {
                @Override
                public void run() {
                    try {
                        //获取输入流
                        InputStream inputStream = context.getResources().getAssets().open(assetsName);//这里的名字是你的txt 文本文件名称,在App,main文件夹下建一个assets文件夹，放入txt文本。
                        String data = ImageViewTools.inputStreamToString(inputStream);
                        onListener.onListener(data);
                    } catch (IOException e1) {
                        e1.printStackTrace();
                    }
                }
            });
        }

        //获取手机信息
        public static String appendPhoneInfo(Context context) {
            StringBuilder sb = new StringBuilder();
            try {
                PackageManager pm = context.getPackageManager();
                PackageInfo pi = pm.getPackageInfo(context.getPackageName(), PackageManager.GET_ACTIVITIES);
                //App版本
                sb.append("App Version: ");
                sb.append(pi.versionName);
                sb.append("_");
                sb.append(pi.versionCode + "\n");

                //Android版本号
                sb.append("OS Version: ");
                sb.append(Build.VERSION.RELEASE);
                sb.append("_");
                sb.append(Build.VERSION.SDK_INT + "\n");

                //手机制造商
                sb.append("Vendor: ");
                sb.append(Build.MANUFACTURER + "\n");

                //手机型号
                sb.append("Model: ");
                sb.append(Build.MODEL + "\n");

                //CPU架构
                sb.append("CPU: ");
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                    sb.append(Arrays.toString(Build.SUPPORTED_ABIS));
                } else {
                    sb.append(Build.CPU_ABI);
                }
            } catch (Exception e) {

            }
            return sb.toString();
        }

        /**
         * 获取 View 宽高
         *
         * @param view
         * @param onListener
         * @param isAsynchronous 是否异步
         */
        public static void getViewWidthHeight(View view, GT.OnListener<Integer> onListener, boolean... isAsynchronous) {
            if (view == null || onListener == null) return;
            if (isAsynchronous != null && isAsynchronous.length > 0 && isAsynchronous[0]) {
                GT.Thread.getInstance(0).execute(() -> getViewWH(view, onListener));
            } else {
                getViewWH(view, onListener);
            }
        }

        /**
         * 获取 View 宽高
         *
         * @param view
         * @param onListener
         */
        private static void getViewWH(View view, GT.OnListener<Integer> onListener) {
            final int[] width = {0};
            final int[] height = {0};
            try {
                //第一种方法获取
                ViewGroup.LayoutParams layoutParams = view.getLayoutParams();
                width[0] = layoutParams.width;
                height[0] = layoutParams.height;
                if (width[0] <= 0 || height[0] <= 0) {
                    //第二种方法获取
                    view.post(new Runnable() {
                        @Override
                        public void run() {
                            width[0] = view.getWidth();
                            height[0] = view.getHeight();
                            if (width[0] <= 0 || height[0] <= 0) {
                                //第三种方法获取  mIvMain.viewTreeObserver.addOnGlobalLayoutListener
                                view.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
                                    @Override
                                    public void onGlobalLayout() {
                                        view.getViewTreeObserver().removeOnGlobalLayoutListener(this);
                                        width[0] = view.getWidth();
                                        height[0] = view.getHeight();
                                        if (width[0] <= 0 || height[0] <= 0) {
                                            //第四种方法获取  addOnPreDrawListener
                                            view.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
                                                @Override
                                                public boolean onPreDraw() {
                                                    view.getViewTreeObserver().removeOnPreDrawListener(this);
                                                    width[0] = view.getWidth();
                                                    height[0] = view.getHeight();
                                                    GT.Thread.runAndroid(() -> onListener.onListener(width[0], height[0]));
                                                    return false;
                                                }
                                            });


                                        } else {
                                            GT.Thread.runAndroid(() -> onListener.onListener(width[0], height[0]));
                                        }
                                    }
                                });

                            } else {
                                GT.Thread.runAndroid(() -> onListener.onListener(width[0], height[0]));
                            }
                        }
                    });
                } else {
                    GT.Thread.runAndroid(() -> onListener.onListener(width[0], height[0]));
                }
            } catch (Exception e) {

            }
        }


    }

    //机型判断类
    public static class MIUIUtils {

        public static boolean isMIUI() {
            String manufacturer = Build.MANUFACTURER;
            //这个字符串可以自己定义,例如判断华为就填写huawei,魅族就填写meizu
            if ("xiaomi".equalsIgnoreCase(manufacturer)) {
                return true;
            }
            return false;
        }
    }

    //分享工具类
    public static class ShareUtils {

        /********************************************* 分享功能 *********************************/

        /**
         * 关于文中 AUTHORITY 参数描述 如下：
         * 需要在 配置文件中(AndroidManifest.xml) 添加这个配置：AUTHORITY
         * <p>
         * <provider
         * android:name="androidx.core.content.FileProvider"
         * android:authorities="com.gsls.gt.fileprovider"
         * android:exported="false"
         * android:grantUriPermissions="true">
         * <meta-data
         * android:name="android.support.FILE_PROVIDER_PATHS"
         * android:resource="@xml/file_paths" />
         * </provider>
         * <p>
         * file_paths 文件，直接引用GT库中的即可
         */

        public static final String TYPE_All = "*/*";//所有(不推荐,微信需要指定类型)
        public static final String TYPE_TEXT = "text/plain";//文本
        public static final String TYPE_IMAGE = "image/*";//图片
        public static final String TYPE_FILE = "file/*";//文件
        public static final String TYPE_VIDEO = "video/*";//视频
        public static final String TYPE_AUDIO = "audio/*";//音频
        public static final String TYPE_HTML = "text/html";//html
        public static final String TYPE_RESTS = "application/*";//其他类型

        public static final String SUCCESS = "SUCCESS";//发送成功
        public static final String Error = "Error";//发送错误
        public static final String FAIL = "FAIL";//发送失败

        /**
         * 分享 GIF 动态图
         *
         * @param context      上下文
         * @param url          网图 gif 网址
         * @param saveFileName gif 保存文件 纯名称，不包含扩展名 (如："gifName")
         * @param sendPack     发送指定的平台 可填 null
         * @param isAcceptor   是否留在接收平台
         * @param AUTHORITY    发送必要权限 (不了解的可 在GT源码搜索 "关于文中 AUTHORITY 参数描述")
         * @param oneListener  分享异步反馈，成功或失败和失败原因
         */
        public static void shareImageGif(Context context, String url, String saveFileName, String sendPack, boolean isAcceptor, String AUTHORITY, GT.OneListener<String> oneListener) {
            String savePath = GT.FileUtils.getGTPath(context) + saveFileName + ".gif";
            GT.HttpUtil.downloadFile(url, savePath, new HttpUtil.OnLoadData() {
                @Override
                public void onDownloadSuccess(File file) {
                    super.onDownloadSuccess(file);
                    ShareUtils.shareFile(context, file, GT.ShareUtils.TYPE_IMAGE, sendPack, isAcceptor, AUTHORITY, new OneListener<String>() {
                        @Override
                        public void onOneListener(String obj) {
                            super.onOneListener(obj);
                            oneListener.onOneListener(obj);
                        }
                    });
                }

                @Override
                public void onDownloadFailed(Exception e) {
                    super.onDownloadFailed(e);
                    oneListener.onOneListener(String.valueOf(e));
                }
            }, true);
        }

        /**
         * 万能 分享文件 (异步)
         *
         * @param context     上下文
         * @param file        分享文件
         * @param type        分享文件类型 (非必填，推荐填)
         * @param sendPack    指定发送app (非必填，第三方app包名如QQ：com.tencent.mobileqq)
         * @param isAcceptor  发送完是否留在接收方
         * @param AUTHORITY   发送必要权限 (不了解的可 在GT源码搜索 "关于文中 AUTHORITY 参数描述")
         * @param oneListener 发送状态回调 (非必填，推荐填)
         */
        public static void shareFile(Context context, File file, String type, String sendPack, boolean isAcceptor, String AUTHORITY, GT.OneListener<String> oneListener) {
            if (!file.exists()) {
                if (oneListener != null)
                    oneListener.onOneListener(FAIL);
                return;
            }
            GT.Thread.getInstance(0).execute(() -> {
                try {
                    shareFile(context, file, type, sendPack, isAcceptor, AUTHORITY);
                    if (oneListener != null)
                        oneListener.onOneListener(SUCCESS);
                } catch (Exception e) {
                    if (oneListener != null)
                        oneListener.onOneListener(Error);
                }

            });

        }

        /**
         * 万能 分享文件 (同步)
         *
         * @param context    上下文
         * @param file       分享文件
         * @param type       分享文件类型 (非必填，推荐填)
         * @param sendPack   指定发送app (非必填，第三方app包名如QQ：com.tencent.mobileqq)
         * @param isAcceptor 发送完是否留在接收方
         * @param AUTHORITY  发送必要权限 (不了解的可 在GT源码搜索 "关于文中 AUTHORITY 参数描述")
         */
        public static void shareFile(Context context, File file, String type, String sendPack, boolean isAcceptor, String AUTHORITY) {
            if (file == null || !file.exists()) return;
            Intent intent = new Intent(Intent.ACTION_SEND);
            if (sendPack != null && sendPack.length() > 0) {
                intent.setPackage(sendPack);
            }
            if (type == null) type = TYPE_All;
            intent.setType(type);
            Uri photoUri = FileProvider.getUriForFile(context, AUTHORITY, file);
            intent.putExtra(Intent.EXTRA_STREAM, photoUri);
            if (isAcceptor) {
                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            }
            context.startActivity(intent);
        }

        /**
         * 万能渠道-分享文字
         *
         * @param activity
         * @param title
         * @param content
         */
        public static void shareText(Activity activity, String title, String content) {
            Intent shareIntent = new Intent();
            shareIntent.setAction(Intent.ACTION_SEND);
            shareIntent.setType("text/plain");
            shareIntent.putExtra(Intent.EXTRA_TEXT, content);
            shareIntent = Intent.createChooser(shareIntent, title);
            activity.startActivity(shareIntent);
        }

        /**
         * 单独分享给QQ 文字
         *
         * @param context
         * @param title   分享标题
         * @param content 内容
         */
        public static void shareTextQQ(Context context, String title, String content) {
            try {
                Intent intent = new Intent("android.intent.action.SEND");
                intent.setType("text/plain");
                intent.putExtra(Intent.EXTRA_SUBJECT, title);
                intent.putExtra(Intent.EXTRA_TEXT, content);
                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                intent.setComponent(new ComponentName("com.tencent.mobileqq", "com.tencent.mobileqq.activity.JumpActivity"));
                context.startActivity(intent);
            } catch (Exception e) {

            }
        }

        /**
         * 单独分享给微信 文字
         *
         * @param context
         * @param title   分享标题
         * @param content 内容
         */
        public void shareTextWechat(Context context, String title, String content) {
            try {
                Intent intent = new Intent();
                ComponentName cop = new ComponentName("com.tencent.mm", "com.tencent.mm.ui.tools.ShareImgUI");
                intent.setComponent(cop);
                intent.setAction(Intent.ACTION_SEND);
                intent.putExtra(Intent.EXTRA_SUBJECT, title);
                intent.putExtra("android.intent.extra.TEXT", content);
                intent.putExtra("Kdescription", !TextUtils.isEmpty(content) ? content : "");
                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                context.startActivity(intent);
            } catch (Exception e) {

            }
        }

        /**
         * 单独分享给自定义 应用意图
         *
         * @param context
         * @param title   分享标题
         * @param content 内容
         * @param pkg     包名
         * @param cls     具体接受者-Activity
         */
        public void shareTextComponentName(Context context, String title, String content, String pkg, String cls) {
            try {
                Intent intent = new Intent();
                ComponentName cop = new ComponentName(pkg, cls);
                intent.setComponent(cop);
                intent.setAction(Intent.ACTION_SEND);
                intent.putExtra(Intent.EXTRA_SUBJECT, title);
                intent.putExtra("android.intent.extra.TEXT", content);
                intent.putExtra("Kdescription", !TextUtils.isEmpty(content) ? content : "");
                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                context.startActivity(intent);
            } catch (Exception e) {

            }
        }


        /**
         * 单独分享给QQ 图片
         *
         * @param context
         * @param imageUrl 网络图片
         */
        public void shareImageQQ(Context context, String imageUrl) {
            GT.Thread.getInstance(0).execute(new Runnable() {
                @Override
                public void run() {
                    Bitmap imageBitmap = GT.ImageViewTools.getImageBitmap(imageUrl);
                    GT.Thread.runJava(new Runnable() {
                        @Override
                        public void run() {
                            shareImageQQ(context, imageBitmap);
                        }
                    });
                }
            });
        }

        /**
         * 单独分享给QQ 图片
         *
         * @param context
         * @param bitmap
         */
        public void shareImageQQ(Context context, Bitmap bitmap) {
            try {
                Uri uriToImage = Uri.parse(MediaStore.Images.Media.insertImage(
                        context.getContentResolver(), bitmap, null, null));
                Intent shareIntent = new Intent();
                shareIntent.setAction(Intent.ACTION_SEND);
                shareIntent.putExtra(Intent.EXTRA_STREAM, uriToImage);
                shareIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                shareIntent.setType("image/*");
                // 遍历所有支持发送图片的应用。找到需要的应用
                ComponentName componentName = new ComponentName("com.tencent.mobileqq", "com.tencent.mobileqq.activity.JumpActivity");

                shareIntent.setComponent(componentName);
                context.startActivity(Intent.createChooser(shareIntent, "Share"));
            } catch (Exception e) {
            }
        }

        /**
         * 单独分享给微信 图片
         *
         * @param context
         * @param imageUrl 网络图片
         */
        public void shareImageWechat(Context context, String imageUrl) {
            GT.Thread.getInstance(0).execute(new Runnable() {
                @Override
                public void run() {
                    Bitmap imageBitmap = GT.ImageViewTools.getImageBitmap(imageUrl);
                    GT.Thread.runJava(new Runnable() {
                        @Override
                        public void run() {
                            shareImageWechat(context, imageBitmap);
                        }
                    });
                }
            });
        }

        /**
         * 单独分享给微信 图片
         *
         * @param context
         * @param bitmap
         */
        public static void shareImageWechat(Context context, Bitmap bitmap) {
            try {
                Uri uriToImage = Uri.parse(MediaStore.Images.Media.insertImage(
                        context.getContentResolver(), bitmap, null, null));
                Intent shareIntent = new Intent();
                shareIntent.setAction(Intent.ACTION_SEND);
                shareIntent.putExtra(Intent.EXTRA_STREAM, uriToImage);
                shareIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                shareIntent.setType("image/*");
                // 遍历所有支持发送图片的应用。找到需要的应用
                ComponentName componentName = new ComponentName("com.tencent.mm", "com.tencent.mm.ui.tools.ShareImgUI");
                shareIntent.setComponent(componentName);
                context.startActivity(Intent.createChooser(shareIntent, "Share"));
            } catch (Exception e) {
            }
        }


        /**
         * 单独分享图片给 自定义意图
         *
         * @param context
         * @param bitmap  网络图片
         * @param content 内容
         * @param pkg     包名
         * @param cls     具体接受者-Activity
         */
        public void shareImageComponentName(Context context, String imageUrl, String pkg, String cls) {
            GT.Thread.getInstance(0).execute(new Runnable() {
                @Override
                public void run() {
                    Bitmap imageBitmap = GT.ImageViewTools.getImageBitmap(imageUrl);
                    GT.Thread.runJava(new Runnable() {
                        @Override
                        public void run() {
                            shareImageComponentName(context, imageBitmap, pkg, cls);
                        }
                    });
                }
            });
        }


        /**
         * 单独分享图片给 自定义意图
         *
         * @param context
         * @param bitmap
         * @param content 内容
         * @param pkg     包名
         * @param cls     具体接受者-Activity
         */
        public static void shareImageComponentName(Context context, Bitmap bitmap, String pkg, String cls) {
            try {
                Uri uriToImage = Uri.parse(MediaStore.Images.Media.insertImage(context.getContentResolver(), bitmap, null, null));
                Intent shareIntent = new Intent();
                shareIntent.setAction(Intent.ACTION_SEND);
                shareIntent.putExtra(Intent.EXTRA_STREAM, uriToImage);
                shareIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                shareIntent.setType("image/*");
                // 遍历所有支持发送图片的应用。找到需要的应用
                ComponentName componentName = new ComponentName(pkg, cls);
                shareIntent.setComponent(componentName);
                context.startActivity(Intent.createChooser(shareIntent, "Share"));
            } catch (Exception e) {
            }
        }


        /**
         * 分享图片（不推荐方式）
         *
         * @param activity
         * @param bitmap
         */
        public static void shareImageBitmap_F(Activity activity, Bitmap bitmap, String title) {
            Intent intent = new Intent(Intent.ACTION_SEND);
            intent.setType("image/*");
            Uri u = Uri.parse(MediaStore.Images.Media.insertImage(activity.getContentResolver(), bitmap, null, null));//将截图bitmap存系统相册
            intent.putExtra(Intent.EXTRA_STREAM, u);
            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            activity.startActivity(Intent.createChooser(intent, title));
        }

        /**
         * 分享图片
         *
         * @param activity
         * @param uri
         */
        public static void shareImageUri(Activity activity, Uri uri) {
            Intent intent = new Intent(Intent.ACTION_SEND);
            intent.setType("image/*");
            intent.putExtra(Intent.EXTRA_STREAM, uri);
            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            activity.startActivity(Intent.createChooser(intent, "分享图片"));
        }

        /**
         * 分享图片(推荐方式)
         *
         * @param activity
         * @param view
         * @param AUTHORITY (不了解的可 在GT源码搜索 "关于文中 AUTHORITY 参数描述")
         */
        public static void shareImageView_T(Activity activity, View view, String AUTHORITY) {
            Bitmap bitmapFromView = ApplicationUtils.createBitmapFromView(view);
            if (bitmapFromView == null) return;
            String gtPath = FileUtils.getGTPath(activity) + "share/";
            Uri uri = ApplicationUtils.saveBitmapToSD(activity, bitmapFromView, gtPath, GT_Date.getDateTime_CH() + "-gt_share.png", AUTHORITY);
            shareImageUri(activity, uri);
        }

        /**
         * 分享图片(推荐方式)
         *
         * @param activity
         * @param bitmapFromView
         * @param AUTHORITY
         */
        public static void shareBitmapView_T(Activity activity, Bitmap bitmapFromView, String AUTHORITY) {
            String gtPath = FileUtils.getGTPath(activity) + "share/";
            Uri uri = ApplicationUtils.saveBitmapToSD(activity, bitmapFromView, gtPath, GT_Date.getDateTime_CH() + "-gt_share.png", AUTHORITY);
            shareImageUri(activity, uri);
        }

        /**
         * 指定分享的渠道（不推荐方式）
         *
         * @param context
         * @param bitmap
         * @param shareType 指定分享渠道
         */
        public void shareImageType_F(Context context, Bitmap bitmap, String shareType) {
            try {
                ComponentName componentName = null;
                switch (shareType) {
                    case "新浪"://新浪
                        componentName = new ComponentName("com.sina.weibo", "com.sina.weibo.composerinde.ComposerDispatchActivity");
                        break;
                    case "QQ空间"://QQ空间
                        componentName = new ComponentName("com.qzone", "com.qzonex.module.operation.ui.QZonePublishMoodActivity");
                        return;
                    case "QQ"://QQ
                        componentName = new ComponentName("com.tencent.mobileqq", "com.tencent.mobileqq.activity.JumpActivity");
                        break;
                    case "微信"://微信
                        componentName = new ComponentName("com.tencent.mm", "com.tencent.mm.ui.tools.ShareImgUI");
                        break;
                    case "微信朋友圈"://微信朋友圈
                        componentName = new ComponentName("com.tencent.mm", "com.tencent.mm.ui.tools.ShareToTimeLineUI");
                        break;
                    case "微信收藏"://微信收藏
                        componentName = new ComponentName("com.tencent.mm", "com.tencent.mm.ui.tools.AddFavoriteUI");
                        break;
                    case "分享更多"://分享更多
                        try {
                            shareImageBitmap_F((Activity) context, bitmap, "选择分享渠道");
                        } catch (Exception e) {
                            GT.toast(context, "暂未安装改APP,分享失败.");
                        }
                        return;
                }
                Uri uriToImage = Uri.parse(MediaStore.Images.Media.insertImage(context.getContentResolver(), bitmap, null, null));
                Intent shareIntent = new Intent();
                shareIntent.setAction(Intent.ACTION_SEND);
                shareIntent.putExtra(Intent.EXTRA_STREAM, uriToImage);
                shareIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                shareIntent.setType("image/*");
                // 遍历所有支持发送图片的应用。找到需要的应用
                shareIntent.setComponent(componentName);
                context.startActivity(Intent.createChooser(shareIntent, "Share"));
            } catch (Exception e) {
                GT.errs("分享异常:" + e);
            }
        }

        /**
         * 指定分享的渠道（推荐方式）
         *
         * @param context
         * @param bitmap
         * @param shareType 指定分享渠道
         * @param AUTHORITY (不了解的可 在GT源码搜索 "关于文中 AUTHORITY 参数描述")
         */
        public void shareImageType_T(Context context, Bitmap bitmap, String shareType, String AUTHORITY) {
            try {
                ComponentName componentName = null;
                switch (shareType) {
                    case "新浪"://新浪
                        componentName = new ComponentName("com.sina.weibo", "com.sina.weibo.composerinde.ComposerDispatchActivity");
                        break;
                    case "QQ空间"://QQ空间
                        componentName = new ComponentName("com.qzone", "com.qzonex.module.operation.ui.QZonePublishMoodActivity");
                        return;
                    case "QQ"://QQ
                        componentName = new ComponentName("com.tencent.mobileqq", "com.tencent.mobileqq.activity.JumpActivity");
                        break;
                    case "微信"://微信
                        componentName = new ComponentName("com.tencent.mm", "com.tencent.mm.ui.tools.ShareImgUI");
                        break;
                    case "微信朋友圈"://微信朋友圈
                        componentName = new ComponentName("com.tencent.mm", "com.tencent.mm.ui.tools.ShareToTimeLineUI");
                        break;
                    case "微信收藏"://微信收藏
                        componentName = new ComponentName("com.tencent.mm", "com.tencent.mm.ui.tools.AddFavoriteUI");
                        break;
                    case "分享更多"://分享更多
                        try {
                            shareImageBitmap_F((Activity) context, bitmap, "选择分享渠道");
                        } catch (Exception e) {
                            GT.toast(context, "暂未安装改APP,分享失败.");
                        }
                        return;
                }
                String gtPath = FileUtils.getGTPath(context) + "share/";
                Uri uriToImage = ApplicationUtils.saveBitmapToSD(context, bitmap, gtPath, GT_Date.getDateTime_CH() + "-gt_share.png", AUTHORITY);
                Intent shareIntent = new Intent();
                shareIntent.setAction(Intent.ACTION_SEND);
                shareIntent.putExtra(Intent.EXTRA_STREAM, uriToImage);
                shareIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                shareIntent.setType("image/*");
                // 遍历所有支持发送图片的应用。找到需要的应用
                shareIntent.setComponent(componentName);
                context.startActivity(Intent.createChooser(shareIntent, "Share"));
            } catch (Exception e) {
                GT.errs("分享异常:" + e);
            }
        }

    }

    //跳转工具类
    public static class SkipUtils {

        //网页
        public static void skipWeb(Context context, String url) {
            Intent intent = new Intent(Intent.ACTION_VIEW);
            intent.setData(Uri.parse(url));
            context.startActivity(intent);
        }

        //壁纸
        public static void skipWallpaper(Context context, String title) {
            Intent chooseIntent = new Intent(Intent.ACTION_SET_WALLPAPER);
            context.startActivity(Intent.createChooser(chooseIntent, title));
        }

        //系统设置
        public static void skipSystemSettings(Context context) {
            Intent intent = new Intent(Settings.ACTION_SETTINGS);
            context.startActivity(intent);
        }

        //无线与网络
        public static void skipWirelessAndNetworking(Context context) {
            Intent intent = new Intent(Settings.ACTION_AIRPLANE_MODE_SETTINGS);
            context.startActivity(intent);
        }

        //WIFI列表
        public static void skipWIFI(Context context) {
            Intent intent = new Intent(Settings.ACTION_WIFI_SETTINGS);
            context.startActivity(intent);
        }

        //蓝牙
        public static void skipBluetooth(Context context) {
            Intent intent = new Intent(Settings.ACTION_BLUETOOTH_SETTINGS);
            context.startActivity(intent);
        }

        //移动网络
        public static void skipMobileNetwork(Context context) {
            Intent intent = new Intent(Settings.ACTION_DATA_ROAMING_SETTINGS);
            context.startActivity(intent);
        }

        //应用详情
        public static void skipApplicationDetails(Context context) {
            Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS, Uri.fromParts("package", context.getPackageName(), null));
            context.startActivity(intent);
        }


        //开发者选项
        public static void skipDeveloperOptions(Context context) {
            Intent intent = new Intent(Settings.ACTION_APPLICATION_DEVELOPMENT_SETTINGS);
            context.startActivity(intent);
        }

        //所有应用
        public static void skipAllApplications(Context context) {
            Intent intent = new Intent(Settings.ACTION_APPLICATION_SETTINGS);
            context.startActivity(intent);
        }

        //日期和时间
        public static void skipDateAddTime(Context context) {
            Intent intent = new Intent(Settings.ACTION_DATE_SETTINGS);
            context.startActivity(intent);
        }

        //关于本机
        public static void skipAboutThisMachine(Context context) {
            Intent intent = new Intent(Settings.ACTION_DEVICE_INFO_SETTINGS);
            context.startActivity(intent);
        }

        //显示与亮度
        public static void skipDisplayAndBrightness(Context context) {
            Intent intent = new Intent(Settings.ACTION_DISPLAY_SETTINGS);
            context.startActivity(intent);
        }

        //无障碍服务
        public static void skipBarrierFreeService(Context context) {
            Intent intent = new Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS);
            context.startActivity(intent);
        }

        //管理输入法
        public static void skipManageInputMethods(Context context) {
            Intent intent = new Intent(Settings.ACTION_INPUT_METHOD_SETTINGS);
            context.startActivity(intent);
        }

        //语言
        public static void skipLanguage(Context context) {
            Intent intent = new Intent(Settings.ACTION_LOCALE_SETTINGS);
            context.startActivity(intent);
        }

        //存储空间
        public static void skipStorageSpace(Context context) {
            Intent intent = new Intent(Settings.ACTION_INTERNAL_STORAGE_SETTINGS);
            context.startActivity(intent);
        }

        //位置信息
        public static void skipLocationInformation(Context context) {
            Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
            context.startActivity(intent);
        }

        //NFC
        public static void skipNFC(Context context) {
            Intent intent = new Intent(Settings.ACTION_NFC_SETTINGS);
            context.startActivity(intent);
        }

        //APN
        public static void skipAPN(Context context) {
            Intent intent = new Intent(Settings.ACTION_APN_SETTINGS);
            context.startActivity(intent);
        }

        //权限与隐私
        public static void skipRightsAndPrivacy(Context context) {
            Intent intent = new Intent(Settings.ACTION_PRIVACY_SETTINGS);
            context.startActivity(intent);
        }

        //搜索界面设置
        public static void skipSearchInterfaceSettings(Context context) {
            Intent intent = new Intent(Settings.ACTION_SEARCH_SETTINGS);
            context.startActivity(intent);
        }

        //密码与安全
        public static void skipPasswordAndSecurity(Context context) {
            Intent intent = new Intent(Settings.ACTION_SECURITY_SETTINGS);
            context.startActivity(intent);
        }

        //声音与振动
        public static void skipSoundAndVibration(Context context) {
            Intent intent = new Intent(Settings.ACTION_SOUND_SETTINGS);
            context.startActivity(intent);
        }

        //用户与账号
        public static void skipUsersAndAccounts(Context context) {
            Intent intent = new Intent(Settings.ACTION_SYNC_SETTINGS);
            context.startActivity(intent);
        }

        //添加账号
        public static void skipAddAccounts(Context context) {
            Intent intent = new Intent(Settings.ACTION_ADD_ACCOUNT);
            context.startActivity(intent);
        }

        //个人字典
        public static void skipPersonalDictionary(Context context) {
            Intent intent = new Intent(Settings.ACTION_USER_DICTIONARY_SETTINGS);
            context.startActivity(intent);
        }

        //屏保
        public static void skipMobileScreen(Context context) {
            Intent intent = new Intent(Settings.ACTION_DREAM_SETTINGS);
            context.startActivity(intent);
        }

    }

    //App 资源工具类
    public static class Res {
        private static Context getContext(Context context) {
            if (context == null) {
                context = GT.getActivity();
            }
            return context;
        }

        public static String string(Context context, @StringRes int id, Object... formatArgs) {
            if (formatArgs == null || formatArgs.length == 0) {
                return getContext(context).getResources().getString(id);
            }
            return getContext(context).getResources().getString(id, formatArgs);
        }


        public static int color(Context context, @ColorRes int id) {
            return ContextCompat.getColor(getContext(context), id);
        }

        public static Drawable drawable(Context context, @DrawableRes int id) {
            return ContextCompat.getDrawable(getContext(context), id);
        }

        public static float dimen(Context context, @DimenRes int id) {
            return getContext(context).getResources().getDimension(id);
        }

        public static XmlResourceParser animation(Context context, @AnimatorRes int id) {
            return getContext(context).getResources().getAnimation(id);
        }

        public static <T> T inflate(Context context, @LayoutRes int id) {
            return (T) LayoutInflater.from(getContext(context)).inflate(id, null);
        }

        public static <T> T view(Object findObject, @IdRes int id) {
            findObject = AnnotationAssist.returnActivityOrView(findObject)[0];
            if (findObject instanceof Activity) {
                return (T) ((Activity) findObject).findViewById(id);
            } else if (findObject instanceof View) {
                return (T) ((View) findObject).findViewById(id);
            } else {
                return null;
            }
        }

        public static String[] stringArray(Context context, @ArrayRes int id) {
            return getContext(context).getResources().getStringArray(id);
        }

        public static int[] intArray(Context context, @ArrayRes int id) {
            return getContext(context).getResources().getIntArray(id);
        }

        public static String[] assetLocales(Context context) {
            return getContext(context).getResources().getAssets().getLocales();
        }


    }

    /**
     * 动态设置文字颜色
     */
    public static class StrColor {

        /**
         * //单个关键字
         * <p>
         * //设置在wholeStr中第一次出现的keyStr的颜色
         * <p>
         * //@param wholeStr  全部文字
         * <p>
         * //@param keyStr  关键字
         * <p>
         * //@param keyStrColor 关键字的颜色
         */
        public static SpannableStringBuilder to(TextView tv, String allStr, String keyStr, Object color) {
            if (!TextUtils.isEmpty(allStr) && !TextUtils.isEmpty(keyStr) && allStr.contains(keyStr)) {
                int start = allStr.indexOf(keyStr);
                int end = start + keyStr.length();
                SpannableStringBuilder spBuilder = new SpannableStringBuilder(allStr);
                int color1 = 0;
                try {
                    if (color instanceof Integer) {
                        int colorValue = Integer.parseInt(String.valueOf(color));
                        if (colorValue > 0) {
                            color1 = tv.getContext().getResources().getColor(colorValue);
                        } else {
                            color1 = colorValue;
                        }
                    } else if (color instanceof String) {
                        color1 = Color.parseColor(String.valueOf(color));
                    }
                } catch (Exception e) {

                }
                ForegroundColorSpan foregroundColorSpan = new ForegroundColorSpan(color1);
                spBuilder.setSpan(foregroundColorSpan, start, end, Spannable.SPAN_INCLUSIVE_INCLUSIVE);
                tv.setText(spBuilder);
                return spBuilder;
            } else {
                return null;
            }

        }

        /**
         * //多个关键字
         * <p>
         * //设置在wholeStr中第一次出现的keyStr的颜色
         * <p>
         * //@param wholeStr  全部文字
         * <p>
         * //@param keyStrMap key:关键字Value:颜色
         */
        public static SpannableStringBuilder to(TextView tv, String allStr, Map<String, Object> map) {
            if (!TextUtils.isEmpty(allStr)) {
                SpannableStringBuilder spBuilder = new SpannableStringBuilder(allStr);
                Set<String> strings = map.keySet();//将Map中所有的键存入到set集合中
                for (String keyStr : strings) {
                    if (!TextUtils.isEmpty(keyStr) && allStr.contains(keyStr)) {
                        int color1 = 0;
                        Object color = map.get(keyStr);
                        try {
                            if (color instanceof Integer) {
                                int colorValue = Integer.parseInt(String.valueOf(color));
                                if (colorValue > 0) {
                                    color1 = tv.getContext().getResources().getColor(colorValue);
                                } else {
                                    color1 = colorValue;
                                }
                            } else if (color instanceof String) {
                                color1 = Color.parseColor(String.valueOf(color));
                            }
                        } catch (Exception e) {

                        }
                        CharacterStyle charaStyle = new ForegroundColorSpan(color1);
                        int start = allStr.indexOf(keyStr);
                        int end = start + keyStr.length();
                        spBuilder.setSpan(charaStyle, start, end, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
                        tv.setText(spBuilder);
                    }
                }
                return spBuilder;
            } else {
                return null;

            }

        }

        /**
         * //多个关键字
         * <p>
         * //设置指定位置的keyStr的颜色
         * <p>
         * //@param wholeStr  全部文字
         * <p>
         * //@param keyStringInfos 关键字的一些信息(起始位置，结束位置，颜色值)
         */
        public static SpannableStringBuilder to(TextView tv, String wholeStr, int start, int end, Object color) {
            if (!TextUtils.isEmpty(wholeStr) && start >= 0 && end >= 0) {
                SpannableStringBuilder spBuilder = new SpannableStringBuilder(wholeStr);
                try {
                    String key = wholeStr.substring(start > 0 ? -1 : 0, end);
                    to(tv, wholeStr, key, color);
                } catch (Exception e) {

                }
                return spBuilder;
            } else {
                return null;
            }
        }

        /**
         * //多个关键字
         * <p>
         * //设置指定位置的keyStr的颜色
         * <p>
         * //@param wholeStr  全部文字
         * <p>
         * //@param keyStringInfos 关键字的一些信息(起始位置，结束位置，颜色值)
         */
        public static SpannableStringBuilder to(TextView tv, String wholeStr, String start, String end, Object color) {
            if (!TextUtils.isEmpty(wholeStr) && !TextUtils.isEmpty(start) && !TextUtils.isEmpty(end)) {
                SpannableStringBuilder spBuilder = new SpannableStringBuilder(wholeStr);
                try {
                    int a = wholeStr.indexOf(start);
                    int b = wholeStr.lastIndexOf(end) + end.length();
                    if (a != -1 && b != -1 && b > a) {
                        String key = wholeStr.substring(a, b);
                        to(tv, wholeStr, key, color);
                    }
                } catch (Exception e) {

                }
                return spBuilder;
            } else {
                return null;
            }
        }

        /**
         * //单个关键字
         * <p>
         * //设置在wholeStr中第一次出现的keyStr的颜色
         * <p>
         * //@param wholeStr  全部文字
         * <p>
         * //@param keyStr  关键字
         * <p>
         * //@param keyStrColor 关键字的颜色
         */
        public static SpannableStringBuilder to(Context context, String allStr, String keyStr, Object color) {
            if (!TextUtils.isEmpty(allStr) && !TextUtils.isEmpty(keyStr) && allStr.contains(keyStr)) {
                int start = allStr.indexOf(keyStr);
                int end = start + keyStr.length();
                SpannableStringBuilder spBuilder = new SpannableStringBuilder(allStr);
                int color1 = 0;
                try {
                    if (color instanceof Integer) {
                        int colorValue = Integer.parseInt(String.valueOf(color));
                        if (colorValue > 0) {
                            color1 = context.getResources().getColor(colorValue);
                        } else {
                            color1 = colorValue;
                        }
                    } else if (color instanceof String) {
                        color1 = Color.parseColor(String.valueOf(color));
                    }
                } catch (Exception e) {

                }
                ForegroundColorSpan foregroundColorSpan = new ForegroundColorSpan(color1);
                spBuilder.setSpan(foregroundColorSpan, start, end, Spannable.SPAN_INCLUSIVE_INCLUSIVE);
                return spBuilder;
            } else {
                return null;
            }

        }

        /**
         * //多个关键字
         * <p>
         * //设置在wholeStr中第一次出现的keyStr的颜色
         * <p>
         * //@param wholeStr  全部文字
         * <p>
         * //@param keyStrMap key:关键字Value:颜色
         */
        public static SpannableStringBuilder to(Context context, String allStr, Map<String, Object> map) {
            if (!TextUtils.isEmpty(allStr)) {
                SpannableStringBuilder spBuilder = new SpannableStringBuilder(allStr);
                Set<String> strings = map.keySet();//将Map中所有的键存入到set集合中
                for (String keyStr : strings) {
                    if (!TextUtils.isEmpty(keyStr) && allStr.contains(keyStr)) {
                        int color1 = 0;
                        Object color = map.get(keyStr);
                        try {
                            if (color instanceof Integer) {
                                int colorValue = Integer.parseInt(String.valueOf(color));
                                if (colorValue > 0) {
                                    color1 = context.getResources().getColor(colorValue);
                                } else {
                                    color1 = colorValue;
                                }
                            } else if (color instanceof String) {
                                color1 = Color.parseColor(String.valueOf(color));
                            }
                        } catch (Exception e) {

                        }
                        CharacterStyle charaStyle = new ForegroundColorSpan(color1);
                        int start = allStr.indexOf(keyStr);
                        int end = start + keyStr.length();
                        spBuilder.setSpan(charaStyle, start, end, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
                    }
                }
                return spBuilder;
            } else {
                return null;

            }

        }

        /**
         * //多个关键字
         * <p>
         * //设置指定位置的keyStr的颜色
         * <p>
         * //@param wholeStr  全部文字
         * <p>
         * //@param keyStringInfos 关键字的一些信息(起始位置，结束位置，颜色值)
         */
        public static SpannableStringBuilder to(Context context, String wholeStr, int start, int end, Object color) {
            if (!TextUtils.isEmpty(wholeStr) && start >= 0 && end >= 0) {
                SpannableStringBuilder spBuilder = new SpannableStringBuilder(wholeStr);
                try {
                    String key = wholeStr.substring(start > 0 ? -1 : 0, end);
                    to(context, wholeStr, key, color);
                } catch (Exception e) {

                }
                return spBuilder;
            } else {
                return null;
            }
        }

        /**
         * //多个关键字
         * <p>
         * //设置指定位置的keyStr的颜色
         * <p>
         * //@param wholeStr  全部文字
         * <p>
         * //@param keyStringInfos 关键字的一些信息(起始位置，结束位置，颜色值)
         */
        public static SpannableStringBuilder to(Context context, String wholeStr, String start, String end, Object color) {
            if (!TextUtils.isEmpty(wholeStr) && !TextUtils.isEmpty(start) && !TextUtils.isEmpty(end)) {
                SpannableStringBuilder spBuilder = new SpannableStringBuilder(wholeStr);
                try {
                    int a = wholeStr.indexOf(start);
                    int b = wholeStr.lastIndexOf(end) + end.length();
                    if (a != -1 && b != -1 && b > a) {
                        String key = wholeStr.substring(a, b);
                        to(context, wholeStr, key, color);
                    }
                } catch (Exception e) {
                }
                return spBuilder;
            } else {
                return null;
            }
        }


    }

    /**
     * 图片资源转换工具类
     */
    public static class ImageViewTools {

        /**
         * 替换视图
         *
         * @param oldView 旧的视图
         * @param newView 新的视图
         */
        public static void replacementView(View oldView, View newView) {
            ViewParent parent = oldView.getParent();
            if (parent == null) return;
            if (parent instanceof ViewGroup) {
                ViewGroup viewGroup = (ViewGroup) parent;
                for (int i = 0; i < viewGroup.getChildCount(); i++) {
                    View childAt = viewGroup.getChildAt(i);
                    if (childAt == oldView) {
                        viewGroup.removeView(childAt);
                        viewGroup.addView(newView, i);
                        return;
                    }
                }

            }
        }

        /**
         * 解析二维码
         *
         * @param bitmap
         * @param onListener
         * @param isSynchronization 是否同步解析 false:异步解析 true:同步解析
         */
        public static void getQrCodeInformationSy(Bitmap bitmap, GT.OneListener<String> onListener, boolean... isSynchronization) {
            if (isSynchronization != null && isSynchronization.length > 0 && isSynchronization[0]) {
                getQrCodeInformation(bitmap, onListener);
            } else {
                GT.Thread.getInstance(0).execute(new Runnable() {
                    @Override
                    public void run() {
                        getQrCodeInformation(bitmap, onListener);
                    }
                });
            }
        }

        /**
         * 解析二维码（默认同步解析）
         *
         * @param bitmap
         * @param onListener
         */
        public static void getQrCodeInformation(Bitmap bitmap, GT.OneListener<String> onListener) {
            int width = bitmap.getWidth();
            int height = bitmap.getHeight();
            int[] ps = new int[width * height];
            bitmap.getPixels(ps, 0, width, 0, 0, width, height);
            LuminanceSource src = new RGBLuminanceSource(width, height, ps);
            Binarizer rizer = new HybridBinarizer(src);
            BinaryBitmap bbmap = new BinaryBitmap(rizer);
            QRCodeReader read = new QRCodeReader();
            try {
                Result result = read.decode(bbmap);
                //根据获取到的文本内容进行下一步处理,这里是打开网址
                String value = result.getText();
                onListener.onOneListener(value);
            } catch (Exception e) {
                onListener.onOneListener(null);
                e.printStackTrace();
            }
        }

        /**
         * 扫二维码请参考: https://blog.csdn.net/u010618194/article/details/77891313
         * 带 logo二维码
         *
         * @param content      字符串内容
         * @param width        二维码宽度
         * @param height       二维码高度
         * @param color_black  黑色色块
         * @param color_white  白色色块
         * @param resLogo      logo图片 (非必填)
         * @param logoPercent  logo所占百分比
         * @param bitmap_black 用来代替黑色色块的图片 (非必填：不推荐填)
         * @return
         */
        public static Bitmap createQRCodeBitmap(Context context, String content, int width, int height, int color_black, int color_white, int resLogo, float logoPercent, Bitmap... bitmap_black) {
            return createQRCodeBitmap(content, width, width, "UTF-8", "L", "0", color_black, color_white, GTEKt.bitmap(context, resLogo), logoPercent, bitmap_black);
        }

        /**
         * 扫二维码请参考: https://blog.csdn.net/u010618194/article/details/77891313
         * 带 logo二维码
         *
         * @param content      字符串内容
         * @param width        二维码宽度
         * @param height       二维码高度
         * @param color_black  黑色色块
         * @param color_white  白色色块
         * @param logoBitmap   logo图片 (非必填)
         * @param logoPercent  logo所占百分比
         * @param bitmap_black 用来代替黑色色块的图片 (非必填：不推荐填)
         * @return
         */
        public static Bitmap createQRCodeBitmap(String content, int width, int height, int color_black, int color_white, Bitmap logoBitmap, float logoPercent, Bitmap... bitmap_black) {
            return createQRCodeBitmap(content, width, width, "UTF-8", "L", "0", color_black, color_white, logoBitmap, logoPercent, bitmap_black);
        }

        /**
         * 扫二维码请参考: https://blog.csdn.net/u010618194/article/details/77891313
         *
         * @param content                字符串内容
         * @param width                  二维码宽度
         * @param height                 二维码高度
         * @param character_set          编码方式（一般使用UTF-8）
         * @param error_correction_level 容错率 L：7% M：15% Q：25% H：35%
         * @param margin                 空白边距（二维码与边框的空白区域）
         * @param color_black            黑色色块
         * @param color_white            白色色块
         * @param logoBitmap             logo图片 (非必填)
         * @param logoPercent            logo所占百分比
         * @param bitmap_black           用来代替黑色色块的图片 (非必填：不推荐填)
         * @return
         */
        public static Bitmap createQRCodeBitmap(String content, int width, int height, String character_set,
                                                String error_correction_level, String margin, int color_black,
                                                int color_white, Bitmap logoBitmap, float logoPercent, Bitmap... bitmap_black) {
            // 字符串内容判空
            if (TextUtils.isEmpty(content)) {
                return null;
            }
            // 宽和高>=0
            if (width < 0 || height < 0) {
                return null;
            }
            try {
                //设置二维码相关配置,生成BitMatrix(位矩阵)对象
                Hashtable<EncodeHintType, String> hints = new Hashtable<>();
                // 字符转码格式设置
                if (!TextUtils.isEmpty(character_set)) {
                    hints.put(EncodeHintType.CHARACTER_SET, character_set);
                }
                // 容错率设置
                if (!TextUtils.isEmpty(error_correction_level)) {
                    hints.put(EncodeHintType.ERROR_CORRECTION, error_correction_level);
                }
                // 空白边距设置
                if (!TextUtils.isEmpty(margin)) {
                    hints.put(EncodeHintType.MARGIN, margin);
                }

                //将配置参数传入到QRCodeWriter的encode方法生成BitMatrix(位矩阵)对象
                BitMatrix bitMatrix = new QRCodeWriter().encode(content, BarcodeFormat.QR_CODE, width, height, hints);

                //创建像素数组,并根据BitMatrix(位矩阵)对象为数组元素赋颜色值
                Bitmap black = null;
                if (bitmap_black != null && bitmap_black.length > 0) {
                    //从当前位图按一定的比例创建一个新的位图
                    black = Bitmap.createScaledBitmap(bitmap_black[0], width, height, false);
                }

                //创建像素数组,并根据BitMatrix(位矩阵)对象为数组元素赋颜色值
                int[] pixels = new int[width * height];
                for (int y = 0; y < height; y++) {
                    for (int x = 0; x < width; x++) {
                        //bitMatrix.get(x,y)方法返回true是黑色色块，false是白色色块
                        if (bitMatrix.get(x, y)) {
                            if (black != null) {//图片不为null，则将黑色色块换为新位图的像素。
                                pixels[y * width + x] = black.getPixel(x, y);
                            } else {
                                pixels[y * width + x] = color_black;//黑色色块像素设置
                            }
                        } else {
                            pixels[y * width + x] = color_white;// 白色色块像素设置
                        }
                    }
                }

                //创建Bitmap对象,根据像素数组设置Bitmap每个像素点的颜色值,并返回Bitmap对象
                Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
                bitmap.setPixels(pixels, 0, width, 0, 0, width, height);

                //为二维码添加logo图标
                if (logoBitmap != null) {
                    return addLogo(bitmap, logoBitmap, logoPercent);
                }
                return bitmap;
            } catch (WriterException e) {
                e.printStackTrace();
                return null;
            }
        }

        /**
         * 扫二维码请参考: https://blog.csdn.net/u010618194/article/details/77891313
         * 向二维码中间添加logo图片(图片合成)
         *
         * @param srcBitmap   原图片（生成的简单二维码图片）
         * @param logoBitmap  logo图片
         * @param logoPercent 百分比 (用于调整logo图片在原图片中的显示大小, 取值范围[0,1] )
         * @return
         */
        private static Bitmap addLogo(Bitmap srcBitmap, Bitmap logoBitmap, float logoPercent) {
            if (srcBitmap == null) {
                return null;
            }
            if (logoBitmap == null) {
                return srcBitmap;
            }
            //传值不合法时使用0.2F
            if (logoPercent < 0F || logoPercent > 1F) {
                logoPercent = 0.2F;
            }

            /** 1. 获取原图片和Logo图片各自的宽、高值 */
            int srcWidth = srcBitmap.getWidth();
            int srcHeight = srcBitmap.getHeight();
            int logoWidth = logoBitmap.getWidth();
            int logoHeight = logoBitmap.getHeight();

            /** 2. 计算画布缩放的宽高比 */
            float scaleWidth = srcWidth * logoPercent / logoWidth;
            float scaleHeight = srcHeight * logoPercent / logoHeight;

            /** 3. 使用Canvas绘制,合成图片 */
            Bitmap bitmap = Bitmap.createBitmap(srcWidth, srcHeight, Bitmap.Config.ARGB_8888);
            Canvas canvas = new Canvas(bitmap);
            canvas.drawBitmap(srcBitmap, 0, 0, null);
            canvas.scale(scaleWidth, scaleHeight, srcWidth / 2, srcHeight / 2);
            canvas.drawBitmap(logoBitmap, srcWidth / 2 - logoWidth / 2, srcHeight / 2 - logoHeight / 2, null);

            return bitmap;
        }

        /**
         * 扫二维码请参考: https://blog.csdn.net/u010618194/article/details/77891313
         * 字符串转二维码
         *
         * @param contents 内容
         * @return
         * @throws WriterException
         */
        public static Bitmap encodeAsBitmap(String contents) throws WriterException {
            return encodeAsBitmap(contents, Color.WHITE, Color.BLACK);
        }

        /**
         * 扫二维码请参考: https://blog.csdn.net/u010618194/article/details/77891313
         * 字符串转二维码
         *
         * @param contents 内容
         * @param colorBG  二维码背景颜色
         * @param colorQR  二维码实体颜色
         * @return
         * @throws WriterException
         */
        public static Bitmap encodeAsBitmap(String contents, int colorBG, int colorQR) throws WriterException {
            return encodeAsBitmap(contents, colorBG, colorQR, 100, 100);
        }

        /**
         * 扫二维码请参考: https://blog.csdn.net/u010618194/article/details/77891313
         * 字符串转二维码
         *
         * @param contents 内容
         * @param colorBG  二维码背景颜色
         * @param colorQR  二维码实体颜色
         * @param width    宽度
         * @param height   高度
         * @return
         * @throws WriterException
         */
        public static Bitmap encodeAsBitmap(String contents, int colorBG, int colorQR, int width, int height) throws WriterException {
            MultiFormatWriter barcodeWriter = new MultiFormatWriter();
            BitMatrix matrix;
            try {
                matrix = barcodeWriter.encode(contents, BarcodeFormat.QR_CODE, width, height);
            } catch (IllegalArgumentException iae) {
                return null;
            }
            int[] pixels = new int[width * height];
            for (int y = 0; y < height; y++) {
                int offset = y * width;
                for (int x = 0; x < width; x++) {
                    pixels[offset + x] = matrix.get(x, y) ? colorQR : colorBG;
                }
            }
            Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
            bitmap.setPixels(pixels, 0, width, 0, 0, width, height);
            return bitmap;
        }

        //InputStream 转 String
        public static String inputStreamToString(InputStream inputStream) {
            InputStreamReader inputStreamReader = null;
            try {
                inputStreamReader = new InputStreamReader(inputStream, "UTF-8");
            } catch (UnsupportedEncodingException e1) {
                e1.printStackTrace();
            }
            BufferedReader reader = new BufferedReader(inputStreamReader);
            //创建字符缓冲流
            StringBuffer sb = new StringBuffer("");
            String line;
            try {
                //读取每行路由数据
                while ((line = reader.readLine()) != null) {
                    //添加到字符缓冲流中
                    sb.append(line);
                    //一条一行
                    sb.append("\n");
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            //返回路由字符串
            return sb.toString();
        }

        public static Bitmap base64ToBitmap(String base64String) {
            Bitmap bitmap = null;
            byte[] bitmapArray = new byte[0];
            try {
                bitmapArray = Base64.decode(base64String, Base64.DEFAULT);
                bitmap = BitmapFactory.decodeByteArray(bitmapArray, 0, bitmapArray.length);
            } catch (Exception e) {
                e.printStackTrace();
            }
            return bitmap;
        }

        public static String bitmapToBase64(Bitmap bitmap) {
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            bitmap.compress(Bitmap.CompressFormat.PNG, 100, outputStream);
            byte[] byteArray = outputStream.toByteArray();
            return Base64.encodeToString(byteArray, Base64.DEFAULT);
        }

        /**
         * 获取非 Gif 圆角差值
         *
         * @param roundedValue
         * @return
         */
        public static int getRoundedValue(int roundedValue) {
            if (roundedValue < 10) {
                if (roundedValue > 2) {
                    roundedValue -= 3;
                }
            } else if (roundedValue >= 10 && roundedValue <= 20) {
                roundedValue -= 5;
            } else if (roundedValue > 20 && roundedValue <= 30) {
                roundedValue -= 7;
            } else if (roundedValue > 30 && roundedValue <= 40) {
                roundedValue -= 10;
            } else if (roundedValue > 40 && roundedValue <= 50) {
                roundedValue -= 12;
            } else if (roundedValue > 50 && roundedValue <= 60) {
                roundedValue -= 15;
            } else if (roundedValue > 60 && roundedValue <= 70) {
                roundedValue -= 22;
            } else if (roundedValue > 80 && roundedValue <= 90) {
                roundedValue -= 21;
            } else if (roundedValue > 90 && roundedValue <= 100) {
                roundedValue -= 24;
            } else if (roundedValue > 100 && roundedValue <= 110) {
                roundedValue -= 27;
            }
            return roundedValue;
        }

        /**
         * 获取 Gif 圆角差值
         *
         * @param roundedValue
         * @return
         */
        public static int getGIFRoundedValue(int roundedValue) {
            if (roundedValue < 5) {
                roundedValue += 5;
            } else if (roundedValue >= 5 && roundedValue <= 10) {
                roundedValue += 12;
            } else if (roundedValue > 10 && roundedValue <= 15) {
                roundedValue += 23;
            } else if (roundedValue > 15 && roundedValue <= 20) {
                roundedValue += 34;
            } else if (roundedValue > 20 && roundedValue <= 25) {
                roundedValue += 45;
            } else if (roundedValue > 25 && roundedValue <= 30) {
                roundedValue += 56;
            } else if (roundedValue > 30 && roundedValue <= 35) {
                roundedValue += 67;
            } else if (roundedValue > 35 && roundedValue <= 40) {
                roundedValue += 78;
            } else if (roundedValue > 40 && roundedValue <= 45) {
                roundedValue += 89;
            } else if (roundedValue > 45 && roundedValue <= 50) {
                roundedValue += 90;
            } else if (roundedValue > 50 && roundedValue <= 55) {
                roundedValue += 100;
            } else if (roundedValue > 55 && roundedValue <= 60) {
                roundedValue += 111;
            } else if (roundedValue > 60 && roundedValue <= 65) {
                roundedValue += 122;
            } else if (roundedValue > 65 && roundedValue <= 70) {
                roundedValue += 133;
            } else if (roundedValue > 70 && roundedValue <= 75) {
                roundedValue += 144;
            } else if (roundedValue > 75 && roundedValue <= 80) {
                roundedValue += 155;
            } else if (roundedValue > 80 && roundedValue <= 85) {
                roundedValue += 166;
            } else if (roundedValue > 85 && roundedValue <= 90) {
                roundedValue += 177;
            } else if (roundedValue > 90 && roundedValue <= 95) {
                roundedValue += 188;
            } else if (roundedValue > 95 && roundedValue <= 100) {
                roundedValue += 199;
            }
            return roundedValue;
        }

        /**
         * 项目资源 转 Bitmap
         *
         * @param res
         * @return
         */
        public static Bitmap getBitmap(int res) {
            InputStream inputStream = getActivity().getResources().openRawResource(res);
            return getBitmap(inputStream);
        }

        /**
         * InputStream 转 Bitmap
         *
         * @param inputStream
         * @return
         */
        public static Bitmap getBitmap(InputStream inputStream, boolean... isDispose) {
            if (isDispose != null && isDispose.length > 0 && isDispose[0]) {
                BitmapFactory.Options bitmapOptions = new BitmapFactory.Options();
//            bitmapOptions.inSampleSize = 1;
                bitmapOptions.inPreferredConfig = Bitmap.Config.RGB_565;
                bitmapOptions.inPurgeable = true;
                bitmapOptions.inInputShareable = true;
//            bitmapOptions.inJustDecodeBounds  = true;
                return BitmapFactory.decodeStream(inputStream, null, bitmapOptions);
            } else {
                return BitmapFactory.decodeStream(inputStream);
            }

        }

        /**
         * ImageView 转 Bitmap
         *
         * @param imageView
         * @return
         */
        public static Bitmap getBitmap(ImageView imageView) {
            return getBitmap(imageView.getDrawable());
        }

        /**
         * Drawable 转 Bitmap
         *
         * @param drawable
         * @return
         */
        public static Bitmap getBitmap(Drawable drawable) {
            if (drawable == null) return null;
            Bitmap bitmap = null;

            if (drawable.getIntrinsicWidth() <= 0 || drawable.getIntrinsicHeight() <= 0) {
                bitmap = Bitmap.createBitmap(1, 1, drawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565);
            } else {
                bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(), drawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565);
            }
            Canvas canvas = new Canvas(bitmap);
            //canvas.setBitmap(bitmap);
            drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());
            drawable.draw(canvas);
            return bitmap;
        }


        /**
         * 获取图片路径
         *
         * @param uri
         * @return
         */
        @SuppressLint("Range")
        public static String getPicPath(Context context, Uri uri) {
            String[] picPathColumns = {MediaStore.Images.Media.DATA};
            Cursor cursor = context.getContentResolver().query(uri, picPathColumns, null, null, null);
            cursor.moveToFirst();
            return cursor.getString(cursor.getColumnIndex(picPathColumns[0]));
        }

        public static Uri bitmapToUri(Context context, Bitmap bitmap) {
            try {
                ByteArrayOutputStream bytes = new ByteArrayOutputStream();
                bitmap.compress(Bitmap.CompressFormat.PNG, 100, bytes);
                String path = MediaStore.Images.Media.insertImage(context.getContentResolver(), bitmap, "Title", null);
                return Uri.parse(path);
            } catch (Exception e) {
                e.printStackTrace();
                return null;
            }
        }


        public static Bitmap uriToBitmap2(Context context, Uri uri) {
            String[] pathColumns = {MediaStore.Images.Media.DATA};
            Cursor c = context.getContentResolver().query(uri, pathColumns, null, null, null);
            if (c == null) return null;
            c.moveToFirst();
            int columnIndex = c.getColumnIndex(MediaStore.Images.ImageColumns.DATA);
            String picturePath = c.getString(columnIndex);
            c.close();
            return BitmapFactory.decodeFile(picturePath);
        }

        /**
         * Uri 转 Bitmap
         *
         * @param context
         * @param uri
         * @return
         */
        public static Bitmap uriToBitmap(Context context, Uri uri) {
            InputStream stream = null;
            InputStream inputStream = null;
            try {
                //根据uri获取图片的流
                inputStream = context.getContentResolver().openInputStream(uri);
                BitmapFactory.Options options = new BitmapFactory.Options();
                //options的in系列的设置了，injustdecodebouond只解析图片的大小，而不加载到内存中去
                options.inJustDecodeBounds = true;
                //1.如果通过options.outHeight获取图片的宽高，就必须通过decodestream解析同options赋值
                //否则options.outheight获取不到宽高
                BitmapFactory.decodeStream(inputStream, null, options);
                //2.通过 btm.getHeight()获取图片的宽高就不需要1的解析，我这里采取第一张方式
                //Bitmap btm = BitmapFactory.decodeStream(inputStream);
                //以屏幕的宽高进行压缩
                DisplayMetrics displayMetrics = context.getResources().getDisplayMetrics();
                int heightPixels = displayMetrics.heightPixels;
                int widthPixels = displayMetrics.widthPixels;
                //获取图片的宽高
                int outHeight = options.outHeight;
                int outWidth = options.outWidth;
                //heightPixels就是要压缩后的图片高度，宽度也一样
                int a = (int) Math.ceil((outHeight / (float) heightPixels));
                int b = (int) Math.ceil(outWidth / (float) widthPixels);
                //比例计算,一般是图片比较大的情况下进行压缩
                int max = Math.max(a, b);
                if (max > 1) {
                    options.inSampleSize = max;
                }
                //解析到内存中去
                options.inJustDecodeBounds = false;
                //根据uri重新获取流，inputstream在解析中发生改变了
                stream = context.getContentResolver().openInputStream(uri);
                Bitmap bitmap = BitmapFactory.decodeStream(stream, null, options);
                return bitmap;
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    if (inputStream != null) {
                        inputStream.close();
                    }
                    if (stream != null) {
                        stream.close();
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }

            }
            return null;
        }

        /**
         * 加载本地图片
         *
         * @param url
         * @return
         */
        public static Bitmap getLoacalBitmap(String url) {
            try {
                FileInputStream fis = new FileInputStream(url);
                return BitmapFactory.decodeStream(fis);  ///把流转化为Bitmap图片
            } catch (FileNotFoundException e) {
                e.printStackTrace();
                return null;
            }
        }

        /**
         * Object 转 Bitmap
         *
         * @param resource
         * @return
         */

        private static final Map<String, Bitmap> mapBitmap = new ArrayMap<>();

        //自带内存缓存的 图片资源 转 Bitmap
        public static Bitmap ObjectToBitmap(Object resource) {
            Bitmap imgObjet = mapBitmap.get(String.valueOf(resource));
            if (imgObjet == null) {
                if (resource instanceof String) { //网络请求 或 本地路径加载 ,需要三级缓存
                    String url = resource.toString();
                    //使用网络缓存或请求,开启网络缓存
                    if (imgObjet == null) {
                        //网络加载或本地加载图片
                        if (url.contains("http")) {
                            imgObjet = ImageViewTools.getImageBitmap(url);//Bitmap 网络
                        } else {
                            imgObjet = ImageViewTools.getLoacalBitmap(url);//Bitmap 本地
                        }
                    }
                } else if (resource instanceof File) {
                    //加载本地图片(需要加缓存)
                    String filePath = ((File) resource).getPath();
                    if (imgObjet == null) {
                        imgObjet = ImageViewTools.getLoacalBitmap(filePath);//Bitmap
                    }
                } else if (resource instanceof Byte[]) {
                    //流加载图片(需要加缓存)
                    byte[] bytes = (byte[]) resource;
                    if (imgObjet == null) {
                        Bitmap bitmap = BitmapFactory.decodeByteArray(bytes, 0, bytes.length);
                        bitmap.copyPixelsFromBuffer(ByteBuffer.wrap(bytes));
                        imgObjet = bitmap;//Bitmap
                    }
                } else if (resource instanceof Uri) {
                    //加载路径图片(需要加缓存)
                    String uri = ((Uri) resource).getPath();
                    if (imgObjet == null) {
                        imgObjet = ImageViewTools.getLoacalBitmap(uri);//Bitmap
                    }
                } else if (resource instanceof Bitmap) {
                    //加载 Bitmap 资源
                    Bitmap bitmap = (Bitmap) resource;
                    imgObjet = bitmap;//Bitmap
                } else if (resource instanceof Integer) {
                    //加载项目中已有资源
                    imgObjet = BitmapFactory.decodeResource(getActivity().getResources(), (Integer) resource);
                } else if (resource instanceof Drawable) {
                    //加载 Drawable 资源
                    Drawable drawable = (Drawable) resource;
                    imgObjet = ImageViewTools.drawable2Bitmap(drawable);
                }

                //缓存起来
                mapBitmap.put(String.valueOf(resource), imgObjet);
            }

            return imgObjet;
        }

        // 将byte[]转换成InputStream
        public static InputStream Byte2InputStream(byte[] b) {
            ByteArrayInputStream bais = new ByteArrayInputStream(b);
            return bais;
        }

        // 将InputStream转换成byte[]
        public static byte[] InputStream2Bytes(InputStream is) {
            String str = "";
            byte[] readByte = new byte[1024];
            int readCount = -1;
            try {
                while ((readCount = is.read(readByte, 0, 1024)) != -1) {
                    str += new String(readByte).trim();
                }
                return str.getBytes();
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

        // 将Bitmap转换成InputStream
        public static InputStream Bitmap2InputStream(Bitmap bm) {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            bm.compress(Bitmap.CompressFormat.JPEG, 100, baos);
            InputStream is = new ByteArrayInputStream(baos.toByteArray());
            return is;
        }

        // 将Bitmap转换成InputStream
        public static InputStream Bitmap2InputStream(Bitmap bm, int quality) {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            bm.compress(Bitmap.CompressFormat.PNG, quality, baos);
            InputStream is = new ByteArrayInputStream(baos.toByteArray());
            return is;
        }

        // 将InputStream转换成Bitmap
        public static Bitmap InputStream2Bitmap(InputStream is) {
            return BitmapFactory.decodeStream(is);
        }

        // Drawable转换成InputStream
        public static InputStream Drawable2InputStream(Drawable d) {
            Bitmap bitmap = drawable2Bitmap(d);
            return Bitmap2InputStream(bitmap);
        }

        // InputStream转换成Drawable
        public static Drawable InputStream2Drawable(InputStream is) {
            Bitmap bitmap = InputStream2Bitmap(is);
            return bitmap2Drawable(bitmap);
        }

        // Drawable转换成byte[]
        public static byte[] Drawable2Bytes(Drawable d) {
            Bitmap bitmap = drawable2Bitmap(d);
            return Bitmap2Bytes(bitmap);
        }

        // byte[]转换成Drawable
        public static Drawable Bytes2Drawable(byte[] b) {
            Bitmap bitmap = Bytes2Bitmap(b);
            return bitmap2Drawable(bitmap);
        }

        // Bitmap转换成byte[]
        public static byte[] Bitmap2Bytes(Bitmap bm) {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            bm.compress(Bitmap.CompressFormat.PNG, 100, baos);
            return baos.toByteArray();
        }

        // byte[]转换成Bitmap
        public static Bitmap Bytes2Bitmap(byte[] b) {
            if (b.length != 0) {
                return BitmapFactory.decodeByteArray(b, 0, b.length);
            }
            return null;
        }

        // Drawable转换成Bitmap
        public static Bitmap drawable2Bitmap(Drawable drawable) {
            Bitmap bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(), drawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565);
            Canvas canvas = new Canvas(bitmap);
            drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());
            drawable.draw(canvas);
            return bitmap;
        }

        // Bitmap转换成Drawable
        public static Drawable bitmap2Drawable(Bitmap bitmap) {
            BitmapDrawable bd = new BitmapDrawable(bitmap);
            Drawable d = (Drawable) bd;
            return d;
        }

        /**
         * 从本地读取图片
         *
         * @param url
         */
        public static Bitmap getBitmapFromLocal(String url, String CACHE_PATH, boolean... isMD5) {
            String fileName = url;//把图片的url当做文件名,并进行MD5加密
            try {
                if (isMD5 != null && isMD5.length > 0 && isMD5[0]) {
                    fileName = Encryption.MD5.encryptMD5(url);//把图片的url当做文件名,并进行MD5加密
                }
                File file = new File(CACHE_PATH, fileName);
                if (!file.exists()) {
                    return null;
                }
                // 检测到文件太大，就需要做压缩处理
                Bitmap bitmap = BitmapFactory.decodeStream(new FileInputStream(file));//58毫秒
                return bitmap;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

        /**
         * 从本地读取图片
         *
         * @param url
         */
        public static Bitmap getBitmapFromLocal(File file) {
            if (file == null) return null;
            try {
                if (!file.exists()) return null;
                // 检测到文件太大，就需要做压缩处理
                Bitmap bitmap = BitmapFactory.decodeStream(new FileInputStream(file));
                return bitmap;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

        /**
         * 从本地读取图片
         *
         * @param url
         */
        public static Bitmap getBitmapAbsolutePath(File file) {
            if (file == null) return null;
            try {
                if (!file.exists()) return null;
                return BitmapFactory.decodeFile(file.getAbsolutePath());
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

        /**
         * 从网络获取图片后,保存至本地缓存
         *
         * @param url
         * @param bitmap
         */
        public static Bitmap saveBitmapToLocal(String url, Bitmap bitmap, String CACHE_PATH, boolean... isMD5) {
            try {
                String fileName = url;
                if (isMD5 != null && isMD5.length > 0 && isMD5[0]) {
                    fileName = Encryption.MD5.encryptMD5(url);//把图片的url当做文件名,并进行MD5加密
                }
                File file = new File(CACHE_PATH, fileName);
                //通过得到文件的父文件,判断父文件是否存在
                File parentFile = file.getParentFile();
                if (!parentFile.exists()) {
                    parentFile.mkdirs();
                }
                File file2 = new File(CACHE_PATH, fileName);
                //把图片保存至本地
                bitmap.compress(Bitmap.CompressFormat.WEBP, 100, new FileOutputStream(file));
            } catch (Exception e) {
                e.printStackTrace();
            }
            return bitmap;
        }

        public static InputStream getImageInputStreamFile(String filePath) {
            if (filePath.contains("/")) {
                File file = new File(filePath);
                if (!file.exists()) return null;
                try {
                    InputStream inputStream = new BufferedInputStream(new FileInputStream(file));
                    return inputStream;
                } catch (Exception e) {
                    return null;
                }
            }
            return null;
        }

        public static InputStream getImageInputStream(File file) {
            if (!file.exists()) return null;
            try {
                InputStream inputStream = new BufferedInputStream(new FileInputStream(file));
                return inputStream;
            } catch (Exception e) {
                return null;
            }

        }

        /**
         * 获取网络图片
         *
         * @param imageurl 图片网络地址
         * @return InputStream 返回位图
         */
        public static InputStream getImageInputStream(String imageurl) {
            URL url;
            HttpURLConnection connection = null;
            InputStream inputStream = null;
            try {
                url = new URL(imageurl);
                connection = (HttpURLConnection) url.openConnection();
                connection.setConnectTimeout(6000); //超时设置
                connection.setDoInput(true);
                connection.setUseCaches(true); //设置使用网络缓存
                inputStream = connection.getInputStream();
                inputStream.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            return inputStream;
        }

        /**
         * 异步获取网络图片
         *
         * @param imageurl 图片网络地址
         * @return Bitmap 返回位图
         */
        public static void getImageBitmap(String imageurl, GT.OneListener<Bitmap> oneListener) {
            GT.Thread.getInstance(0).execute(new Runnable() {
                @Override
                public void run() {
                    Bitmap bitmap = getImageBitmap(imageurl);
                    GT.Thread.runAndroid(new Runnable() {
                        @Override
                        public void run() {
                            oneListener.onOneListener(bitmap);
                        }
                    });
                }
            });
        }

        /**
         * 同步获取网络图片
         *
         * @param imageurl 图片网络地址
         * @return Bitmap 返回位图
         */
        public static Bitmap getImageBitmap(String imageurl) {
            Bitmap bitmap = null;
            try {
                URL url = new URL(imageurl);
                HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                connection.setConnectTimeout(5000); //超时设置
                connection.setDoInput(true);
                connection.setUseCaches(true); //设置使用网络缓存
                InputStream inputStream = connection.getInputStream();//295/254/260
                bitmap = ImageViewTools.getBitmap(inputStream, true);//30
                inputStream.close();
                connection.disconnect();
            } catch (Exception e) {
                e.printStackTrace();
            }
            return bitmap;
        }

        /**
         * 图片压缩：质量压缩方法
         *
         * @param beforeBitmap 要压缩的图片
         * @return 压缩后的图片
         */
        public static Bitmap compressImage(Bitmap beforeBitmap, double... ratios) {

            double ratio = 1;

            if (ratios.length > 0) {
                ratio = ratios[0];
            }

            // 可以捕获内存缓冲区的数据，转换成字节数组。
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            if (beforeBitmap != null) {
                // 第一个参数：图片压缩的格式；第二个参数：压缩的比率；第三个参数：压缩的数据存放到bos中
                beforeBitmap.compress(Bitmap.CompressFormat.WEBP, 80, bos);

                // 循环判断压缩后的图片大小是否满足要求，这里限制100kb，若不满足则继续压缩，每次递减10%压缩
                int options = 100;
                while (bos.toByteArray().length / 1024 > (100 * ratio)) {
                    bos.reset();// 置为空
                    beforeBitmap.compress(Bitmap.CompressFormat.WEBP, options, bos);
                    options -= 10;
                }

                // 从bos中将数据读出来 转换成图片
                ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
                Bitmap afterBitmap = BitmapFactory.decodeStream(bis);
                return afterBitmap;
            }
            return null;
        }


        /**
         * 图片压缩：获得缩略图
         *
         * @param beforeBitmap 要压缩的图片
         * @param width        缩略图宽度
         * @param height       缩略图高度
         * @return 压缩后的图片
         */
        public static Bitmap getThumbnail(Bitmap beforeBitmap, int width, int height) {
            return ThumbnailUtils.extractThumbnail(beforeBitmap, width, height);
        }


        /**
         * 图片压缩: 规定尺寸等比例压缩，宽高不能超过限制要求
         *
         * @param beforBitmap 要压缩的图片
         * @param maxWidth    最大宽度限制
         * @param maxHeight   最大高度限制
         * @return 压缩后的图片
         */
        public static Bitmap compressBitmap(Bitmap beforBitmap, double maxWidth, double maxHeight) {

            // 图片原有的宽度和高度
            float beforeWidth = beforBitmap.getWidth();
            float beforeHeight = beforBitmap.getHeight();
            if (beforeWidth <= maxWidth && beforeHeight <= maxHeight) {
                return beforBitmap;
            }

            // 计算宽高缩放率，等比例缩放
            float scaleWidth = ((float) maxWidth) / beforeWidth;
            float scaleHeight = ((float) maxHeight) / beforeHeight;
            float scale = scaleWidth;
            if (scaleWidth > scaleHeight) {
                scale = scaleHeight;
            }

            // 矩阵对象
            Matrix matrix = new Matrix();
            // 缩放图片动作 缩放比例
            matrix.postScale(scale, scale);
            // 创建一个新的Bitmap 从原始图像剪切图像
            Bitmap afterBitmap = Bitmap.createBitmap(beforBitmap, 0, 0, (int) beforeWidth, (int) beforeHeight, matrix, true);
            return afterBitmap;
        }

        //混合压缩
        public static Bitmap comp(Bitmap bitmap) {
            try {
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                if (baos.toByteArray().length / 1024 > 1024) {//判断如果图片大于1M,进行压缩避免在生成图片（BitmapFactory.decodeStream）时溢出
                    baos.reset();//重置baos即清空baos
                    bitmap.compress(Bitmap.CompressFormat.WEBP, 50, baos);//这里压缩50%，把压缩后的数据存放到baos中
                } else {
                    return bitmap;
                }
                ByteArrayInputStream isBm = new ByteArrayInputStream(baos.toByteArray());
                BitmapFactory.Options newOpts = new BitmapFactory.Options();
                //开始读入图片，此时把options.inJustDecodeBounds 设回true了
                newOpts.inJustDecodeBounds = true;
                bitmap = BitmapFactory.decodeStream(isBm, null, newOpts);
                newOpts.inJustDecodeBounds = false;
                int w = newOpts.outWidth;
                int h = newOpts.outHeight;
                //现在主流手机比较多是800*480分辨率
                float hh = 800f;//这里设置高度为800f
                float ww = 480f;//这里设置宽度为480f
                //缩放比。由于是固定比例缩放，只用高或者宽其中一个数据进行计算即可
                int be = 1;//be=1表示不缩放
                if (w > h && w > ww) {//如果宽度大的话根据宽度固定大小缩放
                    be = (int) (newOpts.outWidth / ww);
                } else if (w < h && h > hh) {//如果高度高的话根据宽度固定大小缩放
                    be = (int) (newOpts.outHeight / hh);
                }
                if (be <= 0) be = 1;
                newOpts.inSampleSize = be;//设置缩放比例
                //重新读入图片，注意此时已经把options.inJustDecodeBounds 设回false了
                isBm = new ByteArrayInputStream(baos.toByteArray());
                bitmap = BitmapFactory.decodeStream(isBm, null, newOpts);
            } catch (Exception e) {
            }
            return compressImage(bitmap);//压缩好比例大小后再进行质量压缩
        }

        /**
         * 高斯模糊
         *
         * @param context
         * @param source
         * @param radius
         * @return
         */
        public static Bitmap rsBlur(Context context, Bitmap source, int radius) {

            Bitmap inputBmp = source;
            //(1)
            RenderScript renderScript = RenderScript.create(context);

            // Allocate memory for Renderscript to work with
            //(2)
            final Allocation input = Allocation.createFromBitmap(renderScript, inputBmp);
            final Allocation output = Allocation.createTyped(renderScript, input.getType());
            //(3)
            // Load up an instance of the specific script that we want to use.
            ScriptIntrinsicBlur scriptIntrinsicBlur = ScriptIntrinsicBlur.create(renderScript, Element.U8_4(renderScript));
            //(4)
            scriptIntrinsicBlur.setInput(input);
            //(5)
            // Set the blur radius
            scriptIntrinsicBlur.setRadius(radius);
            //(6)
            // Start the ScriptIntrinisicBlur
            scriptIntrinsicBlur.forEach(output);
            //(7)
            // Copy the output to the blurred bitmap
            output.copyTo(inputBmp);
            //(8)
            renderScript.destroy();

            return inputBmp;
        }

        public static Bitmap rsBlur(Context context, Bitmap source, int radius, float scale) {

            int width = Math.round(source.getWidth() * scale);
            int height = Math.round(source.getHeight() * scale);

            Bitmap inputBmp = Bitmap.createScaledBitmap(source, width, height, false);

            RenderScript renderScript = RenderScript.create(context);


            // Allocate memory for Renderscript to work with

            final Allocation input = Allocation.createFromBitmap(renderScript, inputBmp);
            final Allocation output = Allocation.createTyped(renderScript, input.getType());

            // Load up an instance of the specific script that we want to use.
            ScriptIntrinsicBlur scriptIntrinsicBlur = ScriptIntrinsicBlur.create(renderScript, Element.U8_4(renderScript));
            scriptIntrinsicBlur.setInput(input);

            // Set the blur radius
            scriptIntrinsicBlur.setRadius(radius);

            // Start the ScriptIntrinisicBlur
            scriptIntrinsicBlur.forEach(output);

            // Copy the output to the blurred bitmap
            output.copyTo(inputBmp);


            renderScript.destroy();
            return inputBmp;
        }

        public static Bitmap fastBlur(Bitmap sentBitmap, float scale, int radius) {

            int width = Math.round(sentBitmap.getWidth() * scale);
            int height = Math.round(sentBitmap.getHeight() * scale);
            sentBitmap = Bitmap.createScaledBitmap(sentBitmap, width, height, false);

            Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);

            if (radius < 1) {
                return (null);
            }

            int w = bitmap.getWidth();
            int h = bitmap.getHeight();

            int[] pix = new int[w * h];
            Log.e("pix", w + " " + h + " " + pix.length);
            bitmap.getPixels(pix, 0, w, 0, 0, w, h);

            int wm = w - 1;
            int hm = h - 1;
            int wh = w * h;
            int div = radius + radius + 1;

            int r[] = new int[wh];
            int g[] = new int[wh];
            int b[] = new int[wh];
            int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;
            int vmin[] = new int[Math.max(w, h)];

            int divsum = (div + 1) >> 1;
            divsum *= divsum;
            int dv[] = new int[256 * divsum];
            for (i = 0; i < 256 * divsum; i++) {
                dv[i] = (i / divsum);
            }

            yw = yi = 0;

            int[][] stack = new int[div][3];
            int stackpointer;
            int stackstart;
            int[] sir;
            int rbs;
            int r1 = radius + 1;
            int routsum, goutsum, boutsum;
            int rinsum, ginsum, binsum;

            for (y = 0; y < h; y++) {
                rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;
                for (i = -radius; i <= radius; i++) {
                    p = pix[yi + Math.min(wm, Math.max(i, 0))];
                    sir = stack[i + radius];
                    sir[0] = (p & 0xff0000) >> 16;
                    sir[1] = (p & 0x00ff00) >> 8;
                    sir[2] = (p & 0x0000ff);
                    rbs = r1 - Math.abs(i);
                    rsum += sir[0] * rbs;
                    gsum += sir[1] * rbs;
                    bsum += sir[2] * rbs;
                    if (i > 0) {
                        rinsum += sir[0];
                        ginsum += sir[1];
                        binsum += sir[2];
                    } else {
                        routsum += sir[0];
                        goutsum += sir[1];
                        boutsum += sir[2];
                    }
                }
                stackpointer = radius;

                for (x = 0; x < w; x++) {

                    r[yi] = dv[rsum];
                    g[yi] = dv[gsum];
                    b[yi] = dv[bsum];

                    rsum -= routsum;
                    gsum -= goutsum;
                    bsum -= boutsum;

                    stackstart = stackpointer - radius + div;
                    sir = stack[stackstart % div];

                    routsum -= sir[0];
                    goutsum -= sir[1];
                    boutsum -= sir[2];

                    if (y == 0) {
                        vmin[x] = Math.min(x + radius + 1, wm);
                    }
                    p = pix[yw + vmin[x]];

                    sir[0] = (p & 0xff0000) >> 16;
                    sir[1] = (p & 0x00ff00) >> 8;
                    sir[2] = (p & 0x0000ff);

                    rinsum += sir[0];
                    ginsum += sir[1];
                    binsum += sir[2];

                    rsum += rinsum;
                    gsum += ginsum;
                    bsum += binsum;

                    stackpointer = (stackpointer + 1) % div;
                    sir = stack[(stackpointer) % div];

                    routsum += sir[0];
                    goutsum += sir[1];
                    boutsum += sir[2];

                    rinsum -= sir[0];
                    ginsum -= sir[1];
                    binsum -= sir[2];

                    yi++;
                }
                yw += w;
            }
            for (x = 0; x < w; x++) {
                rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;
                yp = -radius * w;
                for (i = -radius; i <= radius; i++) {
                    yi = Math.max(0, yp) + x;

                    sir = stack[i + radius];

                    sir[0] = r[yi];
                    sir[1] = g[yi];
                    sir[2] = b[yi];

                    rbs = r1 - Math.abs(i);

                    rsum += r[yi] * rbs;
                    gsum += g[yi] * rbs;
                    bsum += b[yi] * rbs;

                    if (i > 0) {
                        rinsum += sir[0];
                        ginsum += sir[1];
                        binsum += sir[2];
                    } else {
                        routsum += sir[0];
                        goutsum += sir[1];
                        boutsum += sir[2];
                    }

                    if (i < hm) {
                        yp += w;
                    }
                }
                yi = x;
                stackpointer = radius;
                for (y = 0; y < h; y++) {
                    // Preserve alpha channel: ( 0xff000000 & pix[yi] )
                    pix[yi] = (0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8) | dv[bsum];

                    rsum -= routsum;
                    gsum -= goutsum;
                    bsum -= boutsum;

                    stackstart = stackpointer - radius + div;
                    sir = stack[stackstart % div];

                    routsum -= sir[0];
                    goutsum -= sir[1];
                    boutsum -= sir[2];

                    if (x == 0) {
                        vmin[y] = Math.min(y + r1, hm) * w;
                    }
                    p = x + vmin[y];

                    sir[0] = r[p];
                    sir[1] = g[p];
                    sir[2] = b[p];

                    rinsum += sir[0];
                    ginsum += sir[1];
                    binsum += sir[2];

                    rsum += rinsum;
                    gsum += ginsum;
                    bsum += binsum;

                    stackpointer = (stackpointer + 1) % div;
                    sir = stack[stackpointer];

                    routsum += sir[0];
                    goutsum += sir[1];
                    boutsum += sir[2];

                    rinsum -= sir[0];
                    ginsum -= sir[1];
                    binsum -= sir[2];

                    yi += w;
                }
            }

            Log.e("pix", w + " " + h + " " + pix.length);
            bitmap.setPixels(pix, 0, w, 0, 0, w, h);

            return (bitmap);
        }

        //图片缩放比例

        /**
         * 模糊图片的具体方法 * *
         *
         * @param context 上下文对象 *
         * @param image   需要模糊的图片 *
         * @return 模糊处理后的图片
         */
        public static Bitmap blurBitmap(Context context, Bitmap image, float blurRadius) {
            // 计算图片缩小后的长宽
            int width = Math.round(image.getWidth() * 0.4f);
            int height = Math.round(image.getHeight() * 0.4f);
            // 将缩小后的图片做为预渲染的图片
            Bitmap inputBitmap = Bitmap.createScaledBitmap(image, width, height, false);
            // 创建一张渲染后的输出图片
            Bitmap outputBitmap = Bitmap.createBitmap(inputBitmap);
            // 创建RenderScript内核对象
            RenderScript rs = RenderScript.create(context);
            // 创建一个模糊效果的RenderScript的工具对象
            ScriptIntrinsicBlur blurScript = null;
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
                blurScript = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));
            }
            // 由于RenderScript并没有使用VM来分配内存,所以需要使用Allocation类来创建和分配内存空间
            // 创建Allocation对象的时候其实内存是空的,需要使用copyTo()将数据填充进去
            Allocation tmpIn = Allocation.createFromBitmap(rs, inputBitmap);
            Allocation tmpOut = Allocation.createFromBitmap(rs, outputBitmap);
            // 设置渲染的模糊程度, 25f是最大模糊度
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
                blurScript.setRadius(blurRadius);
            }
            // 设置blurScript对象的输入内存
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
                blurScript.setInput(tmpIn);
            }
            // 将输出数据保存到输出内存中
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
                blurScript.forEach(tmpOut);
            }
            // 将数据填充到Allocation中
            tmpOut.copyTo(outputBitmap);
            return outputBitmap;
        }

        //圆角
        public static class RoundedCorners {
            public static final int CORNER_NONE = 0;
            public static final int CORNER_TOP_LEFT = 1;
            public static final int CORNER_TOP_RIGHT = 1 << 1;
            public static final int CORNER_BOTTOM_LEFT = 1 << 2;
            public static final int CORNER_BOTTOM_RIGHT = 1 << 3;
            public static final int CORNER_ALL = CORNER_TOP_LEFT | CORNER_TOP_RIGHT | CORNER_BOTTOM_LEFT | CORNER_BOTTOM_RIGHT;
            public static final int CORNER_TOP = CORNER_TOP_LEFT | CORNER_TOP_RIGHT;
            public static final int CORNER_BOTTOM = CORNER_BOTTOM_LEFT | CORNER_BOTTOM_RIGHT;
            public static final int CORNER_LEFT = CORNER_TOP_LEFT | CORNER_BOTTOM_LEFT;
            public static final int CORNER_RIGHT = CORNER_TOP_RIGHT | CORNER_BOTTOM_RIGHT;

            public static Bitmap fillet(Bitmap bitmap, int roundPx, int corners) {
                return fillet(bitmap, roundPx, corners, 0, 0);
            }


            public static Bitmap fillet(Bitmap bitmap, int roundPx, int corners, int width, int height) {
                try {
                    // 其原理就是：先建立一个与图片大小相同的透明的Bitmap画板
                    // 然后在画板上画出一个想要的形状的区域。
                    // 最后把源图片帖上。
                    if (width == 0) {
                        width = bitmap.getWidth();
                    }
                    if (height == 0) {
                        height = bitmap.getHeight();
                    }

                    Bitmap paintingBoard = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
                    Canvas canvas = new Canvas(paintingBoard);
                    canvas.drawARGB(Color.TRANSPARENT, Color.TRANSPARENT, Color.TRANSPARENT, Color.TRANSPARENT);

                    final Paint paint = new Paint();
                    paint.setAntiAlias(true);
                    paint.setColor(Color.BLACK);

                    //判断最大圆角不能小于最小值的半径
                    int min = Math.min(width, height);
                    if (roundPx > (min / 2)) {
                        roundPx = (min / 2);
                    }

                    //画出4个圆角
                    final RectF rectF = new RectF(0, 0, width, height);

                    canvas.drawRoundRect(rectF, roundPx, roundPx, paint);

                    //把不需要的圆角去掉
                    int notRoundedCorners = corners ^ CORNER_ALL;

                    if ((notRoundedCorners & CORNER_TOP_LEFT) != 0) {
                        clipTopLeft(canvas, paint, roundPx, width, height);
                    }

                    if ((notRoundedCorners & CORNER_TOP_RIGHT) != 0) {
                        clipTopRight(canvas, paint, roundPx, width, height);
                    }

                    if ((notRoundedCorners & CORNER_BOTTOM_LEFT) != 0) {
                        clipBottomLeft(canvas, paint, roundPx, width, height);
                    }

                    if ((notRoundedCorners & CORNER_BOTTOM_RIGHT) != 0) {
                        clipBottomRight(canvas, paint, roundPx, width, height);
                    }

                    paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));

                    //帖子图
                    final Rect src = new Rect(0, 0, width, height);
                    final Rect dst = src;
                    canvas.drawBitmap(bitmap, src, dst, paint);
                    return paintingBoard;
                } catch (Exception exp) {
                    return bitmap;
                }
            }


            public static Bitmap fillet2(Canvas canvas, Bitmap bitmap, int roundPx, int corners) {
                try {
                    // 其原理就是：先建立一个与图片大小相同的透明的Bitmap画板
                    // 然后在画板上画出一个想要的形状的区域。
                    // 最后把源图片帖上。
                    int width = 0;
                    int height = 0;
                    if (width == 0) {
                        width = bitmap.getWidth();
                    }
                    if (height == 0) {
                        height = bitmap.getHeight();
                    }

                    canvas.drawARGB(Color.TRANSPARENT, Color.TRANSPARENT, Color.TRANSPARENT, Color.TRANSPARENT);

                    final Paint paint = new Paint();
                    paint.setAntiAlias(true);
                    paint.setColor(Color.BLACK);

                    //判断最大圆角不能小于最小值的半径
                    int min = Math.min(width, height);
                    if (roundPx > (min / 2)) {
                        roundPx = (min / 2);
                    }

                    //画出4个圆角
                    final RectF rectF = new RectF(0, 0, width, height);

                    canvas.drawRoundRect(rectF, roundPx, roundPx, paint);

                    //把不需要的圆角去掉
                    int notRoundedCorners = corners ^ CORNER_ALL;

                    if ((notRoundedCorners & CORNER_TOP_LEFT) != 0) {
                        clipTopLeft(canvas, paint, roundPx, width, height);
                    }

                    if ((notRoundedCorners & CORNER_TOP_RIGHT) != 0) {
                        clipTopRight(canvas, paint, roundPx, width, height);
                    }

                    if ((notRoundedCorners & CORNER_BOTTOM_LEFT) != 0) {
                        clipBottomLeft(canvas, paint, roundPx, width, height);
                    }

                    if ((notRoundedCorners & CORNER_BOTTOM_RIGHT) != 0) {
                        clipBottomRight(canvas, paint, roundPx, width, height);
                    }

                    paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));

                    //帖子图
                    final Rect src = new Rect(0, 0, width, height);
                    final Rect dst = src;
                    canvas.drawBitmap(bitmap, src, dst, paint);
                    return bitmap;
                } catch (Exception exp) {
                    return bitmap;
                }
            }

            public static void clipTopLeft(final Canvas canvas, final Paint paint, int offset, int width, int height) {
                final Rect block = new Rect(0, 0, offset, offset);
                canvas.drawRect(block, paint);
            }

            public static void clipTopRight(final Canvas canvas, final Paint paint, int offset, int width, int height) {
                final Rect block = new Rect(width - offset, 0, width, offset);
                canvas.drawRect(block, paint);
            }

            public static void clipBottomLeft(final Canvas canvas, final Paint paint, int offset, int width, int height) {
                final Rect block = new Rect(0, height - offset, offset, height);
                canvas.drawRect(block, paint);
            }

            public static void clipBottomRight(final Canvas canvas, final Paint paint, int offset, int width, int height) {
                final Rect block = new Rect(width - offset, height - offset, width, height);
                canvas.drawRect(block, paint);
            }

            public static Bitmap clipAll(Bitmap bitmap, int outWidth, int outHeight, int radius, int boarder) {
                if (bitmap == null) {
                    return null;
                }
                int width = bitmap.getWidth();
                int height = bitmap.getHeight();
                float widthScale = outWidth * 1f / width;
                float heightScale = outHeight * 1f / height;

                Matrix matrix = new Matrix();
                matrix.setScale(widthScale, heightScale);
                //创建输出的bitmap
                Bitmap desBitmap = Bitmap.createBitmap(outWidth, outHeight, Bitmap.Config.ARGB_8888);
                //创建canvas并传入desBitmap，这样绘制的内容都会在desBitmap上
                Canvas canvas = new Canvas(desBitmap);
                Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                //创建着色器
                BitmapShader bitmapShader = new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);
                //给着色器配置matrix
                bitmapShader.setLocalMatrix(matrix);
                paint.setShader(bitmapShader);
                //创建矩形区域并且预留出border
                RectF rect = new RectF(boarder, boarder, outWidth - boarder, outHeight - boarder);
                //把传入的bitmap绘制到圆角矩形区域内
                canvas.drawRoundRect(rect, radius, radius, paint);

                if (boarder > 0) {
                    //绘制boarder
                    Paint boarderPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
                    boarderPaint.setColor(Color.GREEN);
                    boarderPaint.setStyle(Paint.Style.STROKE);
                    boarderPaint.setStrokeWidth(boarder);
                    canvas.drawRoundRect(rect, radius, radius, boarderPaint);
                }
                return desBitmap;
            }

        }

    }

    /**
     * ZIP 压缩包操作工具
     */
    public static class ZipUtils {

        private static final int BUFF_SIZE = 1024 * 1024; // 1M Byte

        /**
         * 批量压缩文件（夹）
         *
         * @param resFileList 要压缩的文件（夹）列表
         * @param zipFile     生成的压缩文件，需要加入后缀名
         * @throws IOException 当压缩过程出错时抛出
         */
        public static void zipFiles(Collection<File> resFileList, String zipFile) throws IOException {
            ZipOutputStream zipout = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFile), BUFF_SIZE));
            for (File resFile : resFileList) {
                zipFile(resFile, zipout, "");
            }
            zipout.close();
        }

        /**
         * 批量压缩文件（夹）
         *
         * @param resFileList 要压缩的文件（夹）列表
         * @param zipFile     生成的压缩文件
         * @param comment     压缩文件的注释
         * @throws IOException 当压缩过程出错时抛出
         */
        public static void zipFiles(Collection<File> resFileList, String zipFile, String comment) throws IOException {
            ZipOutputStream zipout = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFile), BUFF_SIZE));
            for (File resFile : resFileList) {
                zipFile(resFile, zipout, "");
            }
            zipout.setComment(comment);
            zipout.close();
        }

        /**
         * 将压缩包里的文件加压出来，一个文件、多个文件、多层目录，均可
         *
         * @param zipFile    具体的压缩文件,压缩包内可包含多个文件
         * @param folderPath 解压缩的目标目录
         * @throws IOException 当解压缩过程出错时抛出
         */
        public static void upZipFile(String zipFile, String folderPath) throws IOException {
            File desDir = new File(folderPath);
            if (!desDir.exists()) {
                desDir.mkdirs();
            }
            ZipFile zf = new ZipFile(zipFile);
            for (Enumeration<?> entries = zf.entries(); entries.hasMoreElements(); ) {
                ZipEntry entry = ((ZipEntry) entries.nextElement());
                InputStream in = zf.getInputStream(entry);
                String str = folderPath + File.separator + entry.getName();
                str = new String(str.getBytes("8859_1"), "GB2312");
                File desFile = new File(str);
                if (!desFile.exists()) {
                    File fileParentDir = desFile.getParentFile();
                    if (!fileParentDir.exists()) {
                        fileParentDir.mkdirs();
                    }
                    if (FileUtils.isDirectory(desFile.getPath())) {//是目录
                        desFile.mkdirs();
                        continue;
                    } else {//是文件
                        desFile.createNewFile();
                    }
                } else {//跳过存在的文件
                    continue;
                }
                OutputStream out = new FileOutputStream(desFile);
                byte buffer[] = new byte[BUFF_SIZE];
                int realLength;
                while ((realLength = in.read(buffer)) > 0) {
                    out.write(buffer, 0, realLength);
                }
                in.close();
                out.close();
            }
        }

        /**
         * 解压文件名包含传入文字的文件
         *
         * @param zipFile      压缩文件
         * @param folderPath   目标文件夹
         * @param nameContains 传入的文件匹配名
         * @throws ZipException 压缩格式有误时抛出
         * @throws IOException  IO错误时抛出
         */
        public static ArrayList<File> upZipSelectedFile(String zipFile, String folderPath, String nameContains) throws ZipException, IOException {
            ArrayList<File> fileList = new ArrayList<File>();

            File desDir = new File(folderPath);
            if (!desDir.exists()) {
                desDir.mkdir();
            }
            ZipFile zf = new ZipFile(zipFile);
            for (Enumeration<?> entries = zf.entries(); entries.hasMoreElements(); ) {
                ZipEntry entry = ((ZipEntry) entries.nextElement());
                if (entry.getName().contains(nameContains)) {
                    InputStream in = zf.getInputStream(entry);
                    String str = folderPath + File.separator + entry.getName();
                    str = new String(str.getBytes("8859_1"), "GB2312");
                    // str.getBytes("GB2312"),"8859_1" 输出
                    // str.getBytes("8859_1"),"GB2312" 输入
                    File desFile = new File(str);
                    if (!desFile.exists()) {
                        File fileParentDir = desFile.getParentFile();
                        if (!fileParentDir.exists()) {
                            fileParentDir.mkdirs();
                        }
                        desFile.createNewFile();
                    }
                    OutputStream out = new FileOutputStream(desFile);
                    byte buffer[] = new byte[BUFF_SIZE];
                    int realLength;
                    while ((realLength = in.read(buffer)) > 0) {
                        out.write(buffer, 0, realLength);
                    }
                    in.close();
                    out.close();
                    fileList.add(desFile);
                }
            }
            return fileList;
        }

        /**
         * 获得压缩文件内文件列表
         *
         * @param zipFile 压缩文件
         * @return 压缩文件内文件名称
         * @throws ZipException 压缩文件格式有误时抛出
         * @throws IOException  当解压缩过程出错时抛出
         */
        public static ArrayList<String> getEntriesNames(String zipFile) throws ZipException, IOException {
            ArrayList<String> entryNames = new ArrayList<>();
            Enumeration<?> entries = getEntriesEnumeration(zipFile);
            while (entries.hasMoreElements()) {
                ZipEntry entry = ((ZipEntry) entries.nextElement());
                entryNames.add(new String(getEntryName(entry).getBytes("GB2312"), "8859_1"));
            }
            return entryNames;
        }

        /**
         * 获得压缩文件内压缩文件对象以取得其属性
         *
         * @param zipFile 压缩文件
         * @return 返回一个压缩文件列表
         * @throws ZipException 压缩文件格式有误时抛出
         * @throws IOException  IO操作有误时抛出
         */
        public static Enumeration<?> getEntriesEnumeration(String zipFile) throws ZipException, IOException {
            ZipFile zf = new ZipFile(zipFile);
            return zf.entries();
        }

        /**
         * 取得压缩文件对象的注释
         *
         * @param entry 压缩文件对象
         * @return 压缩文件对象的注释
         * @throws UnsupportedEncodingException
         */
        public static String getEntryComment(ZipEntry entry) throws UnsupportedEncodingException {
            return new String(entry.getComment().getBytes("GB2312"), "8859_1");
        }

        /**
         * 取得压缩文件对象的名称
         *
         * @param entry 压缩文件对象
         * @return 压缩文件对象的名称
         * @throws UnsupportedEncodingException
         */
        public static String getEntryName(ZipEntry entry) throws UnsupportedEncodingException {
            return new String(entry.getName().getBytes("GB2312"), "8859_1");
        }

        /**
         * 压缩文件
         *
         * @param resFile  需要压缩的文件（夹）
         * @param zipout   压缩的目的文件
         * @param rootpath 压缩的文件路径
         * @throws FileNotFoundException 找不到文件时抛出
         * @throws IOException           当压缩过程出错时抛出
         */
        private static void zipFile(File resFile, ZipOutputStream zipout, String rootpath) throws FileNotFoundException, IOException {
            rootpath = rootpath + (rootpath.trim().length() == 0 ? "" : File.separator) + resFile.getName();
            rootpath = new String(rootpath.getBytes("8859_1"), "GB2312");
            if (resFile.isDirectory()) {
                File[] fileList = resFile.listFiles();
                for (File file : fileList) {
                    zipFile(file, zipout, rootpath);
                }
            } else {
                byte buffer[] = new byte[BUFF_SIZE];
                BufferedInputStream in = new BufferedInputStream(new FileInputStream(resFile), BUFF_SIZE);
                zipout.putNextEntry(new ZipEntry(rootpath));
                int realLength;
                while ((realLength = in.read(buffer)) != -1) {
                    zipout.write(buffer, 0, realLength);
                }
                in.close();
                zipout.flush();
                zipout.closeEntry();
            }
        }

    }

//=========================================== APP迭代类（更新、热修复bug） =========================================

    /**
     * APP 迭代类
     */
    public static class AppIteration {
        //更新 APP 版本
        public static class UpdateApp {


            /**
             * 卸载第三方或子App
             * 需要权限:<uses-permission android:name="android.permission.REQUEST_DELETE_PACKAGES"/>
             *
             * @param context
             * @param packageName
             */
            public static void uninstallPackage(Context context, String packageName) {
                Intent intent = new Intent(Intent.ACTION_DELETE);
                intent.setData(Uri.parse("package:" + packageName));
                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                context.startActivity(intent);
            }


            /**
             * 内置 更新 APP 版本 注意
             * <p>
             * 详细教程：https://blog.csdn.net/qq_39799899/article/details/102470084
             * <p>
             * 3.记得添加权限
             * <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" /> <!-- 写入手机权限 -->
             * <uses-permission android:name="android.permission.INTERNET" />  <!-- 网络权限 -->
             * <uses-permission android:name="android.permission.READ_PHONE_STATE" />  <!-- 读取手机权限 -->
             * <!-- 自动安装权限 -->
             * <uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES" />
             */

            /**
             * 安装APK
             *
             * @param apkPath
             * @安装新版本 1.在清单文件添加数据共享
             * <application>
             * ...
             * <!--自动安装需要添加-->
             * <provider
             * android:name="androidx.core.content.FileProvider"
             * android:authorities="自己包名.fileprovider"
             * android:grantUriPermissions="true"
             * android:exported="false">
             * <meta-data
             * android:name="android.support.FILE_PROVIDER_PATHS"
             * android:resource="@xml/file_paths" />
             * </provider>
             * ...
             * </<application>
             * <p>
             * 2.添加 file_paths.xml 文件
             * <paths>
             * <external-path path="." name="external_storage_root" />
             * </paths>
             */
            /**
             * @param activity
             * @param apkPath  相对APP的详细位置包括：路径与xxx.apk
             */
            public static void installNewApk(Activity activity, String apkPath, String AUTHORITY) {
                File apkfile = new File(apkPath);
                if (!apkfile.exists()) {
                    return;
                }
                Intent intent = new Intent(Intent.ACTION_VIEW);
                intent.addCategory(Intent.CATEGORY_DEFAULT);
                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                //兼容android7.0以上版本
                Uri uri = Uri.fromFile(apkfile);
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
                    //通过FileProvider创建一个content类型的Uri
                    uri = FileProvider.getUriForFile(activity, AUTHORITY, apkfile);
                    // 给目标应用一个临时授权
                    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
                }
                intent.setDataAndType(uri, "application/vnd.android.package-archive");
                activity.startActivity(intent);
            }

            /**
             * 请自行添加读写权限
             * 下载app
             *
             * @param context     上下文 (必填)
             * @param downloadUrl app下载网址 (必填)
             * @param apkSavePath apk保存路径 (非必填)
             * @param listener    下载回调 (必填)
             */
            public static void downloadApp(String downloadUrl, Context context, String apkSavePath, HttpUtil.OnLoadData listener) {
                if (downloadUrl == null || context == null || listener == null) return;

                String apkName = apkSavePath;//初始值是默认外界调用的

                //如果没有设置 初始值就默认创建路径
                if (apkSavePath == null) {
                    apkSavePath = GT.FileUtils.getAppDirectory(context) + "/updatePack/";
                    apkName = apkSavePath + GT.ApplicationUtils.getAppName(context) + "-" + GT.ApplicationUtils.getVerName(context) + ".app";
                }

                //目录是否存在
                if (!GT.FileUtils.fileExist(apkSavePath)) {
                    new File(apkSavePath).mkdirs();//创建当前目录
                }

                //添加 app 保存扩展名
                GT.HttpUtil.downloadFile(downloadUrl, apkName, listener);
            }

        }

        // 热修复 APP
        public static class FixAPP {

            //这下面两个属性可自己修改
            private static String FIX_FILE_PATH = "";//修复文件路径(默认初始路径为根目录)
            private static final String DEX_SUFFIX = ".dex";
            private static final String APK_SUFFIX = ".apk";
            private static final String JAR_SUFFIX = ".jar";
            private static final String ZIP_SUFFIX = ".zip";
            private static final String DEX_DIR = "odex";
            private static final String OPTIMIZE_DEX_DIR = "optimize_dex";//将新的补丁包赋值到data/data/files/optimize_dex 这个目录
            private static HashSet<File> loadedDex = new HashSet<>();

            //获取热修复文件路径
            public static String getFixFilePath(Context context) {
                if (FIX_FILE_PATH == null || FIX_FILE_PATH.length() == 0) {
                    FIX_FILE_PATH = "GT/" + ApplicationUtils.getPackageName(context) + "/fix";
                }
                return FIX_FILE_PATH;
            }

            /**
             * 设置热更新补丁包所在的文件路径
             *
             * @param fixFilePath
             */
            public static void setFixFilePath(String fixFilePath) {
                FIX_FILE_PATH = fixFilePath;
            }

            static {
                loadedDex.clear();
            }

            /**
             * 开启修复
             *
             * @param context
             */
            public static void startRepair(final Context context) {

                if (FIX_FILE_PATH == null || FIX_FILE_PATH.length() == 0) {
                    FIX_FILE_PATH = FileUtils.getGTPath(context) + "fix";
                }
//                logt("FIX_FILE_PATH:" + FIX_FILE_PATH);
                // 遍历所有的修复dex , 因为可能是多个dex修复包
                File fileDir = new File(FIX_FILE_PATH);// data/user/0/包名/files/odex（这个可以任意位置）
                if (!fileDir.exists()) {//如果目录不存在就创建所有目录，这里需要添加权限
//                    logt("创建新文件:" + fileDir.getPath());
                    fileDir.mkdirs();
                }

//                logt("fixPath1:" + fileDir.getPath());

                if (isGoingToFix(fileDir)) {
//                    logt("开始修复");
                    doDexInject(context, loadedDex, true);
//                    logt("结束修复");
                } else {
                    //如果该文件不存在或文件夹内没有热更新文件，那就检查下面这个文件目录是否存在热更，是的话，那就直接加载这个下面旧的热更文件
          /*  String optimizeDir = context.getFilesDir().getAbsolutePath() + File.separator + OPTIMIZE_DEX_DIR;
            ogt("optimizeDir:" + optimizeDir);


            File[] listFiles = new File(optimizeDir).listFiles();

            if (listFiles != null)
                logt("个数：" + listFiles.length);

            if (listFiles != null) {
                for (File file : listFiles) {
                    logt("file.getName()：" + file.getPath());
                    if ((file.getName().endsWith(DEX_SUFFIX)
                            || file.getName().endsWith(APK_SUFFIX)
                            || file.getName().endsWith(JAR_SUFFIX)
                            || file.getName().endsWith(ZIP_SUFFIX))) {

                        loadedDex.add(file);// 存入集合
                    }
                }
            }

            if (loadedDex.size() != 0) {
                doDexInject(context, loadedDex, false);
            }*/
//                    logt("跳过修复");
                }
            }

            /**
             * 验证是否需要热修复
             *
             * @return
             */
            private static boolean isGoingToFix(File fileDir) {
                boolean canFix = false;
//                logt("fixPath2:" + fileDir.getPath());

                File[] listFiles = fileDir.listFiles();

//                if (listFiles != null)
//                    logt("个数：" + listFiles.length);

                if (listFiles != null) {
                    for (File file : listFiles) {
//                        logt("file.getName()：" + file.getPath());
                        if ((file.getName().endsWith(DEX_SUFFIX)
                                || file.getName().endsWith(APK_SUFFIX)
                                || file.getName().endsWith(JAR_SUFFIX)
                                || file.getName().endsWith(ZIP_SUFFIX))) {

                            loadedDex.add(file);// 存入集合
                            //有目标dex文件, 需要修复
                            canFix = true;
                        }
                    }
                }
//                logt("loadedDex：" + loadedDex);
//                logt("canFix：" + canFix);

                return canFix;
            }

            /**
             * 开始加载 Dex 补丁包
             *
             * @param appContext
             * @param loadedDex
             */
            private static void doDexInject(Context appContext, HashSet<File> loadedDex, boolean isEmptyFile) {
                String optimizeDir = appContext.getFilesDir().getAbsolutePath() + File.separator + OPTIMIZE_DEX_DIR;
//                logt("optimizeDir:" + optimizeDir);
                // data/data/包名/files/optimize_dex（这个必须是自己程序下的目录）

                File fopt = new File(optimizeDir);
                if (!fopt.exists()) {
//                    logt("创建data目录下的:" + fopt.getPath());
                    fopt.mkdirs();
                } else {
//                    logt("存在，清空这个文件夹里所有文件");
                    if (isEmptyFile) FileUtils.deleteAllFiles(fopt, false);
                }

                try {
                    // 1.加载应用程序dex的Loader
                    PathClassLoader pathLoader = (PathClassLoader) appContext.getClassLoader();
//                    logt("pathLoader:" + pathLoader);
                    for (File dex : loadedDex) {
//                        logt("dex:" + dex.getPath());

//                        logt("getAbsolutePath1:" + dex.getAbsolutePath());
//                        logt("getAbsolutePath2:" + fopt.getAbsolutePath());

                        // 2.加载指定的修复的dex文件的Loader
                        DexClassLoader dexLoader = new DexClassLoader(dex.getAbsolutePath(),// 修复好的dex（补丁）所在目录
                                fopt.getAbsolutePath(),// 存放dex的解压目录（用于jar、zip、apk格式的补丁）
                                null,// 加载dex时需要的库
                                pathLoader// 父类加载器
                        );
                        // 3.开始合并
                        // 合并的目标是Element[],重新赋值它的值即可

                        /**
                         * BaseDexClassLoader中有 变量: DexPathList pathList
                         * DexPathList中有 变量 Element[] dexElements
                         * 依次反射即可
                         */

//                        logt("准备加载 pathList");
                        //3.1 准备好pathList的引用
                        Object dexPathList = getPathList(dexLoader);
                        Object pathPathList = getPathList(pathLoader);
                        //3.2 从pathList中反射出element集合
                        Object leftDexElements = getDexElements(dexPathList);
                        Object rightDexElements = getDexElements(pathPathList);
                        //3.3 合并两个dex数组
                        Object dexElements = combineArray(leftDexElements, rightDexElements);

                        // 重写给PathList里面的Element[] dexElements;赋值
                        Object pathList = getPathList(pathLoader);// 一定要重新获取，不要用pathPathList，会报错
                        setField(pathList, pathList.getClass(), "dexElements", dexElements);
//                        logt("结束加载 pathList");
                    }
//                    logt("修复完成");
                } catch (Exception e) {
//                    logt("修复异常:" + e);
                    e.printStackTrace();
                }
            }

            /**
             * 反射给对象中的属性重新赋值
             *
             * @param obj
             * @param cl
             * @param field
             * @param value
             * @throws NoSuchFieldException
             * @throws IllegalAccessException
             */
            private static void setField(Object obj, Class<?> cl, String field, Object value) throws NoSuchFieldException, IllegalAccessException {
                Field declaredField = cl.getDeclaredField(field);
                declaredField.setAccessible(true);
                declaredField.set(obj, value);
            }

            /**
             * 反射得到对象中的属性值
             *
             * @param obj
             * @param cl
             * @param field
             * @return
             * @throws NoSuchFieldException
             * @throws IllegalAccessException
             */
            private static Object getField(Object obj, Class<?> cl, String field) throws NoSuchFieldException, IllegalAccessException {
                Field localField = cl.getDeclaredField(field);
                localField.setAccessible(true);
                return localField.get(obj);
            }

            /**
             * 反射得到类加载器中的pathList对象
             *
             * @param baseDexClassLoader
             * @return
             * @throws ClassNotFoundException
             * @throws NoSuchFieldException
             * @throws IllegalAccessException
             */
            private static Object getPathList(Object baseDexClassLoader) throws ClassNotFoundException, NoSuchFieldException, IllegalAccessException {
                return getField(baseDexClassLoader, Class.forName("dalvik.system.BaseDexClassLoader"), "pathList");
            }

            /**
             * 反射得到pathList中的dexElements
             *
             * @param pathList
             * @return
             * @throws NoSuchFieldException
             * @throws IllegalAccessException
             */
            private static Object getDexElements(Object pathList) throws NoSuchFieldException, IllegalAccessException {
                return getField(pathList, pathList.getClass(), "dexElements");
            }

            /**
             * 数组合并
             *
             * @param arrayLhs
             * @param arrayRhs
             * @return
             */
            private static Object combineArray(Object arrayLhs, Object arrayRhs) {
                Class<?> clazz = arrayLhs.getClass().getComponentType();
                int i = Array.getLength(arrayLhs);// 得到左数组长度（补丁数组）
                int j = Array.getLength(arrayRhs);// 得到原dex数组长度
                int k = i + j;// 得到总数组长度（补丁数组+原dex数组）
                Object result = Array.newInstance(clazz, k);// 创建一个类型为clazz，长度为k的新数组
                System.arraycopy(arrayLhs, 0, result, 0, i);
                System.arraycopy(arrayRhs, 0, result, i, j);
                return result;
            }

        }

        public static void apkPlugin(Context context) {

            String path1 = "/storage/emulated/0/GT/com.zuanuniverse.myapplication/fix/app-debug.apk";
            String path2 = "/storage/emulated/0/GT/com.zuanuniverse.myapplication/fix/app-release.apk";
            //插件包文件
            File file = null;
            File file1 = new File(path1);
            File file2 = new File(path2);
            boolean exists1 = file1.exists();
            boolean exists2 = file2.exists();
            if (exists1) {
                file = file1;
            } else if (exists2) {
                file = file2;
            }
            if (file == null) return;


            try {
                //获取到 BaseDexClassLoader 的  pathList字段
                // private final DexPathList pathList;
                Field pathListField = BaseDexClassLoader.class.getDeclaredField("pathList");
                //破坏封装，设置为可以调用
                pathListField.setAccessible(true);
                //拿到当前ClassLoader的pathList对象
                Object pathListObj = pathListField.get(context.getClassLoader());

                //获取当前ClassLoader的pathList对象的字节码文件（DexPathList ）
                Class<?> dexPathListClass = pathListObj.getClass();
                //拿到DexPathList 的 dexElements字段
                // private final Element[] dexElements；
                Field dexElementsField = dexPathListClass.getDeclaredField("dexElements");
                //破坏封装，设置为可以调用
                dexElementsField.setAccessible(true);

                //使用插件创建 ClassLoader
                DexClassLoader pathClassLoader = new DexClassLoader(file.getPath(), context.getCacheDir().getAbsolutePath(), null, context.getClassLoader());
                //拿到插件的DexClassLoader 的 pathList对象
                Object newPathListObj = pathListField.get(pathClassLoader);
                //拿到插件的pathList对象的 dexElements变量
                Object newDexElementsObj = dexElementsField.get(newPathListObj);
                //将插件的 dexElements对象设置给 当前ClassLoader的pathList对象
                dexElementsField.set(pathListObj, newDexElementsObj);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        /**
         * dex作为插件加载
         */
        public static void dexPlugin(Context context) {
            //插件包文件
            String path = "/storage/emulated/0/GT/com.zuanuniverse.myapplication/fix/classes.dex";
            //插件包文件
            File file = new File(path);
            boolean exists = file.exists();
            if (!exists) {
                return;
            }

            try {
                //获取到 BaseDexClassLoader 的  pathList字段
                // private final DexPathList pathList;
                Field pathListField = BaseDexClassLoader.class.getDeclaredField("pathList");
                //破坏封装，设置为可以调用
                pathListField.setAccessible(true);
                //拿到当前ClassLoader的pathList对象
                Object pathListObj = pathListField.get(context.getClassLoader());

                //获取当前ClassLoader的pathList对象的字节码文件（DexPathList ）
                Class<?> dexPathListClass = pathListObj.getClass();
                //拿到DexPathList 的 dexElements字段
                // private final Element[] dexElements；
                Field dexElementsField = dexPathListClass.getDeclaredField("dexElements");
                //破坏封装，设置为可以调用
                dexElementsField.setAccessible(true);

                //使用插件创建 ClassLoader
                DexClassLoader pathClassLoader = new DexClassLoader(file.getPath(), context.getCacheDir().getAbsolutePath(), null, context.getClassLoader());
                //拿到插件的DexClassLoader 的 pathList对象
                Object newPathListObj = pathListField.get(pathClassLoader);
                //拿到插件的pathList对象的 dexElements变量
                Object newDexElementsObj = dexElementsField.get(newPathListObj);

                //拿到当前的pathList对象的 dexElements变量
                Object dexElementsObj = dexElementsField.get(pathListObj);

                int oldLength = Array.getLength(dexElementsObj);
                int newLength = Array.getLength(newDexElementsObj);
                //创建一个dexElements对象
                Object concatDexElementsObject = Array.newInstance(dexElementsObj.getClass().getComponentType(), oldLength + newLength);
                //先添加新的dex添加到dexElement
                for (int i = 0; i < newLength; i++) {
                    Array.set(concatDexElementsObject, i, Array.get(newDexElementsObj, i));
                }
                //再添加之前的dex添加到dexElement
                for (int i = 0; i < oldLength; i++) {
                    Array.set(concatDexElementsObject, newLength + i, Array.get(dexElementsObj, i));
                }
                //将组建出来的对象设置给 当前ClassLoader的pathList对象
                dexElementsField.set(pathListObj, concatDexElementsObject);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        public static void monkeyPatchExistingResources(@Nullable Context context,
                                                        @Nullable String externalResourceFile,
                                                        @Nullable Collection<Activity> activities) {
            if (externalResourceFile == null) {
                return;
            }

            boolean exists = new File(externalResourceFile).exists();
            if (!exists) {
                return;
            }

            try {
                //利用反射创建一个新的AssetManager
                AssetManager newAssetManager = AssetManager.class.getConstructor().newInstance();
                //利用反射获取addAssetPath方法
                Method method = AssetManager.class.getDeclaredMethod("addAssetPath", String.class);
                method.setAccessible(true);
                //利用反射调用addAssetPath方法加载外部的资源（SD卡）
                if (((Integer) method.invoke(newAssetManager, externalResourceFile)) == 0) {
                    throw new IllegalStateException("Could not create new AssetManager");
                }
                // Kitkat needs this method call, Lollipop doesn't. However, it doesn't seem to cause any harm
                // in L, so we do it unconditionally.
                Method mEnsureStringBlocks = AssetManager.class.getDeclaredMethod("ensureStringBlocks");
                mEnsureStringBlocks.setAccessible(true);
                mEnsureStringBlocks.invoke(newAssetManager);
                if (activities != null) {
                    //遍历activities
                    for (Activity activity : activities) {


                        //拿到Activity的 Resources 替换 Resources 资源
                        Resources resources = activity.getResources();
                        try {
                            //获取Resources的成员变量mAssets
                            Field mAssets = Resources.class.getDeclaredField("mAssets");
                            mAssets.setAccessible(true);
                            //给成员变量mAssets重新赋值为自己创建的newAssetManager
                            mAssets.set(resources, newAssetManager);
                        } catch (Throwable ignore) {
                            Field mResourcesImpl = Resources.class.getDeclaredField("mResourcesImpl");
                            mResourcesImpl.setAccessible(true);
                            Object resourceImpl = mResourcesImpl.get(resources);
                            Field implAssets = resourceImpl.getClass().getDeclaredField("mAssets");
                            implAssets.setAccessible(true);
                            implAssets.set(resourceImpl, newAssetManager);
                        }

                        //获取activity的theme 替换主题资源
                        Resources.Theme theme = activity.getTheme();
                        try {
                            try {
                                //反射得到Resources.Theme的mAssets变量
                                Field ma = Resources.Theme.class.getDeclaredField("mAssets");
                                ma.setAccessible(true);
                                //将Resources.Theme的mAssets替换成newAssetManager
                                ma.set(theme, newAssetManager);
                            } catch (NoSuchFieldException ignore) {
                                Field themeField = Resources.Theme.class.getDeclaredField("mThemeImpl");
                                themeField.setAccessible(true);
                                Object impl = themeField.get(theme);
                                Field ma = impl.getClass().getDeclaredField("mAssets");
                                ma.setAccessible(true);
                                ma.set(impl, newAssetManager);
                            }


                            @SuppressLint("SoonBlockedPrivateApi") Field mt = ContextThemeWrapper.class.getDeclaredField("mTheme");
                            mt.setAccessible(true);
                            mt.set(activity, null);
                            Method mtm = ContextThemeWrapper.class.getDeclaredMethod("initializeTheme");
                            mtm.setAccessible(true);
                            mtm.invoke(activity);
                            Method mCreateTheme = AssetManager.class.getDeclaredMethod("createTheme");
                            mCreateTheme.setAccessible(true);
                            Object internalTheme = mCreateTheme.invoke(newAssetManager);
//                        Field mTheme = Resources.Theme.class.getDeclaredField("mThemeImpl");
//                        mTheme.setAccessible(true);
//                        mTheme.set(theme, internalTheme);
                        } catch (Throwable e) {
                            Log.e("mmm", "Failed to update existing theme for activity " + activity,
                                    e);
                        }
                        //pruneResourceCaches(resources);
                    }
                }
                // 根据sdk版本的不同，用不同的方式获取Resources的弱引用集合
                Collection<WeakReference<Resources>> references;
                if (SDK_INT >= KITKAT) {
                    // Find the singleton instance of ResourcesManager
                    Class<?> resourcesManagerClass = Class.forName("android.app.ResourcesManager");
                    Method mGetInstance = resourcesManagerClass.getDeclaredMethod("getInstance");
                    mGetInstance.setAccessible(true);
                    Object resourcesManager = mGetInstance.invoke(null);
                    try {
                        Field fMActiveResources = resourcesManagerClass.getDeclaredField("mActiveResources");
                        fMActiveResources.setAccessible(true);
                        @SuppressWarnings("unchecked")
                        ArrayMap<?, WeakReference<Resources>> arrayMap =
                                (ArrayMap<?, WeakReference<Resources>>) fMActiveResources.get(resourcesManager);
                        references = arrayMap.values();
                    } catch (NoSuchFieldException ignore) {
                        Field mResourceReferences = resourcesManagerClass.getDeclaredField("mResourceReferences");
                        mResourceReferences.setAccessible(true);
                        //noinspection unchecked
                        references = (Collection<WeakReference<Resources>>) mResourceReferences.get(resourcesManager);
                    }
                } else {
                    Class<?> activityThread = Class.forName("android.app.ActivityThread");
                    Field fMActiveResources = activityThread.getDeclaredField("mActiveResources");
                    fMActiveResources.setAccessible(true);
                    Object thread = getActivityThread(context, activityThread);
                    @SuppressWarnings("unchecked")
                    ArrayMap<?, WeakReference<Resources>> map =
                            (ArrayMap<?, WeakReference<Resources>>) fMActiveResources.get(thread);
                    references = map.values();
                }
                //将的到的弱引用集合遍历得到Resources，将Resources中的mAssets字段替换为newAssetManager
                for (WeakReference<Resources> wr : references) {
                    Resources resources = wr.get();
                    if (resources != null) {
                        // Set the AssetManager of the Resources instance to our brand new one
                        try {
                            Field mAssets = Resources.class.getDeclaredField("mAssets");
                            mAssets.setAccessible(true);
                            mAssets.set(resources, newAssetManager);
                        } catch (Throwable ignore) {
                            Field mResourcesImpl = Resources.class.getDeclaredField("mResourcesImpl");
                            mResourcesImpl.setAccessible(true);
                            Object resourceImpl = mResourcesImpl.get(resources);
                            Field implAssets = resourceImpl.getClass().getDeclaredField("mAssets");
                            implAssets.setAccessible(true);
                            implAssets.set(resourceImpl, newAssetManager);
                        }
                        resources.updateConfiguration(resources.getConfiguration(), resources.getDisplayMetrics());
                    }
                }
            } catch (Throwable e) {
                throw new IllegalStateException(e);
            }
        }

        public static Object getActivityThread(@Nullable Context context,
                                               @Nullable Class<?> activityThread) {
            try {
                if (activityThread == null) {
                    activityThread = Class.forName("android.app.ActivityThread");
                }

                Method m = activityThread.getMethod("currentActivityThread");
                m.setAccessible(true);
                Object currentActivityThread = m.invoke(null);
                if (currentActivityThread == null && context != null) {
                    // In older versions of Android (prior to frameworks/base 66a017b63461a22842)
                    // the currentActivityThread was built on thread locals, so we'll need to try
                    // even harder
                    Field mLoadedApk = context.getClass().getField("mLoadedApk");
                    mLoadedApk.setAccessible(true);
                    Object apk = mLoadedApk.get(context);
                    Field mActivityThreadField = apk.getClass().getDeclaredField("mActivityThread");
                    mActivityThreadField.setAccessible(true);
                    currentActivityThread = mActivityThreadField.get(apk);
                }
                return currentActivityThread;
            } catch (Throwable ignore) {
                return null;
            }
        }

        public Resources reflectAssetManager(Context context, String path) throws Exception {
            boolean exists = new File(path).exists();
            if (!exists) {
                return null;
            }

            Class cAm = Class.forName("android.content.res.AssetManager");
            AssetManager objAm = (AssetManager) cAm.newInstance();
            Method method = cAm.getDeclaredMethod("addAssetPath", String.class);
            method.invoke(objAm, path);
            Resources resources = new Resources(objAm, context.getResources().getDisplayMetrics(), context.getResources().getConfiguration());
            Toast.makeText(context, "加载外部的资源文件", Toast.LENGTH_LONG).show();
            return resources;
        }


        public void load(Context context, String path) throws ClassNotFoundException, NoSuchFieldException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {

            boolean exists = new File(path).exists();
            if (!exists) {
                return;
            }

            Class<?> contextImpl = Class.forName("android.app.ContextImpl");
            Class<?> loadedApkClass;
            try {
                loadedApkClass = Class.forName("android.app.LoadedApk");
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
                loadedApkClass = Class.forName("android.app.ActivityThread$PackageInfo");
            }
            Field mPackageInfo = contextImpl.getDeclaredField("mPackageInfo");
            mPackageInfo.setAccessible(true);
            Method methodGetImpl = contextImpl.getDeclaredMethod("getImpl", Context.class);
            methodGetImpl.setAccessible(true);
            Object objImpl = methodGetImpl.invoke(null, this);
            if (objImpl != null) {
                Toast.makeText(context, "objImpl不为空：", Toast.LENGTH_SHORT).show();
            }
            Object loadedApkObj = mPackageInfo.get(objImpl);
            Field resDir = loadedApkClass.getDeclaredField("mResDir");
            resDir.setAccessible(true);
            //String path=""; 资源apk路劲
            resDir.set(loadedApkObj, path);
        }

        public static Resources loadResources(Context context, String apkPath) {
            boolean exists = new File(apkPath).exists();
            if (!exists) return null;
            try {
                AssetManager assetManager = AssetManager.class.newInstance();
                Method addAssetPath = assetManager.getClass().getMethod("addAssetPath", String.class);
                addAssetPath.invoke(assetManager, apkPath);

                Resources resources = context.getResources();
                return new Resources(assetManager, resources.getDisplayMetrics(), resources.getConfiguration());
            } catch (Exception e) {
                e.printStackTrace();
            }

            return null;
        }


    }

//=========================================== 字符串加密类 =========================================

    /**
     * @加密类
     */
    public static class Encryption {

        /**
         * @MD5 加密算法
         */
        public static class MD5 {

            private static final String hexDigIts[] = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d",
                    "e", "f"};

            /**
             * MD5加密
             *
             * @param origin 字符
             * @return
             */
            public static String encryptMD5(String origin) {
                String resultString = null;
                try {
                    resultString = new String(origin);
                    MessageDigest md = MessageDigest.getInstance("MD5");
                    if (null == "UTF-8" || "".equals("UTF-8")) {
                        resultString = byteArrayToHexString(md.digest(resultString.getBytes()));
                    } else {
                        resultString = byteArrayToHexString(md.digest(resultString.getBytes("UTF-8")));
                    }
                } catch (Exception e) {
                }
                return resultString;
            }

            private static String byteArrayToHexString(byte b[]) {
                StringBuffer resultSb = new StringBuffer();
                for (int i = 0; i < b.length; i++) {
                    resultSb.append(byteToHexString(b[i]));
                }
                return resultSb.toString();
            }

            private static String byteToHexString(byte b) {
                int n = b;
                if (n < 0) {
                    n += 256;
                }
                int d1 = n / 16;
                int d2 = n % 16;
                return hexDigIts[d1] + hexDigIts[d2];
            }

        }

        /**
         * @DES 加密算法
         */
        public static class DES {

            private final static String PAW =
                    "         4&(\n" +
                            "       ` ~&&\\yM#1\n" +
                            "        ,_'Q!!NMW&\n" +
                            "        WCb 7N✪4D Q%,,\n" +
                            "        PM'*MDk#M0p,\n" +
                            "            ]@J0&e~~4r' ,+bQEQ\n" +
                            "             F8I&#'   _&B$$✪W#&$\n" +
                            "              &0A1   L#DE&E~!Q&Q,\n" +
                            " _=,        ,#0RN1  _T@0$'   ZN$Q.   grNq5\n" +
                            " ^✪'d     ,0K0pK^  g*Q0g'    #Q4p&,/g9X*&#,_/✪(q\n" +
                            "  TA1   ,sDQWh4^  x&NM0` _   #FQ#K#fA#   `*K#XWP~-\n" +
                            "   ^&p,wNMM0qD: /HE#EN' ..#g)~ '@NG0Qx,    `=X*\n" +
                            "  '  '43$'hE✪##m0D04f_g  ~^ ~   `-00**0\n" +
                            "           =0#ONq2W0BF^#, _           ✪p,,\n" +
                            "             `  ^''~   ✪~b''        **R3`\n" +
                            "                      ow,F         +#F~'\n" +
                            "                      /-9!          ` \\\n" +
                            "                       R";

            /**
             * 加密
             *
             * @param clearText
             * @return
             */
            public static String encryptPassword(Object clearText, Object password) {
                password += PAW;
                try {
                    DESKeySpec keySpec = null;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                        keySpec = new DESKeySpec(String.valueOf(password).getBytes(UTF_8));
                    }
                    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("DES");
                    SecretKey key = keyFactory.generateSecret(keySpec);

                    Cipher cipher = Cipher.getInstance("DES");
                    cipher.init(Cipher.ENCRYPT_MODE, key);
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                        return android.util.Base64.encodeToString(cipher.doFinal(String.valueOf(clearText).getBytes(UTF_8)), android.util.Base64.DEFAULT);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                return String.valueOf(clearText);
            }

            /**
             * 解密
             *
             * @param encryptedPwd
             * @return
             */
            public static String decryptPassword(Object encryptedPwd, Object password) {
                password += PAW;
                try {
                    DESKeySpec keySpec = null;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                        keySpec = new DESKeySpec(String.valueOf(password).getBytes(UTF_8));
                    }
                    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("DES");
                    SecretKey key = keyFactory.generateSecret(keySpec);

                    byte[] encryptedWithoutB64 = android.util.Base64.decode(String.valueOf(encryptedPwd), android.util.Base64.DEFAULT);
                    Cipher cipher = Cipher.getInstance("DES");
                    cipher.init(Cipher.DECRYPT_MODE, key);
                    byte[] plainTextPwdBytes = cipher.doFinal(encryptedWithoutB64);
                    return new String(plainTextPwdBytes);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                return String.valueOf(encryptedPwd);
            }
        }

        /**
         * @Base64 加密算法
         */
        public static final class Base64 {

            private static final int BASELENGTH = 128;
            private static final int LOOKUPLENGTH = 64;
            private static final int TWENTYFOURBITGROUP = 24;
            private static final int EIGHTBIT = 8;
            private static final int SIXTEENBIT = 16;
            private static final int FOURBYTE = 4;
            private static final int SIGN = -128;
            private static char PAD = '=';
            private static byte[] base64Alphabet = new byte[BASELENGTH];
            private static char[] lookUpBase64Alphabet = new char[LOOKUPLENGTH];

            static {
                for (int i = 0; i < BASELENGTH; ++i) {
                    base64Alphabet[i] = -1;
                }
                for (int i = 'Z'; i >= 'A'; i--) {
                    base64Alphabet[i] = (byte) (i - 'A');
                }
                for (int i = 'z'; i >= 'a'; i--) {
                    base64Alphabet[i] = (byte) (i - 'a' + 26);
                }

                for (int i = '9'; i >= '0'; i--) {
                    base64Alphabet[i] = (byte) (i - '0' + 52);
                }

                base64Alphabet['+'] = 62;
                base64Alphabet['/'] = 63;

                for (int i = 0; i <= 25; i++) {
                    lookUpBase64Alphabet[i] = (char) ('A' + i);
                }

                for (int i = 26, j = 0; i <= 51; i++, j++) {
                    lookUpBase64Alphabet[i] = (char) ('a' + j);
                }

                for (int i = 52, j = 0; i <= 61; i++, j++) {
                    lookUpBase64Alphabet[i] = (char) ('0' + j);
                }
                lookUpBase64Alphabet[62] = (char) '+';
                lookUpBase64Alphabet[63] = (char) '/';

            }

            private static boolean isWhiteSpace(char octect) {
                return (octect == 0x20 || octect == 0xd || octect == 0xa || octect == 0x9);
            }

            private static boolean isPad(char octect) {
                return (octect == PAD);
            }

            private static boolean isData(char octect) {
                return (octect < BASELENGTH && base64Alphabet[octect] != -1);
            }

            /**
             * Encodes hex octects into Base64
             *
             * @param binaryData Array containing binaryData
             * @return Encoded Base64 array
             */
            public static String encode(byte[] binaryData) {

                if (binaryData == null) {
                    return null;
                }

                int lengthDataBits = binaryData.length * EIGHTBIT;
                if (lengthDataBits == 0) {
                    return "";
                }

                int fewerThan24bits = lengthDataBits % TWENTYFOURBITGROUP;
                int numberTriplets = lengthDataBits / TWENTYFOURBITGROUP;
                int numberQuartet = fewerThan24bits != 0 ? numberTriplets + 1
                        : numberTriplets;
                char encodedData[] = null;

                encodedData = new char[numberQuartet * 4];

                byte k = 0, l = 0, b1 = 0, b2 = 0, b3 = 0;

                int encodedIndex = 0;
                int dataIndex = 0;

                for (int i = 0; i < numberTriplets; i++) {
                    b1 = binaryData[dataIndex++];
                    b2 = binaryData[dataIndex++];
                    b3 = binaryData[dataIndex++];

                    l = (byte) (b2 & 0x0f);
                    k = (byte) (b1 & 0x03);

                    byte val1 = ((b1 & SIGN) == 0) ? (byte) (b1 >> 2)
                            : (byte) ((b1) >> 2 ^ 0xc0);
                    byte val2 = ((b2 & SIGN) == 0) ? (byte) (b2 >> 4)
                            : (byte) ((b2) >> 4 ^ 0xf0);
                    byte val3 = ((b3 & SIGN) == 0) ? (byte) (b3 >> 6)
                            : (byte) ((b3) >> 6 ^ 0xfc);

                    encodedData[encodedIndex++] = lookUpBase64Alphabet[val1];
                    encodedData[encodedIndex++] = lookUpBase64Alphabet[val2 | (k << 4)];
                    encodedData[encodedIndex++] = lookUpBase64Alphabet[(l << 2) | val3];
                    encodedData[encodedIndex++] = lookUpBase64Alphabet[b3 & 0x3f];
                }

                // form integral number of 6-bit groups
                if (fewerThan24bits == EIGHTBIT) {
                    b1 = binaryData[dataIndex];
                    k = (byte) (b1 & 0x03);

                    byte val1 = ((b1 & SIGN) == 0) ? (byte) (b1 >> 2)
                            : (byte) ((b1) >> 2 ^ 0xc0);
                    encodedData[encodedIndex++] = lookUpBase64Alphabet[val1];
                    encodedData[encodedIndex++] = lookUpBase64Alphabet[k << 4];
                    encodedData[encodedIndex++] = PAD;
                    encodedData[encodedIndex++] = PAD;
                } else if (fewerThan24bits == SIXTEENBIT) {
                    b1 = binaryData[dataIndex];
                    b2 = binaryData[dataIndex + 1];
                    l = (byte) (b2 & 0x0f);
                    k = (byte) (b1 & 0x03);

                    byte val1 = ((b1 & SIGN) == 0) ? (byte) (b1 >> 2)
                            : (byte) ((b1) >> 2 ^ 0xc0);
                    byte val2 = ((b2 & SIGN) == 0) ? (byte) (b2 >> 4)
                            : (byte) ((b2) >> 4 ^ 0xf0);

                    encodedData[encodedIndex++] = lookUpBase64Alphabet[val1];
                    encodedData[encodedIndex++] = lookUpBase64Alphabet[val2 | (k << 4)];
                    encodedData[encodedIndex++] = lookUpBase64Alphabet[l << 2];
                    encodedData[encodedIndex++] = PAD;
                }

                return new String(encodedData);
            }

            /**
             * Decodes Base64 data into octects
             *
             * @param encoded string containing Base64 data
             * @return Array containind decoded data.
             */
            public static byte[] decode(String encoded) {
                if (encoded == null) {
                    return null;
                }

                char[] base64Data = encoded.toCharArray();
                // remove white spaces
                int len = removeWhiteSpace(base64Data);

                if (len % FOURBYTE != 0) {
                    return null;// should be divisible by four
                }

                int numberQuadruple = (len / FOURBYTE);

                if (numberQuadruple == 0) {
                    return new byte[0];
                }

                byte decodedData[] = null;
                byte b1 = 0, b2 = 0, b3 = 0, b4 = 0;
                char d1 = 0, d2 = 0, d3 = 0, d4 = 0;

                int i = 0;
                int encodedIndex = 0;
                int dataIndex = 0;
                decodedData = new byte[(numberQuadruple) * 3];

                for (; i < numberQuadruple - 1; i++) {

                    if (!isData((d1 = base64Data[dataIndex++]))
                            || !isData((d2 = base64Data[dataIndex++]))
                            || !isData((d3 = base64Data[dataIndex++]))
                            || !isData((d4 = base64Data[dataIndex++]))) {
                        return null;
                    }// if found "no data" just return null

                    b1 = base64Alphabet[d1];
                    b2 = base64Alphabet[d2];
                    b3 = base64Alphabet[d3];
                    b4 = base64Alphabet[d4];

                    decodedData[encodedIndex++] = (byte) (b1 << 2 | b2 >> 4);
                    decodedData[encodedIndex++] = (byte) (((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
                    decodedData[encodedIndex++] = (byte) (b3 << 6 | b4);
                }

                if (!isData((d1 = base64Data[dataIndex++]))
                        || !isData((d2 = base64Data[dataIndex++]))) {
                    return null;// if found "no data" just return null
                }

                b1 = base64Alphabet[d1];
                b2 = base64Alphabet[d2];

                d3 = base64Data[dataIndex++];
                d4 = base64Data[dataIndex++];
                if (!isData((d3)) || !isData((d4))) {// Check if they are PAD characters
                    if (isPad(d3) && isPad(d4)) {
                        if ((b2 & 0xf) != 0)// last 4 bits should be zero
                        {
                            return null;
                        }
                        byte[] tmp = new byte[i * 3 + 1];
                        System.arraycopy(decodedData, 0, tmp, 0, i * 3);
                        tmp[encodedIndex] = (byte) (b1 << 2 | b2 >> 4);
                        return tmp;
                    } else if (!isPad(d3) && isPad(d4)) {
                        b3 = base64Alphabet[d3];
                        if ((b3 & 0x3) != 0)// last 2 bits should be zero
                        {
                            return null;
                        }
                        byte[] tmp = new byte[i * 3 + 2];
                        System.arraycopy(decodedData, 0, tmp, 0, i * 3);
                        tmp[encodedIndex++] = (byte) (b1 << 2 | b2 >> 4);
                        tmp[encodedIndex] = (byte) (((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
                        return tmp;
                    } else {
                        return null;
                    }
                } else { // No PAD e.g 3cQl
                    b3 = base64Alphabet[d3];
                    b4 = base64Alphabet[d4];
                    decodedData[encodedIndex++] = (byte) (b1 << 2 | b2 >> 4);
                    decodedData[encodedIndex++] = (byte) (((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
                    decodedData[encodedIndex++] = (byte) (b3 << 6 | b4);

                }

                return decodedData;
            }

            /**
             * remove WhiteSpace from MIME containing encoded Base64 data.
             *
             * @param data the byte array of base64 data (with WS)
             * @return the new length
             */
            private static int removeWhiteSpace(char[] data) {
                if (data == null) {
                    return 0;
                }

                // count characters that's not whitespace
                int newSize = 0;
                int len = data.length;
                for (int i = 0; i < len; i++) {
                    if (!isWhiteSpace(data[i])) {
                        data[newSize++] = data[i];
                    }
                }
                return newSize;
            }

            public static String encode2(String pass) {
                try {
                    return encode(pass.getBytes("utf-8"));
                } catch (UnsupportedEncodingException e) {

                }
                return pass;
            }

            public static String decode2(String pass) {
                try {
                    return new String(decode(pass), "utf-8");
                } catch (UnsupportedEncodingException e) {

                }
                return pass;
            }

        }
    }

//=========================================== APP权限类 =========================================

    /**
     * APP 权限管理 类
     */
    public static final class AppAuthorityManagement {

        /**
         * @功能：申请白名单 需要添加权限：<uses-permission android:name="android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS" />
         */
        public static void whiteList(Activity activity) {
            //申请白名单
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                PowerManager powerManager = (PowerManager) activity.getSystemService(POWER_SERVICE);
                boolean hasIgnored = powerManager.isIgnoringBatteryOptimizations(activity.getPackageName());
                //  判断当前APP是否有加入电池优化的白名单，如果没有，弹出加入电池优化的白名单的设置对话框。
                if (!hasIgnored) {
                    Intent intent = new Intent(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);
                    intent.setData(Uri.parse("package:" + activity.getPackageName()));
                    activity.startActivity(intent);
                }
            }
        }

        /**
         * 检查读写权限
         * <uses-permission android:name="android.permission.READ_MEDIA_IMAGES" /> <!-- 读写 图片 -->
         * <uses-permission android:name="android.permission.READ_MEDIA_VIDEO" /> <!-- 读写 视频 -->
         * <uses-permission android:name="android.permission.READ_MEDIA_AUDIO" /> <!-- 读写 音频 -->
         *
         * @param activity
         * @return true:开启  false:未开启
         */
        public static boolean checkStoragePermission(Activity activity) {
            return ContextCompat.checkSelfPermission(activity, Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED &&
                    ContextCompat.checkSelfPermission(activity, Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
        }

        /**
         * 通知栏权限
         * <uses-permission android:name="android.permission.POST_NOTIFICATIONS"/>
         * 跳转通知栏权限页面,引导用户开启权限
         *
         * @param context
         */
        public static void openNotificationSettingsForApp(Context context) {
            // Links to this app's notification settings.
            Intent intent = new Intent();
            intent.setAction("android.settings.APP_NOTIFICATION_SETTINGS");
            intent.putExtra("app_package", context.getPackageName());
            intent.putExtra("app_uid", context.getApplicationInfo().uid);
            // for Android 8 and above
            intent.putExtra("android.provider.extra.APP_PACKAGE", context.getPackageName());
            context.startActivity(intent);
        }

        /**
         * 通知栏权限动态申请
         * <uses-permission android:name="android.permission.POST_NOTIFICATIONS"/>
         *
         * @param context
         * @param oneListener 权限申请回调
         */
        public static void notification(FragmentActivity activity, GT.OneListener<Boolean> oneListener) {
            //权限动态申请
            GT.AppAuthorityManagement.Permission.init(activity, new String[]{
                    Manifest.permission.POST_NOTIFICATIONS
            }).permissions(new GT.AppAuthorityManagement.Permission.OnPermissionListener() {
                @Override
                public void onExplainRequestReason(GT.AppAuthorityManagement.Permission.PermissionDescription onPDListener) {
                    onPDListener.setAcceptAdvice(true);//核心，设置拒绝授权
                }

                @Override
                public boolean onForwardToSettings() {
                    //特殊权限特殊处理，如：需要进入 系统设置 中或 应用信息中的代码可自定义填写
                    return true;//默认是false 一定有改过来设置为 true
                }

                @Override
                public void request(boolean allGranted, String[] grantedList, String[] deniedList, String message) {
                    if (allGranted) {
                        //全部授权
                        oneListener.onOneListener(allGranted);
                    } else {
                        //未全部授权
                        oneListener.onOneListener(allGranted);
                    }
                }
            });
        }

        /**
         * 通知栏权限是否开启
         * 需要静态xml注册的权限: <uses-permission android:name="android.permission.POST_NOTIFICATIONS"/>
         *
         * @param context
         * @return true:开启  false:未开启
         */
        public static boolean areNotificationsEnabled(Context context) {
            NotificationManager mNotificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
                return mNotificationManager.areNotificationsEnabled();// 检查通知权限是否被用户授予
            }
            return true; // 在Android O之前，通知权限默认是开启的，可以直接返回true
        }

        /**
         *
         第一步：
         //创建一个 MyDeviceAdminReceiver 类并继承 DeviceAdminReceiver
         public class MyDeviceAdminReceiver extends DeviceAdminReceiver{}

         第二步：需要在 AndroidManifest.xml 中静态注册
         <receiver
         android:name=".MyDeviceAdminReceiver"
         android:description="@string/app_name"
         android:exported="true"
         android:label="防卸载"
         android:permission="android.permission.BIND_DEVICE_ADMIN">
         <meta-data
         android:name="android.app.device_admin"
         android:resource="@xml/deviceadmin" />

         <intent-filter>
         <action android:name="android.app.action.DEVICE_ADMIN_ENABLED" />
         </intent-filter>
         </receiver>
         */

        /**
         * 激活设备超级管理员,将获得一下权限
         * 1.恢复出厂设置
         * 2.修改屏幕解锁密码
         * 3.修改屏幕密码规则长度和字符
         * 4.监视屏幕解锁次数
         * 5.锁屏幕
         * 6.设置锁屏密码有效期
         * 7.设置应用数据加密
         * 8.禁止相机服务，所有app将无法使用相机
         *
         * @param context
         * @param cls     继承 DeviceAdminReceiver 类的自定义 MyDeviceAdminReceiver
         * @param data    说明
         */
        public static void activation(Context context, Class<?> cls, String data) {
            Intent intent = new Intent(DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN);
            // 初始化要激活的组件
            ComponentName mDeviceAdminSample = new ComponentName(context, cls);
            intent.putExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN, mDeviceAdminSample);
            intent.putExtra(DevicePolicyManager.EXTRA_ADD_EXPLANATION, data);
            context.startActivity(intent);
        }

        /**
         * 权限申请类
         */
        public static class Permission {

            private static final String TAG_PERMISSION = "TAG_PERMISSION";
            private static final String TAG_EACH_PERMISSION = "TAG_EACH_PERMISSION";
            private static Permission permission = null;
            private static SoftReference<FragmentManager> softReference;
            private static PermissionFragment fragment;
            private PermissionDescription permissionDescription;
            private String[] permissionArray;

            public static Permission init(FragmentActivity context, String... permissionArray) {
                if (Permission.permission == null) {
                    synchronized (Permission.class) {
                        if (Permission.permission == null) {
                            Permission.permission = new Permission();
                        }
                    }
                }
                if (permissionArray == null || permissionArray.length == 0) {
                    GT.err("Permission list is empty. Application failed!");
                    return Permission.permission;
                }
                Permission.permission.permissionArray = permissionArray;
                softReference = new SoftReference<>(context.getSupportFragmentManager());
                fragment = (PermissionFragment) softReference.get().findFragmentByTag(TAG_EACH_PERMISSION);
                return Permission.permission;
            }

            public Permission permissions(OnPermissionListener onPermissionListener) {

                Thread.getInstance(0).execute(new Runnable() {
                    @Override
                    public void run() {
                        Thread.runAndroid(new Runnable() {
                            @Override
                            public void run() {

                                if (permissionDescription != null) {
                                    permissionDescription.invalidClose();
                                }

                                permissionDescription = new PermissionDescription();

                                if (fragment == null) {
                                    fragment = PermissionFragment.newInstance(permissionArray, onPermissionListener, permission, permissionDescription);
                                }

                                if (softReference.get() != null) {
                                    softReference.get().beginTransaction().add(fragment, TAG_PERMISSION).commitAllowingStateLoss();
                                    try {
                                        softReference.get().executePendingTransactions();
                                    } catch (IllegalStateException e) {
                                        if (LOG.GT_LOG_TF)
                                            GT.log("进入异常:" + e);
//                    fragment.getChildFragmentManager().executePendingTransactions();
                                    }
                                }

                            }
                        });
                    }
                });
                return permission;
            }


            //权限接口
            public interface OnPermissionListener {
                //申请权限说明
                void onExplainRequestReason(PermissionDescription onPDListener);

                /**
                 * 转到设置
                 *
                 * @return true:继续申请权限，false:不在进行权限申请
                 */
                boolean onForwardToSettings();

                //开始申请
                void request(boolean allGranted, String[] grantedList, String[] deniedList, String message);
            }

            //权限申请说明
            public static class PermissionDescription {

                private boolean acceptAdvice = false;
                private boolean closeAcceptAdvice = false;
                private boolean isValidClose = true;//默认是有效关闭
                private int waitingTime = 0;//设置等待用户授权时间,毫秒

                public boolean isValidClose() {
                    return isValidClose;
                }

                public void setCloseAcceptAdvice(boolean closeAcceptAdvice) {
                    this.closeAcceptAdvice = closeAcceptAdvice;
                }

                public int getWaitingTime() {
                    return waitingTime;
                }

                /**
                 * 设置权限申请等待时间，如果时间过了还未申请，表示拒绝权限，如果未-1代表一直等待
                 *
                 * @param waitingTime（毫秒）
                 */
                public void setWaitingTime(int waitingTime) {
                    this.waitingTime = waitingTime;
                }

                public boolean isCloseAcceptAdvice() {
                    return closeAcceptAdvice;
                }

                public boolean isAcceptAdvice() {
                    return acceptAdvice;
                }

                /**
                 * 设置是否接受请求意见
                 *
                 * @param acceptAdvice
                 */
                public void setAcceptAdvice(boolean acceptAdvice) {
                    this.acceptAdvice = acceptAdvice;
                    closeAcceptAdvice = true;
                }

                /**
                 * 结束本次授权申明
                 */
                public void invalidClose() {
                    closeAcceptAdvice = true;
                    isValidClose = false;//设置无效关闭
                }

                public void close() {
                    closeAcceptAdvice = true;
                }


            }

            /**
             * 申请权限的 Fragment
             */
            public static class PermissionFragment extends Fragment {

                public PermissionFragment() {
                }

                private String[] permission;
                private OnPermissionListener onPermissionListener;
                private Permission Permission;
                private PermissionDescription permissionDescription;
                private List<String> grantedList = new ArrayList<>();//已通过
                private List<String> deniedList = new ArrayList<>();//未通过
                private boolean isAllGranted = true;//检查权限是否全部通过

                public PermissionFragment(String[] permission, OnPermissionListener onPermissionListener, Permission Permission, PermissionDescription permissionDescription) {
                    this.permission = permission;
                    this.onPermissionListener = onPermissionListener;
                    this.Permission = Permission;
                    this.permissionDescription = permissionDescription;
                }

                public static PermissionFragment newInstance(String[] permission, OnPermissionListener onPermissionListener, Permission Permission, PermissionDescription permissionDescription) {
                    return new PermissionFragment(permission, onPermissionListener, Permission, permissionDescription);
                }

                private FragmentActivity mActivity;

                @Override
                public void onAttach(@NonNull Context context) {
                    super.onAttach(context);
                    mActivity = getActivity();
                }

                @Override
                public void onDestroy() {
                    super.onDestroy();
                    permissionDescription.invalidClose();
                }

                @Override
                public void onCreate(Bundle savedInstanceState) {
                    super.onCreate(savedInstanceState);
                    setRetainInstance(true);

                    isAllGranted = true;
                    if (permission != null && permission.length != 0) {//判断权限是否为 null

                        //检查权限是否全部授予
                        for (int i = 0; i < permission.length; i++) {
                            int code = ContextCompat.checkSelfPermission(mActivity, permission[i]);
                            if (code == -1) {
                                isAllGranted = false;
                            }
                        }

                        if (isAllGranted) {
                            if (onPermissionListener != null)
                                onPermissionListener.request(true, permission, new String[]{}, "All permissions approved");
                            onPermissionListener = null;
                            return;
                        }

                        //调用授权说明对话框
                        if (onPermissionListener != null)
                            onPermissionListener.onExplainRequestReason(permissionDescription);

                        Thread.getInstance(0).execute(new Runnable() {
                            @Override
                            public void run() {
                                int i = 0;
                                //等待结束申请说明
                                while (!permissionDescription.isCloseAcceptAdvice()) {
                                    Thread.sleep(300);
                                }
                                if (permissionDescription.isValidClose()) {//判断是否有效关闭
                                    if (permissionDescription.isAcceptAdvice()) {//判断用户是否同意授权
                                        if (permission != null && permission.length != 0) {
                                            if (onPermissionListener != null && onPermissionListener.onForwardToSettings()) {//是否继续进行权限申请
                                                requestPermissions(permission, 1);//开始授权
                                            } else {//特殊权限方法
                                                if (onPermissionListener != null)
                                                    onPermissionListener.request(false, new String[]{}, permission, "Stop the authorization");
                                                onPermissionListener = null;
                                            }
                                        }
                                    } else {//用户拒绝授权
                                        if (onPermissionListener != null)
                                            onPermissionListener.request(false, new String[]{}, permission, "The user rejected the authorization");
                                        onPermissionListener = null;
                                    }
                                }
                            }
                        });

                    } else {
                        if (onPermissionListener != null)
                            onPermissionListener.request(false, new String[]{}, permission, "Add the authorization information in the Permissions method");
                        onPermissionListener = null;
                        return;
                    }

                }

                @Override
                public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
                    super.onRequestPermissionsResult(requestCode, permissions, grantResults);
                    if (deniedList.size() != 0 || grantedList.size() != 0) {
                        deniedList.clear();
                        grantedList.clear();
                    }
                    for (int i = 0; i < permissions.length; i++) {
                        int code = ContextCompat.checkSelfPermission(mActivity, permissions[i]);
                        if (code == -1) {
                            deniedList.add(permissions[i]);//获取为同意的权限
                        } else if (code == 0) {
                            grantedList.add(permissions[i]);//获取同意的权限
                        }
                    }

                    String[] grantedArray = new String[grantedList.size()];
                    for (int i = 0; i < grantedList.size(); i++) {
                        grantedArray[i] = grantedList.get(i);
                    }

                    String[] deniedArray = new String[deniedList.size()];
                    for (int i = 0; i < deniedList.size(); i++) {
                        deniedArray[i] = deniedList.get(i);
                    }

                    if (deniedList.size() == 0) {
                        if (onPermissionListener != null)
                            onPermissionListener.request(true, grantedArray, deniedArray, "All permissions approved");
                        onPermissionListener = null;
                    } else {
                        if (onPermissionListener != null)
                            onPermissionListener.request(false, grantedArray, deniedArray, "All permissions are not approved");
                        onPermissionListener = null;
                    }


                }


            }


        }

    }

//============================================= UI类 ===========================================

    /**
     * 加载进度条
     */
    public static class ProgressDialogUtils {

        /**
         * 简易的进度条加载框
         *
         * @param context
         * @param isCancelable 是否点击可取消
         * @param message      消息内容
         * @return
         */
        public static ProgressDialog initProgressBarDialog(Context context, boolean isCancelable, String message) {
            ProgressDialog progressDialog = initCircleProgressDialog(context, isCancelable, message);
            progressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);// 进度条 setProgress
            return progressDialog;
        }


        /**
         * 简易的圆圈加载框
         *
         * @param context
         * @param isCancelable 是否点击可取消
         * @param message      消息内容
         * @return
         */
        public static ProgressDialog initCircleProgressDialog(Context context, boolean isCancelable, String message) {
            ProgressDialog progressDialog = new ProgressDialog(context);
            progressDialog.setCancelable(isCancelable);
            if (message != null) {
                progressDialog.setMessage(message);
            }
            return progressDialog;
        }


        /**
         * 初始化进度条加载条
         *
         * @param context
         * @param isCancelable    是否点击可取消
         * @param icon            图标
         * @param title           标题
         * @param message         消息内容
         * @param maxProgress     进度最大值
         * @param dialogInterface 取消监听
         * @return
         */
        public static ProgressDialog initProgressBarDialog(Context context, boolean isCancelable, int icon, String title, String message, int maxProgress, DialogInterface.OnCancelListener dialogInterface) {
            ProgressDialog progressDialog = initCircleProgressDialog(context, isCancelable, icon, title, message, dialogInterface);
            progressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);// 进度条 setProgress
            progressDialog.setMax(maxProgress);
            return progressDialog;
        }


        /**
         * 初始化圆圈加载条
         *
         * @param context
         * @param isCancelable    是否点击可取消
         * @param icon            图标
         * @param title           标题
         * @param message         消息内容
         * @param dialogInterface 取消监听
         * @return
         */
        public static ProgressDialog initCircleProgressDialog(Context context, boolean isCancelable, int icon, String title, String message, DialogInterface.OnCancelListener dialogInterface) {
            ProgressDialog progressDialog = new ProgressDialog(context);
            progressDialog.setCancelable(isCancelable);

            if (icon != -1) {
                progressDialog.setIcon(icon);
            }

            if (title != null) {
                progressDialog.setTitle(title);
            }

            if (message != null) {
                progressDialog.setMessage(message);
            }

            if (isCancelable) {
                if (dialogInterface != null) {
                    progressDialog.setOnCancelListener(dialogInterface);//设置监听取消加载框事件
                }
            }

            return progressDialog;
        }

    }

    /**
     * Android GT 动画
     * 动画后面加 F 的则表示 该动画 是假的动画 后面为 T 的则表示为 真动画
     */
    public static class GT_Animation implements SaveObject.SaveBean {

        private static GT_Animation animation;

        public static GT_Animation getDefault() {
            if (animation == null) {
                synchronized (EventBus.class) {
                    if (animation == null) {
                        animation = new GT_Animation();
                    }
                }
            }
            return animation;
        }

        public GT_Animation() {
        }

        /**
         * @param x           初始 X 位置
         * @param toX         最终 X 位置
         * @param y           初始 Y 位置
         * @param toY         最终 Y 位置
         * @param time        动画持续时间
         * @param isSaveClose 是否保持动画结束时的最终状态
         * @param runCount    播放动画的次数 <=0 表示无限循环
         * @param toAndFro    是否来回播放
         * @param view        给 View 添加动画
         * @param sleepTime   设置延迟启动动画时间
         * @return
         * @移动动画（假）
         */
        public GT_Animation translate_F(float x, float toX, float y, float toY, long time, boolean isSaveClose, int runCount, boolean toAndFro, View view, long... sleepTime) {
            Animation translateAnimation = new TranslateAnimation(x, toX, y, toY);
            translateAnimation.setDuration(time);                   //设置动画持续周期
            translateAnimation.setFillAfter(isSaveClose);           //动画完成后，View是否会停留在动画结束的状态，优先级大于fillBefore，默认为false
            translateAnimation.setFillBefore(!isSaveClose);         //动画完成后，View是否会停留在动画开始的状态，默认为true
            if (sleepTime != null && sleepTime.length > 0 && sleepTime[0] > 0) {
                translateAnimation.setStartOffset(sleepTime[0]);           //设置动画延迟启动时间，单位是ms
            }
            if (toAndFro) translateAnimation.setRepeatMode(Animation.RESTART);       //是否来回的播放
            if (runCount <= 0) {
                translateAnimation.setRepeatCount(Animation.INFINITE);  //播放无限次数
            } else {
                translateAnimation.setRepeatCount(runCount - 1);    //播放的次数
            }
            view.startAnimation(translateAnimation);                //开始播放
            return this;
        }

        /**
         * @param x           初始 X 位置
         * @param toX         最终 X 位置
         * @param y           初始 Y 位置
         * @param toY         最终 Y 位置
         * @param time        动画持续时间
         * @param isSaveClose 是否保持动画结束时的最终状态
         * @param runCount    播放动画的次数 <=0 表示无限循环
         * @param toAndFro    是否来回播放
         * @param sleepTime   设置延迟启动动画时间
         * @return
         * @移动item动画（假）
         */
        public Animation translat_Item_F(float x, float toX, float y, float toY, long time, boolean isSaveClose, int runCount, boolean toAndFro, long... sleepTime) {
            Animation translateAnimation = new TranslateAnimation(x, toX, y, toY);
            translateAnimation.setDuration(time);                   //设置动画持续周期
            translateAnimation.setFillAfter(isSaveClose);           //动画完成后，View是否会停留在动画结束的状态，优先级大于fillBefore，默认为false
            translateAnimation.setFillBefore(!isSaveClose);         //动画完成后，View是否会停留在动画开始的状态，默认为true
            if (sleepTime != null && sleepTime.length > 0 && sleepTime[0] > 0) {
                translateAnimation.setStartOffset(sleepTime[0]);           //设置动画延迟启动时间，单位是ms
            }
            if (toAndFro) translateAnimation.setRepeatMode(Animation.RESTART);       //是否来回的播放
            if (runCount <= 0) {
                translateAnimation.setRepeatCount(Animation.INFINITE);  //播放无限次数
            } else {
                translateAnimation.setRepeatCount(runCount - 1);    //播放的次数
            }
            return translateAnimation;
        }

        /**
         * @param x         初始 X 位置
         * @param toX       最终 X 位置
         * @param time      执行动画时间
         * @param runCount  执行动画次数
         * @param toAndFro  是否来回播放
         * @param view      给View加入动画
         * @param sleepTime 延迟执行动画时间
         * @return
         * @左右动画（真）
         */
        public GT_Animation translateX_T(float x, float toX, long time, int runCount, boolean toAndFro, View view, long... sleepTime) {
            ObjectAnimator translateX = ObjectAnimator.ofFloat(view, "translationX", x, toX);
            translateX.setDuration(time);      //动画执行时间
            if (runCount <= 0) {
                translateX.setRepeatCount(ValueAnimator.INFINITE);//无限循环
            } else {
                translateX.setRepeatCount(runCount - 1);//循环多少次
            }
            if (toAndFro) translateX.setRepeatMode(ValueAnimator.REVERSE);//是否来回播放
            if (sleepTime != null && sleepTime.length > 0 && sleepTime[0] > 0) {
                translateX.setStartDelay(sleepTime[0]);           //设置动画延迟启动时间，单位是ms
            }
            translateX.start();//执行动画
            return this;
        }

        /**
         * @param x         初始 X 位置
         * @param toX       最终 X 位置
         * @param time      执行动画时间
         * @param runCount  执行动画次数
         * @param toAndFro  是否来回播放
         * @param sleepTime 延迟执行动画时间
         * @return
         * @左右item动画（真）
         */
        public ObjectAnimator translateX_Item_T(float x, float toX, long time, int runCount, boolean toAndFro, View view, long... sleepTime) {
            ObjectAnimator translateX = ObjectAnimator.ofFloat(view, "translationX", x, toX);
            translateX.setDuration(time);      //动画执行时间
            if (runCount <= 0) {
                translateX.setRepeatCount(ValueAnimator.INFINITE);//无限循环
            } else {
                translateX.setRepeatCount(runCount - 1);//循环多少次
            }
            if (toAndFro) translateX.setRepeatMode(ValueAnimator.REVERSE);//是否来回播放
            if (sleepTime != null && sleepTime.length > 0 && sleepTime[0] > 0) {
                translateX.setStartDelay(sleepTime[0]);           //设置动画延迟启动时间，单位是ms
            }
            return translateX;
        }

        /**
         * @param y         初始 Y 位置
         * @param toY       最终 Y 位置
         * @param time      执行动画时间
         * @param runCount  执行动画次数
         * @param toAndFro  是否来回播放
         * @param view      给View加入动画
         * @param sleepTime 延迟执行动画时间
         * @return
         * @上下动画（真）
         */
        public GT_Animation translateY_T(float y, float toY, long time, int runCount, boolean toAndFro, View view, long... sleepTime) {
            ObjectAnimator translateY = ObjectAnimator.ofFloat(view, "translationY", y, toY);
            translateY.setDuration(time);      //动画执行时间
            if (runCount <= 0) {
                translateY.setRepeatCount(ValueAnimator.INFINITE);//无限循环
            } else {
                translateY.setRepeatCount(runCount - 1);//循环多少次
            }
            if (toAndFro) translateY.setRepeatMode(ValueAnimator.REVERSE);//是否来回播放
            if (sleepTime != null && sleepTime.length > 0 && sleepTime[0] > 0) {
                translateY.setStartDelay(sleepTime[0]);           //设置动画延迟启动时间，单位是ms
            }
            translateY.start();//执行动画
            return this;
        }

        /**
         * @param y         初始 Y 位置
         * @param toY       最终 Y 位置
         * @param time      执行动画时间
         * @param runCount  执行动画次数
         * @param toAndFro  是否来回播放
         * @param view      给View加入动画
         * @param sleepTime 延迟执行动画时间
         * @return
         * @上下item动画（真）
         */
        public ObjectAnimator translateY_Item_T(float y, float toY, long time, int runCount, boolean toAndFro, View view, long... sleepTime) {
            ObjectAnimator translateY = ObjectAnimator.ofFloat(view, "translationY", y, toY);
            translateY.setDuration(time);      //动画执行时间
            if (runCount <= 0) {
                translateY.setRepeatCount(ValueAnimator.INFINITE);//无限循环
            } else {
                translateY.setRepeatCount(runCount - 1);//循环多少次
            }
            if (toAndFro) translateY.setRepeatMode(ValueAnimator.REVERSE);//是否来回播放
            if (sleepTime != null && sleepTime.length > 0 && sleepTime[0] > 0) {
                translateY.setStartDelay(sleepTime[0]); //设置动画延迟启动时间，单位是ms
            }
            return translateY;
        }

        /**
         * @param x         初始 X 坐标
         * @param toX       最终 X 坐标
         * @param y         初始 Y 坐标
         * @param toY       最终 Y 坐标
         * @param time      消耗时间
         * @param runCount  执行次数
         * @param toAndFro  是否来回播放
         * @param view      动画的View
         * @param sleepTime 延迟执行动画时间
         * @return
         * @平移动画（真）
         */
        public GT_Animation translate_T(float x, float toX, float y, float toY, long time, int runCount, boolean toAndFro, View view, long... sleepTime) {

            AnimatorSet animatorSet = new AnimatorSet();

            ObjectAnimator translationX = ObjectAnimator.ofFloat(view, "translationX", x, toX);
            ObjectAnimator translationY = ObjectAnimator.ofFloat(view, "translationY", y, toY);

            //设置动画时间
            translationX.setDuration(time);
            translationY.setDuration(time);

            if (runCount <= 0) {
                translationX.setRepeatCount(ValueAnimator.INFINITE);//无限循环
                translationY.setRepeatCount(ValueAnimator.INFINITE);//无限循环
            } else {
                translationX.setRepeatCount(runCount - 1);//循环多少次
                translationY.setRepeatCount(runCount - 1);//循环多少次
            }

            //设置动画是否来回播放
            if (toAndFro) {
                translationX.setRepeatMode(ObjectAnimator.REVERSE);
                translationY.setRepeatMode(ObjectAnimator.REVERSE);
            }

            if (sleepTime != null && sleepTime.length > 0 && sleepTime[0] > 0) {
                translationX.setStartDelay(sleepTime[0]);//设置动画延迟启动时间，单位是ms
                translationY.setStartDelay(sleepTime[0]);//设置动画延迟启动时间，单位是ms
            }

            animatorSet.play(translationX).with(translationY);
            animatorSet.start();

            return this;
        }

        /**
         * @param x         初始 X 坐标
         * @param toX       最终 X 坐标
         * @param y         初始 Y 坐标
         * @param toY       最终 Y 坐标
         * @param time      消耗时间
         * @param runCount  执行次数
         * @param toAndFro  是否来回播放
         * @param view      动画的View
         * @param sleepTime 延迟执行动画时间
         * @return
         * @平移item动画（真）
         */
        public AnimatorSet translate_Item_T(float x, float toX, float y, float toY, long time, int runCount, boolean toAndFro, View view, long... sleepTime) {

            AnimatorSet animatorSet = new AnimatorSet();

            ObjectAnimator translationX = ObjectAnimator.ofFloat(view, "translationX", x, toX);
            ObjectAnimator translationY = ObjectAnimator.ofFloat(view, "translationY", y, toY);

            //设置动画时间
            translationX.setDuration(time);
            translationY.setDuration(time);

            if (runCount <= 0) {
                translationX.setRepeatCount(ValueAnimator.INFINITE);//无限循环
                translationY.setRepeatCount(ValueAnimator.INFINITE);//无限循环
            } else {
                translationX.setRepeatCount(runCount - 1);//循环多少次
                translationY.setRepeatCount(runCount - 1);//循环多少次
            }

            //设置动画是否来回播放
            if (toAndFro) {
                translationX.setRepeatMode(ObjectAnimator.REVERSE);
                translationY.setRepeatMode(ObjectAnimator.REVERSE);
            }

            if (sleepTime != null && sleepTime.length > 0 && sleepTime[0] > 0) {
                translationX.setStartDelay(sleepTime[0]);//设置动画延迟启动时间，单位是ms
                translationY.setStartDelay(sleepTime[0]);//设置动画延迟启动时间，单位是ms
            }

            animatorSet.play(translationX).with(translationY);

            return animatorSet;
        }


        /**
         * @param x           原始 X 尺寸
         * @param toX         结束 X 尺寸
         * @param y           原始 Y 尺寸
         * @param toY         结束 Y 尺寸
         * @param time        动画持续时间
         * @param isSaveClose 是否保持动画结束时的最终状态
         * @param runCount    播放动画的次数 -1 表示无限次数
         * @param toAndFro    是否来回播放
         * @param view        给 View 添加动画
         * @param sleepTime   延迟执行动画时间
         * @return
         * @缩放动画（假）
         */
        public GT_Animation scale_F(float x, float toX, float y, float toY, long time, boolean isSaveClose, int runCount, boolean toAndFro, View view, long... sleepTime) {
            Animation scaleAnimation = new ScaleAnimation(x, toX, y, toY, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);
            scaleAnimation.setDuration(time);                   //动画时间
            scaleAnimation.setFillAfter(isSaveClose);           //设置动画结束之后的状态是否是动画的最终状态，true，表示是保持动画结束时的最终状态
            scaleAnimation.setFillBefore(!isSaveClose);         //动画播放完后，视图是否会停留在动画开始的状态，默认为true
            if (runCount <= 0) {
                scaleAnimation.setRepeatCount(Animation.INFINITE);  //播放无限次数
            } else {
                scaleAnimation.setRepeatCount(runCount - 1);            //播放的次数
            }
            if (toAndFro) scaleAnimation.setRepeatMode(Animation.RESTART);       //是否来回的播放
            if (sleepTime != null && sleepTime.length > 0 && sleepTime[0] > 0) {
                scaleAnimation.setStartOffset(sleepTime[0]);//设置动画延迟启动时间，单位是ms
            }
            view.startAnimation(scaleAnimation);                //开始播放
            return this;
        }

        /**
         * @param x           原始 X 尺寸
         * @param toX         结束 X 尺寸
         * @param y           原始 Y 尺寸
         * @param toY         结束 Y 尺寸
         * @param time        动画持续时间
         * @param isSaveClose 是否保持动画结束时的最终状态
         * @param runCount    播放动画的次数 -1 表示无限次数
         * @param toAndFro    是否来回播放
         * @param sleepTime   延迟执行动画时间
         * @return
         * @缩放item动画（假）
         */
        public Animation scales_F(float x, float toX, float y, float toY, long time, boolean isSaveClose, int runCount, boolean toAndFro, long... sleepTime) {
            Animation scaleAnimation = new ScaleAnimation(x, toX, y, toY, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);
            scaleAnimation.setDuration(time);                   //动画时间
            scaleAnimation.setFillAfter(isSaveClose);           //设置动画结束之后的状态是否是动画的最终状态，true，表示是保持动画结束时的最终状态
            scaleAnimation.setFillBefore(!isSaveClose);         //动画播放完后，视图是否会停留在动画开始的状态，默认为true
            if (runCount <= 0) {
                scaleAnimation.setRepeatCount(Animation.INFINITE);  //播放无限次数
            } else {
                scaleAnimation.setRepeatCount(runCount - 1);            //播放的次数
            }
            if (toAndFro) scaleAnimation.setRepeatMode(Animation.RESTART);       //是否来回的播放
            if (sleepTime != null && sleepTime.length > 0 && sleepTime[0] > 0) {
                scaleAnimation.setStartOffset(sleepTime[0]);           //设置动画延迟启动时间，单位是ms
            }
            return scaleAnimation;
        }

        /**
         * @param x           原始 X 尺寸
         * @param toX         结束 X 尺寸
         * @param time        动画持续时间
         * @param isSaveClose 是否保持动画结束时的最终状态
         * @param runCount    播放动画的次数 -1 表示无限次数
         * @param toAndFro    是否来回播放
         * @param view        给 View 添加动画
         * @param sleepTime   延迟执行动画时间
         * @return
         * @缩放动画（真）
         */
        public GT_Animation scaleX_T(float x, float toX, long time, boolean isSaveClose, int runCount, boolean toAndFro, View view, long... sleepTime) {
            ObjectAnimator scaleX = ObjectAnimator.ofFloat(view, "scaleX", x, toX);
            scaleX.setDuration(time);      //动画执行时间
            if (runCount <= 0) {
                scaleX.setRepeatCount(ValueAnimator.INFINITE);//无限循环
            } else {
                scaleX.setRepeatCount(runCount - 1);//循环多少次
            }
            if (toAndFro) scaleX.setRepeatMode(ValueAnimator.REVERSE);//是否来回播放
            if (sleepTime != null && sleepTime.length > 0 && sleepTime[0] > 0) {
                scaleX.setStartDelay(sleepTime[0]);           //设置动画延迟启动时间，单位是ms
            }
            scaleX.start();//执行动画
            return this;
        }

        /**
         * @param x           原始 X 尺寸
         * @param toX         结束 X 尺寸
         * @param time        动画持续时间
         * @param isSaveClose 是否保持动画结束时的最终状态
         * @param runCount    播放动画的次数 -1 表示无限次数
         * @param toAndFro    是否来回播放
         * @param view        给 View 添加动画
         * @param sleepTime   延迟执行动画时间
         * @return
         * @缩放item动画（真）
         */
        public ObjectAnimator scaleX_item_T(float x, float toX, long time, boolean isSaveClose, int runCount, boolean toAndFro, View view, long... sleepTime) {
            ObjectAnimator scaleX = ObjectAnimator.ofFloat(view, "scaleX", x, toX);
            scaleX.setDuration(time);      //动画执行时间
            if (runCount <= 0) {
                scaleX.setRepeatCount(ValueAnimator.INFINITE);//无限循环
            } else {
                scaleX.setRepeatCount(runCount - 1);//循环多少次
            }
            if (toAndFro) scaleX.setRepeatMode(ValueAnimator.REVERSE);//是否来回播放
            if (sleepTime != null && sleepTime.length > 0 && sleepTime[0] > 0) {
                scaleX.setStartDelay(sleepTime[0]);//设置动画延迟启动时间，单位是ms
            }
            return scaleX;
        }

        /**
         * @param y           原始 Y 尺寸
         * @param toY         结束 Y 尺寸
         * @param time        动画持续时间
         * @param isSaveClose 是否保持动画结束时的最终状态
         * @param runCount    播放动画的次数 -1 表示无限次数
         * @param toAndFro    是否来回播放
         * @param view        给 View 添加动画
         * @param sleepTime   延迟执行动画时间
         * @return
         * @缩放动画（真）
         */
        public GT_Animation scaleY_T(float y, float toY, long time, boolean isSaveClose, int runCount, boolean toAndFro, View view, long... sleepTime) {
            ObjectAnimator scaleY = ObjectAnimator.ofFloat(view, "scaleY", y, toY);
            scaleY.setDuration(time);      //动画执行时间
            if (runCount <= 0) {
                scaleY.setRepeatCount(ValueAnimator.INFINITE);//无限循环
            } else {
                scaleY.setRepeatCount(runCount - 1);//循环多少次
            }
            if (toAndFro) scaleY.setRepeatMode(ValueAnimator.REVERSE);//是否来回播放
            if (sleepTime != null && sleepTime.length > 0 && sleepTime[0] > 0) {
                scaleY.setStartDelay(sleepTime[0]);//设置动画延迟启动时间，单位是ms
            }
            scaleY.start();//执行动画
            return this;
        }

        /**
         * @param y           原始 Y 尺寸
         * @param toY         结束 Y 尺寸
         * @param time        动画持续时间
         * @param isSaveClose 是否保持动画结束时的最终状态
         * @param runCount    播放动画的次数 -1 表示无限次数
         * @param toAndFro    是否来回播放
         * @param view        给 View 添加动画
         * @param sleepTime   延迟执行动画时间
         * @return
         * @缩放item动画（真）
         */
        public ObjectAnimator scaleY_item_T(float y, float toY, long time, boolean isSaveClose, int runCount, boolean toAndFro, View view, long... sleepTime) {
            ObjectAnimator scaleY = ObjectAnimator.ofFloat(view, "scaleY", y, toY);
            scaleY.setDuration(time);      //动画执行时间
            if (runCount <= 0) {
                scaleY.setRepeatCount(ValueAnimator.INFINITE);//无限循环
            } else {
                scaleY.setRepeatCount(runCount - 1);//循环多少次
            }
            if (toAndFro) scaleY.setRepeatMode(ValueAnimator.REVERSE);//是否来回播放
            if (sleepTime != null && sleepTime.length > 0 && sleepTime[0] > 0) {
                scaleY.setStartDelay(sleepTime[0]);//设置动画延迟启动时间，单位是ms
            }
            return scaleY;
        }

        /**
         * @param x         初始 X 坐标
         * @param toX       最终 X 坐标
         * @param y         初始 Y 坐标
         * @param toY       最终 Y 坐标
         * @param time      消耗时间
         * @param runCount  执行次数
         * @param toAndFro  是否来回播放
         * @param view      动画的View
         * @param sleepTime 延迟执行动画时间
         * @return
         * @缩放动画（真）
         */
        public GT_Animation scale_T(float x, float toX, float y, float toY, long time, int runCount, boolean toAndFro, View view, long... sleepTime) {

            AnimatorSet animatorSet = new AnimatorSet();

            ObjectAnimator scaleX = ObjectAnimator.ofFloat(view, "scaleX", x, toX);
            ObjectAnimator scaleY = ObjectAnimator.ofFloat(view, "scaleY", y, toY);

            //设置动画时间
            scaleX.setDuration(time);
            scaleY.setDuration(time);

            if (runCount <= 0) {
                scaleX.setRepeatCount(ValueAnimator.INFINITE);//无限循环
                scaleY.setRepeatCount(ValueAnimator.INFINITE);//无限循环
            } else {
                scaleX.setRepeatCount(runCount - 1);//循环多少次
                scaleY.setRepeatCount(runCount - 1);//循环多少次
            }

            //设置动画是否来回播放
            if (toAndFro) {
                scaleX.setRepeatMode(ObjectAnimator.REVERSE);
                scaleY.setRepeatMode(ObjectAnimator.REVERSE);
            }

            if (sleepTime != null && sleepTime.length > 0 && sleepTime[0] > 0) {
                scaleX.setStartDelay(sleepTime[0]);//设置动画延迟启动时间，单位是ms
                scaleY.setStartDelay(sleepTime[0]);//设置动画延迟启动时间，单位是ms
            }

            animatorSet.play(scaleX).with(scaleY);
            animatorSet.start();

            return this;
        }

        /**
         * @param x         初始 X 坐标
         * @param toX       最终 X 坐标
         * @param y         初始 Y 坐标
         * @param toY       最终 Y 坐标
         * @param time      消耗时间
         * @param runCount  执行次数
         * @param toAndFro  是否来回播放
         * @param view      动画的View
         * @param sleepTime 延迟执行动画时间
         * @return
         * @缩放item动画（真）
         */
        public AnimatorSet scale_item_T(float x, float toX, float y, float toY, long time, int runCount, boolean toAndFro, View view, long... sleepTime) {

            AnimatorSet animatorSet = new AnimatorSet();

            ObjectAnimator scaleX = ObjectAnimator.ofFloat(view, "scaleX", x, toX);
            ObjectAnimator scaleY = ObjectAnimator.ofFloat(view, "scaleY", y, toY);

            //设置动画时间
            scaleX.setDuration(time);
            scaleY.setDuration(time);

            if (runCount <= 0) {
                scaleX.setRepeatCount(ValueAnimator.INFINITE);//无限循环
                scaleY.setRepeatCount(ValueAnimator.INFINITE);//无限循环
            } else {
                scaleX.setRepeatCount(runCount - 1);//循环多少次
                scaleY.setRepeatCount(runCount - 1);//循环多少次
            }

            //设置动画是否来回播放
            if (toAndFro) {
                scaleX.setRepeatMode(ObjectAnimator.REVERSE);
                scaleY.setRepeatMode(ObjectAnimator.REVERSE);
            }

            if (sleepTime != null && sleepTime.length > 0 && sleepTime[0] > 0) {
                scaleX.setStartDelay(sleepTime[0]);//设置动画延迟启动时间，单位是ms
                scaleY.setStartDelay(sleepTime[0]);//设置动画延迟启动时间，单位是ms
            }

            animatorSet.play(scaleX).with(scaleY);

            return animatorSet;
        }


        /**
         * @param degrees     View初始角度
         * @param toDegrees   View旋转角度
         * @param time        动画执行时间
         * @param time        动画持续时间
         * @param isSaveClose 是否保持动画结束时的最终状态
         * @param runCount    播放动画的次数 -1 表示无限次数
         * @param toAndFro    是否来回播放
         * @param view        执行View动画
         * @param sleepTime   延迟执行动画时间
         * @return
         * @平面旋转动画（假）
         */
        public GT_Animation rotate_F(float degrees, float toDegrees, long time, boolean isSaveClose, int runCount, boolean toAndFro, View view, long... sleepTime) {
            Animation rotateAnimation = new RotateAnimation(degrees, toDegrees, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);
            rotateAnimation.setDuration(time);                   //动画时间
            rotateAnimation.setFillAfter(isSaveClose);           //设置动画结束之后的状态是否是动画的最终状态，true，表示是保持动画结束时的最终状态
            rotateAnimation.setFillBefore(!isSaveClose);         //动画播放完后，视图是否会停留在动画开始的状态，默认为true
            if (runCount <= 0) {
                rotateAnimation.setRepeatCount(Animation.INFINITE);  //播放无限次数
            } else {
                rotateAnimation.setRepeatCount(runCount - 1);            //播放的次数
            }
            if (toAndFro) rotateAnimation.setRepeatMode(Animation.RESTART);       //是否来回的播放
            if (sleepTime != null && sleepTime.length > 0 && sleepTime[0] > 0) {
                rotateAnimation.setStartOffset(sleepTime[0]);           //设置动画延迟启动时间，单位是ms
            }
            view.startAnimation(rotateAnimation);                //开始播放
            return this;
        }

        /**
         * @param degrees     View初始角度
         * @param toDegrees   View旋转角度
         * @param time        动画执行时间
         * @param time        动画持续时间
         * @param isSaveClose 是否保持动画结束时的最终状态
         * @param runCount    播放动画的次数 -1 表示无限次数
         * @param toAndFro    是否来回播放
         * @param sleepTime   延迟执行动画时间
         * @return
         * @平面旋转item动画（假）
         */
        public Animation rotates_F(float degrees, float toDegrees, long time, boolean isSaveClose, int runCount, boolean toAndFro, long... sleepTime) {
            Animation rotateAnimation = new RotateAnimation(degrees, toDegrees, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);
            rotateAnimation.setDuration(time);                   //动画时间
            rotateAnimation.setFillAfter(isSaveClose);           //设置动画结束之后的状态是否是动画的最终状态，true，表示是保持动画结束时的最终状态
            rotateAnimation.setFillBefore(!isSaveClose);         //动画播放完后，视图是否会停留在动画开始的状态，默认为true
            if (runCount <= 0) {
                rotateAnimation.setRepeatCount(Animation.INFINITE);  //播放无限次数
            } else {
                rotateAnimation.setRepeatCount(runCount - 1);            //播放的次数
            }
            if (toAndFro) rotateAnimation.setRepeatMode(Animation.RESTART);       //是否来回的播放
            if (sleepTime != null && sleepTime.length > 0 && sleepTime[0] > 0) {
                rotateAnimation.setStartOffset(sleepTime[0]);           //设置动画延迟启动时间，单位是ms
            }
            return rotateAnimation;
        }

        /**
         * @param x         初始化 X 坐标
         * @param toX       最终的 X 坐标
         * @param time      动画耗时
         * @param runCount  动画播放次数
         * @param toAndFro  是否来回播放
         * @param view      要使用动画的View
         * @param sleepTime 延迟执行动画时间
         * @return
         * @旋转动画X（真）
         */
        public GT_Animation rotatesX_T(float x, float toX, long time, int runCount, boolean toAndFro, View view, long... sleepTime) {
            ObjectAnimator rotationX = ObjectAnimator.ofFloat(view, "rotationX", x, toX);

            rotationX.setDuration(time);//设置时间

            if (runCount <= 0) {
                rotationX.setRepeatCount(ValueAnimator.INFINITE);//无限循环
            } else {
                rotationX.setRepeatCount(runCount - 1);//循环多少次
            }

            //设置动画是否来回播放
            if (toAndFro) {
                rotationX.setRepeatMode(ObjectAnimator.REVERSE);
            }

            if (sleepTime != null && sleepTime.length > 0 && sleepTime[0] > 0) {
                rotationX.setStartDelay(sleepTime[0]);//设置动画延迟启动时间，单位是ms
            }

            rotationX.start();//开启动画
            return this;
        }

        /**
         * @param x         初始化 X 坐标
         * @param toX       最终的 X 坐标
         * @param time      动画耗时
         * @param runCount  动画播放次数
         * @param toAndFro  是否来回播放
         * @param view      要使用动画的View
         * @param sleepTime 延迟执行动画时间
         * @return
         * @旋转item动画X（真）
         */
        public ObjectAnimator rotatesX_Item_T(float x, float toX, long time, int runCount, boolean toAndFro, View view, long... sleepTime) {
            ObjectAnimator rotationX = ObjectAnimator.ofFloat(view, "rotationX", x, toX);

            rotationX.setDuration(time);//设置时间

            if (runCount <= 0) {
                rotationX.setRepeatCount(ValueAnimator.INFINITE);//无限循环
            } else {
                rotationX.setRepeatCount(runCount - 1);//循环多少次
            }

            //设置动画是否来回播放
            if (toAndFro) {
                rotationX.setRepeatMode(ObjectAnimator.REVERSE);
            }

            if (sleepTime != null && sleepTime.length > 0 && sleepTime[0] > 0) {
                rotationX.setStartDelay(sleepTime[0]);//设置动画延迟启动时间，单位是ms
            }

            rotationX.start();//开启动画
            return rotationX;
        }

        /**
         * @param y         初始化 Y 坐标
         * @param toY       最终的 Y 坐标
         * @param time      动画耗时
         * @param runCount  动画播放次数
         * @param toAndFro  是否来回播放
         * @param view      要使用动画的View
         * @param sleepTime 延迟执行动画时间
         * @return
         * @旋转动画Y（真）
         */
        public GT_Animation rotatesY_T(float y, float toY, long time, int runCount, boolean toAndFro, View view, long... sleepTime) {
            ObjectAnimator rotationY = ObjectAnimator.ofFloat(view, "rotationY", y, toY);

            rotationY.setDuration(time);//设置时间

            if (runCount <= 0) {
                rotationY.setRepeatCount(ValueAnimator.INFINITE);//无限循环
            } else {
                rotationY.setRepeatCount(runCount - 1);//循环多少次
            }

            //设置动画是否来回播放
            if (toAndFro) {
                rotationY.setRepeatMode(ObjectAnimator.REVERSE);
            }

            if (sleepTime != null && sleepTime.length > 0 && sleepTime[0] > 0) {
                rotationY.setStartDelay(sleepTime[0]);//设置动画延迟启动时间，单位是ms
            }

            rotationY.start();//开启动画
            return this;
        }

        /**
         * @param y         初始化 Y 坐标
         * @param toY       最终的 Y 坐标
         * @param time      动画耗时
         * @param runCount  动画播放次数
         * @param toAndFro  是否来回播放
         * @param view      要使用动画的View
         * @param sleepTime 延迟执行动画时间
         * @return
         * @旋转item动画Y（真）
         */
        public ObjectAnimator rotatesY_Item_T(float y, float toY, long time, int runCount, boolean toAndFro, View view, long... sleepTime) {
            ObjectAnimator rotationY = ObjectAnimator.ofFloat(view, "rotationY", y, toY);

            rotationY.setDuration(time);//设置时间

            if (runCount <= 0) {
                rotationY.setRepeatCount(ValueAnimator.INFINITE);//无限循环
            } else {
                rotationY.setRepeatCount(runCount - 1);//循环多少次
            }

            //设置动画是否来回播放
            if (toAndFro) {
                rotationY.setRepeatMode(ObjectAnimator.REVERSE);
            }

            if (sleepTime != null && sleepTime.length > 0 && sleepTime[0] > 0) {
                rotationY.setStartDelay(sleepTime[0]);//设置动画延迟启动时间，单位是ms
            }

            return rotationY;
        }

        /**
         * @param z         初始化 Z 坐标
         * @param toZ       最终的 Z 坐标
         * @param time      动画耗时
         * @param runCount  动画播放次数
         * @param toAndFro  是否来回播放
         * @param view      要使用动画的View
         * @param sleepTime 延迟执行动画时间
         * @return
         * @旋转动画Z（真）
         */
        public GT_Animation rotatesZ_T(float z, float toZ, long time, int runCount, boolean toAndFro, View view, long... sleepTime) {
            ObjectAnimator rotationZ = ObjectAnimator.ofFloat(view, "rotation", z, toZ);

            rotationZ.setDuration(time);//设置时间

            if (runCount <= 0) {
                rotationZ.setRepeatCount(ValueAnimator.INFINITE);//无限循环
            } else {
                rotationZ.setRepeatCount(runCount - 1);//循环多少次
            }

            //设置动画是否来回播放
            if (toAndFro) {
                rotationZ.setRepeatMode(ObjectAnimator.REVERSE);
            }

            if (sleepTime != null && sleepTime.length > 0 && sleepTime[0] > 0) {
                rotationZ.setStartDelay(sleepTime[0]);//设置动画延迟启动时间，单位是ms
            }

            rotationZ.start();//开启动画
            return this;
        }

        /**
         * @param z         初始化 Z 坐标
         * @param toZ       最终的 Z 坐标
         * @param time      动画耗时
         * @param runCount  动画播放次数
         * @param toAndFro  是否来回播放
         * @param view      要使用动画的View
         * @param sleepTime 延迟执行动画时间
         * @return
         * @旋转item动画Z（真）
         */
        public ObjectAnimator rotatesZ_item_T(float z, float toZ, long time, int runCount, boolean toAndFro, View view, long... sleepTime) {
            ObjectAnimator rotationZ = ObjectAnimator.ofFloat(view, "rotation", z, toZ);

            rotationZ.setDuration(time);//设置时间

            if (runCount <= 0) {
                rotationZ.setRepeatCount(ValueAnimator.INFINITE);//无限循环
            } else {
                rotationZ.setRepeatCount(runCount - 1);//循环多少次
            }

            //设置动画是否来回播放
            if (toAndFro) {
                rotationZ.setRepeatMode(ObjectAnimator.REVERSE);
            }

            if (sleepTime != null && sleepTime.length > 0 && sleepTime[0] > 0) {
                rotationZ.setStartDelay(sleepTime[0]);//设置动画延迟启动时间，单位是ms
            }

            return rotationZ;
        }

        /**
         * @param alpha       初始透明度
         * @param toAlpha     最终透明度
         * @param time        动画执行时间
         * @param isSaveClose 是否保持动画结束时的最终状态
         * @param runCount    播放动画的次数 -1 表示无限次数
         * @param toAndFro    是否来回播放
         * @param view        执行View动画
         * @param sleepTime   延迟执行动画时间
         * @return
         * @透明动画（假）
         */
        public GT_Animation alpha_F(float alpha, float toAlpha, long time, boolean isSaveClose, int runCount, boolean toAndFro, View view, long... sleepTime) {
            Animation alphaAnimation = new AlphaAnimation(alpha, toAlpha);
            alphaAnimation.setDuration(time);                   //动画时间
            alphaAnimation.setFillAfter(isSaveClose);           //设置动画结束之后的状态是否是动画的最终状态，true，表示是保持动画结束时的最终状态
            alphaAnimation.setFillBefore(!isSaveClose);         //动画播放完后，视图是否会停留在动画开始的状态，默认为true
            if (runCount <= 0) {
                alphaAnimation.setRepeatCount(Animation.INFINITE);  //播放无限次数
            } else {
                alphaAnimation.setRepeatCount(runCount - 1);            //播放的次数
            }
            if (toAndFro) alphaAnimation.setRepeatMode(Animation.RESTART);       //是否来回的播放

            if (sleepTime != null && sleepTime.length > 0 && sleepTime[0] > 0) {
                alphaAnimation.setStartOffset(sleepTime[0]);           //设置动画延迟启动时间，单位是ms
            }

            view.startAnimation(alphaAnimation);                //开启动画
            return this;
        }

        /**
         * @param alpha       初始透明度
         * @param toAlpha     最终透明度
         * @param time        动画执行时间
         * @param isSaveClose 是否保持动画结束时的最终状态
         * @param runCount    播放动画的次数 -1 表示无限次数
         * @param toAndFro    是否来回播放
         * @param sleepTime   延迟执行动画时间
         * @return
         * @透明item动画（假）
         */
        public Animation alphas_F(float alpha, float toAlpha, long time, boolean isSaveClose, int runCount, boolean toAndFro, long... sleepTime) {
            Animation alphaAnimation = new AlphaAnimation(alpha, toAlpha);
            alphaAnimation.setDuration(time);                   //动画时间
            alphaAnimation.setFillAfter(isSaveClose);           //设置动画结束之后的状态是否是动画的最终状态，true，表示是保持动画结束时的最终状态
            alphaAnimation.setFillBefore(!isSaveClose);         //动画播放完后，视图是否会停留在动画开始的状态，默认为true
            if (runCount <= 0) {
                alphaAnimation.setRepeatCount(Animation.INFINITE);  //播放无限次数
            } else {
                alphaAnimation.setRepeatCount(runCount - 1);            //播放的次数
            }
            if (toAndFro) alphaAnimation.setRepeatMode(Animation.RESTART);       //是否来回的播放
            if (sleepTime != null && sleepTime.length > 0 && sleepTime[0] > 0) {
                alphaAnimation.setStartOffset(sleepTime[0]);           //设置动画延迟启动时间，单位是ms
            }
            return alphaAnimation;
        }

        /**
         * @param alpha     初始透明度
         * @param toAlpha   最终透明度
         * @param time      动画执行时间
         * @param runCount  播放动画的次数 -1 表示无限次数
         * @param toAndFro  是否来回播放
         * @param sleepTime 延迟执行动画时间
         * @return
         * @透明动画（真）
         */
        public GT_Animation alpha_T(float alpha, float toAlpha, long time, int runCount, boolean toAndFro, View view, long... sleepTime) {
            ObjectAnimator rotationX = ObjectAnimator.ofFloat(view, "alpha", alpha, toAlpha);

            rotationX.setDuration(time);//设置时间

            if (runCount <= 0) {
                rotationX.setRepeatCount(ValueAnimator.INFINITE);//无限循环
            } else {
                rotationX.setRepeatCount(runCount - 1);//循环多少次
            }

            //设置动画是否来回播放
            if (toAndFro) {
                rotationX.setRepeatMode(ObjectAnimator.REVERSE);
            }

            if (sleepTime != null && sleepTime.length > 0 && sleepTime[0] > 0) {
                rotationX.setStartDelay(sleepTime[0]);//设置动画延迟启动时间，单位是ms
            }

            rotationX.start();//开启动画
            return this;
        }

        /**
         * @param alpha     初始透明度
         * @param toAlpha   最终透明度
         * @param time      动画执行时间
         * @param runCount  播放动画的次数 -1 表示无限次数
         * @param toAndFro  是否来回播放
         * @param sleepTime 延迟执行动画时间
         * @return
         * @透明item动画（真）
         */
        public ObjectAnimator alpha_item_T(float alpha, float toAlpha, long time, int runCount, boolean toAndFro, View view, long... sleepTime) {
            ObjectAnimator rotationX = ObjectAnimator.ofFloat(view, "alpha", alpha, toAlpha);

            rotationX.setDuration(time);//设置时间

            if (runCount <= 0) {
                rotationX.setRepeatCount(ValueAnimator.INFINITE);//无限循环
            } else {
                rotationX.setRepeatCount(runCount - 1);//循环多少次
            }

            //设置动画是否来回播放
            if (toAndFro) {
                rotationX.setRepeatMode(ObjectAnimator.REVERSE);
            }

            if (sleepTime != null && sleepTime.length > 0 && sleepTime[0] > 0) {
                rotationX.setStartDelay(sleepTime[0]);//设置动画延迟启动时间，单位是ms
            }

            return rotationX;
        }

        /**
         * @param annotationList
         * @param view
         * @return
         * @添加组合动画（假）
         */
        public GT_Animation animationSet_F(List<Animation> annotationList, View view) {
            AnimationSet animationSet = new AnimationSet(true);
            if (annotationList != null && annotationList.size() > 1) {
                for (Animation animation : annotationList) {
                    animationSet.addAnimation(animation);
                }
            }
            view.startAnimation(animationSet);//开启组合动画
            return this;
        }

        /**
         * @param annotationList
         * @return
         * @添加组合item动画（假）
         */
        public AnimationSet animationSets_F(List<Animation> annotationList) {
            AnimationSet animationSet = new AnimationSet(true);
            if (annotationList != null && annotationList.size() > 1) {
                for (Animation animation : annotationList) {
                    animationSet.addAnimation(animation);
                }
            }
            return animationSet;
        }

    }

    /**
     * WindowUtils 窗体类
     */
    public static abstract class WindowUtils {

        /**
         * 开启游戏窗体模式
         *
         * @param activity
         */
        public static void startGameWindow(Activity activity) {
            try {
                WindowUtils.light(activity);//屏幕常亮
                WindowUtils.immersionMode(activity);//沉浸式模式
                WindowUtils.closeVirtualButton(activity);//关闭虚拟按钮
                WindowUtils.hideActionBar((AppCompatActivity) activity);//隐藏 ActionBar
            } catch (Exception e) {
                if (LOG.isGtLogTf())
                    GT.err(getLineInfo(1), "请去掉调用该方法前面所有关于 沉浸式 关闭虚拟按钮 隐藏 ActionBar 等类似的代码");
            }
        }

        /**
         * 屏幕常亮
         *
         * @param activity
         */
        public static void light(Activity activity) {
            activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);//屏幕常亮
        }

        /**
         * 设置全屏模式
         *
         * @param activity
         */
        public static void fullScreen(Activity activity) {
            activity.requestWindowFeature(Window.FEATURE_NO_TITLE);
            activity.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
        }

        /**
         * 关闭虚拟按钮
         *
         * @param activity
         */
        public static void closeVirtualButton(Activity activity) {
            View decorView = activity.getWindow().getDecorView();
            int uiOptions = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                    | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY | View.SYSTEM_UI_FLAG_FULLSCREEN;
            decorView.setSystemUiVisibility(uiOptions);

            activity.getWindow().getDecorView().setOnSystemUiVisibilityChangeListener(new View.OnSystemUiVisibilityChangeListener() {
                @Override
                public void onSystemUiVisibilityChange(int visibility) {
                    int uiOptions = View.SYSTEM_UI_FLAG_LAYOUT_STABLE |
                            //布局位于状态栏下方
                            View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION |
                            //全屏
                            View.SYSTEM_UI_FLAG_FULLSCREEN |
                            //隐藏导航栏
                            View.SYSTEM_UI_FLAG_HIDE_NAVIGATION |
                            View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN;
                    if (Build.VERSION.SDK_INT >= 19) {
                        uiOptions |= 0x00001000;
                    } else {
                        uiOptions |= View.SYSTEM_UI_FLAG_LOW_PROFILE;
                    }
                    activity.getWindow().getDecorView().setSystemUiVisibility(uiOptions);
                }
            });

            View v = activity.getWindow().getDecorView();
            v.setSystemUiVisibility(View.GONE);

            Window _window = activity.getWindow();
            WindowManager.LayoutParams params = _window.getAttributes();
            params.systemUiVisibility = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_IMMERSIVE;
            _window.setAttributes(params);

        }

        /**
         * 关闭虚拟按钮2
         *
         * @param WindowUtils
         */
        public static void setHideVirtualKey(Window WindowUtils) {
            //保持布局状态
            int uiOptions = View.SYSTEM_UI_FLAG_LAYOUT_STABLE |
                    //布局位于状态栏下方
                    View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION |
                    //全屏
                    View.SYSTEM_UI_FLAG_FULLSCREEN |
                    //隐藏导航栏
                    View.SYSTEM_UI_FLAG_HIDE_NAVIGATION |
                    View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN;
            if (Build.VERSION.SDK_INT >= 19) {
                uiOptions |= 0x00001000;
            } else {
                uiOptions |= View.SYSTEM_UI_FLAG_LOW_PROFILE;
            }
            WindowUtils.getDecorView().setSystemUiVisibility(uiOptions);
        }

        /**
         * 获取屏幕 宽度
         *
         * @param appCompatActivity
         * @return
         */
        public static int getWindowUtilsWidth(Activity activity) {
            int width = activity.getWindowManager().getDefaultDisplay().getWidth();
            return width;
        }

        /**
         * 获取屏幕 高度
         *
         * @param appCompatActivity
         * @return
         */
        public static int getWindowUtilsHeight(Activity activity) {
            int height = activity.getWindowManager().getDefaultDisplay().getHeight();
            return height;
        }

        /**
         * 隐藏状态栏
         *
         * @param activity
         */
        public static void hideStatusBar(Activity activity) {
            View decorView = activity.getWindow().getDecorView();
            int option = View.SYSTEM_UI_FLAG_FULLSCREEN;
            decorView.setSystemUiVisibility(option);
        }

        /**
         * 显示或隐藏状态栏
         *
         * @param isShow
         * @param activity
         */
        public static void showOrHideStatusBar(boolean isShow, Activity activity) {
            if (isShow) {
                activity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);//显示状态栏
            } else {
                activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN); //隐藏状态栏
            }
        }

        /**
         * 设置状态栏颜色
         *
         * @param activity
         * @param color    颜色资源
         */
        public static void setStatusBarColor(Activity activity, Object... color) {
            if (color.length > 0) {
                Object colorObj = color[0];
                if (colorObj instanceof String) {
                    activity.getWindow().setStatusBarColor(Color.parseColor(String.valueOf(colorObj)));//设置状态栏透明颜色
                } else if (colorObj instanceof Intent) {
                    activity.getWindow().setStatusBarColor(activity.getResources().getColor(Integer.parseInt(String.valueOf(color))));//设置状态栏颜色
                }
            } else {
                activity.getWindow().setStatusBarColor(Color.parseColor("#00000000"));//设置状态栏透明颜色
            }
        }

        /**
         * 隐藏ActionBar
         *
         * @param activity
         */
        public static void hideActionBar(AppCompatActivity activity) {
            ActionBar actionBar = activity.getSupportActionBar();
            if (activity != null) {
                actionBar.hide();
            }
        }

        /**
         * 隐藏导航栏(虚拟按钮)
         *
         * @param activity
         */
        public static void hideNavigationBar(Activity activity) {
            if (Build.VERSION.SDK_INT >= 19) {
                View decorView = activity.getWindow().getDecorView();
                decorView.setSystemUiVisibility(
                        View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                                | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                                | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);
            }
        }

        /**
         * 显示导航栏(虚拟按钮)
         *
         * @param activity
         */
        public static void showNavigationBar(Activity activity) {
            if (Build.VERSION.SDK_INT >= 19) {
                View decorView = activity.getWindow().getDecorView();
                decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);
            }
        }

        /**
         * 单独设置导航栏背景颜色
         *
         * @param activity
         * @param color
         */
        public static View setNavigationBarBGColor(Activity activity, int color) {
            Window window = activity.getWindow();
            ViewGroup decorViewGroup = (ViewGroup) activity.getWindow().getDecorView();
            View statusBarView = new View(window.getContext());
            statusBarView.setId(1079);
            int statusBarHeight = GT.ApplicationUtils.getStatusBarHeight(window.getContext());
            FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, statusBarHeight);
            params.gravity = Gravity.TOP;
            statusBarView.setLayoutParams(params);
            statusBarView.setBackgroundColor(Res.color(activity, color));
            decorViewGroup.addView(statusBarView);
            monitorSoftKeyboardHeight(activity);
            return statusBarView;
        }

        /**
         * 配合着 设置状态栏背景颜色
         *
         * @param activity
         */
        private static void monitorSoftKeyboardHeight(Activity activity) {
            if (activity == null) return;
            View decorView = activity.getWindow().getDecorView();
            decorView.setOnApplyWindowInsetsListener((v, insets) -> {
                int bottom;
                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.R) {
                    bottom = insets.getInsets(WindowInsets.Type.ime()).bottom;
                } else {
                    int height = decorView.getHeight();
                    if (height >= 2400) {
                        bottom = (int) (decorView.getHeight() / 2.55);//2412
                    } else {
                        bottom = (int) (decorView.getHeight() / 2.2);//2160
                    }
                }
                return insets;
            });
        }

        /**
         * 透明状态栏
         *
         * @param activity
         */
        public static void lucencyStatusBar(Activity activity) {
            if (Build.VERSION.SDK_INT >= 21) {
                View decorView = activity.getWindow().getDecorView();
                int option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                        | View.SYSTEM_UI_FLAG_LAYOUT_STABLE;
                decorView.setSystemUiVisibility(option);
                activity.getWindow().setStatusBarColor(Color.TRANSPARENT);
            }
        }

        /**
         * 适配导航栏,  也可以试试在 xml 顶布局上加上 android:fitsSystemWindows="true"，这样就不会和导航栏重叠UI了
         * 此方法需要在 setContentView 方法之前设置
         *
         * @param activity
         */
        public static void adaptiveNavigationBar(Activity activity) {
            if (AndroidWorkaround.checkDeviceHasNavigationBar(activity)) {
                AndroidWorkaround.assistActivity(activity.findViewById(android.R.id.content));
            }
        }

        /**
         * 判断是否显示了导航栏
         *
         * @param activity
         * @return
         */
        public static boolean checkDeviceHasNavigationBar(Context activity) {
            //通过判断设备是否有返回键、菜单键(不是虚拟键,是手机屏幕外的按键)来确定是否有navigation bar
            boolean hasMenuKey = ViewConfiguration.get(activity)
                    .hasPermanentMenuKey();
            boolean hasBackKey = KeyCharacterMap
                    .deviceHasKey(KeyEvent.KEYCODE_BACK);

            if (!hasMenuKey && !hasBackKey) {
                // 做任何你需要做的,这个设备有一个导航栏
                return true;
            }
            return false;
        }


        /**
         * 透明导航栏
         *
         * @param activity
         */
        public static void lucencyNavigationBar(Activity activity) {
            if (Build.VERSION.SDK_INT >= 21) {
                View decorView = activity.getWindow().getDecorView();
                int option = View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION;
                decorView.setSystemUiVisibility(option);
                activity.getWindow().setNavigationBarColor(Color.TRANSPARENT);
                activity.getWindow().setStatusBarColor(Color.TRANSPARENT);
            }
        }

        /**
         * 沉浸式模式 (隐藏状态栏，去掉ActionBar，隐藏导航栏)
         *
         * @param activity
         */
        public static void immersionMode(Activity activity) {
            if (Build.VERSION.SDK_INT >= 19) {
                View decorView = activity.getWindow().getDecorView();
                decorView.setSystemUiVisibility(
                        View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                                | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                                | View.SYSTEM_UI_FLAG_FULLSCREEN
                                | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);
            }
        }

        /**
         * 返回当前是 横屏 还是 竖屏
         *
         * @param activity
         * @return 横屏返回 true 竖屏返回 false
         */
        public static boolean isLandscapeAndPortrait(Context context) {
            if (context == null) {
                GT.err("横竖屏失效 context:" + context);
                return false;
            }
            Resources resources = context.getResources();
            if (resources == null) {
                GT.err("横竖屏失效 resources:" + resources);
                return false;
            }
            Configuration mConfiguration = resources.getConfiguration(); //获取设置的配置信息
            if (mConfiguration == null) {
                GT.err("横竖屏失效 mConfiguration:" + mConfiguration);
                return false;
            }
            if (mConfiguration.orientation == mConfiguration.ORIENTATION_LANDSCAPE) {
                return true;
            } else {
                return false;
            }
        }

        /**
         * one_three:   0-6 的 值来进行强制的 横竖屏、自适应等
         * 执行强制的 横屏 或 竖屏
         *
         * @param activity
         */
        public static void AutoLandscapeAndPortrait(Activity activity, int one_three) {
            switch (one_three) {
                case 0:
                    activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);//强制为正横屏
                    break;
                case 1:
                    activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE);//强制为反横屏
                    break;
                case 2:
                    activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);//强制为正竖屏
                    break;
                case 3:
                    activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_FULL_SENSOR);//强制为反竖屏
                    break;
                case 4:
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
                        activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_FULL_USER);//为虚拟按键提供旋转屏幕提示
                    }
                    break;
                case 5:
                    activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR);//自动适宜 正横屏、反横屏、正竖屏
                    break;
                case 6:
                    activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE);//自动适宜 正横屏、反横屏
                    break;
            }


        }

        //适配 虚拟按钮(导航栏)封装类
        private static class AndroidWorkaround {
            public static void assistActivity(View content) {
                new AndroidWorkaround(content);
            }

            private View mChildOfContent;
            private int usableHeightPrevious;
            private ViewGroup.LayoutParams frameLayoutParams;

            private AndroidWorkaround(View content) {
                mChildOfContent = content;
                mChildOfContent.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
                    public void onGlobalLayout() {
                        possiblyResizeChildOfContent();
                    }
                });
                frameLayoutParams = mChildOfContent.getLayoutParams();
            }

            private void possiblyResizeChildOfContent() {
                int usableHeightNow = computeUsableHeight();
                if (usableHeightNow != usableHeightPrevious) {

                    frameLayoutParams.height = usableHeightNow;
                    mChildOfContent.requestLayout();
                    usableHeightPrevious = usableHeightNow;
                }
            }

            private int computeUsableHeight() {
                Rect r = new Rect();
                mChildOfContent.getWindowVisibleDisplayFrame(r);
                return (r.bottom);
            }

            public static boolean checkDeviceHasNavigationBar(Context context) {
                boolean hasNavigationBar = false;
                Resources rs = context.getResources();
                int id = rs.getIdentifier("config_showNavigationBar", "bool", "android");
                if (id > 0) {
                    hasNavigationBar = rs.getBoolean(id);
                }
                try {
                    Class systemPropertiesClass = Class.forName("android.os.SystemProperties");
                    Method m = systemPropertiesClass.getMethod("get", String.class);
                    String navBarOverride = (String) m.invoke(systemPropertiesClass, "qemu.hw.mainkeys");
                    if ("1".equals(navBarOverride)) {
                        hasNavigationBar = false;
                    } else if ("0".equals(navBarOverride)) {
                        hasNavigationBar = true;
                    }
                } catch (Exception e) {

                }
                return hasNavigationBar;

            }
        }

    }

    /**
     * 封装 Activity 管理器
     */
    public static class GT_Activity implements SaveObject.SaveBean {

        /**
         * 封装第一代 Activity
         * 封装特点：
         * 1.出现添加布局、初始化布局、加载数据方法
         * 2.获取组件还是使用原始的 findViewById
         */
        public abstract static class BaseActivity extends AppCompatActivity implements Frame.ViewModelFeedback {

            @Override
            public void onViewModeFeedback(Object... obj) {

            }

            //切换Activity 动画
            private static int cutIndex = 0;//GT内置提供的切换特效
            private static int startAnim = 0;//用户自定义
            private static int closeAnim = 0;//用户自定义

            private String cacheKey;//缓存关键字

            /**
             * 设置 Activity 切换特效
             * 1  淡入淡出
             * 2  左右滑出
             * 暂时仅支持该两种
             *
             * @param cutIndex
             */
            public void setActivityCutIndex(int cutIndex) {
                this.cutIndex = cutIndex;
            }

            /**
             * 自定义 Activity 切换特效
             *
             * @param startAnim
             * @param closeAnim
             */
            public void setActivityCut(int startAnim, int closeAnim) {
                this.startAnim = startAnim;
                this.closeAnim = closeAnim;
                cutIndex = -1;
            }

            protected GT_Fragment gt_fragment;

            /**
             * 初始化 加载布局
             */
            protected int loadLayout() {
                return 0;
            }

            /**
             * 在绘制完 View 之前设置数据
             */
            protected void initDrawView() {
            }

            /**
             * 初始化 UI
             */
            protected abstract void initView(Bundle savedInstanceState);

            /**
             * 功能方法
             */
            public void loadData() {
            }

            //是否缓存开启数据
            protected boolean isCacheData() {
                return false;
            }

            protected void putCache(String key, Object obj) {
                if (key == null) {
                    key = getPackageName() + getClass().getName();
                }
                GT_Cache.putCacheData(key, obj);
            }

            protected <T> T getCache(String key, Class<T> classz) {
                if (key == null) {
                    key = getPackageName() + getClass().getName();
                }
                return GT_Cache.getCacheData(key, classz);
            }

            protected void putCacheMap(Map<String, Object> map) {
                GT_Cache.putCacheMap(map);
            }

            //简单缓存 存储 与 获取
            @Override
            public void getCache(String json) {

            }

            @Override
            public String putCache() {
                return null;
            }

            @Override
            protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                gt_fragment = GT_Fragment.gt_fragment;
                int loadLayout = loadLayout();
                if (loadLayout != 0 && loadLayout != -1) {

                    //初始化 本地页面缓存
                    if (isCacheData()) {
                        GT_Cache.initCache(this);
                        cacheKey = getPackageName() + getClass().getName();
                    }

                    initDrawView();// 设置绘制前的数据
                    setContentView(loadLayout);// 加载布局
                    initView(savedInstanceState);// 初始化 UI
                    getCache(GT_Cache.getCacheData(cacheKey, String.class));//获取缓存数据
                    loadData();// 功能方法
                }

            }

            /**
             * 构建 GT 工具包
             *
             * @param context
             */
            protected void build(Context context, boolean... isInitUI) {
                GT.build(context, isInitUI);
            }

            public static void startView(ViewGroup viewGroup, GT_View.BaseView view) {
                viewGroup.addView(view.getView());
            }

            /**
             * 跳转 Activity
             *
             * @param activityClass
             */
            public void startActivity(Class activityClass) {

                Context activity = getActivity();
                if (activity == null) return;
                activity.startActivity(new Intent(activity, activityClass));

                //切换动画
                switch (cutIndex) {
                    case 1:
                        //淡入淡出
                        overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out);
                        break;
                    case 2:
                        //左右滑动
                        overridePendingTransition(android.R.anim.slide_in_left, android.R.anim.slide_out_right);
                        break;
                    default:
                        //用户自定义
                        if (cutIndex == -1 && startAnim != 0 && closeAnim != 0) {
                            overridePendingTransition(startAnim, closeAnim);
                        }
                        break;
                }
            }

            /**
             * @param dialogFragment
             * @跳转其他的 DialogFragment
             */
            public void startDialogFragment(DialogFragment dialogFragment) {
                dialogFragment.show(getSupportFragmentManager(), dialogFragment.getClass().toString());// 弹出退出提示
            }

            /**
             * @param dialogFragment
             * @跳转其他的 DialogFragment
             */
            public void startDialogFragment(Class<?> dialogFragmentClass) {

                DialogFragment fragment = null;

                try {
                    fragment = (DialogFragment) dialogFragmentClass.newInstance();
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                } catch (InstantiationException e) {
                    e.printStackTrace();
                }

                fragment.show(getSupportFragmentManager(), fragment.getClass().toString());// 弹出退出提示
            }

            /**
             * @param supportFragmentManager
             * @param dialogFragment         跳转其他的
             */
            public void startDialogFragment(FragmentManager supportFragmentManager, DialogFragment dialogFragment) {
                dialogFragment.show(supportFragmentManager, dialogFragment.getClass().toString());// 弹出退出提示
            }

            /**
             * 启动一个Fragment
             *
             * @param fragmentObj 支持 String(className)、Class(Fragment.class),new Fragemnt(实例化对象)
             * @param resLayouts  指定启动的 Fragemnt 容器 (非必填)
             * @return
             */
            public GT_Fragment startFragment(Object fragmentObj, int... resLayouts) {
                return GT_Fragment.gt_fragment.startFragment(fragmentObj);//启动 Fragment
            }

            /**
             * 启动一个 首页 Fragment
             *
             * @param fragmentObj
             * @param <T>
             * @return
             */
            public GT_Fragment startFragmentHome(Object fragmentObj, int fragmentId) {
                return GT_Fragment.gt_fragment.startFragmentHome(fragmentObj, fragmentId);
            }


            /**
             * 启动悬浮窗
             *
             * @param toFragment
             */
            public void startFloatingWindow(Class<?> toFragment, Bundle... bundles) {
                GT.startFloatingWindow(this, toFragment, bundles);
            }

            /**
             * 启动悬浮窗
             *
             * @param toFragment
             */
            public void startFloatingWindow(Context context, GT_FloatingWindow.BaseFloatingWindow floatingWindow) {
                startFloatingWindow(floatingWindow.getClass(), floatingWindow.getArguments());
                floatingWindow = null;
            }

            public GT_Fragment getGT_Fragment() {
                return GT_Fragment.gt_fragment;
            }

            //反馈数据
            @Override
            public void onActivityResult(int requestCode, int resultCode, @Nullable Intent intent) {
                super.onActivityResult(requestCode, resultCode, intent);
                onResultData(requestCode, resultCode, intent);
            }

            @Override
            public void onActivityReenter(int resultCode, Intent data) {
                super.onActivityReenter(resultCode, data);
                onResultData(resultCode, resultCode, data);
            }

            /**
             * 反馈数据
             *
             * @param requestCode
             * @param resultCode
             * @param data
             */
            protected void onResultData(int requestCode, int resultCode, @Nullable Intent intent) {

            }

            @Override
            public void finish() {
                super.finish();

                //切换动画
                switch (cutIndex) {
                    case 1:
                        //淡入淡出
                        overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out);
                        break;
                    case 2:
                        //左右滑动
                        overridePendingTransition(android.R.anim.slide_in_left, android.R.anim.slide_out_right);
                        break;
                    default:
                        //用户自定义
                        if (cutIndex == -1 && startAnim != 0 && closeAnim != 0) {
                            overridePendingTransition(startAnim, closeAnim);
                        } else {
                            //触发 路由传递的 返回动画
                            int enterBackAnim = getIntent().getIntExtra(getClass() + "enterBackAnim", -1079);
                            int exitBackAnim = getIntent().getIntExtra(getClass() + "exitBackAnim", -1079);
                            if (enterBackAnim != -1079 && exitBackAnim != -1079) {
                                overridePendingTransition(enterBackAnim, exitBackAnim);
                            }
                        }
                        break;
                }


            }

            @Override
            protected void onDestroy() {
                super.onDestroy();
                Object bean = putCache();
                if (bean != null) {
                    GT_Cache.putCacheData(cacheKey, bean);
                }
                Runtime.getRuntime().gc();
            }

            public boolean onKeyDown(int keyCode, KeyEvent event) {
                if (gt_fragment == null) return super.onKeyDown(keyCode, event);
                if (event.getAction() != KeyEvent.ACTION_DOWN || keyCode != KeyEvent.KEYCODE_BACK) {
                    return false;
                }
                //处理其他Fragment 返回退出
                List<Fragment> stackFragments = gt_fragment.getStackFragments();
                if (stackFragments == null) return super.onKeyDown(keyCode, event);
                Collections.reverse(stackFragments);
                for (Fragment fragment : stackFragments) {
                    if (fragment == null) continue;
                    if (fragment.isVisible()) {
                        if (!GT_Fragment.backFragmentList.contains(fragment.getClass().getName())) {
                            if (fragment instanceof GT_Fragment.BaseFragment) {
                                GT_Fragment.BaseFragment baseFragment = (GT_Fragment.BaseFragment) fragment;
                                if (!baseFragment.isBackPressed()) {//不持有返回事件
                                    return super.onKeyDown(keyCode, event);
                                }
                                if (baseFragment.onBackPressed()) {//持有返回事件
                                    return true;
                                }
                            }
                            gt_fragment.finish();
                            return true;
                        } else {
                            break;
                        }
                    }
                }

                //需要处理返回事件，不然无法正常退出
                for (Fragment fragment : stackFragments) {
                    if (fragment instanceof GT_Fragment.BaseFragment && gt_fragment.stackTopHashCode.equals(fragment.toString())) {
                        GT_Fragment.BaseFragment baseFragment = (GT_Fragment.BaseFragment) fragment;

                        if (!baseFragment.isBackPressed()) {//不持有返回事件
                            return super.onKeyDown(keyCode, event);
                        }

                        boolean isBack = baseFragment.onBackPressed();//2
                        if (!isBack) {
                            List<String> finish1 = gt_fragment.getStackFragmentSimpleNames();
                            baseFragment.onDestroy();
                            gt_fragment.finishs(baseFragment);
                            Thread.getInstance(0).execute(new Runnable() {
                                @Override
                                public void run() {
                                    for (int i = 0; i < 300; i++) {
                                        List<String> finish2 = gt_fragment.getStackFragmentSimpleNames();
                                        if (finish1.size() != finish2.size()) {
                                            Thread.runAndroid(new Runnable() {
                                                @Override
                                                public void run() {
                                                    List<Fragment> stackFragments = gt_fragment.getStackFragments();
                                                    if (stackFragments == null) return;
                                                    Collections.reverse(stackFragments);
                                                    if (stackFragments != null && stackFragments.size() > 0) {
                                                        Fragment fragment1 = stackFragments.get(0);
                                                        if (fragment1 == null) return;
                                                        String fragmentName = fragment1.getClass().getName();
                                                        if (gt_fragment.fragmentType.get(fragmentName) == gt_fragment.getHomeFragmentId()) {
                                                            gt_fragment.startFragmentHome(fragment1, gt_fragment.getHomeFragmentId());
                                                        } else if (gt_fragment.fragmentType.get(fragmentName) == gt_fragment.getMainFragmentId()) {
                                                            gt_fragment.startFragment(fragment1, gt_fragment.getMainFragmentId());
                                                        } else {
                                                            gt_fragment.finish();
                                                        }

                                                    }
                                                }
                                            });
                                            break;
                                        }
                                        Thread.sleep(10);
                                    }

                                }
                            });
                            return true;
                        }
                        //如果不是最后一个是之气已存在的页面，那就手动执行 onBackPressed 方法
                        if (!gt_fragment.stackTopHashCode.equals(stackFragments.get(stackFragments.size() - 1).toString())) {
                            return isBack;
                        }
                        return isBack;
                    }
                }
                return super.onKeyDown(keyCode, event);
            }

            private static String className = "";
            private static String functionName = "";
            //选择单图片
            private ActivityResultLauncher<Intent> register = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), new ActivityResultCallback<ActivityResult>() {
                @Override
                public void onActivityResult(ActivityResult result) {
                    if (result == null) return;
                    Intent intent = result.getData();
                    if (intent == null) return;
                    if (result.getResultCode() != Activity.RESULT_OK) return;

                    //判断是否只发给特定 class
                    Class<?> aClass = null;
                    if (className == null) {
                        aClass = AnnotationAssist.stringToClass(className);
                    }

                    if (functionName == null && aClass == null) {
                        GT.EventBus.posts(result, "onActivityResult");
                    } else if (functionName != null && aClass == null) {
                        GT.EventBus.posts(result, functionName);
                    } else if (functionName == null && aClass != null) {
                        GT.EventBus.posts(result, "onActivityResult", aClass);
                    } else if (functionName != null && aClass != null) {
                        GT.EventBus.posts(result, functionName, aClass);
                    }
                }
            });

            /**
             * 选择单个图片
             *
             * @param className    当前类的 className
             * @param functionName 返回到当前类的 方法名
             */
            public void selectImage(Class classz, String functionName) {
                Intent intent = new Intent(Intent.ACTION_PICK);
                if (classz != null) {
                    this.className = classz.getName();
                }
                if (functionName != null) {
                    this.functionName = functionName;
                }
                intent.setType("image/*");     //选择全部照片
                register.launch(intent);
            }

        }

        /**
         * 封装第二代 Activity
         * 封装特点：
         * 1.继承上代所有优点
         * 2.获取组件可以使用注解的方式进行获取
         */
        public abstract static class AnnotationActivity extends BaseActivity {
            @Override
            protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                EventBus.getDefault().register(this);//注册订阅者
                initDrawView();// 设置绘制前的数据
                initView(savedInstanceState);// 初始化 UI
                loadData();// 功能方法
            }

            @Override
            protected void initView(Bundle savedInstanceState) {
                build(this);
            }

            @Override
            protected void onDestroy() {
                super.onDestroy();
                EventBus.getDefault().unregister(this);//取消订阅者
                GT.EventBus.unregisterInteriors(this);//取消内部订阅者
            }

            /**
             * 内容由 ViewModel 层去提供
             *
             * @param obj
             */
            /*public void onViewModeFeedback(Object... obj) {

            }*/
        }

        /**
         * 封装第三代 Activity
         * 封装特点：
         * 1.继承上代所有优点
         * 2.获取组件可以直接无需获取，直接使用。
         *
         * @param <T>
         */
        public abstract static class DataBindingActivity extends AnnotationActivity {

        }


        /**
         * 获取Activity
         *
         * @return
         */
        public static Application getApplicationByReflect() {
            try {
                @SuppressLint("PrivateApi") Class<?> activityThreadClass = Class.forName("android.app.ActivityThread");
                Object thread = getActivityThread();
                Object app = activityThreadClass.getMethod("getApplication").invoke(thread);
                if (app == null) {
                    return null;
                }
                return (Application) app;
            } catch (InvocationTargetException e) {
                e.printStackTrace();
            } catch (NoSuchMethodException e) {
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }
            return null;
        }

        private static Object getActivityThread() {
            Object activityThread = getActivityThreadInActivityThreadStaticField();
            if (activityThread != null) return activityThread;
            return getActivityThreadInActivityThreadStaticMethod();
        }

        private static Object getActivityThreadInActivityThreadStaticField() {
            try {
                @SuppressLint("PrivateApi") Class<?> activityThreadClass = Class.forName("android.app.ActivityThread");
                Field sCurrentActivityThreadField = activityThreadClass.getDeclaredField("sCurrentActivityThread");
                sCurrentActivityThreadField.setAccessible(true);
                return sCurrentActivityThreadField.get(null);
            } catch (Exception e) {
                Log.e("UtilsActivityLifecycle", "getActivityThreadInActivityThreadStaticField: " + e.getMessage());
                return null;
            }
        }

        private static Object getActivityThreadInActivityThreadStaticMethod() {
            try {
                @SuppressLint("PrivateApi") Class<?> activityThreadClass = Class.forName("android.app.ActivityThread");
                return activityThreadClass.getMethod("currentActivityThread").invoke(null);
            } catch (Exception e) {
                Log.e("UtilsActivityLifecycle", "getActivityThreadInActivityThreadStaticMethod: " + e.getMessage());
                return null;
            }
        }

    }

    /**
     * 封装 Fragment 管理器
     */
    public static class GT_Fragment implements SaveObject.SaveBean {

        //===================================================== 用于注解获取 GT_Fragment 实例对象 ====================================

        //注意：使用注解时如果没有指定加载Fragment容器的话很容易报未找到视图的异常，
        // 但添加 gt_fragment.setHomeFragmentId(R.id.frameLayout);
        // 即可

        @Target(ElementType.FIELD)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface Build {
            int setLayoutHome() default 0;//设置HomeFragment容器

            int setLayoutMain() default 0;//设置MainFragment容器

            Class<?> setClass() default Build.class;//设置预先加载的Fragment

            int setStartMode() default GT_Fragment.MODE_STANDARD;//启动模式默认为默认模式

            int setSwitchingMode() default GT_Fragment.ACTIVITY;//默认切换方式为 Fragment

        }

        private GT_Fragment() {
            //单例
        }

        //===================================================== GT_Fragment 成员变量 ====================================

        private static GT_Fragment gt_fragment = new GT_Fragment();//GT_Fragment 实例化
        private static List<String> backFragmentList = new ArrayList<>();//添加拦截返回键的页面
        private static FragmentManager fragmentManager; //Fragment 管理器
        private static int homeFragmentId = 0;//Home首页页面FragmentID
        private static int mainFragmentId = 0;//Main主页面FragmentID
        private static int oldFragmentId = 0;//旧的地址
        public static int valueIndex = -1;//与注解 values 进行配合，指定第几个布局有效
        private static String stackTopHashCode = "";//始终指向栈顶的 FragmentHashCode
        private static List<String> popBackStackError = new ArrayList<>();//解决 Fragment 本身 popBackStack 后不会立刻销毁 Fragment 带来的问题
        private static String stackTopFragmentName = "";//始终指向栈顶的 Fragment
        private static List<String> operatingFragmentRecord = new ArrayList<>();//存储 Fragment 栈中所有 Fragment 名字
        private static List<BackStackFragmentBean> fragmentBeanList;//存储 Fragment 栈中的 Fragment 信息
        private static List<String> fragmentNames;//存储 Fragment 栈中所有 Fragment 名字

        private static Map<String, Integer> fragmentType = new ArrayMap<>();//记录 Fragment 参数类型

        private String saveStackData = "[]";//保存当前栈中 Fragment 数据
        private Activity activity;//活动引用
        private static FragmentManager.OnBackStackChangedListener listener;//Fragment 栈中监听器

        //===================================================== GT_Fragment 成员变量GetSet方法 ====================================

        /**
         * 如果横竖屏不行，那就可以设置这个 activity
         *
         * @param activity
         */
        public void setActivity(Activity activity) {
            this.activity = activity;
        }

        public static GT_Fragment getGt_fragment() {
            return gt_fragment;
        }

        public static void setGt_fragment(GT_Fragment gt_fragment) {
            GT_Fragment.gt_fragment = gt_fragment;
        }


        private static String returnKey(Object obj) {
            if (obj == null || obj.toString().length() == 0) return null;
            String fragmentName = null;
            if (obj instanceof Class<?>) {
                fragmentName = ((Class<?>) obj).getName();
            } else if (obj instanceof String) {
                fragmentName = ApplicationUtils.notyNull(obj);
            } else {
                fragmentName = obj.toString();
            }
            return fragmentName;
        }

        /**
         * 添加 Fragment 回退栈黑名单
         *
         * @param fragment
         */
        public static void addNotBack(Object obj) {
            String fragmentName = returnKey(obj);
            if (fragmentName != null || !backFragmentList.contains(fragmentName)) {
                backFragmentList.add(fragmentName);
            }
        }

        public static void deleteNotBack(Object obj) {
            String fragmentName = returnKey(obj);
            if (fragmentName != null || GT_Fragment.backFragmentList.contains(fragmentName)) {
                GT_Fragment.backFragmentList.remove(fragmentName);
            }
        }

        /**
         * 采取紧急措施，获取初始化的 Activity
         * 建议在 单 Activity 对 多 Fragment 的时候可以使用
         *
         * @return
         */
        public Activity getActivity() {

            //如果没有主动在 Fragment 初始化的时候初始化 Activity 那么就会导致这里为 null
            if (activity == null) {
                //采取第1号紧急措施，遍历整个 Fragment栈中还存在的 Fragment ，挨个去取一个不为 null 的 Activity ，有那就直接返回该 Activity
                for (String fragmentName : getBackStackFragmentNames()) {//遍历栈中的所有 Fragment
                    Fragment fragment = fragmentManager.findFragmentByTag(fragmentName);//通过设置的标识获取 Fragment
                    if (fragment != null) {
                        activity = fragment.getActivity();//获取 Activity
                        if (activity != null) {
                            return activity;
                        }
                    }
                }

                //采取第2号紧急措施，如果有绑定 Activity 那就直接使用绑定的 Activity
                if (activity == null) {
                    activity = (Activity) GT_Cache.getContext();
                }

                if (activity == null) {
                    activity = (Activity) GT.getActivity();
                }

                //如果还是没有 Activity 那就没法了...

            }

            return activity;
        }

        /**
         * 获取 Fragment 管理器
         *
         * @return
         */
        public FragmentManager getFragmentManager() {
            return fragmentManager;
        }

        /**
         * 获取事务
         *
         * @return
         */
        public FragmentTransaction getTransaction() {
            if (fragmentManager != null && !fragmentManager.isDestroyed()) {
                return fragmentManager.beginTransaction();//获取事务
            } else {
                GT_Fragment.fragmentManager = getFragmentActivity().getSupportFragmentManager();
            }
            return fragmentManager.beginTransaction();//获取事务
        }

        //设置与获取 Home页面的 fragment 容器ID
        public GT_Fragment setHomeFragmentId(int homeFragmentId) {
            GT_Fragment.homeFragmentId = homeFragmentId;
            return this;
        }

        public int getHomeFragmentId() {
            return homeFragmentId;
        }

        //设置与获取 主页面的 Fragment 容器ID
        public int getMainFragmentId() {
            return mainFragmentId;
        }

        public GT_Fragment setMainFragmentId(int mainFragmentId) {
            GT_Fragment.mainFragmentId = mainFragmentId;
            return this;
        }

        public List<BackStackFragmentBean> getBackStackFragmentStack() {
            return getBackStackFragmentList();
        }

        public List<String> getFragmentFragments() {
            return getBackStackFragmentNames();
        }

        //===================================================== 切换 Fragment 方式 ====================================

        /**
         * Fragment 启动方式说明
         * 注意事项： Fragment 的切换方式只要一次设置 就可以持久有效与启动模式相反
         * 注意事项： Fragment 切换方式中的 Activity 切换方式没有 HOME 启动模式。
         * 注意事项：不推荐将 Activity 与 Fragment 进行混用，不然无法保存原页面数据
         */

        /**
         * ACTIVITY:    Activity 切换方式   模仿 Activity 启动方式    切换 Fragment 使用 add 的方式
         */
        public final static int ACTIVITY = 0;

        /**
         * FRAGMENT:    Fragment 启动方式   模仿 Activity 启动方式    切换 Fragment 使用 replace 的方式
         */
        public final static int FRAGMENT = 1;

        /**
         * DIALOG:    Dialog 启动方式   模仿 Activity 启动方式    切换 Fragment 使用 hide/show 的方式
         */
        public final static int DIALOG = 2;

        /**
         * 切换方式 默认使用  Activity
         */
        public static int SWITCHING_MODE = ACTIVITY;//默认使用 Activity

        /**
         * 设置 Fragment 切换模式
         *
         * @param switchingMode 切换模式
         * @return
         */
        public GT_Fragment switchingMode(int switchingMode) {
            //如果启动模式不在正常的值内那就默认为 默认模式
            SWITCHING_MODE = switchingMode;
            return this;
        }

        //是否正常提交
        public static boolean isCommit = true;

        /**
         * Fragment切换方式管理 （仅供内部调用）
         *
         * @param fragmentId
         * @param transaction
         * @param fragment
         * @param name
         */
        @SuppressLint("WrongConstant")
        private void fragmentSwitchingModeManagement(int fragmentId, FragmentTransaction transaction, Fragment fragment, Class<?> fragmentClass) {
            if (fragmentId == 0 || fragmentClass == null) return;
            String fragmentName = fragmentClass.getName();
            try {

                //处理来自路由的动画参数
                if (fragment == null || !setAnim(fragment, transaction)) {
                    cutEffects(transaction);//切换页面特效
                }

                //处理来自路由的动画参数
                Fragment fragmentByTag = null;

                if (oldFragmentId == 0) {
                    oldFragmentId = fragmentId;
                }

                if (oldFragmentId == fragmentId || fragmentId == homeFragmentId && oldFragmentId == mainFragmentId) {
                    fragmentByTag = fragmentManager.findFragmentByTag(stackTopFragmentName);//获取栈顶的 Fragment
                    //先执行栈顶 Fragment 的 hide
                } else {
                    oldFragmentId = fragmentId;
                }

                if (LOG.GT_LOG_TF) {
                    logt("fragment:" + fragment);
                    logt("mainFragmentId:" + mainFragmentId);
                    logt("homeFragmentId:" + homeFragmentId);
                    logt("newFragmentId:" + fragmentId);
                    logt("oldFragmentId:" + oldFragmentId);
                    logt("fragmentName:" + fragmentName);
                    logt("stackTopFragmentName:" + stackTopFragmentName);
                    logt("fragmentByTag:" + fragmentByTag);
                }

                switch (SWITCHING_MODE) {
                    case ACTIVITY:// Activity 切换方式
                    {
                        //隐藏退出栈顶的
                        if (fragmentByTag != null) {
//                            transaction.hide(fragmentByTag);//真实隐藏
                            if (fragmentByTag instanceof BaseFragment) {
                                BaseFragment baseFragment = (BaseFragment) fragmentByTag;
                                baseFragment.hide();//调用隐藏api通知 1
                            } else {
                                fragmentByTag.onStop();
                            }
                        }

                        if (LOG.GT_LOG_TF) {
                            logt("Activity 切换方式");//在其他切换方式里，也应该调用 hiad 方法
                        }

                        //每一种模式都单独去实例化 是必要的
                        if (fragment == null) {
                            try {
                                fragment = (Fragment) fragmentClass.newInstance();
                            } catch (IllegalAccessException e) {
                                e.printStackTrace();
                            } catch (InstantiationException e) {
                                e.printStackTrace();
                            }
                        }

                        //判断当前Fragment是否被添加多次
                        if (!fragment.isAdded()) {
                            transaction.add(fragmentId, fragment, fragmentName);
                        } else {
                            GT.err("无法将同一个Fragment添加多次:" + fragment);
                        }
                        break;
                    }

                    case FRAGMENT:// Fragment 切换方式
                    {
                        if (fragmentName != null && stackTopFragmentName != null && fragmentName.equals(stackTopFragmentName)) {
                            if (LOG.GT_LOG_TF) {
                                logt("过滤掉相同的页面切换 Fragment");
                            }
                            break;
                        }
                        //隐藏退出栈顶的
                        if (fragmentByTag != null) {
//                            transaction.hide(fragmentByTag);//真实隐藏
                            if (fragmentByTag instanceof BaseFragment) {
                                BaseFragment baseFragment = (BaseFragment) fragmentByTag;
                                baseFragment.hide();//调用隐藏api通知 2
                            } else {
                                fragmentByTag.onStop();
                            }
                        }
                        if (LOG.GT_LOG_TF) {
                            logt("Fragment 切换方式");
                        }
                        if (fragment == null) {
                            try {
                                fragment = (Fragment) fragmentClass.newInstance();
                            } catch (IllegalAccessException e) {
                                e.printStackTrace();
                            } catch (InstantiationException e) {
                                e.printStackTrace();
                            }
                        }
                        transaction.replace(fragmentId, fragment, fragmentName);
                        break;
                    }

                    case DIALOG:// Dialog 切换方式
                    {
                        if (LOG.GT_LOG_TF) {
                            logt("Dialog 切换方式:" + fragmentByTag);
                        }
                        if (fragmentName != null && stackTopFragmentName != null && fragmentName.equals(stackTopFragmentName)) {
                            break;
                        }

                        //隐藏退出栈顶的
                        if (fragmentByTag != null) {
                            if (LOG.GT_LOG_TF) {
                                logt("准备隐藏的页面:" + fragmentByTag.getClass().getSimpleName());
                            }

                            Integer integer = fragmentType.get(fragmentByTag.getClass().getName());
                            if (LOG.GT_LOG_TF) {
                                logt("mainFragmentId:" + mainFragmentId);
                                logt("homeFragmentId:" + homeFragmentId);
                                logt("newFragmentId:" + fragmentId);
                                logt("oldFragmentId:" + oldFragmentId);
                                logt("integer:" + integer);
                            }


                            if (fragmentId == integer) {
                                if (LOG.GT_LOG_TF) {
                                    logt("真实隐藏");
                                }
                                transaction.hide(fragmentByTag);//真实隐藏
                                if (fragmentByTag instanceof BaseFragment) {
                                    BaseFragment baseFragment = (BaseFragment) fragmentByTag;
                                    baseFragment.hide();//调用隐藏api通知 3
                                } else {
                                    fragmentByTag.onStop();
                                }
                            } else {
                                if (LOG.GT_LOG_TF) {
                                    logt("过滤隐藏");
                                }
                            }
                        }

                        //判断当前 Fragment 栈中是否存在当前要显示的Fragment
                        List<String> stackFragmentNames = getStackFragmentNames();
                        if (LOG.GT_LOG_TF) {
                            logt("获取栈中:" + stackFragmentNames.size() + " :" + stackFragmentNames);
                            logt("fragmentType:" + fragmentType);
                        }

                        if (stackFragmentNames != null && stackFragmentNames.contains(fragmentName)) {
                            if (LOG.GT_LOG_TF) {
                                logt("存在:" + fragmentName);
                            }
                            Integer integer = fragmentType.get(fragmentName);
                            if (LOG.GT_LOG_TF) {
                                logt("现启动的FragmentID:" + integer);
                            }
                            //存在
                            Fragment stackFragment = getStackFragment(fragmentName);
                            if (stackFragment != null) {

                                if (LOG.GT_LOG_TF) {
                                    logt("显示页面:" + stackFragment.getClass().getSimpleName());
                                }
                                transaction.show(stackFragment);
                                fragment = stackFragment;//关键赋值

                                if (stackFragment instanceof BaseFragment) {
                                    BaseFragment baseFragment = (BaseFragment) stackFragment;
                                    baseFragment.show();//调用显示告知开发者
                                } else {
                                    stackFragment.onStart();//调用显示告知开发者
                                }

                                //下面的就是再循环一遍 Fragment 进行隐藏
                                Thread.getInstance(0).execute(new Runnable() {
                                    @Override
                                    public void run() {
                                        Thread.sleep(300);
                                        Thread.runAndroid(new Runnable() {
                                            @Override
                                            public void run() {
                                                //隐藏相同的页面
                                                for (String fragmentName2 : stackFragmentNames) {
                                                    Integer integer1 = fragmentType.get(fragmentName2);
                                                    if (integer1 != null && integer != null && integer1.intValue() == integer.intValue()) {
                                                        if (LOG.GT_LOG_TF) {
                                                            logt("相等:" + fragmentName2 + ":" + integer1 + "=" + integer);
                                                        }
                                                        Fragment fragmentByTag1 = fragmentManager.findFragmentByTag(fragmentName2);//获取栈顶的 Fragment
                                                        if (stackFragment.getClass() == fragmentByTag1.getClass())
                                                            continue;
                                                        if (LOG.GT_LOG_TF) {
                                                            logt("准备隐藏的Fragment:" + fragmentByTag1);
                                                        }
                                                        transaction.hide(fragmentByTag1);//真实隐藏

                                                        //循环 隐藏所有页面
                                                        if (fragmentByTag1 instanceof BaseFragment) {
                                                            BaseFragment baseFragment = (BaseFragment) fragmentByTag1;
//                                                            baseFragment.hide();//调用隐藏api通知 4
                                                        } else {
                                                            fragmentByTag1.onStop();
                                                        }
                                                        if (LOG.GT_LOG_TF) {
                                                            logt("隐藏完毕的Fragment:" + fragmentByTag1);
                                                        }
                                                    } else {
                                                        if (LOG.GT_LOG_TF) {
                                                            logt("不相等:" + fragmentName2 + ":" + integer1 + "=" + integer);
                                                        }
                                                    }
                                                }
                                            }
                                        });

                                    }
                                });

                            }
                        } else {
                            //不存在
                            if (LOG.GT_LOG_TF) {
                                logt("不存在:" + fragmentByTag);
                            }
                            transaction.addToBackStack(fragmentName);//加入到回退栈
                            if (fragment == null) {
                                try {
                                    fragment = (Fragment) fragmentClass.newInstance();
                                } catch (IllegalAccessException e) {
                                    e.printStackTrace();
                                } catch (InstantiationException e) {
                                    e.printStackTrace();
                                }
                            }
                            transaction.add(fragmentId, fragment, fragmentName);
                        }
                        break;
                    }

                    default: {//如果是非法参数 那就默认使用 Activity 的启动方式
                        if (fragment == null) {
                            try {
                                fragment = (Fragment) fragmentClass.newInstance();
                            } catch (IllegalAccessException e) {
                                e.printStackTrace();
                            } catch (InstantiationException e) {
                                e.printStackTrace();
                            }
                        }
                        transaction.add(fragmentId, fragment, fragmentClass.getName());
                    }

                }

                if (LOG.GT_LOG_TF) {
                    logt("添加操作Fragment记录:" + fragmentName);
                }
                operatingFragmentRecord.add(fragmentName);//记录 操作的 Fragment 顺序

                Fragment stackFragment = getStackFragment(fragmentName);
                fragmentType.put(fragmentName, fragmentId);
                if (LOG.GT_LOG_TF) {
                    logt("fragment:" + fragment);
                    logt("fragmentName:" + fragmentName);
                    logt("fragmentId:" + fragmentId);
                    logt("stackFragment:" + stackFragment);
                }

                if (fragment != null) {
                    stackTopHashCode = fragment.toString();
                    //如果是Home启动模式，默认加入黑名单
                    if (START_MODE == MODE_HOME) {
                        GT_Fragment.addNotBack(fragment);//Home模式
                    }
                }

                //提交事物
                try {
                    if (LOG.GT_LOG_TF) logt("提交事务 1号");
                    activity = getActivity();
                    if (LOG.GT_LOG_TF) logt("提交事务 2号");
                    if (activity != null && ApplicationUtils.isFrontDesk(activity)) {//判断是否在前台，如果是就正常提交事务
                        if (LOG.GT_LOG_TF) logt("提交事务 3号:" + isCommit);
                        if (isCommit) {
                            transaction.commit();
                        } else {
                            transaction.commitAllowingStateLoss();
                        }
                    } else {//负责使用不推荐的方式提交
                        transaction.commitAllowingStateLoss();
                        if (LOG.GT_LOG_TF) logt("提交事务 4号");
                    }
                } catch (IllegalStateException e) {
                    GT.errs("e:" + e);
                    try {
                        if (LOG.GT_LOG_TF) logt("提交事务 5号");
                        transaction.commitAllowingStateLoss();
                    } catch (Exception e1) {
                        GT.errs("e1:" + e1);
                    }
                }
            } catch (Exception e) {
                if (LOG.GT_LOG_TF) {
                    logt("e:" + e);
                }
            }
            if (LOG.GT_LOG_TF) logt("提交事务 6号");
            stackTopFragmentName = fragmentName;

        }

        /**
         * 22种切换样式：
         * 0    默认切换、       transaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);//当前默认使用这一个动画 淡入淡出
         * 1    X轴缩放、		transaction.setCustomAnimations(R.animator.scalex_enter, R.animator.scalex_exit, R.animator.scalex_enter, R.animator.scalex_exit);
         * 2    Y轴缩放、		transaction.setCustomAnimations(R.animator.scaley_enter, R.animator.scaley_exit, R.animator.scaley_enter, R.animator.scaley_exit);
         * 3    XY轴绽放、		transaction.setCustomAnimations(R.animator.scalexy_enter, R.animator.scalexy_exit, R.animator.scalexy_enter, R.animator.scalexy_exit);
         * 4    淡入淡出、		transaction.setCustomAnimations(android.R.animator.fade_in, android.R.animator.fade_out, android.R.animator.fade_in, android.R.animator.fade_out);
         * 5    水平翻页、		transaction.setCustomAnimations(R.animator.card_flip_horizontal_right_in, R.animator.card_flip_horizontal_left_out, R.animator.card_flip_horizontal_left_in, R.animator.card_flip_horizontal_right_out);
         * 6    垂直翻页、		transaction.setCustomAnimations(R.animator.card_flip_vertical_right_in, R.animator.card_flip_vertical_left_out, R.animator.card_flip_vertical_left_in, R.animator.card_flip_vertical_right_out);
         * 7    垂直滑动、		transaction.setCustomAnimations(R.animator.slide_fragment_vertical_right_in, R.animator.slide_fragment_vertical_left_out, R.animator.slide_fragment_vertical_left_in, R.animator.slide_fragment_vertical_right_out);
         * 8    水平滑动、		transaction.setCustomAnimations(R.animator.slide_fragment_horizontal_right_in, R.animator.slide_fragment_horizontal_left_out, R.animator.slide_fragment_horizontal_left_in, R.animator.slide_fragment_horizontal_right_out);
         * 9    向上推的水平滑动、transaction.setCustomAnimations(R.animator.slide_fragment_horizontal_right_in, R.animator.slide_fragment_vertical_left_out, R.animator.slide_fragment_vertical_left_in, R.animator.slide_fragment_horizontal_right_out);
         * 10   向左推的垂直滑动、transaction.setCustomAnimations(R.animator.slide_fragment_vertical_right_in, R.animator.slide_fragment_horizontal_left_out, R.animator.slide_fragment_horizontal_left_in, R.animator.slide_fragment_vertical_right_out);
         * 11   交叉的滑动、		transaction.setCustomAnimations(R.animator.glide_fragment_horizontal_in, R.animator.glide_fragment_horizontal_out, R.animator.glide_fragment_horizontal_in, R.animator.glide_fragment_horizontal_out);
         * 12   会隐藏的滑动、    特殊
         * 13   弹出、			transaction.setCustomAnimations(R.animator.stack_right_in, R.animator.stack_left_out, R.animator.stack_left_in, R.animator.stack_right_out);
         * 14   魔方、 			transaction.setCustomAnimations(R.animator.cube_right_in, R.animator.cube_left_out, R.animator.cube_left_in, R.animator.cube_right_out);
         * 15   向下旋转、		transaction.setCustomAnimations(R.animator.rotatedown_right_in, R.animator.rotatedown_left_out, R.animator.rotatedown_left_in, R.animator.rotatedown_right_out);
         * 16   向上旋转、		transaction.setCustomAnimations(R.animator.rotateup_right_in, R.animator.rotateup_left_out, R.animator.rotateup_left_in, R.animator.rotateup_right_out);
         * 17   手风琴、			transaction.setCustomAnimations(R.animator.accordion_right_in, R.animator.accordion_left_out, R.animator.accordion_left_in, R.animator.accordion_right_out);
         * 18   水平翻转、 		transaction.setCustomAnimations(R.animator.table_horizontal_right_in, R.animator.table_horizontal_left_out, R.animator.table_horizontal_left_int, R.animator.table_horizontal_right_out);
         * 19   垂直翻转、		transaction.setCustomAnimations(R.animator.table_vertical_right_in, R.animator.table_vertical_left_out, R.animator.table_vertical_left_int, R.animator.table_vertical_right_out);
         * 20   左角落放大、		transaction.setCustomAnimations(R.animator.zoom_from_left_corner_right_in, R.animator.zoom_from_left_corner_left_out, R.animator.zoom_from_left_corner_left_in, R.animator.zoom_from_left_corner_right_out);
         * 21   右角落放大、		transaction.setCustomAnimations(R.animator.zoom_from_right_corner_right_in, R.animator.zoom_from_right_corner_left_out, R.animator.zoom_from_right_corner_left_in, R.animator.zoom_from_right_corner_right_out);
         */

        private static int cutEffectsIndex = 0;//默认为标准切换特效
        private static int enter = 0, exit = 0, popEnter = 0, popExit = 0;//设置自定义Fragment 切换

        /**
         * 设置自定义的 Fragment 切换特效
         *
         * @param enter
         * @param exit
         * @param popEnter
         * @param popExit
         */
        public void setFragmentCutEffects(int enter, int exit, int popEnter, int popExit) {
            cutEffectsIndex = -2;
            this.enter = enter;
            this.exit = exit;
            this.popEnter = popEnter;
            this.popExit = popExit;
        }


        public int getFragmentCutEffectsIndex() {
            return cutEffectsIndex;
        }

        /**
         * 设置切换特效
         * 8 种切换样式：
         * -2    自定义动画 (需要通过 setFragmentCutEffects 方法进行设置 动画)
         * -1    无动画、
         * 0    默认切换、
         * 1    X轴缩放、
         * 2    Y轴缩放、
         * 3    XY轴绽放、
         * 4    淡入淡出、
         * 5    水平翻页、
         * 6    垂直翻页、
         * 7    弹出、
         * 8    左右进出、
         *
         * @param cutEffectsIndex
         */
        public GT_Fragment setFragmentCutEffectsIndex(int cutEffectsIndex) {
            GT_Fragment.cutEffectsIndex = cutEffectsIndex;
            return this;
        }

        /**
         * 设置首页模式(推荐)
         *
         * @param cutEffectsIndex   设置切换动画
         * @param homeFragmentId    设置首页
         * @param mainFragmentId    设置所有多级页面的
         * @param fragmentHomeClass 默认启动的Fragment
         * @return
         */
        public GT_Fragment setHomeModel(int homeFragmentId, int mainFragmentId, Class<?> fragmentHomeClass, int... cutEffectsIndexs) {
            if (cutEffectsIndexs != null && cutEffectsIndexs.length > 0 && cutEffectsIndexs[0] >= 0) {
                gt_fragment.setFragmentCutEffectsIndex(cutEffectsIndexs[0]);//设置切换动画 0-7  推荐0、4
            }
            gt_fragment.setHomeFragmentId(homeFragmentId)//设置首页 五个大菜单 容器
                    .setMainFragmentId(mainFragmentId)//设置所有多级页面的 容器
                    .switchingMode(GT_Fragment.DIALOG)//使用 hied show 的方式加载 首页(HomeFragment.class)
                    .startFragmentHome(fragmentHomeClass);//使用 主界面方式启动 HomeFragment
            return this;
        }


        /**
         * 22种切换样式：
         * 0    默认切换、       transaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);//当前默认使用这一个动画 淡入淡出
         * 1    X轴缩放、		transaction.setCustomAnimations(R.animator.scalex_enter, R.animator.scalex_exit, R.animator.scalex_enter, R.animator.scalex_exit);
         * 2    Y轴缩放、		transaction.setCustomAnimations(R.animator.scaley_enter, R.animator.scaley_exit, R.animator.scaley_enter, R.animator.scaley_exit);
         * 3    XY轴绽放、		transaction.setCustomAnimations(R.animator.scalexy_enter, R.animator.scalexy_exit, R.animator.scalexy_enter, R.animator.scalexy_exit);
         * 4    淡入淡出、		transaction.setCustomAnimations(android.R.animator.fade_in, android.R.animator.fade_out, android.R.animator.fade_in, android.R.animator.fade_out);
         * 5    水平翻页、		transaction.setCustomAnimations(R.animator.card_flip_horizontal_right_in, R.animator.card_flip_horizontal_left_out, R.animator.card_flip_horizontal_left_in, R.animator.card_flip_horizontal_right_out);
         * 6    垂直翻页、		transaction.setCustomAnimations(R.animator.card_flip_vertical_right_in, R.animator.card_flip_vertical_left_out, R.animator.card_flip_vertical_left_in, R.animator.card_flip_vertical_right_out);
         * 7    垂直滑动、		transaction.setCustomAnimations(R.animator.slide_fragment_vertical_right_in, R.animator.slide_fragment_vertical_left_out, R.animator.slide_fragment_vertical_left_in, R.animator.slide_fragment_vertical_right_out);
         * 8    水平滑动、		transaction.setCustomAnimations(R.animator.slide_fragment_horizontal_right_in, R.animator.slide_fragment_horizontal_left_out, R.animator.slide_fragment_horizontal_left_in, R.animator.slide_fragment_horizontal_right_out);
         * 9    向上推的水平滑动、transaction.setCustomAnimations(R.animator.slide_fragment_horizontal_right_in, R.animator.slide_fragment_vertical_left_out, R.animator.slide_fragment_vertical_left_in, R.animator.slide_fragment_horizontal_right_out);
         * 10   向左推的垂直滑动、transaction.setCustomAnimations(R.animator.slide_fragment_vertical_right_in, R.animator.slide_fragment_horizontal_left_out, R.animator.slide_fragment_horizontal_left_in, R.animator.slide_fragment_vertical_right_out);
         * 11   交叉的滑动、		transaction.setCustomAnimations(R.animator.glide_fragment_horizontal_in, R.animator.glide_fragment_horizontal_out, R.animator.glide_fragment_horizontal_in, R.animator.glide_fragment_horizontal_out);
         * 12   会隐藏的滑动、    特殊
         * 13   弹出、			transaction.setCustomAnimations(R.animator.stack_right_in, R.animator.stack_left_out, R.animator.stack_left_in, R.animator.stack_right_out);
         * 14   魔方、 			transaction.setCustomAnimations(R.animator.cube_right_in, R.animator.cube_left_out, R.animator.cube_left_in, R.animator.cube_right_out);
         * 15   向下旋转、		transaction.setCustomAnimations(R.animator.rotatedown_right_in, R.animator.rotatedown_left_out, R.animator.rotatedown_left_in, R.animator.rotatedown_right_out);
         * 16   向上旋转、		transaction.setCustomAnimations(R.animator.rotateup_right_in, R.animator.rotateup_left_out, R.animator.rotateup_left_in, R.animator.rotateup_right_out);
         * 17   手风琴、			transaction.setCustomAnimations(R.animator.accordion_right_in, R.animator.accordion_left_out, R.animator.accordion_left_in, R.animator.accordion_right_out);
         * 18   水平翻转、 		transaction.setCustomAnimations(R.animator.table_horizontal_right_in, R.animator.table_horizontal_left_out, R.animator.table_horizontal_left_int, R.animator.table_horizontal_right_out);
         * 19   垂直翻转、		transaction.setCustomAnimations(R.animator.table_vertical_right_in, R.animator.table_vertical_left_out, R.animator.table_vertical_left_int, R.animator.table_vertical_right_out);
         * 20   左角落放大、		transaction.setCustomAnimations(R.animator.zoom_from_left_corner_right_in, R.animator.zoom_from_left_corner_left_out, R.animator.zoom_from_left_corner_left_in, R.animator.zoom_from_left_corner_right_out);
         * 21   右角落放大、		transaction.setCustomAnimations(R.animator.zoom_from_right_corner_right_in, R.animator.zoom_from_right_corner_left_out, R.animator.zoom_from_right_corner_left_in, R.animator.zoom_from_right_corner_right_out);
         */
        /**
         * 切换特效
         *
         * @param transaction
         */
        private void cutEffects(FragmentTransaction transaction) {
            if (cutEffectsIndex < -2) return;
            switch (cutEffectsIndex) {
                case -1:
                    //无动画
                    transaction.setTransition(FragmentTransaction.TRANSIT_NONE);
                    break;
                case 0:
                    //Fragment内置的 淡入淡出
                    transaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
                    break;
                case 1:
                    //X轴缩放
                    transaction.setCustomAnimations(R.animator.scalex_enter, R.animator.scalex_exit, R.animator.scalex_enter, R.animator.scalex_exit);
                    break;
                case 2:
                    //Y轴缩放
                    transaction.setCustomAnimations(R.animator.scaley_enter, R.animator.scaley_exit, R.animator.scaley_enter, R.animator.scaley_exit);
                    break;
                case 3:
                    //XY轴绽放
                    transaction.setCustomAnimations(R.animator.scalexy_enter, R.animator.scalexy_exit, R.animator.scalexy_enter, R.animator.scalexy_exit);
                    break;
                case 4:
                    //淡入淡出
                    transaction.setCustomAnimations(android.R.animator.fade_in, android.R.animator.fade_out, android.R.animator.fade_in, android.R.animator.fade_out);
                    break;
                case 5:
                    //水平翻页
                    transaction.setCustomAnimations(R.animator.card_flip_horizontal_right_in, R.animator.card_flip_horizontal_left_out, R.animator.card_flip_horizontal_left_in, R.animator.card_flip_horizontal_right_out);
                    break;
                case 6:
                    //垂直翻页
                    transaction.setCustomAnimations(R.animator.card_flip_vertical_right_in, R.animator.card_flip_vertical_left_out, R.animator.card_flip_vertical_left_in, R.animator.card_flip_vertical_right_out);
                    break;
                case 7:
                    //弹出
                    transaction.setCustomAnimations(R.animator.stack_right_in, R.animator.stack_left_out, R.animator.stack_left_in, R.animator.stack_right_out);
                    break;
                case 8:
                    //类似 Activity 入栈 出栈
                    transaction.setCustomAnimations(R.animator.slide_right_in, R.animator.slide_left_out, R.animator.slide_left_in, R.animator.slide_right_out);
                    break;
                default:
                    //其它
                    if (cutEffectsIndex == -2) {
                        transaction.setCustomAnimations(enter, exit, popEnter, popExit);//使用自定义的 Fragment 切换特效
                    }
                    break;

            }
        }

        //===================================================== 启动 Fragment 模式 ====================================

        /**
         * Fragment 启动模式说明
         * 注意事项： Fragment 的启动模式在设置启动模式之后，只要启动后就会初始化到默认的启动模式，与Fragment切换方式相反
         * STANDARD:       默认模式     该启动模式为Android默认启动模式，每当启动一个 fragment 就会在任务栈中创建一个
         * HOME:           主界面模式   该启动模式不将 Fragment 加入退回栈,一般用于APP首页
         * SINGLE_TOP:     栈顶模式     该启动模式是在查看任务栈顶和你将要启动的 fragment 是否是同一个 fragment，是一个就直接复用，否则就新创一个实例
         * SINGLE_TASK:    栈内复用模式 该启动模式是在任务栈中看是否有和你一样的 fragment，有则直接把该 fragment 之上的 fragment 全部弹出使之置于栈顶,如果当前即最顶端那就复用。
         * ENTRANCE:       入口模式     如果当前新启动的Fragment处于栈底，那就弹出除栈底外所有 Fragment 如果当前栈中不存在，那就直接创建一个新的实例。常用于一个程序的入口处
         */

        /**
         * 默认模式
         */
        public final static int MODE_STANDARD = 0;
        /**
         * 主界面模式
         */
        public final static int MODE_HOME = 1;
        /**
         * 栈顶模式
         */
        public final static int MODE_SINGLE_TOP = 2;
        /**
         * 栈内复用模式
         */
        public final static int MODE_SINGLE_TASK = 3;
        /**
         * 入口模式
         */
        public final static int MODE_ENTRANCE = 4;
        /**
         * 启动模式
         */
        public static int START_MODE = MODE_STANDARD; //默认模式

        /**
         * 设置 Fragment 启动模式
         *
         * @param startMode 启动模式
         * @return
         */
        public GT_Fragment startMode(int startMode) {
            //如果启动模式不在正常的值内那就默认为 默认模式
            START_MODE = startMode;
            return this;
        }

        /**
         * 启动模式管理 （仅供内部调用）
         *
         * @param transaction 事件
         * @param fragment    当前启动的 Fragment
         * @return
         */
        private boolean modeManagement(FragmentTransaction transaction, Class<?> fragmentClass) {
            if (fragmentClass == null) return false;
            try {
                String name = fragmentClass.getName();

                switch (START_MODE) {
                    case MODE_STANDARD: //默认模式     该启动模式为Android默认启动模式，每当启动一个 fragment 就会在任务栈中创建一个
                    {
                        if (LOG.GT_LOG_TF) {
                            logt("默认模式");
                        }
                        START_MODE = MODE_STANDARD;//恢复默认模式
                        transaction.addToBackStack(name);//加入到回退栈
                        return true;
                    }

                    case MODE_HOME:  //主界面模式   该启动模式不将 Fragment 加入退回栈,一般用于APP首页
                    {
                        //将主界面的所有页面都加入 回退栈 黑名单当中
                        if (!backFragmentList.contains(name)) {
                            backFragmentList.add(name);
                        }

                        if (LOG.GT_LOG_TF) {
                            logt("主界面模式");
                        }
                        START_MODE = MODE_STANDARD;//恢复默认模式

                        if (!isStackTop(fragmentClass)) {
                            return false;
                        }

                        if (SWITCHING_MODE == ACTIVITY) {//如果当前切换的方法是 Activity 那就需要加入回退栈，不给与Activity切换模式 Home 启动模式
//                        transaction.addToBackStack(name);// Home 始终指向首页,故不加入回退栈  加入到回退栈 是否需要加入回退栈，待定
                        }
                        return true;
                    }

                    case MODE_SINGLE_TOP: //栈顶模式     该启动模式是在查看任务栈顶和你将要启动的 fragment 是否是同一个 fragment，是一个就直接复用，否则就新创一个实例
                    {
                        if (LOG.GT_LOG_TF) {
                            logt("栈顶模式");
                        }
                        START_MODE = MODE_STANDARD;//恢复默认模式

                        //当前栈中存在 Fragment 且 当前栈顶 Fragment 是当前要打开的 Fragment 就用直接复用
                        if (!isStackTop(fragmentClass)) {
                            return false;
                        }

                        transaction.addToBackStack(name);//加入到回退栈
                        return true;
                    }

                    case MODE_SINGLE_TASK: //栈内复用模式 该启动模式是在任务栈中看是否有和你一样的 fragment，有则直接把该 fragment 之上的 fragment 全部弹出使之置于栈顶,如果当前即最顶端那就复用。
                    {
                        if (LOG.GT_LOG_TF) {
                            logt("栈内复用模式");
                        }
                        START_MODE = MODE_STANDARD;//恢复默认模式

                        //当前栈中存在 Fragment 且 当前栈顶 Fragment 是当前要打开的 Fragment 就用直接复用
                        if (!isStackTop(fragmentClass)) {
//                        logt("返回 false");
                            return false;
                        }

                        List<String> fragmentNames = getBackStackFragmentNames();
                        int lastIndex = fragmentNames.lastIndexOf(name);//查找当前集合中最后一个 Fragment 索引
                        if (lastIndex == -1) {
                            //如果回退栈中没找到新打开的 Fragment 就直接打开新的 Fragment
                            transaction.addToBackStack(name);//加入到回退栈
                            return true;
                        } else {
                            finish(name, false);//关闭到想要打开的 Fragment
                            return false;
                        }
                    }

                    case MODE_ENTRANCE: {//  入口模式     弹出除栈底外所有 Fragment 再创建一个新的实例。常用于一个程序的入口处
                        if (LOG.GT_LOG_TF) {
                            logt("入口模式");
                        }
                        START_MODE = MODE_STANDARD;//恢复默认模式
                        popBackStackError.clear();
                        //弹出所有栈
                        for (Fragment index : gt_fragment.getStackFragments()) {
                            popBackStackError.add(index.toString());
                            if (fragmentManager == null) continue;
                            fragmentManager.popBackStack();//将加入退回栈的最顶层 Fragment 进行退栈操作
                        }
                        return true;


                    }

                    default://非正常的值
                        START_MODE = MODE_STANDARD;//恢复默认模式
                        err(getLineInfo(3) + "：在启动 Fragment 模式中，你输入了非正常的值,不给与启动操作。");
                        break;

                }
            } catch (Exception e) {
                if (LOG.GT_LOG_TF) {
                    logt("e:" + e);
                }
            }
            return false;
        }


        //===================================================== Fragment 回退栈 与 栈内 工具类 ====================================

        /**
         * 判断当前 fragment 是否处于最顶端显示
         *
         * @param fragmentClass 当前需要判断的 FragmentClass
         * @return
         */
        public <T> boolean isStackTop(Class<T> fragmentClass) {
//            GT.log("当前是否在栈顶:" + fragmentClass.getSimpleName());

            //当前栈中存在 Fragment 且 当前栈顶 Fragment 是当前要打开的 Fragment 就用直接复用
            String name = fragmentClass.getName();
            List<String> stringList = getFragmentFragments();

//            logt("判断是否栈顶");
//            Glogt("name:" + name);
//            logt("stackTopFragmentName:" + stackTopFragmentName);

            if (name.equals(stackTopFragmentName)) {//判断不加入回退栈的逻辑
                operatingFragmentRecord.add(name);//记录 操作的 Fragment 顺序
                return false;
            } else {
                return true;
            }

            /*if (stringList.size() > 0) {
                String stackTop = stringList.get(stringList.size() - 1);//获取栈顶 Fragment
                GT.log("获取栈顶:" + stackTop);
                GT.log("name:" + name);
                GT.log("topFragmentName:" + topFragmentName);

                if (stackTop.equals(name)) {//如果回退栈栈顶是新打开的 Fragment
                    return false;
                } else if (name.equals(topFragmentName)) {//判断不加入回退栈的逻辑
                    return false;
                }
            } else if (name.equals(topFragmentName)) {//判断不加入回退栈的逻辑
                return false;
            }*/

//            return true;
        }

        /**
         * 获取当前 Fragment 回退栈中的信息
         *
         * @return
         */
        public List<BackStackFragmentBean> getBackStackFragmentList() {

            if (fragmentBeanList == null) {
                fragmentBeanList = new ArrayList<>();
            }

            fragmentBeanList.clear();//清空数据

            for (int i = 0; i < fragmentManager.getBackStackEntryCount(); i++) {
                String[] fragmentData = fragmentManager.getBackStackEntryAt(i).toString().split(" ");
                try {
                    String hashCode = fragmentData[0].substring(fragmentData[0].indexOf("{") + 1);//唯一标示
                    String stackIndex = fragmentData[1].substring(1);//栈索引
                    String fragmentName = fragmentData[2].substring(0, fragmentData[2].length() - 1);//fragment名称
                    fragmentBeanList.add(new BackStackFragmentBean(Integer.parseInt(stackIndex), hashCode, fragmentName));
                } catch (Exception e) {
                    errs(getLineInfo() + "报错:" + e);
                }
            }

            return fragmentBeanList;
        }

        /**
         * 获取当前 Fragment 回退栈中 Fragment 所有名称
         *
         * @return
         */
        public List<String> getBackStackFragmentNames() {

            if (fragmentNames == null) {
                fragmentNames = new ArrayList<>();
            }
            fragmentNames.clear();//清空数据

            if (fragmentManager != null) {
                for (int i = 0; i < fragmentManager.getBackStackEntryCount(); i++) {
                    String[] fragmentDataArray = fragmentManager.getBackStackEntryAt(i).toString().split(" ");
                    try {
                        String fragmentName = fragmentDataArray[2].substring(0, fragmentDataArray[2].length() - 1);//fragment名称
                        fragmentNames.add(fragmentName);
                    } catch (Exception e) {
                        errs(getLineInfo() + "报错:" + e);
                    }
                }

                //判断当前栈中的 Fragment 数量是否有变化，如果有变化就清空 指向栈顶的值 用于监听用户按下返回键 去掉 Home Fragment 但栈顶名称还是没变
                if (!saveStackData.equals(fragmentNames.toString())) {
//                topFragmentName = "";
                    saveStackData = fragmentNames.toString();//保存本次栈信息
                }
            }

            return fragmentNames;
        }

        /**
         * 获取当前 Fragment 回退栈中 Fragment 所有名称
         *
         * @return
         */
        public List<String> getBackStackFragmentSimpleNames() {
            List<String> fragmentNames = new ArrayList<>();

            String name = "";
            for (int i = 0; i < fragmentManager.getBackStackEntryCount(); i++) {
                String[] fragmentDataArray = fragmentManager.getBackStackEntryAt(i).toString().split(" ");
                try {
                    String fragmentName = fragmentDataArray[2].substring(0, fragmentDataArray[2].length() - 1);//fragment名称
                    int lastIndex = fragmentName.lastIndexOf(".");
                    if (lastIndex != -1) {
                        name = fragmentName.substring(lastIndex + 1);
                    } else {
                        name = "[null]";
                    }
                    fragmentNames.add(name);

                } catch (Exception e) {
                    errs(getLineInfo() + "报错:" + e);
                }
            }
            return fragmentNames;
        }

        /**
         * Fragment 属性实体类
         */
        public class BackStackFragmentBean {

            private int stackIndex;
            private String hashCode;
            private String fragmentName;

            public BackStackFragmentBean() {
            }

            public BackStackFragmentBean(int stackIndex, String hashCode, String fragmentName) {
                this.stackIndex = stackIndex;
                this.hashCode = hashCode;
                this.fragmentName = fragmentName;
            }

            public int getStackIndex() {
                return stackIndex;
            }

            public void setStackIndex(int stackIndex) {
                this.stackIndex = stackIndex;
            }

            public String getHashCode() {
                return hashCode;
            }

            public void setHashCode(String hashCode) {
                this.hashCode = hashCode;
            }

            public String getFragmentName() {
                return fragmentName;
            }

            public void setFragmentName(String fragmentName) {
                this.fragmentName = fragmentName;
            }

            @Override
            public String toString() {
                return "BackStackFragmentBean{" +
                        "stackIndex=" + stackIndex +
                        ", hashCode='" + hashCode + '\'' +
                        ", fragmentName='" + fragmentName + '\'' +
                        '}';
            }
        }

        /**
         * 获取Fragment栈中所有的 Fragment
         *
         * @return
         */
        public List<Fragment> getStackFragments() {
            if (fragmentManager != null) {
                return fragmentManager.getFragments();
            }
            return null;
        }

        /**
         * 获取Fragment栈中所有的 Fragment
         *
         * @return
         */
        public Fragment getStackFragment(String fragmentName) {
            if (fragmentManager != null) {
                List<Fragment> fragments = fragmentManager.getFragments();
                if (fragments != null) {
                    for (Fragment fragment : fragments) {
                        if (fragment.getClass().getName().equals(fragmentName)) {
                            return fragment;
                        }
                    }
                }
                return null;
            }
            return null;
        }

        /**
         * 获取栈中所有的Fragment全称
         *
         * @return
         */
        public List<String> getStackFragmentNames() {
            if (fragmentManager != null) {
                List<String> fragmentNames = new ArrayList<>();
                List<Fragment> fragments = fragmentManager.getFragments();

                if (fragments.size() == 0) {
                    return fragmentNames;
                }

                for (Fragment fragment : fragments) {
                    fragmentNames.add(fragment.getClass().getName());
                }

                return fragmentNames;
            }
            return null;
        }

        /**
         * 获取栈中所有的Fragment简称
         *
         * @return
         */
        public List<String> getStackFragmentSimpleNames() {
            if (fragmentManager != null) {
                List<Fragment> fragments = fragmentManager.getFragments();
                List<String> fragmentNames = new ArrayList<>();
                for (Fragment fragment : fragments) {
                    fragmentNames.add(fragment.getClass().getSimpleName());
                }
                return fragmentNames;
            }
            return null;
        }

        //===================================================== 构建 GT_Fragment 对象 ====================================

        /**
         * 初始化 Activity (不推荐)
         *
         * @param fragmentActivity
         * @return
         */
        public GT_Fragment BuildActivity(FragmentActivity fragmentActivity) {
            activity = fragmentActivity;
            return gt_fragment;
        }

        /**
         * 初始化 GT_Fragment 不指定 首页的容器
         *
         * @param fragmentActivity Activity 活动
         * @return
         */
        public static GT_Fragment Build(FragmentActivity fragmentActivity, Bundle bundle) {
            if (bundle == null || GT_Fragment.fragmentManager == null) {
                stackTopFragmentName = "";//置空
                GT_Fragment.fragmentManager = fragmentActivity.getSupportFragmentManager();
                initFragment(fragmentActivity);
            }
            return gt_fragment;
        }

        /**
         * 初始化 GT_Fragment 指定首页 容器
         *
         * @param fragmentActivity 活动
         * @param fragmentClass    启动 Fragment 的 class
         * @param <T>
         * @return
         */
        public static <T> GT_Fragment Build(FragmentActivity fragmentActivity, int homeFragmentId, int mainFragmentId, Class<T> fragmentClass, Bundle bundle, int startModel, int switchingMode) {
            if (bundle == null || GT_Fragment.fragmentManager == null) {
                stackTopFragmentName = "";//置空
                GT_Fragment.homeFragmentId = homeFragmentId;
                GT_Fragment.mainFragmentId = mainFragmentId;
                GT_Fragment.fragmentManager = fragmentActivity.getSupportFragmentManager();
                initFragment(fragmentActivity);

                //启动一个指定为首页的 Fragment
                gt_fragment.switchingMode(switchingMode)//设置默认的 切换方式
                        .startMode(startModel);//设置当前一次 启动模式

                if (GT_Fragment.homeFragmentId != 0 && GT_Fragment.mainFragmentId != 0) {
                    if (startModel == MODE_HOME) {
                        gt_fragment.startFragmentHome(fragmentClass);//设置启动的 Fragment
                    } else {
                        gt_fragment.startFragment(fragmentClass);//设置启动的 Fragment
                    }
                } else if (GT_Fragment.homeFragmentId != 0) {
                    gt_fragment.startFragmentHome(fragmentClass);//设置启动的 Fragment
                } else if (GT_Fragment.mainFragmentId != 0) {
                    gt_fragment.startFragment(fragmentClass);//设置启动的 Fragment
                }

                gt_fragment.startMode(MODE_STANDARD);//恢复 当前默认启动模式
            }
            return gt_fragment;
        }

        /**
         * 给予 GT 内部使用的初始化 方法
         * 构建 GT_Fragment 对象的时候构建 Main 容器
         *
         * @param activity
         */
        private static void initFragment(Activity activity) {

            //实例化一个 Fragment 容器
            FrameLayout frameLayout = new FrameLayout(activity);

            //为 Fragment 容器设置 ID值
            if (homeFragmentId == 0 && mainFragmentId == 0) {
                frameLayout.setId(0);
            }

            //将 Fragment 容器设置屏幕大小
            /*DisplayMetrics outMetrics = new DisplayMetrics();
            activity.getWindowManager().getDefaultDisplay().getMetrics(outMetrics);
            //将Fragment 容器添加到 视图中
            activity.addContentView(frameLayout, new ViewGroup.LayoutParams(outMetrics.widthPixels, outMetrics.heightPixels));
*/

            //监听回退栈 增加 fragment 与 减少 Fragment 都会进行触发 就算外部使用了监听覆盖了这里的监听，也不会对启动模式有影响
            listener = new FragmentManager.OnBackStackChangedListener() {
                @Override
                public void onBackStackChanged() {
//                    logt("回退栈出现变动");
//                    logt("topFragmentName:" + topFragmentName);
//                    logt("stackTopFragmentName:" + stackTopFragmentName);


                }
            };

            //注册监听
            fragmentManager.addOnBackStackChangedListener(listener);

        }

        //=========================================== 启动新的 Fragment ====================================

        /**
         * 设置动画
         *
         * @param fragment
         * @param transaction
         */
        private boolean setAnim(Fragment fragment, FragmentTransaction transaction) {
            Bundle arguments = fragment.getArguments();
            if (arguments != null) {
                int[] animArray = arguments.getIntArray(fragment.getClass().toString() + "anim");
                if (animArray == null || animArray.length == 0) return false;
                switch (animArray.length) {
                    case 1:
                        transaction.setTransition(animArray[0]);
                        break;
                    case 2:
                        transaction.setCustomAnimations(animArray[0], animArray[1], animArray[0], animArray[1]);
                        break;
                    case 4:
                        transaction.setCustomAnimations(animArray[0], animArray[1], animArray[2], animArray[3]);
                        break;
                }
                return true;
            } else {
                return false;
            }
        }

        /**
         * 添加Fragment(非页面性质的) 自动提交
         *
         * @param containerViewId 容器
         * @param fragment        实体类 或 Class<Fragment>
         * @param bundles         (非必填)
         * @return
         */
        public GT_Fragment addCommit(@IdRes int containerViewId, @NonNull Object fragmentObj, Bundle... bundles) {
            FragmentTransaction transaction = gt_fragment.getTransaction();
            try {
                transaction = add(containerViewId, fragmentObj, bundles);
                activity = getActivity();
                if (activity != null && ApplicationUtils.isFrontDesk(activity)) {//判断是否在前台，如果是就正常提交事务
                    transaction.commit();
                } else {//负责使用不推荐的方式提交
                    transaction.commitAllowingStateLoss();
                }
            } catch (Exception e) {
                GT.errs("e:" + e);
                try {
                    transaction.commitAllowingStateLoss();
                } catch (Exception e1) {
                    GT.errs("e1:" + e1);
                }
            }
            return this;
        }

        /**
         * 添加Fragment(非页面性质的)
         *
         * @param containerViewId 容器
         * @param fragment        实体类 或 Class<Fragment>
         * @param bundles         (非必填)
         * @return
         */
        public FragmentTransaction add(@IdRes int containerViewId, @NonNull Object fragmentObj, Bundle... bundles) {
            FragmentTransaction transaction = gt_fragment.getTransaction();
            Fragment fragment = AnnotationAssist.<Fragment>ObjToObj(fragmentObj);
            if (fragment == null) return transaction;
            if (fragment.isAdded()) {
                GT.err("无法将同一个Fragment添加多次:" + fragment);
                return transaction;
            }

            setAnim(fragment, transaction);

            Bundle bundle = null;
            if (bundles != null && bundles.length > 0) {
                bundle = bundles[0];
                fragment.setArguments(bundle);
            }

            if (fragment instanceof BaseFragment) {
                BaseFragment baseFragment = (BaseFragment) fragment;
                baseFragment.setBackPressed(false);
                transaction.add(containerViewId, baseFragment);
            } else {
                transaction.add(containerViewId, fragment);
            }

            return transaction;
        }

        /**
         * 添加Fragment(非页面性质的) 自动提交
         *
         * @param containerViewId 容器
         * @param fragment        实体类 或 Class<Fragment>
         * @param tag             标签
         * @param bundles         (非必填)
         * @return
         */
        public GT_Fragment addCommit(@IdRes int containerViewId, @NonNull Object fragmentObj, String tag, Bundle... bundles) {
            FragmentTransaction transaction = gt_fragment.getTransaction();
            try {
                transaction = add(containerViewId, fragmentObj, tag, bundles);
                activity = getActivity();
                if (activity != null && ApplicationUtils.isFrontDesk(activity)) {//判断是否在前台，如果是就正常提交事务
                    transaction.commit();
                } else {//负责使用不推荐的方式提交
                    transaction.commitAllowingStateLoss();
                }
            } catch (IllegalStateException e) {
                GT.errs("e:" + e);
                try {
                    transaction.commitAllowingStateLoss();
                } catch (Exception e1) {
                    GT.errs("e1:" + e1);
                }
            }
            return this;
        }

        /**
         * 添加Fragment(非页面性质的)
         *
         * @param containerViewId 容器
         * @param fragment        实体类 或 Class<Fragment>
         * @param tag             标签
         * @param bundles         (非必填)
         * @return
         */
        public FragmentTransaction add(@IdRes int containerViewId, @NonNull Object fragmentObj, String tag, Bundle... bundles) {
            FragmentTransaction transaction = gt_fragment.getTransaction();
            Fragment fragment = AnnotationAssist.<Fragment>ObjToObj(fragmentObj);
            if (fragment == null) return transaction;

            setAnim(fragment, transaction);

            Bundle bundle = null;
            if (bundles != null && bundles.length > 0) {
                bundle = bundles[0];
                fragment.setArguments(bundle);
            }

            if (fragment instanceof BaseFragment) {
                BaseFragment baseFragment = (BaseFragment) fragment;
                baseFragment.setBackPressed(false);
                transaction.add(containerViewId, baseFragment, tag);
            } else {
                transaction.add(containerViewId, fragment, tag);
            }
            return transaction;
        }


        //替换

        /**
         * 替换 Fragment(非页面性质的) 自动提交
         *
         * @param containerViewId 容器
         * @param fragment        实体类 或 Class<Fragment>
         * @param bundles         (非必填)
         * @return
         */
        public GT_Fragment replaceCommit(@IdRes int containerViewId, @NonNull Object fragmentObj, Bundle... bundles) {
            FragmentTransaction transaction = gt_fragment.getTransaction();
            try {
                transaction = replace(containerViewId, fragmentObj, bundles);
                activity = getActivity();
                if (activity != null && ApplicationUtils.isFrontDesk(activity)) {//判断是否在前台，如果是就正常提交事务
                    transaction.commit();
                } else {//负责使用不推荐的方式提交
                    transaction.commitAllowingStateLoss();
                }
            } catch (IllegalStateException e) {
                GT.errs("e:" + e);
                try {
                    transaction.commitAllowingStateLoss();
                } catch (Exception e1) {
                    GT.errs("e1:" + e1);
                }
            }
            return this;
        }

        /**
         * 替换 Fragment(非页面性质的)
         *
         * @param containerViewId 容器
         * @param fragment        实体类 或 Class<Fragment>
         * @param bundles         (非必填)
         * @return
         */
        public FragmentTransaction replace(@IdRes int containerViewId, @NonNull Object fragmentObj, Bundle... bundles) {
            FragmentTransaction transaction = gt_fragment.getTransaction();
            Fragment fragment = AnnotationAssist.<Fragment>ObjToObj(fragmentObj);
            if (fragment == null) return transaction;

            setAnim(fragment, transaction);

            Bundle bundle = null;
            if (bundles != null && bundles.length > 0) {
                bundle = bundles[0];
                fragment.setArguments(bundle);
            }

            if (fragment instanceof BaseFragment) {
                BaseFragment baseFragment = (BaseFragment) fragment;
                baseFragment.setBackPressed(false);
                transaction.replace(containerViewId, baseFragment);
            } else {
                transaction.replace(containerViewId, fragment);
            }
            return transaction;
        }

        /**
         * 替换 Fragment(非页面性质的) 自动提交
         *
         * @param containerViewId 容器
         * @param fragment        实体类 或 Class<Fragment>
         * @param tag             标签
         * @param bundles         (非必填)
         * @return
         */
        public GT_Fragment replaceCommit(@IdRes int containerViewId, @NonNull Object fragmentObj, String tag, Bundle... bundles) {
            FragmentTransaction transaction = gt_fragment.getTransaction();
            try {
                transaction = replace(containerViewId, fragmentObj, tag, bundles);
                activity = getActivity();
                if (activity != null && ApplicationUtils.isFrontDesk(activity)) {//判断是否在前台，如果是就正常提交事务
                    transaction.commit();
                } else {//负责使用不推荐的方式提交
                    transaction.commitAllowingStateLoss();
                }
            } catch (IllegalStateException e) {
                GT.errs("e:" + e);
                try {
                    transaction.commitAllowingStateLoss();
                } catch (Exception e1) {
                    GT.errs("e1:" + e1);
                }
            }
            return this;
        }

        /**
         * 替换 Fragment(非页面性质的)
         *
         * @param containerViewId 容器
         * @param fragment        实体类 或 Class<Fragment>
         * @param tag             标签
         * @param bundles         (非必填)
         * @return
         */
        public FragmentTransaction replace(@IdRes int containerViewId, @NonNull Object fragmentObj, String tag, Bundle... bundles) {
            FragmentTransaction transaction = gt_fragment.getTransaction();
            Fragment fragment = AnnotationAssist.<Fragment>ObjToObj(fragmentObj);
            if (fragment == null) return transaction;

            setAnim(fragment, transaction);

            Bundle bundle = null;
            if (bundles != null && bundles.length > 0) {
                bundle = bundles[0];
                fragment.setArguments(bundle);
            }

            if (fragment instanceof BaseFragment) {
                BaseFragment baseFragment = (BaseFragment) fragment;
                baseFragment.setBackPressed(false);
                transaction.replace(containerViewId, baseFragment, tag);
            } else {
                transaction.replace(containerViewId, fragment, tag);
            }
            return transaction;
        }


        /**
         * 隐藏 Fragment(非页面性质的) 自动提交
         *
         * @param fragment 实体类 或 Class<Fragment>
         * @return
         */
        public GT_Fragment hideCommit(@NonNull Object fragmentObj) {
            FragmentTransaction transaction = gt_fragment.getTransaction();
            try {
                transaction = hide(fragmentObj);
                activity = getActivity();
                if (activity != null && ApplicationUtils.isFrontDesk(activity)) {//判断是否在前台，如果是就正常提交事务
                    transaction.commit();
                } else {//负责使用不推荐的方式提交
                    transaction.commitAllowingStateLoss();
                }
            } catch (IllegalStateException e) {
                GT.errs("e:" + e);
                try {
                    transaction.commitAllowingStateLoss();
                } catch (Exception e1) {
                    GT.errs("e1:" + e1);
                }
            }
            return this;
        }

        /**
         * 隐藏 Fragment(非页面性质的)
         *
         * @param fragment 实体类 或 Class<Fragment>
         * @return
         */
        public FragmentTransaction hide(@NonNull Object fragmentObj) {
            FragmentTransaction transaction = gt_fragment.getTransaction();

            Class<?> fragmentClass = null;
            Fragment fragment = null;
            if (fragmentObj instanceof Fragment) {
                fragment = (Fragment) fragmentObj;
                return transaction.hide(fragment);
            } else if (fragmentObj instanceof String) {
                fragmentClass = AnnotationAssist.stringToClass(fragmentObj.toString());
            } else if (fragmentObj instanceof Class<?>) {
                fragmentClass = (Class<?>) fragmentObj;
            }

            for (Fragment fra : gt_fragment.getStackFragments()) {
                if (fra.getClass() == fragmentClass) {
                    return transaction.hide(fra);
                }
            }
            return transaction;
        }


        /**
         * 删除 Fragment(非页面性质的) 自动提交
         *
         * @param fragment 实体类 或 Class<Fragment>
         * @return
         */
        public GT_Fragment removeCommit(@NonNull Object fragmentObj) {
            FragmentTransaction transaction = gt_fragment.getTransaction();
            try {
                transaction = remove(fragmentObj);
                activity = getActivity();
                if (activity != null && ApplicationUtils.isFrontDesk(activity)) {//判断是否在前台，如果是就正常提交事务
                    transaction.commit();
                } else {//负责使用不推荐的方式提交
                    transaction.commitAllowingStateLoss();
                }
            } catch (IllegalStateException e) {
                GT.errs("e:" + e);
                try {
                    transaction.commitAllowingStateLoss();
                } catch (Exception e1) {
                    GT.errs("e1:" + e1);
                }
            }
            return this;
        }

        /**
         * 删除 Fragment(非页面性质的)
         *
         * @param fragment 实体类 或 Class<Fragment>
         * @return
         */
        public FragmentTransaction remove(@NonNull Object fragmentObj) {
            FragmentTransaction transaction = gt_fragment.getTransaction();
            Class<?> fragmentClass = null;
            Fragment fragment = null;
            if (fragmentObj instanceof Fragment) {
                fragment = (Fragment) fragmentObj;
                return transaction.remove(fragment);
            } else if (fragmentObj instanceof String) {
                fragmentClass = AnnotationAssist.stringToClass(fragmentObj.toString());
            } else if (fragmentObj instanceof Class<?>) {
                fragmentClass = (Class<?>) fragmentObj;
            }

            for (Fragment fra : gt_fragment.getStackFragments()) {
                if (fra.getClass() == fragmentClass)
                    return transaction.remove(fra);
            }
            return transaction;
        }


        /**
         * 启动一个Fragment
         *
         * @param fragmentObj 支持 String(className)、Class(Fragment.class),new Fragemnt(实例化对象)
         * @param resLayouts  指定启动的 Fragemnt 容器 (非必填)
         * @return
         */
        public GT_Fragment startFragment(Object fragmentObj, int... resLayouts) {
            if (fragmentObj == null || fragmentObj.toString().length() == 0) return this;

            Fragment fragment = null;
            int resLayout = mainFragmentId;
            Class<?> fragmentClass = null;

            if (fragmentObj instanceof String) {
                fragmentClass = AnnotationAssist.stringToClass(fragmentObj.toString());
            } else if (fragmentObj instanceof Class<?>) {
                fragmentClass = (Class<?>) fragmentObj;
            } else if (fragmentObj instanceof Fragment) {
                fragment = (Fragment) fragmentObj;
                fragmentClass = fragment.getClass();
            }

            if (resLayouts != null && resLayouts.length > 0 && resLayouts[0] > 0) {
                resLayout = resLayouts[0];
            }

            //启动 Fragment
            FragmentTransaction transaction = getTransaction();
            if (modeManagement(transaction, fragmentClass)) {
                fragmentSwitchingModeManagement(resLayout, transaction, fragment, fragmentClass);
            } else {
            }
            return this;
        }

        /**
         * 启动一个 首页 Fragment
         *
         * @param fragmentObj
         * @param <T>
         * @return
         */
        public GT_Fragment startFragmentHome(Object fragmentObj, int... resLayouts) {
            switchingMode(GT_Fragment.DIALOG);
            startMode(MODE_HOME);//设置本次 Fragment 的启动模式
            int resLayout = homeFragmentId;

            if (resLayouts != null && resLayouts.length > 0 && resLayouts[0] > 0) {
                resLayout = resLayouts[0];
            }

            //启动 Fragment
            startFragment(fragmentObj, resLayout);

            startMode(GT_Fragment.MODE_SINGLE_TOP);
            switchingMode(GT_Fragment.ACTIVITY);
            return this;
        }

        //=========================================== GT_Fragment 功能性方法 ====================================

        /**
         * 为基类Fragment初始化必要的属性（推荐使用）
         *
         * @param view
         */
        public static void initBaseFragment(View view) {
            if (view == null) return;

            try {
                Drawable drawable = view.getBackground();//获取 Fragment 背景
                if (!(drawable instanceof BitmapDrawable)) { //如果背景没有设置背景图片
                    ColorDrawable colorDrawable = (ColorDrawable) view.getBackground();//获取 View 背景颜色
                    if (colorDrawable == null) {//如果背景颜色没有设置
                        view.setBackgroundColor(Color.WHITE);// 设置为 默认的 白色
                    }
                }
            } catch (Exception e) {
                err("Fragment BG Exception :" + e);
            }


            //解决 Fragment 点击事件穿透问题
            view.setOnTouchListener(new View.OnTouchListener() {
                @SuppressLint("ClickableViewAccessibility")
                @Override
                public boolean onTouch(View v, MotionEvent event) {
                    return true;
                }
            });
        }


        public static void onKeyDown(View view, View.OnKeyListener onKeyListener) {
            if (view == null || onKeyListener == null) return;

            /**
             * 判断用例：如   if(keyCode == 4 && keyEvent.getAction() == KeyEvent.ACTION_DOWN)
             *  返回键：
             *  【keyCode:4，KEYCODE_ENTER:66==getAction:0，ACTION_DOWN:0
             *  【keyCode:4，KEYCODE_ENTER:66==getAction:1，ACTION_DOWN:0
             *
             *  音量小：
             *  【keyCode:25，KEYCODE_ENTER:66==getAction:0，ACTION_DOWN:0
             *  【keyCode:25，KEYCODE_ENTER:66==getAction:1，ACTION_DOWN:0
             *
             *  音量大：
             *  【keyCode:24，KEYCODE_ENTER:66==getAction:0，ACTION_DOWN:0
             *  【keyCode:24，KEYCODE_ENTER:66==getAction:1，ACTION_DOWN:0
             */

            view.setFocusableInTouchMode(true);
            view.requestFocus();
            view.setOnKeyListener(onKeyListener);
        }

        //退出所有 Fragment
        public GT_Fragment finishs() {
            try {
                if (fragmentManager != null) {
                    for (Fragment stackFragment : getStackFragments()) {
                        fragmentManager.popBackStack();//将加入退回栈的最顶层 Fragment 进行退栈操作
                    }
                }
            } catch (Exception e) {
                if (LOG.GT_LOG_TF) {
                    logt("e:" + e);
                }
            }
            return this;
        }

        //退出所有 Fragment
        public GT_Fragment finishs(final String name, final int flags) {
            try {
                if (fragmentManager != null) {
                    for (Fragment stackFragment : getStackFragments()) {
                        fragmentManager.popBackStack(name, flags);//将加入退回栈的最顶层 Fragment 进行退栈操作
                    }
                }
            } catch (Exception e) {
                if (LOG.GT_LOG_TF) {
                    logt("e:" + e);
                }
            }
            return this;
        }


        //退出所有 Fragment
        public GT_Fragment finishs(Object fragmentObj) {
            if (fragmentObj == null) return this;
            try {
                if (fragmentManager != null) {

                    Fragment fragment = null;
                    int resLayout = mainFragmentId;
                    Class<?> fragmentClass = null;

                    if (fragmentObj instanceof String) {
                        fragmentClass = AnnotationAssist.stringToClass(fragmentObj.toString());
                    } else if (fragmentObj instanceof Class<?>) {
                        fragmentClass = (Class<?>) fragmentObj;
                    } else if (fragmentObj instanceof Fragment) {
                        fragment = (Fragment) fragmentObj;
                        fragmentClass = fragment.getClass();
                    }
                    fragment = fragmentManager.findFragmentByTag(fragmentClass.getName());
                    if (fragment != null) {
                        //isMarket = true;//这行忽略
                        //开始事务 通过remove清除指定的fragment，并提交
                        fragmentManager.beginTransaction().remove(fragment).commit();
                    }

                }

            } catch (Exception e) {
                if (LOG.GT_LOG_TF) {
                    logt("e:" + e);
                }
            }
            return this;
        }


        /**
         * 关闭最顶端的 Fragment (将栈顶的 Fragment 退出去)
         *
         * @return
         */
        public GT_Fragment finish(int... time) {
            try {
                if (fragmentManager != null) {
                    fragmentManager.popBackStack();//将加入退回栈的最顶层 Fragment 进行退栈操作
                    startTopShow(time);
//                    logt("1号");
                }
            } catch (Exception e) {
                if (LOG.GT_LOG_TF) {
                    logt("e:" + e);
                }
            }
            return this;
        }

        /**
         * 在关闭 Fragment 同时传递数据回去
         *
         * @param intent
         * @param <T>
         * @return
         */
        public <T> GT_Fragment finish(Intent intent, int... time) {

            try {
                //抢救一下 activity 为空的情况
                if (activity == null) {
                    activity = getActivity();//从当前Fragment 中获取Activity
                    if (activity == null) {
                        activity = gt_fragment.getActivity();//紧急情况使用 gt 内部获取Activity
                    }
                }

                //如果传递的值不为null 那就传递
                if (intent != null && activity != null && activity instanceof GT_Activity.BaseActivity) {
                    ((GT_Activity.BaseActivity) activity).onActivityResult(1, 1, intent);
                } else {
                    activity.onActivityReenter(1, intent);
                }

                if (fragmentManager != null) {
                    fragmentManager.popBackStack();//将加入退回栈的最顶层 Fragment 进行退栈操作
                    startTopShow(time);
//                    logt("2号");
                }

            } catch (Exception e) {
                if (LOG.GT_LOG_TF) {
                    logt("e:" + e);
                }
            }

            return this;
        }

        /**
         * 在关闭 Fragment 同时传递数据回去
         *
         * @param activity
         * @param intent
         * @param <T>
         * @return
         */
        public <T> GT_Fragment finish(Activity activity, Intent intent, int... time) {

            try {
                //如果传递的值不为null 那就传递
                if (intent != null && activity != null && activity instanceof GT_Activity.BaseActivity) {
                    ((GT_Activity.BaseActivity) activity).onActivityResult(1, 1, intent);
                } else {
                    activity.onActivityReenter(1, intent);
                }

                if (fragmentManager != null) {
                    fragmentManager.popBackStack();//将加入退回栈的最顶层 Fragment 进行退栈操作
                    startTopShow(time);
//                    logt("3号");
                }

            } catch (Exception e) {
                if (LOG.GT_LOG_TF) {
                    logt("e:" + e);
                }
            }

            return this;
        }

        /**
         * 在关闭 Fragment 同时传递数据回去
         *
         * @param intent
         * @param <T>
         * @return
         */
        public <T> GT_Fragment finish(Intent intent, int requestCode, int resultCode, int... time) {

            try {
                //抢救一下 activity 为空的情况
                if (activity == null) {
                    activity = getActivity();//从当前Fragment 中获取Activity
                    if (activity == null) {
                        activity = gt_fragment.getActivity();//紧急情况使用 gt 内部获取Activity
                    }
                }

                //如果传递的值不为null 那就传递
                if (intent != null && activity != null && activity instanceof GT_Activity.BaseActivity) {
                    ((GT_Activity.BaseActivity) activity).onActivityResult(1, 1, intent);
                } else {
                    activity.onActivityReenter(1, intent);
                }

                if (fragmentManager != null) {
                    fragmentManager.popBackStack();//将加入退回栈的最顶层 Fragment 进行退栈操作
                    startTopShow(time);
//                    logt("4号");
                }
            } catch (Exception e) {
                if (LOG.GT_LOG_TF) {
                    logt("e:" + e);
                }
            }
            return this;
        }

        /**
         * 在关闭 Fragment 同时传递数据回去
         *
         * @param activity
         * @param intent
         * @param <T>
         * @return
         */
        public <T> GT_Fragment finish(Activity activity, Intent intent, int requestCode, int resultCode, int... time) {

            try {
                //如果传递的值不为null 那就传递
                if (intent != null && activity != null && activity instanceof GT_Activity.BaseActivity) {
                    ((GT_Activity.BaseActivity) activity).onActivityResult(1, 1, intent);
                } else {
                    activity.onActivityReenter(1, intent);
                }

                if (fragmentManager != null) {
                    fragmentManager.popBackStack();//将加入退回栈的最顶层 Fragment 进行退栈操作
                    startTopShow(time);
//                    logt("5号");
                }
            } catch (Exception e) {
                if (LOG.GT_LOG_TF) {
                    logt("e:" + e);
                }
            }
            return this;
        }


        /**
         * 指定 关闭 Fragment
         *
         * @param fragmentClass
         * @param <T>
         * @return
         */
        public <T> GT_Fragment finish(Class<T> fragmentClass, int... time) {
            try {
                if (fragmentManager != null) {
                    fragmentManager.popBackStackImmediate(fragmentClass.getName(), FragmentManager.POP_BACK_STACK_INCLUSIVE);//将加入退回栈的最顶层 Fragment 进行退栈操作
                    startTopShow(time);
//                    logt("6号");
                }
            } catch (Exception e) {
                if (LOG.GT_LOG_TF) {
                    logt("e:" + e);
                }
            }
            return this;
        }

        /**
         * 指定 关闭 Fragment
         *
         * @param fragmentName
         * @param <T>
         * @return
         */
        public <T> GT_Fragment finish(String fragmentName, int... time) {
            try {
                if (fragmentManager != null) {
                    fragmentManager.popBackStackImmediate(fragmentName, FragmentManager.POP_BACK_STACK_INCLUSIVE);//将加入退回栈的最顶层 Fragment 进行退栈操作
                    startTopShow(time);
//                    logt("7号");
                }
            } catch (Exception e) {
                if (LOG.GT_LOG_TF) {
                    logt("e:" + e);
                }
            }
            return this;
        }

        /**
         * 指定 关闭 Fragment
         *
         * @param fragmentClass  想要关闭的 FragmentClass
         * @param isCloseOneself 是否关闭自己
         * @param <T>
         * @return
         */
        public <T> GT_Fragment finish(Class<T> fragmentClass, boolean isCloseOneself, int... time) {
            try {
                if (fragmentManager != null) {
                    if (isCloseOneself) {
                        fragmentManager.popBackStackImmediate(fragmentClass.getName(), FragmentManager.POP_BACK_STACK_INCLUSIVE);//将加入退回栈的最顶层 Fragment 进行退栈操作
                    } else {
                        fragmentManager.popBackStackImmediate(fragmentClass.getName(), 0);//将加入退回栈的最顶层 Fragment 进行退栈操作
                    }
                    startTopShow(time);
//                    logt("8号");
                }
            } catch (Exception e) {
                if (LOG.GT_LOG_TF) {
                    logt("e:" + e);
                }
            }
            return this;
        }

        /**
         * 指定 关闭 Fragment
         *
         * @param fragmentName   想要关闭的 Fragment 名称
         * @param isCloseOneself 是否关闭自己
         * @param <T>
         * @return
         */
        public <T> GT_Fragment finish(String fragmentName, boolean isCloseOneself, int... time) {
            try {
                if (fragmentManager != null) {
                    if (isCloseOneself) {
                        fragmentManager.popBackStackImmediate(fragmentName, FragmentManager.POP_BACK_STACK_INCLUSIVE);//将加入退回栈的最顶层 Fragment 进行退栈操作 将自己也关闭
                    } else {
                        fragmentManager.popBackStackImmediate(fragmentName, 0);//将加入退回栈的最顶层 Fragment 进行退栈操作 只关闭自己以上所有的 Fragment
                    }
                    startTopShow(time);
//                    logt("9号");
                }
            } catch (Exception e) {
                if (LOG.GT_LOG_TF) {
                    logt("e:" + e);
                }
            }
            return this;
        }

        /**
         * 关闭当前页面调用上个页面的 show 方法
         *
         * @param time 设置延时显示上个页面的 show 方法，默认是 100 毫秒触发
         */
        private static void startTopShow(int... time) {
            Thread.getInstance(0).execute(new Runnable() {
                @Override
                public void run() {
                    if (time.length != 0) {
                        if (time[0] >= 0) {
                            Thread.sleep(time[0]);
                        } else {
                            Thread.sleep(100);
                        }
                    } else {
                        Thread.sleep(100);
                    }

                    try {
                        if (fragmentManager == null) return;
                        List<Fragment> fragments = fragmentManager.getFragments();
//                        logt("栈内Fragment:" + getGT_Fragment().getStackFragmentSimpleNames());
                        if (fragments != null && fragments.size() > 0) {
                            Fragment fragment = fragments.get(fragments.size() - 1);
//                            logt("启动Fragment:" + fragment.getClass().getSimpleName());
//                            stackTopFragmentName = fragment.getClass().getName();//将上个页面设置到最顶端栈

                            //栈顶游标 始终指向 可见的最顶端 Fragment 页面
                            if (operatingFragmentRecord.size() != 0) {
                                operatingFragmentRecord.remove(operatingFragmentRecord.get(operatingFragmentRecord.size() - 1));
                                String fragmentStr = operatingFragmentRecord.get(operatingFragmentRecord.size() - 1);
//                                logt("fragmentStr:" + fragmentStr);
                                stackTopFragmentName = fragmentStr;
                            }

//                            logt("记录:" + operatingFragmentRecord);
//                            logt("赋值给最顶端栈：" + stackTopFragmentName);
                            if (fragment instanceof BaseFragment) {
                                BaseFragment baseFragment = (BaseFragment) fragment;
                                Thread.runAndroid(new Runnable() {
                                    @Override
                                    public void run() {
                                        baseFragment.show();
                                    }
                                });
                            }
                        } else {
                            stackTopFragmentName = "";
                        }
                    } catch (Exception e) {

                    }
                }
            });
        }

        /**
         * 查找栈中 已经存在的 fragment
         *
         * @param fragmentClass
         * @param <T>
         * @return
         */
        public <T> Fragment queryFragmentByClass(Class<T> fragmentClass) {
            return fragmentManager.findFragmentByTag(fragmentClass.getName());
        }

        //=========================================== GT_Fragment 基类 ====================================

        /**
         * 封装第一代 Fragment
         */
        public abstract static class BaseFragment extends Fragment implements Frame.ViewModelFeedback {

            /**
             * 设置首页模式(推荐)
             *
             * @param cutEffectsIndex   设置切换动画
             * @param homeFragmentId    设置首页
             * @param mainFragmentId    设置所有多级页面的
             * @param fragmentHomeClass 默认启动的Fragment
             * @return
             */
            protected GT_Fragment setHomeModel(int homeFragmentId, int mainFragmentId, Class<?> fragmentHomeClass, int... cutEffectsIndexs) {
                return gt_fragment.setHomeModel(homeFragmentId, mainFragmentId, fragmentHomeClass, cutEffectsIndexs);
            }

            @Override
            public void onViewModeFeedback(Object... obj) {

            }

            //是否缓存开启数据
            protected boolean isCacheData() {
                return false;
            }

            private String cacheKey;

            protected void putCache(String key, Object obj) {
                if (key == null) {
                    key = activity.getPackageName() + getClass().getName();
                }
                GT_Cache.putCacheData(key, obj);
            }

            protected <T> T getCache(String key, Class<T> classz) {
                if (key == null) {
                    key = activity.getPackageName() + getClass().getName();
                }
                return GT_Cache.getCacheData(key, classz);
            }

            protected void putCacheMap(Map<String, Object> map) {
                GT_Cache.putCacheMap(map);
            }

            //简单缓存 存储 与 获取
            @Override
            public void getCache(String json) {

            }

            @Override
            public String putCache() {
                return null;
            }

            protected boolean isRecoverBundle() {
                return false;
            }

            // 定义 Activity
            public Activity activity;

            private boolean isPrepare;//是否已经创建了
            private boolean isLazyLoad = false;//是否懒加载

            //是否懒加载
            public boolean isLazyLoad() {
                return isLazyLoad;
            }

            /**
             * 设置是否懒加载
             *
             * @param lazyLoad
             */
            public void setLazyLoad(boolean lazyLoad) {
                isLazyLoad = lazyLoad;
            }

            // 如果重写该方法了的话就需要自己写 接收 Activity
            @Override
            public void onAttach(Context context) {
                super.onAttach(context);
                // 使用官方推荐的方法持有 Activity
                activity = (Activity) context;

                // 如果因为异常原因持有失败就采取紧急措施，获取初始化的 Activity
                if (activity == null) {
                    activity = GT_Fragment.gt_fragment.getActivity();
                }

                //初始化 本地页面缓存
                if (isCacheData()) {
                    GT_Cache.initCache(activity);
                    cacheKey = activity.getPackageName() + getClass().getName();
                }
            }

            /**
             * 返回要加载的布局
             *
             * @return
             */
            protected int loadLayout() {
                return 0;
            }

            /**
             * 初始化 View 数据
             *
             * @param view
             * @param savedInstanceState
             */
            protected abstract void initView(View view, @Nullable Bundle savedInstanceState);

            /**
             * 用户在初始化布局前设置必要的参数 当前方法可不重写
             *
             * @param view
             */
            protected void createView(View view) {
            }

            /**
             * 用于配合 GT_Fragment 显示 Fragment
             */
            protected void show() {

            }

            /**
             * 用于配合 GT_Fragment 隐藏 Fragment
             */
            protected void hide() {

            }

            /**
             * 获取组件
             *
             * @param id
             * @return
             */
            protected View findViewById(int id) {
                return getView().findViewById(id);
            }

            /**
             * 根据 Fragment 容器 ID来获取该 Fragment
             *
             * @param layoutId 容器 ID
             * @param t        Fragment 类型
             * @param <T>
             * @return
             */
            protected <T> T getFragmentID(int layoutId, T t) {
                FragmentManager fragmentManager = getFragmentManager();
                if (fragmentManager == null) return null;
                try {
                    t = (T) fragmentManager.findFragmentById(layoutId);
                } catch (Exception e) {

                }
                return t;
            }

            /**
             * 根据 Fragment 容器 标签来获取该 Fragment
             *
             * @param tag 切换Fragment 时定义的标签，(注意：GT_Fragment 切换默认的标签为 class.getName())
             * @param t   Fragment 类型
             * @param <T>
             * @return
             */
            protected <T> T getFragmentTag(String tag, T t) {
                FragmentManager fragmentManager = getFragmentManager();
                if (fragmentManager == null) return null;
                try {
                    t = (T) fragmentManager.findFragmentByTag(tag);
                } catch (Exception e) {

                }
                return t;
            }

            protected GT_Fragment gt_fragment;

            public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
                View view = inflater.inflate(loadLayout(), container, false);
                createView(view);
                return view;
            }

            /**
             * 主要实现的功能 当页面可见的时候，才加载当前页面数据。 没有打开的页面，就不会预加载
             */
            public void loadData() {
            }

            //是否解决EditText bug
            private boolean isSolveEditTextBug = false;

            public boolean isSolveEditTextBug() {
                return isSolveEditTextBug;
            }

            /**
             * 设置是否解决EditText bug
             *
             * @param solveEditTextBug
             */
            public void setSolveEditTextBug(boolean solveEditTextBug) {
                isSolveEditTextBug = solveEditTextBug;
            }

            @Override
            public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
                super.onViewCreated(view, savedInstanceState);
                isPrepare = true;
                view.setOnClickListener(null);//防止点击穿透
                //如果没有设置背景，那就设置默认背景
                Drawable background = view.getBackground();
                if (background == null) {
                    view.setBackgroundColor(Color.parseColor("#F7F7F7"));
                }

                if (this.gt_fragment == null) {
                    this.gt_fragment = GT_Fragment.gt_fragment;
                }

                initView(view, savedInstanceState);// 主要方法
                getCache(GT_Cache.getCacheData(cacheKey, String.class));//获取缓存数据
                if (!isLazyLoad) loadData();

                if (!(activity instanceof GT_Activity.BaseActivity)) {
                    isSolveEditTextBug = true;
                    // 如果切换方式是 Fragment 那就注册返回事件 如果是 Activity 请自行去注册 返回按钮事件
                    //有用但不可靠的 监听返回键方式，推荐使用继承 GT_Activity 的方式来解决，GT_Activity内部 已封装好
                    GT_Fragment.onKeyDown(view, new View.OnKeyListener() {
                        @Override
                        public boolean onKey(View v, int keyCode, KeyEvent event) {
                            if (event == null) return false;
                            if (event.getAction() == KeyEvent.ACTION_UP && keyCode == KeyEvent.KEYCODE_BACK) {
                                return onBackPressed();//3 回调按下返回键
                            }
                            return false;
                        }
                    });
                }

                //是否解决EditText bug
                if (isSolveEditTextBug) {
                    //给EditText 组件设置返回事件
                    Thread.getInstance(0).execute(new Runnable() {
                        @Override
                        public void run() {
                            setViewBackListener(view);
                            setEditTextRequestFocus(view);
                        }
                    });
                }
            }

            @Override
            public void onActivityCreated(@Nullable Bundle savedInstanceState) {
                super.onActivityCreated(savedInstanceState);
                load();
            }

            @Override
            public void setUserVisibleHint(boolean isVisibleToUser) {
                super.setUserVisibleHint(isVisibleToUser);
                load();
            }

            private void load() {
                if (isLazyLoad && isPrepare && getUserVisibleHint()) {
                    loadData();
                }
            }


            /**
             * 给EditText 组件设置返回事件
             *
             * @param viewGroup
             */
            protected void setViewBackListener(View viewLayout) {

                ViewGroup viewGroup = null;

                //如果是Edit类型的那就监听返回事件
                if (viewLayout instanceof EditText) {

                    if (activity != null) {
                        Thread.runAndroid(activity, new Runnable() {
                            @Override
                            public void run() {
                                GT_Fragment.onKeyDown(viewLayout, new View.OnKeyListener() {
                                    @Override
                                    public boolean onKey(View v, int keyCode, KeyEvent event) {
                                        if (event == null) return false;
                                        if (event.getAction() == KeyEvent.ACTION_UP && keyCode == KeyEvent.KEYCODE_BACK) {
                                            return onBackPressed();//4 回调按下返回键
                                        }
                                        return false;
                                    }
                                });
                            }
                        });
                    }
                    return;
                } else if (viewLayout instanceof ViewGroup) {

                    try {
                        viewGroup = (ViewGroup) viewLayout;
                    } catch (Exception e) {
//                        logs("异常返回 viewGroup:" + viewGroup.getClass());
                        return;
                    }

                    int childCount = viewGroup.getChildCount();
                    if (childCount == 0) return;

                    for (int i = 0; i < childCount; i++) {
                        View childAt = viewGroup.getChildAt(i);
                        setViewBackListener(childAt);
                    }
                }

            }

            /**
             * 设置最顶端的EditText为获取焦点
             *
             * @param viewLayout
             */
            protected boolean setEditTextRequestFocus(View viewLayout) {
                ViewGroup viewGroup = null;
                //如果是Edit类型的那就监听返回事件
                if (viewLayout instanceof EditText) {
                    if (activity != null) {
                        Thread.runAndroid(activity, new Runnable() {
                            @Override
                            public void run() {
                                viewLayout.requestFocus();
                            }
                        });
                    }
                    return true;
                } else if (viewLayout instanceof ViewGroup) {
                    try {
                        viewGroup = (ViewGroup) viewLayout;
                    } catch (Exception e) {
                        return false;
                    }
                    int childCount = viewGroup.getChildCount();
                    if (childCount == 0) return false;
                    for (int i = 0; i < childCount; i++) {
                        View childAt = viewGroup.getChildAt(i);
                        if (setEditTextRequestFocus(childAt)) {
                            return true;
                        }
                    }
                }
                return false;
            }

            //退出所有 Fragment
            public void finishs() {
                if (gt_fragment != null) {
                    gt_fragment.finishs();
                }
            }

            /**
             * 退出当前 Fragment
             */
            public void finish() {
                if (gt_fragment != null) {
                    gt_fragment.finish();
                }
            }

            /**
             * 退出当前 Fragment 并传递数据
             *
             * @param intent
             */
            public void finish(Intent intent) {
                if (gt_fragment != null) {
                    gt_fragment.finish(intent);
                }
            }

            /**
             * 退出当前 Fragment 并传递数据
             *
             * @param activity
             * @param intent
             */
            public void finish(Activity activity, Intent intent) {
                if (gt_fragment != null) {
                    gt_fragment.finish(activity, intent);
                }
            }

            /**
             * 退出当前 Fragment 并传递数据
             *
             * @param intent
             * @param requestCode
             * @param resultCode
             */
            public void finish(Intent intent, int requestCode, int resultCode, int... time) {
                if (gt_fragment != null) {
                    gt_fragment.finish(intent, requestCode, resultCode, time);
                }
            }

            /**
             * 退出当前 Fragment 并传递数据
             *
             * @param activity
             * @param intent
             * @param requestCode
             * @param resultCode
             */
            public void finish(Activity activity, Intent intent, int requestCode, int resultCode, int... time) {
                if (gt_fragment != null) {
                    gt_fragment.finish(activity, intent, requestCode, resultCode, time);
                }
            }

            @Deprecated
            public static void startView(ViewGroup viewGroup, GT_View.BaseView view) {
                viewGroup.addView(view.getView());
            }

            /**
             * @param dialogFragment
             * @跳转其他的 DialogFragment
             */
            public void startDialogFragment(DialogFragment dialogFragment) {
                dialogFragment.setTargetFragment(this, 1);
                dialogFragment.show(getFragmentManager(), dialogFragment.getClass().toString());// 弹出退出提示
            }

            /**
             * @param dialogFragment
             * @跳转其他的 DialogFragment
             */
            public void startDialogFragment(Class<?> dialogFragmentClass) {
                DialogFragment dialogFragment = null;
                try {
                    dialogFragment = (DialogFragment) dialogFragmentClass.newInstance();
                    dialogFragment.setTargetFragment(this, 1);
                    dialogFragment.show(getFragmentManager(), dialogFragment.getClass().toString());// 弹出退出提示
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                } catch (java.lang.InstantiationException e) {
                    e.printStackTrace();
                }


            }

            /**
             * @param supportFragmentManager
             * @param dialogFragment         跳转其他的
             */
            public void startDialogFragment(FragmentManager supportFragmentManager, DialogFragment dialogFragment) {
                dialogFragment.setTargetFragment(this, 1);
                dialogFragment.show(supportFragmentManager, dialogFragment.getClass().toString());// 弹出退出提示
            }


            /**
             * 启动一个Fragment
             *
             * @param fragmentObj 支持 String(className)、Class(Fragment.class),new Fragemnt(实例化对象)
             * @param resLayouts  指定启动的 Fragemnt 容器 (非必填)
             * @return
             */
            public GT_Fragment startFragment(Object fragmentObj, int... resLayouts) {
                return GT_Fragment.gt_fragment.startFragment(fragmentObj);//启动 Fragment
            }

            /**
             * 启动一个 首页 Fragment
             *
             * @param fragmentObj
             * @param <T>
             * @return
             */
            public GT_Fragment startFragmentHome(Object fragmentObj, int... resLayouts) {
                return GT_Fragment.gt_fragment.startFragmentHome(fragmentObj, resLayouts);
            }

            /**
             * 启动悬浮窗
             *
             * @param context
             * @param toFragment
             */
            public void startFloatingWindow(Context context, Class<?> toFragment, Bundle... bundles) {
                GT.startFloatingWindow(context, toFragment, bundles);
            }

            /**
             * 启动悬浮窗
             *
             * @param toFragment
             */
            public void startFloatingWindow(Context context, GT_FloatingWindow.BaseFloatingWindow floatingWindow) {
                startFloatingWindow(context, floatingWindow.getClass(), floatingWindow.getArguments());
                floatingWindow = null;
            }

            /**
             * 启动悬浮窗
             *
             * @param toFragment
             */
            public void startFloatingWindow(Class<?> toFragment, Bundle... bundles) {
                if (activity == null) {
                    activity = GT_Fragment.gt_fragment.getActivity();
                }
                if (activity != null) {
                    GT.startFloatingWindow(activity, toFragment, bundles);
                }
            }

            /**
             * 启动悬浮窗
             *
             * @param toFragment
             */
            public void startFloatingWindow(GT_FloatingWindow.BaseFloatingWindow floatingWindow) {
                startFloatingWindow(floatingWindow.getClass(), floatingWindow.getArguments());
                floatingWindow = null;
            }


            /**
             * 返回 true 则劫持返回事件
             *
             * @return
             */
            protected boolean onBackPressed() {
                return false;
            }

            /**
             * 是否监听返回操作
             *
             * @return
             */
            private boolean isBackPressed = true;

            public void setBackPressed(boolean backPressed) {
                isBackPressed = backPressed;
            }

            protected boolean isBackPressed() {
                return isBackPressed;
            }

            @Override
            public void onActivityResult(int requestCode, int resultCode, @Nullable Intent intent) {
                super.onActivityResult(requestCode, resultCode, intent);
                onResultData(requestCode, resultCode, intent);
            }

            /**
             * 反馈数据
             *
             * @param requestCode
             * @param resultCode
             * @param data
             */
            protected void onResultData(int requestCode, int resultCode, Intent intent) {

            }

            @Override
            public void onDestroy() {
                super.onDestroy();
                Object bean = putCache();
                if (bean != null) {
                    GT_Cache.putCacheData(activity.getPackageName() + getClass().getName(), bean);
                }
            }


            private static String className = "";
            private static String functionName = "";
            //选择单图片
            private ActivityResultLauncher<Intent> register = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), new ActivityResultCallback<ActivityResult>() {
                @Override
                public void onActivityResult(ActivityResult result) {
                    if (result == null) return;
                    Intent intent = result.getData();
                    if (intent == null) return;
                    if (result.getResultCode() != Activity.RESULT_OK) return;

                    //判断是否只发给特定 class
                    Class<?> aClass = null;
                    if (className == null) {
                        aClass = AnnotationAssist.stringToClass(className);
                    }

                    if (functionName == null && aClass == null) {
                        GT.EventBus.posts(result, "onActivityResult");
                    } else if (functionName != null && aClass == null) {
                        GT.EventBus.posts(result, functionName);
                    } else if (functionName == null && aClass != null) {
                        GT.EventBus.posts(result, "onActivityResult", aClass);
                    } else if (functionName != null && aClass != null) {
                        GT.EventBus.posts(result, functionName, aClass);
                    }
                }
            });

            /**
             * 选择单个图片
             *
             * @param className    当前类的 className
             * @param functionName 返回到当前类的 方法名
             */
            public void selectImage(Class classz, String functionName) {
                Intent intent = new Intent(Intent.ACTION_PICK);
                if (classz != null) {
                    this.className = classz.getName();
                }
                if (functionName != null) {
                    this.functionName = functionName;
                }
                intent.setType("image/*");     //选择全部照片
                register.launch(intent);
            }


        }

        /**
         * 封装第二代 Fragment
         */
        public abstract static class AnnotationFragment extends BaseFragment {

            //布局ID
            private int resLayout;

            public void setLayout(int resLayout) {
                this.resLayout = resLayout;
            }

            @Override
            public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
                GT.build(this);// 注解赋值布局ID值
                EventBus.getDefault().register(this);//注册订阅者
                View view = inflater.inflate(resLayout, container, false);
                createView(view);
                return view;
            }

            @Override
            protected void initView(View view, Bundle savedInstanceState) {
                GT.build(this, false);
            }

            /**
             * 内容由 ViewModel 层去提供数据 给到 View 层
             *
             * @param obj
             */
           /* public void onViewModeFeedback(Object... obj) {

            }*/
            @Override
            public void onDestroy() {
                super.onDestroy();
                Runtime.getRuntime().gc();
                EventBus.getDefault().unregister(this);//取消订阅者
                GT.EventBus.unregisterInteriors(this);//取消内部订阅者

                if (popBackStackError.contains(this.toString())) {
                    popBackStackError.remove(this.toString());
                    return;
                }
                List<Fragment> stackFragments = gt_fragment.getStackFragments();
                Collections.reverse(stackFragments);
                for (Fragment fragment : stackFragments) {
                    if (fragment.isVisible()) {
                        stackTopFragmentName = fragment.getClass().getName();
                        stackTopHashCode = fragment.toString();
                        break;
                    }
                }
            }
        }

        /**
         * 封装第三代 Fragment
         * 封装特点：
         * 1.继承上代所有优点
         * 2.获取组件可以直接无需获取，直接使用。
         *
         * @param <T>
         */
        public abstract static class DataBindingFragment extends AnnotationFragment {

        }

        //=========================================== GT_Fragment 释放资源方法 ====================================

        /**
         * 释放资源
         */
        public void close() {

            //移除 Fragment 栈中监听器
            if (fragmentManager != null && listener != null) {
                fragmentManager.removeOnBackStackChangedListener(listener);
            }

            if (activity != null) {
                activity = null;
            }

            if (fragmentNames != null) {
                fragmentNames.clear();
            }

            if (fragmentBeanList != null) {
                fragmentBeanList.clear();
            }

            if (gt_fragment != null) {
                gt_fragment = null;
            }

        }

    }

    /**
     * 对话框封装类
     */
    public static class GT_Dialog implements SaveObject.SaveBean {

        /**
         * AlertDialog.Builder 对话框类
         */
        public static class GT_AlertDialog extends AlertDialog.Builder {

            /**
             * 初始化 上下文
             *
             * @param context
             */
            public GT_AlertDialog(Context context) {
                super(context);
            }

            public interface OnGetDataListener {
                void getData(Object data);
            }

            /**
             * 设置按钮的对话框
             *
             * @param img             图标
             * @param title           标题
             * @param message         信息
             * @param btnName         第一个按钮名称
             * @param onClickListener 单击事件
             * @return 返回对话框操作对象
             */
            public AlertDialog.Builder dialogButton(int img, String title, String message, boolean isCancelable, String btnName, DialogInterface.OnClickListener onClickListener) {
                setTitle(title);
                setIcon(img);
                setMessage(message);   //设置 标题、图标、消息
                setCancelable(isCancelable);
                if (btnName != null && onClickListener != null) {
                    setNegativeButton(btnName, onClickListener);//设置单击事件
                }
                return this;
            }

            /**
             * 两个按钮对话框
             *
             * @param img              图标
             * @param title            标题
             * @param message          内容
             * @param buttonName1      左边按钮名称
             * @param onClickListener1 左边按钮单击事件
             * @param buttonName2      右边按钮名称
             * @param onClickListener2 右边按钮单击事件
             * @return
             */
            public AlertDialog.Builder dialogTwoButton(int img, String title, String message, boolean isCancelable, String buttonName1, DialogInterface.OnClickListener onClickListener1, String buttonName2, DialogInterface.OnClickListener onClickListener2) {
                setIcon(img);
                setTitle(title);
                setMessage(message);
                setCancelable(isCancelable);
                setPositiveButton(buttonName1, onClickListener1).
                        setNegativeButton(buttonName2, onClickListener2);
                return this;
            }

            /**
             * 设置列表选项对话框
             * @param img       图标
             * @param title     标题
             * @param texts     类表项
             * @return 返回对话框对象
             */
            /**
             * @param img             图标
             * @param title           标题
             * @param items           类表项
             * @param onClickListener 单击事件
             * @return
             */
            public AlertDialog.Builder dialogList(int img, String title, boolean isCancelable, final String[] items, DialogInterface.OnClickListener onClickListener) {
                setIcon(img);
                setTitle(title);
                setCancelable(isCancelable);
                if (items != null && onClickListener != null)
                    setItems(items, onClickListener); //添加列表项
                return this;
            }

            /**
             * 设置单选列表选项对话框
             *
             * @param img             图标
             * @param title           标题
             * @param item            列表项
             * @param onClickListener 单击事件
             * @return 返回对话框对象
             */
            private int checkedItemIndex = 0;

            public AlertDialog.Builder dialogSingleChoiceList(int img, String title, boolean isCancelable, String[] items, int checkedItem, String buttonName, OnGetDataListener onGetDataListener) {
                setIcon(img);
                setTitle(title);
                setCancelable(isCancelable);
                checkedItemIndex = checkedItem;
                setSingleChoiceItems(items, checkedItem,
                        new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                checkedItemIndex = which;
                            }
                        }).setPositiveButton(buttonName, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        onGetDataListener.getData(items[checkedItemIndex]);
                    }
                });
                return this;
            }

            /**
             * 设置多选列表对话框
             *
             * @param img             图标
             * @param title           标题
             * @param items           列表
             * @param onClickListener 单击事件
             * @return 返回对话框对象
             */
            private List<String> selectItemList;

            public AlertDialog.Builder dialogMultiChoice(int img, String title, boolean isCancelable, String[] items, boolean[] initChoiceSets, String buttonName, OnGetDataListener onGetDataListener) {
                if (selectItemList == null) {
                    selectItemList = new ArrayList<>();
                } else {
                    selectItemList.clear();
                }

                //初始化加入默认选项
                for (int i = 0; i < initChoiceSets.length; i++) {
                    if (initChoiceSets[i]) {
                        selectItemList.add(items[i]);
                    }
                }

                // 设置默认选中的选项，全为false默认均未选中
                setIcon(img);
                setTitle(title);
                setCancelable(isCancelable);
                setMultiChoiceItems(items, initChoiceSets,
                        new DialogInterface.OnMultiChoiceClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which, boolean isChecked) {
                                if (which != -1) {
                                    if (isChecked) {
                                        selectItemList.add(items[which]);
                                    } else {
                                        selectItemList.remove(items[which]);
                                    }
                                }
                            }
                        });
                setPositiveButton(buttonName, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        onGetDataListener.getData(selectItemList);
                    }
                });
                return this;
            }

            /**
             * 加载对话框
             *
             * @param title        加载对话框标题
             * @param message      加载对话框内容
             * @param isCancelable 单击是否可取消
             */
            public ProgressDialog progressDialog(int img, String title, String message, boolean isCancelable) {
                ProgressDialog waitingDialog = new ProgressDialog(getContext());
                waitingDialog.setIcon(img);
                waitingDialog.setTitle(title);
                waitingDialog.setMessage(message);
                waitingDialog.setIndeterminate(true);
                waitingDialog.setCancelable(isCancelable);
                return waitingDialog;
            }

            /**
             * 进度条加载框对话框
             *
             * @param title                 标题
             * @param messgae               内容
             * @param maxValue              最大值
             * @param progress              当前值/初始值
             * @param loadingSpeed          加载速度
             * @param isCancelable          中途是否可取消
             * @param onProgressBarListener 监听进度接口
             * @return
             */
            public ProgressDialog progressBarDialog(int img, String title, String messgae, int maxValue, int progress, boolean isCancelable, OnProgressBarListener onProgressBarListener) {
                ProgressDialog progressDialog = new ProgressDialog(getContext());
                progressDialog.setIcon(img);
                progressDialog.setTitle(title);
                progressDialog.setMessage(messgae);
                progressDialog.setMax(maxValue);
                progressDialog.setProgress(progress);
                progressDialog.setCancelable(isCancelable);
                progressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);

                Thread.getInstance(0).execute(new Runnable() {
                    @Override
                    public void run() {
                        boolean isStart = false;        //是否开始加载
                        int record = 0;
                        long startTime = 0;
                        long endTime = 0;
                        while (true) {
                            //开始加载
                            if (progressDialog.getProgress() != progress && !isStart) {
                                startTime = System.currentTimeMillis();
                                isStart = true;
                                onProgressBarListener.startLoad(progressDialog.getProgress(), progressDialog.getMax());
                            }
                            //加载中
                            if (isStart && record != progressDialog.getProgress()) {
                                record = progressDialog.getProgress();
                                onProgressBarListener.underwayLoad(progressDialog.getProgress());
                            }
                            //结束加载
                            if (progressDialog.getProgress() >= progressDialog.getMax()) {
                                endTime = System.currentTimeMillis();
                                onProgressBarListener.closeLoad(endTime - startTime);
                                break;
                            }
                            Thread.sleep(100);
                        }

                    }
                });


                return progressDialog;
            }

            /**
             * 进度条对话框进度监听接口
             */
            public interface OnProgressBarListener {
                /**
                 * 开始加载
                 *
                 * @param progress     当前初始值
                 * @param maxValue     目标最大值
                 * @param loadingSpeed 加载速度
                 */
                void startLoad(int progress, int maxValue);

                /**
                 * 加载中
                 *
                 * @param progress 当前进度值
                 */
                void underwayLoad(int progress);

                /**
                 * 加载完毕
                 *
                 * @param totalElapsedTime 加载总耗时间 (ms)
                 */
                void closeLoad(long totalElapsedTime);
            }


            /**
             * 输入对话框
             *
             * @param title                 标题
             * @param message               内容
             * @param isCancelable          是否可取消
             * @param buttonName            按钮名称
             * @param onGetEditTextListener 获取输入框的内容接口
             * @return
             */
            public AlertDialog.Builder inputDialog(int img, String title, String message, boolean isCancelable, String buttonName, OnGetDataListener onGetDataListener) {
                EditText editText = new EditText(getContext());
                setIcon(img);
                setTitle(title);
                setMessage(message);
                setCancelable(isCancelable);
                setView(editText);
                setPositiveButton(buttonName,
                        new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                onGetDataListener.getData(editText.getText().toString());
                            }
                        });
                return this;
            }


            /**
             * 加载自定义的 对话框 自带去掉边框
             */
            public static abstract class Loading_view extends ProgressDialog {

                public Loading_view(Context context) {
                    super(context);
                }

                public Loading_view(Context context, int theme) {
                    super(context, theme);
                }

                @Override
                protected void onCreate(Bundle savedInstanceState) {
                    super.onCreate(savedInstanceState);
                    init(getContext());
                }

                /**
                 * 加载布局
                 *
                 * @param context
                 */
                protected abstract void loadLayout(Context context);

                /**
                 * 初始化布局
                 *
                 * @return
                 */
                public abstract int initLayout();

                private void init(Context context) {
                    setCancelable(true);
                    setCanceledOnTouchOutside(false);
                    setContentView(initLayout());//loading的xml文件

                    loadLayout(context);//加载布局

                    WindowManager.LayoutParams params = getWindow().getAttributes();
                    params.width = WindowManager.LayoutParams.WRAP_CONTENT;
                    params.height = WindowManager.LayoutParams.WRAP_CONTENT;
                    getWindow().setAttributes(params);
                }

                @Override
                public void show() {//开启
                    super.show();
                }

                @Override
                public void dismiss() {//关闭
                    super.dismiss();
                }

            }

            /**
             * 自定义的 Dialog
             */
            public static class ViewDialog {

                private Dialog dialog;
                private View view;

                public Dialog getDialog() {
                    return dialog;
                }

                public View getView() {
                    return view;
                }

                /**
                 * 设置 ViewDialog 全屏 该方法需要在 show() 方法之后调用
                 *
                 * @param activity
                 * @return 用法如下：
                 * GT.GT_AlertDialog.ViewDialog viewDialog = new GT.GT_AlertDialog.ViewDialog()
                 * .initLayout(activity, R.layout.item_load, R.style.dialogNoBg, true, -1, 0, 0);
                 * viewDialog.getDialog().show();
                 * viewDialog.allWindow(activity);//放到此处
                 */
                public ViewDialog allWindow(Activity activity) {
                    WindowManager WindowManager = activity.getWindowManager();
                    Display display = WindowManager.getDefaultDisplay();
                    WindowManager.LayoutParams lp = dialog.getWindow().getAttributes();
                    lp.width = display.getWidth(); //设置宽度
                    lp.height = display.getHeight(); //设置宽度
                    dialog.getWindow().setAttributes(lp);
                    return this;
                }

                /**
                 * @param context 上下文
                 * @param layout  布局
                 * @return
                 */
                public ViewDialog initLayout(Context context, int layout) {
                    dialog = new Dialog(context);
                    view = LayoutInflater.from(context).inflate(layout, null);
                    dialog.setContentView(view);
                    return this;
                }

                /**
                 * @param context 上下文
                 * @param layout  布局
                 * @param Style   设置样式
                 * @return
                 */
                public ViewDialog initLayout(Context context, int layout, int Style) {
                    dialog = new Dialog(context);
                    dialog = new Dialog(context, Style);
                    view = LayoutInflater.from(context).inflate(layout, null);
                    dialog.setContentView(view);
                    return this;
                }

                /**
                 * @param context       上下文
                 * @param Style         样式
                 * @param clickExternal 外部是否可点击
                 * @param layout        布局
                 * @param transparency  透明度
                 * @param X             显示的 X 轴位置
                 * @param Y             显示的 Y 轴位置
                 * @return 当前类的对象
                 * <p>
                 * style 样式 参考：
                 * <style name="dialogNoBg">
                 * <item name="android:background">#00000000</item>
                 * <item name="android:WindowUtilsBackground">@android:color/transparent</item>
                 * <item name="android:WindowUtilsNoTitle">true</item>
                 * <item name="android:WindowUtilsFullscreen">true</item>
                 * <item name="android:WindowUtilsIsFloating">true</item>
                 * </style>
                 */
                public ViewDialog initLayout(Context context, int layout, int Style, boolean clickExternal, int transparency, int X, int Y) {

                    if (Style != 0)
                        dialog = new Dialog(context, Style);
                    else
                        dialog = new Dialog(context);

                    dialog.setCancelable(clickExternal);       //设置点击外面不会消失 true为点击外面可以被取消，false 为点击外面不可被取消

                    view = LayoutInflater.from(context).inflate(layout, null);
                    dialog.setContentView(view);

                    if (transparency != -1)
                        dialog.getWindow().setDimAmount(transparency);//设置昏暗度为0 则表示为透明， 如果是 -1 则是默认

                    //修改 自定义对话框的显示位置
                    Window dialogWindowUtils = dialog.getWindow();//随意定义个Dialog
                    WindowManager.LayoutParams lp = dialogWindowUtils.getAttributes();//实例化WindowUtils
                    //实例化WindowUtils操作者
                    lp.x = X; // 新位置X坐标
                    lp.y = Y; // 新位置Y坐标
                    dialogWindowUtils.setAttributes(lp);

                    return this;
                }

            }

        }

        /**
         * 用于辅助 DialogFragment
         */
        public abstract static class BaseDialogFragment extends DialogFragment implements Frame.ViewModelFeedback {

            @Override
            public void onViewModeFeedback(Object... obj) {

            }

            @NonNull
            @Override
            public ViewModelStore getViewModelStore() {
                return super.getViewModelStore();
            }

            /**
             * @NonNull
             * @Override public ViewModelStore getViewModelStore() {
             * return null;
             * }
             */


            public Activity activity;
            public GT_Fragment gt_fragment;
            public View view;
            public Window window;
            public Dialog dialog;

            //是否缓存开启数据
            protected boolean isCacheData() {
                return false;
            }

            @Override
            public void onCreate(@Nullable Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                if (setLeftAndRightFilling()) {
                    setStyle(STYLE_NO_TITLE, R.style.Dialog);
                }
            }

            @Override
            public void onStart() {
                super.onStart();
                dialog = getDialog();
                if (dialog == null) return;
                window = dialog.getWindow();
                if (window == null) return;
                //设置充满宽高
                WindowManager.LayoutParams attributes = window.getAttributes();
                attributes.gravity = getGravity();
                window.setAttributes(attributes);
                window.setLayout(setWidth(), setHeight());
                window.setWindowAnimations(setWindowAnimations());//设置打开和关闭动画
            }

            //设置显示动画与退出动画
            protected int setWindowAnimations() {
                return R.style.bottomDialogAnimation;
            }

            //设置对话框宽度
            protected int setWidth() {
                return ViewGroup.LayoutParams.MATCH_PARENT;
            }

            //设置对话框高度
            protected int setHeight() {
                return ViewGroup.LayoutParams.WRAP_CONTENT;
            }


            //设置对话框 显示位置
            protected int getGravity() {
                return Gravity.CENTER;
            }

            //设置对话框 显示位置
            protected int setGravity(int gravity) {
                return gravity;
            }

            private String cacheKey;

            @Override
            public void onAttach(Context context) {
                super.onAttach(context);
                activity = (Activity) context;
                //初始化 本地页面缓存
                if (isCacheData()) {
                    GT_Cache.initCache(activity);
                    cacheKey = activity.getPackageName() + getClass().getName();
                }
            }

            //简单缓存 存储 与 获取
            @Override
            public void getCache(String json) {

            }

            @Override
            public String putCache() {
                return null;
            }

            /**
             * 返回要加载的布局
             *
             * @return
             */
            protected int loadLayout() {
                return 0;
            }

            /**
             * 初始化 View 数据
             *
             * @param view
             * @param savedInstanceState
             */
            protected abstract void initView(View view, @Nullable Bundle savedInstanceState);

            /**
             * 主要实现的功能
             */
            public void loadData() {
            }

            /**
             * 注意： 设置左右填充,左右不留间隔
             */
            protected boolean setLeftAndRightFilling() {
                return false;
            }

            /**
             * 设置弹出对话框时是否隐藏虚拟按键
             */
            protected void setHideBottomNav() {
                if (dialog == null) return;
                if (window == null || window.getDecorView() == null) return;
                //不加FLAG_NOT_FOCUSABLE，dialog显示时就会显示虚拟按键
                window.addFlags(WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE);
                dialog.setOnShowListener(d -> {
                    //dialog显示之后，要清除FLAG_NOT_FOCUSABLE，否则不会弹出软键盘
                    window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE);
                });
                //隐藏虚拟按键
                hideBottomNavInner();
                window.getDecorView().setOnSystemUiVisibilityChangeListener(visibility -> {
                    //从后台重新进入时，要再次隐藏虚拟按键
                    hideBottomNavInner();
                });
            }

            /**
             * 隐藏虚拟按钮的帮助方法
             *
             * @param dialog
             */
            private void hideBottomNavInner() {
                View decorView = getDialog().getWindow().getDecorView();
                int vis = decorView.getSystemUiVisibility();
                vis |= View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                        | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;
                decorView.setSystemUiVisibility(vis);
            }

            /**
             * 设置隐藏背景
             */
            protected void setHideBackground() {
                getDialog().getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));// 隐藏背景
            }

            /**
             * 设置单击外部不隐藏对话框
             */
            protected void setClickExternalNoHideDialog() {
                // 设置点击外部不会取消当前对话框
                getDialog().setCanceledOnTouchOutside(false);
            }

            /**
             * 初始化 DialogFragment 必备配置
             *
             * @param isClickExternalNoHideDialog 设置单击外部不隐藏对话框 true:单击不消失 false:单击消失
             */
            protected void initDialogFragmentFunction(boolean isClickExternalNoHideDialog) {
                setHideBackground();//设置隐藏背景
                setHideBottomNav();//设置弹出对话框时是否隐藏虚拟按键
                if (isClickExternalNoHideDialog)
                    setClickExternalNoHideDialog();//设置单击外部不隐藏对话框
            }

            /**
             * 用户在初始化布局前设置必要的参数 当前方法可不重写
             *
             * @param view
             */
            public void createView(View view) {
            }

            protected View findViewById(int id) {
                if (view == null) return null;
                return view.findViewById(id);
            }

            /**
             * 关闭当前 对话框 Fragment
             */
            public void finish() {
                dismiss();
            }

            /**
             * 在关闭 Fragment 同时传递数据回去
             *
             * @param intent
             * @param <T>
             * @return
             */
            public void finish(Intent intent) {
                if (intent != null) {
                    Fragment targetFragment = getTargetFragment();//判断打开该页面的是 Activity 还是 Fragment
                    if (targetFragment != null) {
                        //向 Fragment 反馈数据
                        targetFragment.onActivityResult(1, 1, intent);
                    } else {
                        //向 Activity 反馈数据
                        //抢救一下 activity 为空的情况
                        if (activity == null) {
                            activity = requireActivity();
                            if (activity == null) {
                                activity = getActivity();//从当前Fragment 中获取Activity
                            }
                            if (activity == null) {
                                activity = gt_fragment.getActivity();//紧急情况使用 gt 内部获取Activity
                            }
                        }

                        //如果传递的值不为null 那就传递
                        if (activity != null && activity instanceof GT_Activity.BaseActivity) {
                            ((GT_Activity.BaseActivity) activity).onActivityResult(1, 1, intent);
                        } else {
                            activity.onActivityReenter(1, intent);
                        }
                    }
                }
                dismiss();
            }

            /**
             * 在关闭 Fragment 同时传递数据回去
             *
             * @param activity
             * @param intent
             * @param <T>
             * @return
             */
            public void finish(Activity activity, Intent intent) {

                if (intent != null) {
                    Fragment targetFragment = getTargetFragment();//判断打开该页面的是 Activity 还是 Fragment
                    if (targetFragment != null) {
                        //向 Fragment 反馈数据
                        targetFragment.onActivityResult(1, 1, intent);
                    } else {
                        //向 Activity 反馈数据
                        //抢救一下 activity 为空的情况
                        if (activity == null) {
                            activity = requireActivity();
                            if (activity == null) {
                                activity = getActivity();//从当前Fragment 中获取Activity
                            }
                            if (activity == null) {
                                activity = gt_fragment.getActivity();//紧急情况使用 gt 内部获取Activity
                            }
                        }
                        //如果传递的值不为null 那就传递
                        if (activity != null && activity instanceof GT_Activity.BaseActivity) {
                            ((GT_Activity.BaseActivity) activity).onActivityResult(1, 1, intent);
                        } else {
                            activity.onActivityReenter(1, intent);
                        }
                    }
                }

                dismiss();

            }

            /**
             * 在关闭 Fragment 同时传递数据回去
             *
             * @param intent
             * @param <T>
             * @return
             */
            public void finish(Intent intent, int requestCode, int resultCode) {
                if (intent != null) {
                    Fragment targetFragment = getTargetFragment();//判断打开该页面的是 Activity 还是 Fragment
                    if (targetFragment != null) {
                        //向 Fragment 反馈数据
                        targetFragment.onActivityResult(requestCode, resultCode, intent);
                    } else {
                        //向 Activity 反馈数据
                        //抢救一下 activity 为空的情况
                        if (activity == null) {
                            activity = getActivity();//从当前Fragment 中获取Activity
                            if (activity == null) {
                                activity = gt_fragment.getActivity();//紧急情况使用 gt 内部获取Activity
                            }
                        }

                        //如果传递的值不为null 那就传递
                        //如果传递的值不为null 那就传递
                        if (activity != null && activity instanceof GT_Activity.BaseActivity) {
                            ((GT_Activity.BaseActivity) activity).onActivityResult(1, 1, intent);
                        } else {
                            activity.onActivityReenter(1, intent);
                        }
                    }
                }

                dismiss();

            }

            /**
             * 在关闭 Fragment 同时传递数据回去
             *
             * @param activity
             * @param intent
             * @param <T>
             * @return
             */
            public void finish(Activity activity, Intent intent, int requestCode, int resultCode) {
                if (intent != null) {
                    Fragment targetFragment = getTargetFragment();//判断打开该页面的是 Activity 还是 Fragment
                    if (targetFragment != null) {
                        //向 Fragment 反馈数据
                        targetFragment.onActivityResult(requestCode, resultCode, intent);
                    } else {
                        //向 Activity 反馈数据
                        //抢救一下 activity 为空的情况
                        if (activity == null) {
                            activity = requireActivity();
                            if (activity == null) {
                                activity = getActivity();//从当前Fragment 中获取Activity
                            }
                            if (activity == null) {
                                activity = gt_fragment.getActivity();//紧急情况使用 gt 内部获取Activity
                            }
                        }
                        //如果传递的值不为null 那就传递
                        if (activity != null && activity instanceof GT_Activity.BaseActivity) {
                            ((GT_Activity.BaseActivity) activity).onActivityResult(1, 1, intent);
                        } else {
                            activity.onActivityReenter(1, intent);
                        }
                    }
                }

                dismiss();

            }

            public static void startView(ViewGroup viewGroup, GT_View.BaseView view) {
                viewGroup.addView(view.getView());
            }

            /**
             * @param dialogFragment
             * @跳转其他的 DialogFragment
             */
            public void startDialogFragment(DialogFragment dialogFragment) {
                dialogFragment.show(getFragmentManager(), dialogFragment.getClass().toString());// 弹出退出提示
            }

            /**
             * @param dialogFragment
             * @跳转其他的 DialogFragment
             */
            public void startDialogFragment(Class<?> dialogFragmentClass) {
                DialogFragment fragment = null;
                try {
                    fragment = (DialogFragment) dialogFragmentClass.newInstance();
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                } catch (java.lang.InstantiationException e) {
                    e.printStackTrace();
                }
                fragment.show(getFragmentManager(), fragment.getClass().toString());// 弹出退出提示
            }

            @Nullable
            @Override
            public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
                view = inflater.inflate(loadLayout(), container, false);
                createView(view);
                return view;
            }


            public GT_Fragment startFragment(Object fragmentObj, int... resLayouts) {
                return GT_Fragment.gt_fragment.startFragment(fragmentObj, resLayouts);
            }

            public GT_Fragment startFragmentHome(Object fragmentObj, int... resLayouts) {
                return GT_Fragment.gt_fragment.startFragmentHome(fragmentObj, resLayouts);
            }

            /**
             * 启动悬浮窗
             *
             * @param context
             * @param toFragment
             */
            public void startFloatingWindow(Context context, Class<?> toFragment, Bundle... bundles) {
                if (context == null) {
                    context = GT_Fragment.gt_fragment.getActivity();
                }
                if (context != null) {
                    GT.startFloatingWindow(context, toFragment, bundles);
                }

            }

            /**
             * 启动悬浮窗
             *
             * @param toFragment
             */
            public void startFloatingWindow(Context context, GT_FloatingWindow.BaseFloatingWindow floatingWindow) {
                startFloatingWindow(context, floatingWindow.getClass(), floatingWindow.getArguments());
                floatingWindow = null;
            }

            /**
             * 启动悬浮窗
             *
             * @param toFragment
             */
            public void startFloatingWindow(Class<?> toFragment, Bundle... bundles) {
                if (activity == null) {
                    activity = GT_Fragment.gt_fragment.getActivity();
                }

                if (activity != null) {
                    GT.startFloatingWindow(activity, toFragment, bundles);
                }
            }

            /**
             * 启动悬浮窗
             *
             * @param toFragment
             */
            public void startFloatingWindow(GT_FloatingWindow.BaseFloatingWindow floatingWindow) {
                startFloatingWindow(floatingWindow.getClass(), floatingWindow.getArguments());
                floatingWindow = null;
            }

            //是否解决EditText bug
            private boolean isSolveEditTextBug = true;

            public boolean isSolveEditTextBug() {
                return isSolveEditTextBug;
            }

            /**
             * 设置是否解决EditText bug
             *
             * @param solveEditTextBug
             */
            public void setSolveEditTextBug(boolean solveEditTextBug) {
                isSolveEditTextBug = solveEditTextBug;
            }

            protected void putCache(String key, Object obj) {
                if (key == null) {
                    key = activity.getPackageName() + getClass().getName();
                }
                GT_Cache.putCacheData(key, obj);
            }

            protected <T> T getCache(String key, Class<T> classz) {
                if (key == null) {
                    key = activity.getPackageName() + getClass().getName();
                }
                return GT_Cache.getCacheData(key, classz);
            }

            protected void putCacheMap(Map<String, Object> map) {
                GT_Cache.putCacheMap(map);
            }

            @Override
            public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
                super.onViewCreated(view, savedInstanceState);
                dialog = getDialog();
                if (dialog == null) return;
                window = dialog.getWindow();
                if (window == null) return;

                initView(view, savedInstanceState);// 主要方法
                getCache(GT_Cache.getCacheData(cacheKey, String.class));//获取缓存数据
                loadData();
                // 监听单击返回键无效

                dialog.setOnKeyListener(new Dialog.OnKeyListener() {

                    @Override
                    public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {
                        if (keyCode == KeyEvent.KEYCODE_BACK) {
                            return onBackPressed();
                        }
                        return false;
                    }
                });
                this.gt_fragment = GT_Fragment.gt_fragment;

                //是否解决 EditText bug
                if (isSolveEditTextBug) {
                    //给EditText 组件设置返回事件
                    Thread.getInstance(0).execute(new Runnable() {
                        @Override
                        public void run() {
                            setViewBackListener(view);
                            setEditTextRequestFocus(view);
                        }
                    });
                }
            }

            /**
             * 给EditText 组件设置返回事件
             *
             * @param viewGroup
             */
            protected void setViewBackListener(View viewLayout) {

                ViewGroup viewGroup = null;

                //如果是Edit类型的那就监听返回事件
                if (viewLayout instanceof EditText) {
                    if (activity != null)
                        Thread.runAndroid(activity, new Runnable() {
                            @Override
                            public void run() {
                                GT_Fragment.onKeyDown(viewLayout, new View.OnKeyListener() {
                                    @Override
                                    public boolean onKey(View v, int keyCode, KeyEvent event) {
                                        if (event == null) return false;
                                        if (event.getAction() == KeyEvent.ACTION_UP && keyCode == KeyEvent.KEYCODE_BACK) {
                                            return onBackPressed();// 回调按下返回键
                                        }
                                        return false;
                                    }
                                });
                            }
                        });
                    return;
                } else if (viewLayout instanceof ViewGroup) {

                    try {
                        viewGroup = (ViewGroup) viewLayout;
                    } catch (Exception e) {
//                        logs("异常返回 viewGroup:" + viewGroup.getClass());
                        return;
                    }

                    int childCount = viewGroup.getChildCount();
                    if (childCount == 0) return;

                    for (int i = 0; i < childCount; i++) {
                        View childAt = viewGroup.getChildAt(i);
                        setViewBackListener(childAt);
                    }
                }

            }

            /**
             * 设置最顶端的EditText为获取焦点
             *
             * @param viewLayout
             */
            protected boolean setEditTextRequestFocus(View viewLayout) {
                ViewGroup viewGroup = null;
                //如果是Edit类型的那就监听返回事件
                if (viewLayout instanceof EditText) {
                    if (activity != null) {
                        Thread.runAndroid(activity, new Runnable() {
                            @Override
                            public void run() {
                                viewLayout.requestFocus();
                            }
                        });
                    }
                    return true;
                } else if (viewLayout instanceof ViewGroup) {
                    try {
                        viewGroup = (ViewGroup) viewLayout;
                    } catch (Exception e) {
                        return false;
                    }
                    int childCount = viewGroup.getChildCount();
                    if (childCount == 0) return false;
                    for (int i = 0; i < childCount; i++) {
                        View childAt = viewGroup.getChildAt(i);
                        if (setEditTextRequestFocus(childAt)) {
                            return true;
                        }
                    }
                }
                return false;
            }

            /**
             * 返回 true 则劫持返回事件
             *
             * @return
             */
            protected boolean onBackPressed() {
                return false;
            }

            @Override
            public void onDestroy() {
                super.onDestroy();
                Object bean = putCache();
                if (bean != null) {
                    GT_Cache.putCacheData(cacheKey, bean);
                }
                Runtime.getRuntime().gc();
            }

            private static String className = "";
            private static String functionName = "";
            //选择单图片
            private ActivityResultLauncher<Intent> register = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), new ActivityResultCallback<ActivityResult>() {
                @Override
                public void onActivityResult(ActivityResult result) {
                    if (result == null) return;
                    Intent intent = result.getData();
                    if (intent == null) return;
                    if (result.getResultCode() != Activity.RESULT_OK) return;

                    //判断是否只发给特定 class
                    Class<?> aClass = null;
                    if (className == null) {
                        aClass = AnnotationAssist.stringToClass(className);
                    }

                    if (functionName == null && aClass == null) {
                        GT.EventBus.posts(result, "onActivityResult");
                    } else if (functionName != null && aClass == null) {
                        GT.EventBus.posts(result, functionName);
                    } else if (functionName == null && aClass != null) {
                        GT.EventBus.posts(result, "onActivityResult", aClass);
                    } else if (functionName != null && aClass != null) {
                        GT.EventBus.posts(result, functionName, aClass);
                    }
                }
            });

            /**
             * 选择单个图片
             *
             * @param className    当前类的 className
             * @param functionName 返回到当前类的 方法名
             */
            public void selectImage(Class classz, String functionName) {
                Intent intent = new Intent(Intent.ACTION_PICK);
                if (classz != null) {
                    this.className = classz.getName();
                }
                if (functionName != null) {
                    this.functionName = functionName;
                }
                intent.setType("image/*");     //选择全部照片
                register.launch(intent);
            }


        }

        /**
         * 用于辅助 DialogFragment
         */
        public abstract static class AnnotationDialogFragment extends BaseDialogFragment {
            // 布局ID
            private int resLayout;

            public void setLayout(int resLayout) {
                this.resLayout = resLayout;
            }

            @Override
            public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
                GT.build(this);// 注解赋值布局ID值
                EventBus.getDefault().register(this);//注册订阅者
                View view = inflater.inflate(resLayout, container, false);
                createView(view);
                return view;
            }


            @Override
            protected void initView(View view, @Nullable Bundle savedInstanceState) {
                GT.build(this);
            }

            @Override
            public void onDestroy() {
                super.onDestroy();
                EventBus.getDefault().unregister(this);//取消订阅者
                GT.EventBus.unregisterInteriors(this);//取消内部订阅者
            }

            /**
             * 内容由 ViewModel 层去提供
             *
             * @param obj
             */
            /*public void onViewModeFeedback(Object... obj) {

            }*/
        }

        /**
         * 封装第三代 DialogFragment
         * 封装特点：
         * 1.继承上代所有优点
         * 2.获取组件可以直接无需获取，直接使用。
         *
         * @param <T>
         */
        public abstract static class DataBindingDialogFragment extends AnnotationDialogFragment {

        }


    }

    /**
     * GT 适配器
     */
    public static class Adapters {

        /**
         * 用于旧版继承的 适配器基类
         *
         * @param <T>
         */
        public static abstract class BaseArrayAdapters<T> extends ArrayAdapter<T> implements BaseViewHolder<T> {

            private int position = 0;

            public int getPosition() {
                return position;
            }

            public BaseArrayAdapters(Context context, int resource, List<T> objects) {
                super(context, resource, objects);
            }

            /**
             * 加载布局
             *
             * @return
             */
            protected abstract int loadLayout();

            public View getView(int position, View convertView, ViewGroup parent) {
                this.position = position;
                View layout = null;
                if (convertView == null) {
                    layout = LayoutInflater.from(getContext()).inflate(loadLayout(), parent, false);
                } else {
                    layout = convertView;
                }
                initView(layout, getItem(position));
                initView(layout, getItem(position), convertView, parent);
                return layout;
            }

            protected View initView(View view, T bean) {
                function(view, bean);
                return view;
            }

            protected View initView(View view, T bean, View convertView, ViewGroup parent) {
                function(view, bean);
                return view;
            }

        }

        private static abstract interface BaseViewHolder<T> {
            void function(final View view, final T bean);
        }


        /**
         * 用于继承新版的适配器
         */
        public abstract static class BaseAdapter<T, K extends RecyclerView.ViewHolder> extends RecyclerView.Adapter<K> {

            //其余普通的参数
            public Context context;
            private List<T> beanList = new ArrayList<>();
            private LinearLayoutManager linearLayoutManager;
            public RecyclerView rv;
            private int layout = -1;//布局
            private View itemView;
            private int page = 0;
            private Bundle mArguments;

            public void setArguments(@Nullable Bundle args) {
                mArguments = args;
            }

            @Nullable
            final public Bundle getArguments() {
                return mArguments;
            }

            //瀑布流
            private boolean isFalls = false;
            private int width = 15;
            private int random = 0;


            //释放资源
            public void close() {
                if (beanList != null) {
                    beanList.clear();
                    beanList = null;
                }
                if (itemView != null) {
                    itemView = null;
                }
                if (linearLayoutManager != null) {
                    linearLayoutManager = null;
                }
                if (rv != null) {
                    rv.setAdapter(null);
                    rv = null;
                }
                if (itemView != null) {
                    itemView = null;
                }
                Runtime.getRuntime().gc();
            }

            public BaseAdapter() {
                if (this.beanList == null) this.beanList = new ArrayList<>();
            }

            public BaseAdapter(Context context) {
                this.context = context;
                if (this.beanList == null) this.beanList = new ArrayList<>();
            }

            /**
             * @param context
             * @param beanList 展示内容
             */
            @SuppressLint("NotifyDataSetChanged")
            public BaseAdapter(Context context, List<T> beanList) {
                if (this.beanList == null) this.beanList = new ArrayList<>();
                this.context = context;
                this.beanList.addAll(beanList);
                notifyDataSetChanged();
//                if(rv != null)rv.setItemViewCacheSize(getItemCount());
            }

            @SuppressLint("NotifyDataSetChanged")
            public BaseAdapter(Context context, RecyclerView rv, List<T> beanList, int layout_V_OR_H) {
                if (this.beanList == null) this.beanList = new ArrayList<>();
                this.context = context;
                this.rv = rv;
                linearLayoutManager = new LinearLayoutManager(context, layout_V_OR_H, false);
                rv.setAdapter(this);
                rv.setLayoutManager(linearLayoutManager);
                this.beanList.addAll(beanList);
                notifyDataSetChanged();
//                if(rv != null)rv.setItemViewCacheSize(getItemCount());
            }

            /**
             * @param context
             * @param rv
             * @param beanList      展示内容
             * @param layout_V_OR_H LinearLayoutManager.VERTICAL OR LinearLayoutManager.HORIZONTAL OR 瀑布流
             * @param layout        加载的布局
             */
            public BaseAdapter(Context context, RecyclerView rv, List<T> beanList, int layout_V_OR_H, int layout) {
                if (this.beanList == null) this.beanList = new ArrayList<>();
                this.context = context;
                this.rv = rv;
                if (layout != -1) {
                    this.layout = layout;
                }
                linearLayoutManager = new LinearLayoutManager(context, layout_V_OR_H, false);
                rv.setAdapter(this);
                rv.setLayoutManager(linearLayoutManager);
                this.beanList.addAll(beanList);
                notifyDataSetChanged();
//                if(rv != null)rv.setItemViewCacheSize(getItemCount());
            }

            public void startPage() {
                page = 1;
            }

            public void deletePage() {
                page--;
                if (page <= 1) page = 1;
            }

            public void addPage() {
                page++;
            }

            public void setPage(int page) {
                this.page = page;
            }

            //获取实用的
            public int getPage() {
                if (page == 0) {
                    page++;
                }
                return page;
            }

            //获取真实的
            public int getPageT() {
                return page;
            }

            public Context getContext() {
                return context;
            }

            public void setContext(Context context) {
                this.context = context;
            }

            public LinearLayoutManager getLinearLayoutManager() {
                return linearLayoutManager;
            }

            public List<T> getBeanList() {
                return beanList;
            }

            public void update() {
                notifyDataSetChanged();
            }

            private int loadMaxNumber = 10;

            public int getLoadMaxNumber() {
                return loadMaxNumber;
            }

            public void setLoadMaxNumber(int loadMaxNumber) {
                this.loadMaxNumber = loadMaxNumber;
            }

            //局部刷新
            public void setBeanList(int position) {
                if (this.beanList == null) return;
                notifyItemChanged(position);
            }

            /**
             * 用于一次性刷新加载数据 (只需要加载一次)
             *
             * @param beanList
             */
            public void setBeanList(List<T> beanList, int... pages) {
                if (beanList == null || this.beanList == null) return;
                if (pages.length > 0) {
                    page = pages[0];
                }
                switch (page) {
                    case -1://直接赋值，仅用于只需要加载一次的情况下
                        this.beanList = beanList;
                        break;
                    case 0://第一页
                        this.beanList.clear();
//                        notifyDataSetChanged();
                        this.beanList.addAll(beanList);
                        break;
                }
                notifyDataSetChanged();
//                if(rv != null)rv.setItemViewCacheSize(getItemCount());
            }

            /**
             * 用于累计刷新加载数据 (分页加载)
             *
             * @param beanList
             */
            public void setBeanLists(List<T> beanList, int... pages) {
                if (beanList == null || this.beanList == null) return;
                if (pages.length > 0) {
                    page = pages[0];
                }
                switch (page) {
                    case -1://直接赋值，仅用于只需要加载一次的情况下
                        this.beanList = beanList;
                        break;
                    case 1://第一页
                        this.beanList.clear();
//                        notifyDataSetChanged();
                        this.beanList.addAll(beanList);
                        break;
                    default://累加分页
                        if (this.beanList == null) {
                            this.beanList = beanList;
                        } else {
                            this.beanList.addAll(this.beanList.size(), beanList);
                        }
                        break;
                }
                notifyDataSetChanged();
//                if(rv != null)rv.setItemViewCacheSize(getItemCount());
            }


            /**
             * 设置垂直的布局
             *
             * @param rv
             * @return
             */
            public LinearLayoutManager setLinearLayoutManager(RecyclerView rv, LinearLayoutManager layoutManager) {
                this.rv = rv;
                setHasStableIds(true);
                rv.setAdapter(this);
                rv.setLayoutManager(layoutManager);
                return layoutManager;
            }

            /**
             * 设置垂直的布局
             *
             * @param rv
             * @return
             */
            public LinearLayoutManager setLinearLayoutManager_V(RecyclerView rv) {
                LinearLayoutManager llm = new LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false);
                this.rv = rv;
                setHasStableIds(true);
                rv.setAdapter(this);
                rv.setLayoutManager(llm);
                return llm;
            }

            /**
             * 设置水平的布局
             *
             * @param rv
             * @return
             */
            public LinearLayoutManager setLinearLayoutManager_H(RecyclerView rv) {
                LinearLayoutManager llm = new LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false);
                this.rv = rv;
                setHasStableIds(true);
                rv.setAdapter(this);
                rv.setLayoutManager(llm);
                return llm;
            }

            /**
             * 设置自定义数量的垂直布局
             *
             * @param rv
             * @param spanCount
             * @return
             */
            public StaggeredGridLayoutManager setStaggeredGridLayoutManager(RecyclerView rv, StaggeredGridLayoutManager staggeredGridLayoutManager) {
                this.rv = rv;
                setHasStableIds(true);
                rv.setAdapter(this);
                rv.setLayoutManager(staggeredGridLayoutManager);
                return staggeredGridLayoutManager;
            }

            /**
             * 设置自定义数量的垂直布局
             *
             * @param rv
             * @param spanCount
             * @return
             */
            public StaggeredGridLayoutManager setStaggeredGridLayoutManager_V(RecyclerView rv, int spanCount) {
                if (spanCount <= 0) spanCount = 1;
                this.rv = rv;
                setHasStableIds(true);
                rv.setAdapter(this);
                StaggeredGridLayoutManager staggeredGridLayoutManager = new StaggeredGridLayoutManager(spanCount, StaggeredGridLayoutManager.VERTICAL);
                rv.setLayoutManager(staggeredGridLayoutManager);
                return staggeredGridLayoutManager;
            }

            /**
             * 设置自定义数量的水平布局
             *
             * @param rv
             * @param spanCount
             * @return
             */
            public StaggeredGridLayoutManager setStaggeredGridLayoutManager_H(RecyclerView rv, int spanCount) {
                if (spanCount <= 0) spanCount = 1;
                this.rv = rv;
                setHasStableIds(true);
                rv.setAdapter(this);
                StaggeredGridLayoutManager staggeredGridLayoutManager = new StaggeredGridLayoutManager(spanCount, StaggeredGridLayoutManager.HORIZONTAL);
                rv.setLayoutManager(staggeredGridLayoutManager);
                return staggeredGridLayoutManager;
            }

            /**
             * 完全指定以 布局
             *
             * @param rv
             * @param layoutManager
             * @return
             */
            public RecyclerView.LayoutManager setRecyclerViewLayoutManager(RecyclerView rv, RecyclerView.LayoutManager layoutManager) {
                this.rv = rv;
                setHasStableIds(true);
                rv.setAdapter(this);
                rv.setLayoutManager(layoutManager);
                return layoutManager;
            }

            /**
             * 设置瀑布流
             *
             * @param rv
             * @param spanCount
             * @return
             */
            public StaggeredGridLayoutManager setFallsStream(RecyclerView rv, int spanCount, int... randomNumber) {
                if (spanCount <= 0) spanCount = 1;
                if (randomNumber.length > 0) {
                    random = randomNumber[0];
                }
                this.rv = rv;
                setHasStableIds(true);
                rv.setAdapter(this);
                StaggeredGridLayoutManager staggeredGridLayoutManager = new StaggeredGridLayoutManager(spanCount, StaggeredGridLayoutManager.VERTICAL);
                rv.setLayoutManager(staggeredGridLayoutManager);
                rv.setHasFixedSize(true);
                isFalls = true;//开启瀑布流
                return staggeredGridLayoutManager;
            }

            protected abstract K onCreateViewHolder(View itemView);

            @Override
            public K onCreateViewHolder(ViewGroup parent, int viewType) {
                if (layout == -1) {
                    layout = loadLayout();
                }
                return onCreateViewHolder(LayoutInflater.from(context).inflate(layout, parent, false));
            }


            public void getWidth(AppCompatActivity appCompatActivity) {
                WindowManager windowManager = appCompatActivity.getWindowManager();
                width = windowManager.getDefaultDisplay().getWidth();
            }

            private int measuredWidth = 0;
            private int measuredHeight = 0;

            @Override
            public void onBindViewHolder(@NonNull K holder, int position) {
                T t = beanList.get(position);
                this.itemView = holder.itemView;
                if (context == null && holder.itemView != null)
                    context = holder.itemView.getContext();
                initView(holder, holder.itemView, position, t, context);
                loadData(holder, holder.itemView, position, t, context);

                //瀑布流
                if (holder != null && holder.itemView != null && isFalls) {

                    if (measuredHeight == 0) {
                        int width = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);
                        int height = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);
                        holder.itemView.measure(width, height);
                        measuredWidth = holder.itemView.getMeasuredWidth();// 获取宽度
                        measuredHeight = holder.itemView.getMeasuredHeight();// 获取高度
                    }

                    ViewGroup.LayoutParams layoutParams = holder.itemView.getLayoutParams();
                    int height2 = GT.GT_Random.getInt(random / 8, random);
                    layoutParams.height = measuredHeight + height2;
                    holder.itemView.setLayoutParams(layoutParams);
                }
            }

            protected int loadLayout() {
                return layout;
            }

            protected void loadData(K holder, View itemView, int position, T t, Context context) {
            }

            protected abstract void initView(K holder, View itemView, int position, T t, Context context);

            @Override
            public int getItemCount() {
                return beanList == null ? 0 : beanList.size();
            }

            @Override
            public long getItemId(int position) {
                return position;
            }

            public abstract static class BaseHolder extends RecyclerView.ViewHolder {
                protected View itemView;

                public BaseHolder(@NonNull View itemView) {
                    super(itemView);
                    this.itemView = itemView;
                    GT.build(this, itemView);
                }

                protected View findViewById(int id) {
                    if (itemView == null) return null;
                    return itemView.findViewById(id);
                }

            }

        }

        /**
         * 封装第二代 Adapter
         *
         * @param <T>
         */
        public static abstract class AnnotationAdapter<T, K extends RecyclerView.ViewHolder> extends BaseAdapter<T, K> {

            public AnnotationAdapter() {

            }

            public AnnotationAdapter(Context context) {
                super(context);
                GT.build(this);
            }

            public AnnotationAdapter(Context context, List<T> beanList) {
                super(context, beanList);
                GT.build(this);
            }

            public AnnotationAdapter(Context context, RecyclerView rv, List<T> beanList, int layout_V_OR_H) {
                super(context, rv, beanList, layout_V_OR_H);
                this.rv = rv;
                GT.build(this);
            }

            public AnnotationAdapter(Context context, RecyclerView rv, List<T> beanList, int layout_V_OR_H, int layout) {
                super(context, rv, beanList, layout_V_OR_H, layout);
                this.rv = rv;
                GT.build(this);
            }

            @Override
            protected void initView(K holder, View itemView, int position, T t, Context context) {

            }

            //布局ID
            private int resLayout = -1;

            public void setLayout(int resLayout) {
                this.resLayout = resLayout;
            }

            @Override
            protected int loadLayout() {
                return resLayout;
            }


            /**
             * 内容由 ViewModel 层去提供
             *
             * @param obj
             */
            public void onViewModeFeedback(Object... obj) {

            }

        }

        /**
         * 封装第三代 Adapter
         * 封装特点：
         * 1.继承上代所有优点
         * 2.获取组件可以直接无需获取，直接使用。
         * <p>
         * 使用如下 ：注意，适配器暂不支持 ViewModel ，暂时感觉没必要支持
         *
         * @param <T>
         * @GT_DataBinding(setLayout = "item_title",setBindingType = GT_DataBinding.Adapter)
         * @GT.Annotations.GT_AnnotationAdapter(R.layout.item_title) public class DemoAdapter extends DemoAdapterBinding<DemoBean> {
         */
        public abstract static class DataBindingAdapter<T, K extends RecyclerView.ViewHolder> extends AnnotationAdapter<T, K> {

            public DataBindingAdapter() {
            }

            public DataBindingAdapter(Context context) {
                super(context);

            }

            public DataBindingAdapter(Context context, List<T> beanList) {
                super(context, beanList);
            }

            public DataBindingAdapter(Context context, RecyclerView rv, List<T> beanList, int layout_V_OR_H) {
                super(context, rv, beanList, layout_V_OR_H);
                this.rv = rv;
            }

            public DataBindingAdapter(Context context, RecyclerView rv, List<T> beanList, int layout_V_OR_H, int layout) {
                super(context, rv, beanList, layout_V_OR_H, layout);
                this.rv = rv;
            }

            @Override
            protected void initView(K holder, View itemView, int position, T t, Context context) {
                super.initView(holder, itemView, position, t, context);

            }
        }

    }

    /**
     * 封装了集合类
     */
    public static class GT_FloatingWindow implements SaveObject.SaveBean {

        /**
         * 必看事项
         * 悬浮窗需要注意以下问题：
         * 1.申请悬浮窗权限：
         * <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW" />
         *
         * 2.需要动态处理权限
         *  if (Build.VERSION.SDK_INT >= 23) {
         *                     if (!Settings.canDrawOverlays(activity)) {
         *                         Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse("package:" + getPackageName()));
         *                         startActivityForResult(intent, 0);
         *                     } else {
         *                         startService(new Intent(activity, FloatingDemo.class));
         *                     }
         *                 } else {
         *                     startService(new Intent(activity, FloatingDemo.class));
         *                 }
         *
         * 3.静态注册 <service android:name=".service.test.FloatingDemo"  android:exported="true"/>
         *
         *
         */

        /**
         * 悬浮窗基类
         */
        public abstract static class BaseFloatingWindow extends Service implements Frame.ViewModelFeedback, LifecycleOwner {

            @Override
            public void onViewModeFeedback(Object... obj) {

            }

            @NonNull
            @Override
            public ViewModelStore getViewModelStore() {
                return new ViewModelStore();
            }

            //使用观察者模式
            private LifecycleRegistry mLifecycleRegistry;

            @Override
            public Lifecycle getLifecycle() {
                //利用监听者模式，实时监听 Lifecycle 状态
                return mLifecycleRegistry;
            }

            public Context context;                           //上下活动
            private WindowManager windowManager;
            private WindowManager.LayoutParams layoutParams;
            private int width = -1;                            //屏幕宽度
            private int height = -1;                           //屏幕高度
            private View view;                                 //当前加载的布局

            protected Timer timer;                               //定时器来检测是否绑定APP
            private boolean isDrag = false;                      //是否可拖动
            private boolean isEventPenetration = false;          //是否事件穿透
            private static boolean isShow = true;                //是否显示
            private String cacheKey;//缓存标识
            final static int TYPE_SELF_ADAPTION = -1;    //自适应
            public final static int TYPE_DEFAULT = -1079;    //创建屏幕的类型,默认是使用用户设置的Xml宽高
            public final static int TYPE_PORTRAIT_SCREEN = 0;    //竖屏
            public final static int TYPE_LANDSCAPE = 1;         //横屏
            public final static int TYPE_SCREEN = 2;            //自适应半屏
            public final static int TYPE_FULL_SCREEN = 3;        //自适应全屏

            private static int TYPE_SCREEN_TYPE = TYPE_DEFAULT;          //创建屏幕的类型,默认是使用用户设置的Xml宽高

            private static double screenSizeCoefficient = 1.8;     //屏幕大小系数,系数越大，创建屏幕越小 注意：该系数不能 <= 0

            private Bundle mArguments;

            public void setArguments(@Nullable Bundle args) {
                mArguments = args;
            }

            @Nullable
            final public Bundle getArguments() {
                return mArguments;
            }

            //是否缓存开启数据
            protected boolean isCacheData() {
                return false;
            }

            public boolean isEventPenetration() {
                return isEventPenetration;
            }

            /**
             * 设置事件是否穿透(默认 不穿透)
             *
             * @param eventPenetration true:穿透  false(默认):不穿透
             */
            public void setEventPenetration(boolean eventPenetration) {
                isEventPenetration = eventPenetration;
            }

            public View findViewById(int id) {
                if (view == null) return null;
                return view.findViewById(id);
            }

            public WindowManager getWindowManager() {
                return windowManager;
            }

            public void setWindowManager(WindowManager windowManager) {
                this.windowManager = windowManager;
            }

            public WindowManager.LayoutParams getLayoutParams() {
                return layoutParams;
            }

            public void setLayoutParams(WindowManager.LayoutParams layoutParams) {
                this.layoutParams = layoutParams;
            }

            public int getWidth() {
                return width;
            }

            public void setWidth(int width) {
                this.width = width;
            }

            public int getHeight() {
                return height;
            }

            public void setHeight(int height) {
                this.height = height;
            }

            public View getView() {
                return view;
            }

            /**
             * 是否显示当前APP，需要与 setBindingApp 方法配合
             *
             * @return
             */
            public static boolean isIsShow() {
                return isShow;
            }

            /**
             * 设置是否显示,一般放在绑定的APP生命周期中
             * 注意：需要在绑定的悬浮窗中 setBindingApp 方法进行绑定才有效
             *
             * @param isShow
             */
            public static void setIsShow(boolean isShow) {
                BaseFloatingWindow.isShow = isShow;
            }

            public static double getScreenSizeCoefficient() {
                return screenSizeCoefficient;
            }

            /**
             * 屏幕大小系数,系数越大，创建屏幕越小 注意：该系数不能 <= 0
             *
             * @param screenSizeCoefficient
             */
            public static void setScreenSizeCoefficient(double screenSizeCoefficient) {
                BaseFloatingWindow.screenSizeCoefficient = screenSizeCoefficient;
            }

            public static int getTypeScreenType() {
                return TYPE_SCREEN_TYPE;
            }

            /**
             * 默认类型为用户设置的Xml布局：-1079
             * 自适应：-1
             * 竖屏：0
             * 横屏：1
             * 自适应半屏：2
             * 自适应全屏：3
             *
             * @param typeScreenType 创建屏幕类型
             */
            public static void setType_screenType(int typeScreenType) {
                BaseFloatingWindow.TYPE_SCREEN_TYPE = typeScreenType;
            }

            public boolean isDrag() {
                return isDrag;
            }

            public void setView(View view) {
                this.view = view;
            }

            /**
             * 初始化 UI,可用于设置悬浮窗的 宽高显示的位置
             * 如：
             * layoutParams.width = width;
             * layoutParams.height = height / 3;
             * layoutParams.x = 300;
             * layoutParams.y = 300;
             */
            protected abstract void initView(View view);

            /**
             * 初始化 加载布局
             */
            protected int loadLayout() {
                return 0;
            }

            /**
             * 功能方法
             *
             * @param context
             * @param view    当前加载的View
             */
            public void loadData(Context context, Intent intent, View view) {
            }


            /**
             * 是否获取焦点，获取焦点后才能进行弹出软键盘
             *
             * @param isGet
             */
            protected void setGetFocus(boolean isGet) {
                if (isGet) {
                    layoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL;
                } else {
                    layoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;
                }
                updateView();
            }

            /**
             * 更新View
             */
            protected void updateView() {
                if (windowManager == null || view == null || layoutParams == null) return;
                windowManager.updateViewLayout(view, layoutParams);
            }

            /**
             * 更新View
             */
            protected void updateView(int width, int height) {
                if (windowManager == null || view == null || layoutParams == null) return;
                layoutParams.width = width;
                layoutParams.height = height;
                windowManager.updateViewLayout(view, layoutParams);
            }

            /**
             * 更新宽高
             */
            protected void updateWidthHeight() {
                width = windowManager.getDefaultDisplay().getWidth();//获取当前屏幕宽度
                height = windowManager.getDefaultDisplay().getHeight();//获取当前屏幕高度
            }

            protected void show() {
                if (view != null) {
                    if (mLifecycleRegistry != null) {
                        mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_RESUME);
                    }
                    view.setVisibility(View.VISIBLE);
                }
            }

            protected void hide() {
                if (view != null) {
                    if (mLifecycleRegistry != null) {
                        mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_PAUSE);
                    }
                    view.setVisibility(View.GONE);
                }
            }

            //简单缓存 存储 与 获取
            @Override
            public void getCache(String json) {

            }

            @Override
            public String putCache() {
                return null;
            }

            protected void putCache(String key, Object obj) {
                if (key == null) {
                    key = context.getPackageName() + getClass().getName();
                }
                GT_Cache.putCacheData(key, obj);
            }

            protected <T> T getCache(String key, Class<T> classz) {
                if (key == null) {
                    key = context.getPackageName() + getClass().getName();
                }
                return GT_Cache.getCacheData(key, classz);
            }

            protected void putCacheMap(Map<String, Object> map) {
                GT_Cache.putCacheMap(map);
            }

            @Override
            public void onCreate() {
                super.onCreate();
                context = this;
                windowManager = (WindowManager) getSystemService(WINDOW_SERVICE);
                layoutParams = new WindowManager.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

                //默认事件不穿透
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                    layoutParams.type = WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY;
                } else {
                    layoutParams.type = WindowManager.LayoutParams.TYPE_PHONE;
                }
                layoutParams.format = PixelFormat.RGBA_8888;
                layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
                layoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;

                //如果用户没有手动设置宽高，那就默认用系统宽高
                if (width == -1 && height == -1) {
                    updateWidthHeight();//更新当前屏幕宽高
                }

                //如果是继承自注解悬浮窗，那么View会不为null
                if (view == null) {
                    view = LayoutInflater.from(this).inflate(loadLayout(), null);
                }

                setScreenSize();//智能设置屏幕大小。

                //设置监听者
                if (Build.VERSION.SDK_INT >= 19 && mLifecycleRegistry == null) {
                    mLifecycleRegistry = new LifecycleRegistry(this);
                    mLifecycleRegistry.addObserver(new LifecycleEventObserver() {
                        @Override
                        public void onStateChanged(@NonNull LifecycleOwner source, @NonNull Lifecycle.Event event) {
                            if (event == Lifecycle.Event.ON_STOP) {
                                if (view != null) {
                                    view.cancelPendingInputEvents();
                                }
                            }
                        }
                    });
                    mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE);//创建标识
                    mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);
                }

                //初始化 本地页面缓存
                if (isCacheData()) {
                    GT_Cache.initCache(context);
                    cacheKey = context.getPackageName() + getClass().getName();
                }

                //初始化View
                initView(view);
                getCache(GT_Cache.getCacheData(cacheKey, String.class));//获取缓存数据

                //可动态设置 事件是否穿透
                if (isEventPenetration) {
                    layoutParams.type = Build.VERSION.SDK_INT < Build.VERSION_CODES.O ? WindowManager.LayoutParams.TYPE_SYSTEM_ALERT : WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY;
                    layoutParams.flags =
                            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE |
                                    WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE |
                                    WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL |
                                    WindowManager.LayoutParams.FIRST_SYSTEM_WINDOW;
                }

                windowManager.addView(view, layoutParams);
            }

            /**
             * 注意：用户在xml布局中用“比重的方式”设置宽高可能会出现问题，
             * 如果使用悬浮窗自适应设置窗口大小的就不用担心bug问题
             * 推荐使用 以下方式来设置宽高
             * android:layout_width="300dp"
             * android:layout_height="500dp"
             * 或
             * layoutParams.width = 300;
             * layoutParams.height = 500;
             * 设置屏幕大小、方向
             */
            private void setScreenSize() {
                if (TYPE_SCREEN_TYPE != TYPE_DEFAULT) {
                    //自适应设置窗口大小，方向
                    switch (TYPE_SCREEN_TYPE) {
                        case TYPE_PORTRAIT_SCREEN://竖屏
                            if (width > height) {
                                layoutParams.width = (int) (width / (2 * screenSizeCoefficient));
                                layoutParams.height = (int) (height / screenSizeCoefficient);
                            } else {
                                layoutParams.width = (int) (width / screenSizeCoefficient);
                                layoutParams.height = (int) (height / screenSizeCoefficient);
                            }
                            break;

                        case TYPE_LANDSCAPE://横屏
                            if (width > height) {
                                layoutParams.width = (int) (width / screenSizeCoefficient);
                                layoutParams.height = (int) (height / screenSizeCoefficient);
                            } else {
                                layoutParams.width = (int) (width / screenSizeCoefficient);
                                layoutParams.height = (int) (height / (2 * screenSizeCoefficient));
                            }
                            break;

                        case TYPE_SCREEN://自适应半屏
                            if (width > height) {
                                layoutParams.width = (int) (width / screenSizeCoefficient);
                                layoutParams.height = height;
                            } else {
                                layoutParams.width = width;
                                layoutParams.height = (int) (height / screenSizeCoefficient);
                            }
                            break;

                        case TYPE_FULL_SCREEN://自适应全屏
                            layoutParams.width = width;
                            layoutParams.height = height;
                            break;

                        case TYPE_SELF_ADAPTION://自适应
                            layoutParams.width = (int) (width / screenSizeCoefficient);
                            layoutParams.height = (int) (height / screenSizeCoefficient);
                            break;

                        default://自适应
                            layoutParams.width = (int) (width / screenSizeCoefficient);
                            layoutParams.height = (int) (height / screenSizeCoefficient);
                            break;
                    }
                } else {
                    //默认是占屏幕一半的大小
                    layoutParams.width = (int) (width / screenSizeCoefficient);
                    layoutParams.height = (int) (height / screenSizeCoefficient);
                    view.measure(0, 0);//设置标准宽高

                    int measuredWidth = view.getMeasuredWidth();
                    int measuredHeight = view.getMeasuredHeight();

                    int w = measuredWidth - (view.getPaddingLeft() + view.getPaddingRight());
                    int h = measuredHeight - (view.getPaddingTop() + view.getPaddingBottom());

                    //设置界面宽度
                    if (w == 121 || w == 122 || w == 155 || w == 154) {
                        layoutParams.width = width;
                    } else {
                        layoutParams.width = view.getMeasuredWidth();
                    }
                    //设置界面高度
                    if (h == 66 || h == 67 || h == 85 || h == 84) {
                        layoutParams.height = height;
                    } else {
                        layoutParams.height = view.getMeasuredHeight();
                    }


                }


            }

            @Override
            public IBinder onBind(Intent intent) {
                return null;
            }

            /**
             * 设置可拖动
             */
            protected void setDrag(boolean tf) {
                if (view != null) {
                    if (tf) {
                        isDrag = true;
                        view.setOnTouchListener(new FloatingOnTouchListener());
                    } else {
                        isDrag = false;
                        view.setOnTouchListener(null);
                    }

                }
            }

            /**
             * 设置累加位置
             *
             * @param x
             * @param y
             */
            public void setLayoutParamsXY(int x, int y) {
                layoutParams.x = layoutParams.x + x;
                layoutParams.y = layoutParams.y + y;
                windowManager.updateViewLayout(view, layoutParams);
            }

            /**
             * 设置悬浮窗的绝对位置
             *
             * @param x
             * @param y
             */
            public void setXY(int x, int y) {
                layoutParams.x = x;
                layoutParams.y = y;
                windowManager.updateViewLayout(view, layoutParams);
            }

            /**
             * 注意:次方法不会销毁悬浮窗
             * 是否显示悬浮窗
             */
            protected void isShow(boolean tf) {
                Thread.runAndroid(new Runnable() {
                    @Override
                    public void run() {
                        if (tf) {
                            view.setVisibility(View.VISIBLE);
                        } else {
                            view.setVisibility(View.GONE);
                        }
                    }
                });
            }

            /**
             * 设置将绑定当前APP，如果APP不在前台那就隐藏悬浮窗
             * GT_FloatingService.isShow = true;
             *
             * @param monitoringTime 绑定检测间隔时间 毫秒
             */
            protected void setBindingApp(long monitoringTime) {
                if (timer == null) {
                    timer = new Timer();
                    timer.scheduleAtFixedRate(new TimerTask() {
                        @Override
                        public void run() {
                            if (isShow) {
                                isShow(true);
                            } else {
                                isShow(false);
                            }
                        }
                    }, 0, monitoringTime);
                }
            }

            @Override
            public int onStartCommand(Intent intent, int flags, int startId) {
                if (intent != null) {
                    mArguments = intent.getExtras();
                }
                loadData(this, intent, view);
                return super.onStartCommand(intent, flags, startId);
            }

            /**
             * 启动悬浮窗
             *
             * @param context
             * @param toFragment
             */
            public void startFloatingWindow(Context context, Class<?> toFragment, Bundle... bundles) {
                GT.startFloatingWindow(context, toFragment, bundles);
            }

            /**
             * 启动悬浮窗
             *
             * @param toFragment
             */
            public void startFloatingWindow(Context context, GT_FloatingWindow.BaseFloatingWindow floatingWindow) {
                startFloatingWindow(context, floatingWindow.getClass(), floatingWindow.getArguments());
                floatingWindow = null;
            }

            /**
             * 启动悬浮窗
             *
             * @param toFragment
             */
            public void startFloatingWindow(Class<?> toFragment, Bundle... bundles) {
                GT.startFloatingWindow(this, toFragment, bundles);
            }

            /**
             * 启动悬浮窗
             *
             * @param toFragment
             */
            public void startFloatingWindow(GT_FloatingWindow.BaseFloatingWindow floatingWindow) {
                startFloatingWindow(floatingWindow.getClass(), floatingWindow.getArguments());
                floatingWindow = null;
            }

            public static void startView(ViewGroup viewGroup, GT_View.BaseView view) {
                viewGroup.addView(view.getView());
            }

            /**
             * 退出当前 悬浮窗 并传递数据
             */
            public void finish() {

                if (mLifecycleRegistry != null) {
                    mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_STOP);
                    mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_DESTROY);
                    mLifecycleRegistry = null;
                }

                if (windowManager != null) {
                    windowManager.removeView(view);
                    windowManager = null;
                }
                onDestroy();
                stopSelf();
            }

            /**
             * 退出当前 悬浮窗 并传递数据
             *
             * @param intent
             */
            protected void finish(Intent intent) {
                if (intent != null) {
                    onDestroy();
                }
            }

            protected boolean onBackPressed() {
                return false;
            }

            /**
             * 反馈数据
             *
             * @param requestCode
             * @param resultCode
             * @param data
             */
            protected void onResultData(int requestCode, int resultCode, @Nullable Intent intent) {

            }

            @Override
            public void onDestroy() {
                super.onDestroy();
                if (timer != null) {
                    timer.cancel();
                    timer = null;
                }
                Object bean = putCache();
                if (bean != null) {
                    GT_Cache.putCacheData(cacheKey, bean);
                }
                Runtime.getRuntime().gc();
            }

            /**
             * 拖动事件
             */
            public class FloatingOnTouchListener implements View.OnTouchListener {
                private int x;
                private int y;

                @Override
                public boolean onTouch(View view, MotionEvent event) {
                    switch (event.getAction()) {
                        case MotionEvent.ACTION_DOWN:
                            x = (int) event.getRawX();
                            y = (int) event.getRawY();
                            break;
                        case MotionEvent.ACTION_MOVE:
                            int nowX = (int) event.getRawX();
                            int nowY = (int) event.getRawY();
                            int movedX = nowX - x;
                            int movedY = nowY - y;
                            x = nowX;
                            y = nowY;
                            layoutParams.x = layoutParams.x + movedX;
                            layoutParams.y = layoutParams.y + movedY;
                            windowManager.updateViewLayout(view, layoutParams);
                            break;
                        default:
                            break;
                    }
                    return true;
                }
            }
        }

        /**
         * 悬浮窗注解类
         */
        public abstract static class AnnotationFloatingWindow extends BaseFloatingWindow {


            //布局ID
            protected int resLayout;

            public void setLayout(int resLayout) {
                this.resLayout = resLayout;
            }

            @Override
            public void onCreate() {
                GT.build(this);
                EventBus.getDefault().register(this);//注册订阅者
                if (resLayout == -1) {
                    resLayout = loadLayout();
                }
                View view = LayoutInflater.from(this).inflate(resLayout, null);
                setView(view);
                super.onCreate();

            }

            @Override
            protected void initView(View view) {
                GT.build(this);
            }

            @Override
            public void onDestroy() {
                super.onDestroy();
                EventBus.getDefault().unregister(this);//取消订阅者
                GT.EventBus.unregisterInteriors(this);//取消内部订阅者
            }

        }

        /**
         * 封装第三代 FloatingWindow
         * 封装特点：
         * 1.继承上代所有优点
         * 2.获取组件可以直接无需获取，直接使用。
         *
         * @param <T>
         */
        public abstract static class DataBindingFloatingWindow extends AnnotationFloatingWindow {

        }

    }

    /**
     * 封装了 PopupWindow 集合类
     */
    public static class GT_PopupWindow implements SaveObject.SaveBean {

        //封装第一代 PopupWindow
        public static abstract class BasePopupWindow implements Frame.ViewModelFeedback, LifecycleOwner {

            @Override
            public void onViewModeFeedback(Object... obj) {

            }

            @NonNull
            @Override
            public ViewModelStore getViewModelStore() {
                return new ViewModelStore();
            }

            //使用观察者模式
            private LifecycleRegistry mLifecycleRegistry;

            @Override
            public Lifecycle getLifecycle() {
                //利用监听者模式，实时监听 Lifecycle 状态
                return mLifecycleRegistry;
            }

            private PopupWindow popWindow;
            private View view;
            protected int layout;
            public Context context;
            private String cacheKey;//缓存标识

            private Bundle mArguments;

            public void setArguments(@Nullable Bundle args) {
                mArguments = args;
            }

            @Nullable
            final public Bundle getArguments() {
                return mArguments;
            }

            //是否缓存开启数据
            protected boolean isCacheData() {
                return false;
            }

            public View getView() {
                return view;
            }

            protected void buildData() {
            }

            protected View findViewById(int id) {
                if (view == null) return null;
                return view.findViewById(id);
            }

            public int loadLayout() {
                return layout;
            }

            public BasePopupWindow() {
                if (context == null) {
                    context = GT.getActivity();
                }
                onCreate(context, mArguments);
            }

            public BasePopupWindow(Context context, Bundle bundle) {
                onCreate(context, bundle);
            }

            public BasePopupWindow(Context context) {
                onCreate(context, mArguments);
            }

            public void onCreate(Context context, Bundle bundle) {
                buildData();
                if (layout <= 0) {
                    layout = loadLayout();
                }
                if (layout <= 0) return;
                this.context = context;
                mArguments = bundle;
                view = LayoutInflater.from(context).inflate(layout, null, false);
                popWindow = new PopupWindow(view, ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT, true);

                //设置监听者
                if (Build.VERSION.SDK_INT >= 19 && mLifecycleRegistry == null) {
                    mLifecycleRegistry = new LifecycleRegistry(this);
                    mLifecycleRegistry.addObserver(new LifecycleEventObserver() {
                        @Override
                        public void onStateChanged(@NonNull LifecycleOwner source, @NonNull Lifecycle.Event event) {
                            if (event == Lifecycle.Event.ON_STOP) {
                                if (view != null) {
                                    view.cancelPendingInputEvents();
                                }
                            }
                        }
                    });
                    mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE);//创建标识
                    mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);
                }

                //初始化 本地页面缓存
                if (isCacheData()) {
                    GT_Cache.initCache(context);
                    cacheKey = context.getPackageName() + getClass().getName();
                }

                initView(view, popWindow);
                getCache(GT_Cache.getCacheData(cacheKey, String.class));//获取缓存数据
                loadData(view, popWindow);
            }

            protected void initView(View view, PopupWindow popWindow) {
                //1.构造一个PopupWindow，参数依次是加载的View，宽高
//        popWindow.showAtLocation(view, Gravity.BOTTOM, 0, 0);
                popWindow.setOutsideTouchable(false);
                popWindow.setTouchable(true);
                popWindow.setTouchInterceptor(new View.OnTouchListener() {
                    @Override
                    public boolean onTouch(View v, MotionEvent event) {
                        return onBackPressed();//党纪外面会自动消失
                    }
                });

                popWindow.setFocusable(true);
                popWindow.setBackgroundDrawable(new ColorDrawable(0x00000000));    //要为popWindow设置一个背景才有效
            }

            public void loadData(View view, PopupWindow popWindow) {
            }

            //简单缓存 存储 与 获取
            @Override
            public void getCache(String json) {

            }

            @Override
            public String putCache() {
                return null;
            }


            protected void putCache(String key, Object obj) {
                if (key == null) {
                    key = context.getPackageName() + getClass().getName();
                }
                GT_Cache.putCacheData(key, obj);
            }

            protected <T> T getCache(String key, Class<T> classz) {
                if (key == null) {
                    key = context.getPackageName() + getClass().getName();
                }
                return GT_Cache.getCacheData(key, classz);
            }

            protected void putCacheMap(Map<String, Object> map) {
                GT_Cache.putCacheMap(map);
            }

            //按下其他地方是否销毁
            public boolean onBackPressed() {
                return false;
            }

            public static void startView(ViewGroup viewGroup, GT_View.BaseView view) {
                viewGroup.addView(view.getView());
            }

            /**
             * 显示在 参照View的下方
             *
             * @param v    参照View
             * @param xyga 最多四个参数: int xoff, int yoff, int gravity, int Animation
             */
            public void showBelow(View v, int... xyga) {
                if (popWindow != null && !popWindow.isShowing()) {
                    //设置popupWindow显示的位置，参数依次是参照View，x轴的偏移量，y轴的偏移量
                    switch (xyga.length) {
                        case 1:
                            popWindow.showAsDropDown(v, xyga[0], 0);//显示
                            break;
                        case 2:
                            popWindow.showAsDropDown(v, xyga[0], xyga[1]);//显示
                            break;
                        case 3:
                            popWindow.showAsDropDown(v, xyga[0], xyga[1], xyga[2]);//显示
                            break;
                        case 4:
                            popWindow.setAnimationStyle(xyga[3]);
                            popWindow.showAsDropDown(v, xyga[0], xyga[1], xyga[2]);//显示
                            break;
                        default:
                            popWindow.showAsDropDown(v);//显示
                            break;
                    }
                    startData();
                }
            }

            /**
             * 显示在 参照View的绝对位置
             *
             * @param v
             * @param xyga 最多四个参数: int xoff, int yoff, int gravity, int Animation
             */
            public void showAbsolute(View v, int... xyga) {
                if (popWindow != null && !popWindow.isShowing()) {
                    //设置popupWindow显示的位置，参数依次是参照View，x轴的偏移量，y轴的偏移量
                    switch (xyga.length) {
                        case 1:
                            popWindow.showAtLocation(v, xyga[0], 0, 0);
                            break;
                        case 2:
                            popWindow.showAtLocation(v, xyga[0], xyga[1], 0);//显示
                            break;
                        case 3:
                            popWindow.showAtLocation(v, xyga[0], xyga[1], xyga[2]);//显示
                            break;
                        case 4:
                            popWindow.setAnimationStyle(xyga[3]);
                            popWindow.showAtLocation(v, xyga[0], xyga[1], xyga[2]);//显示
                            break;
                        default:
                            popWindow.showAtLocation(v, 0, 0, 0);//显示
                            break;
                    }
                    startData();
                }
            }

            /**
             * 显示在 参照View的绝对位置
             *
             * @param v
             * @param xyga 最多四个参数: int xoff, int yoff, int gravity, int Animation
             */
            public void startPopupWindowBelow(View v, int... xyga) {
                showBelow(v, xyga);
                startData();
            }

            /**
             * 显示在 参照View的绝对位置
             *
             * @param v
             * @param xyga 最多四个参数: int xoff, int yoff, int gravity, int Animation
             */
            public void startPopupWindowAbsolute(View v, int... xyga) {
                showAbsolute(v, xyga);
                startData();
            }

            private void startData() {
                if (mLifecycleRegistry != null) {
                    mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_RESUME);
                }
            }

            //销毁当前对象
            public void finish() {
                onDestroy();
            }

            protected void onDestroy() {
                if (mLifecycleRegistry != null) {
                    mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_PAUSE);
                    mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_STOP);
                    mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_DESTROY);
                    mLifecycleRegistry = null;
                }

                if (popWindow != null && popWindow.isShowing()) {
                    popWindow.dismiss();
                    popWindow = null;
                    view = null;
                }

                Object bean = putCache();
                if (bean != null) {
                    GT_Cache.putCacheData(cacheKey, bean);
                }

                Runtime.getRuntime().gc();
            }

        }

        //封装第二代 PopupWindow
        public static abstract class AnnotationPopupWindow extends BasePopupWindow {

            @Override
            protected void buildData() {
                GT.build(this);
            }

            public AnnotationPopupWindow() {
            }

            public AnnotationPopupWindow(Context context) {
                super(context);
            }

            public AnnotationPopupWindow(Context context, Bundle bundle) {
                super(context, bundle);
            }

            public void setLayout(int resLayout) {
                layout = resLayout;
            }

            @Override
            protected void initView(View view, PopupWindow popWindow) {
                super.initView(view, popWindow);
                GT.build(this, view);
                EventBus.getDefault().register(this);//注册订阅者
            }

            @Override
            public void finish() {
                super.finish();
                EventBus.getDefault().unregister(this);//取消订阅者
                GT.EventBus.unregisterInteriors(this);//取消内部订阅者
            }

        }

        /**
         * 封装第三代 PopupWindow
         * 封装特点：
         * 1.继承上代所有优点
         * 2.获取组件可以直接无需获取，直接使用。
         *
         * @param <T>
         */
        public abstract static class DataBindingPopupWindow extends AnnotationPopupWindow {

            public DataBindingPopupWindow() {

            }

            public DataBindingPopupWindow(Context context) {
                super(context);
            }

            public DataBindingPopupWindow(Context context, Bundle bundle) {
                super(context, bundle);
            }
        }

    }

    /**
     * 封装 GT_View
     */
    public static class GT_View implements SaveObject.SaveBean {

        /**
         * 封装第一代 View 实例View 有两种方法，2种构造方法
         */
        public static abstract class BaseView implements Frame.ViewModelFeedback, LifecycleOwner {

            @Override
            public void onViewModeFeedback(Object... obj) {

            }

            //使用观察者模式
            private LifecycleRegistry mLifecycleRegistry;

            @Override
            public Lifecycle getLifecycle() {
                //利用监听者模式，实时监听 Lifecycle 状态
                return mLifecycleRegistry;
            }

            @NonNull
            @Override
            public ViewModelStore getViewModelStore() {
                return new ViewModelStore();
            }

            private View view;
            protected int layout;
            public Context context;
            private Bundle mArguments;
            protected GT_Animation animation = GT_Animation.getDefault();

            //默认显示隐藏动画
            private int height;
            private int addHeight;
            private int width;
            private int time = 500; //默认的动画时间
            private View view_bg;
            private View view_main;

            private String cacheKey;//缓存标识

            //是否缓存开启数据
            protected boolean isCacheData() {
                return false;
            }

            public void setTime(int time) {
                this.time = time;
            }

            @Nullable
            final public Bundle getArguments() {
                return mArguments;
            }

            public void setArguments(@Nullable Bundle args) {
                mArguments = args;
            }

            /**
             * 设置隐藏背景
             */
            protected void setHideBackground(boolean isShow) {
                view_bg.setVisibility(isShow ? View.VISIBLE : View.GONE);
            }

            /**
             * 设置单击外部不隐藏对话框
             */
            protected void setClickExternalNoHideView(boolean isClickHide) {
                view_bg.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        if (isClickHide) {
                            hide();
                        }
                    }
                });

            }

            /**
             * 设置 默认的 显示 隐藏动画
             *
             * @param view_bg   布局背景
             * @param view_main 当前布局 View
             */
            public void loadAnimationView(View view_bg, View view_main) {
                this.view_bg = view_bg;
                this.view_main = view_main;
                if (view_bg != null && view_main != null) {
                    view_bg.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View view) {
                            hide();
                        }
                    });
                    view_main.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View view) {

                        }
                    });
                }
                hide();
            }

            public void setView_bg(View view_bg) {
                this.view_bg = view_bg;
            }

            public void setView_main(View view_main) {
                this.view_main = view_main;
            }

            //显示动画
            public BaseView show() {
                return show(0);
            }

            //显示动画
            public BaseView show(int... addHeight) {

                if (addHeight != null && addHeight.length != 0) {
                    this.addHeight = addHeight[0];
                }

                if (mLifecycleRegistry != null) {
                    mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_RESUME);
                }
                if (view_bg == null || view_main == null) return this;
                height = view_bg.getHeight();
                width = view_bg.getWidth();
                if (height < width) {
                    height = width;
                }
                animation.translateY_T(height, -this.addHeight, time, 1, false, view_main);
                view_bg.setVisibility(View.VISIBLE);
                Thread.getInstance(0).execute(() -> {
                    for (float a = 0; a < 1; ) {
                        if (view_bg == null) break;
                        a += 0.01;
                        Thread.sleep(1);
                        float finalA = a;
                        Thread.runAndroid(() -> {
                            if (view_bg != null) {
                                view_bg.setAlpha(finalA);
                            }
                        });
                    }
                });
                return this;
            }

            /**
             * 添加显示的高度，一般与弹出软键盘相关联
             *
             * @param addHeight
             * @return
             */
            public BaseView addShowHeight(int addHeight) {

                this.addHeight = addHeight;

                if (mLifecycleRegistry != null) {
                    mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_RESUME);
                }
                if (view_bg == null || view_main == null) return this;
                height = view_bg.getHeight();
                width = view_bg.getWidth();
                if (height < width) {
                    height = width;
                }
                animation.translateY_T(height, -addHeight, time, 1, false, view_main);
                return this;
            }

            private boolean isNoe = true;

            //隐藏动画
            public BaseView hide() {
                if (!isNoe) {
                    if (mLifecycleRegistry != null) {
                        mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_PAUSE);
                    }
                }
                isNoe = false;
                if (view_bg == null || view_main == null) return this;
                height = view_bg.getHeight();
                width = view_bg.getWidth();
                if (height == 0) {
                    animation.translateY_T(0, 3000, 0, 1, false, view_main);
                    view_bg.setAlpha(0);
                    view_bg.setVisibility(View.INVISIBLE);
                } else {
                    animation.translateY_T(-addHeight, height, time, 1, false, view_main);
                    Thread.getInstance(0).execute(() -> {
                        for (float a = 1; a > 0; ) {
                            a -= 0.01;
                            Thread.sleep(1);
                            float finalA = a;
                            Thread.runAndroid(() -> {
                                if (view_bg != null) {
                                    view_bg.setAlpha(finalA);
                                    view_bg.setVisibility(View.INVISIBLE);
                                }
                            });

                        }
                    });
                }
                return this;
            }


            public View getView() {
                return view;
            }

            public void setView(View view) {
                this.view = view;
            }

            public void setLayout(int resLayout) {
                layout = resLayout;
            }

            protected int loadLayout() {
                return 0;
            }

            protected View findViewById(int id) {
                if (view == null) return null;
                return view.findViewById(id);
            }

            protected void bingData() {
            }

            public BaseView() {
            }

            public BaseView(Context context, ViewGroup viewGroup) {
                init(context, viewGroup);
            }

            public BaseView(Context context) {
                init(context, null);
            }

            public void init(Context context, ViewGroup viewGroup) {
                if (context == null) return;
                bingData();
                this.context = context;

                if (layout <= 0) {
                    layout = loadLayout();
                }
                view = LayoutInflater.from(context).inflate(layout, null, false);

                if (mLifecycleRegistry == null) {
                    mLifecycleRegistry = new LifecycleRegistry(this);
                }

                if (mLifecycleRegistry != null && Build.VERSION.SDK_INT >= 19) {
                    mLifecycleRegistry.addObserver(new LifecycleEventObserver() {
                        @Override
                        public void onStateChanged(@NonNull LifecycleOwner source, @NonNull Lifecycle.Event event) {
                            if (event == Lifecycle.Event.ON_STOP) {
                                if (view != null) {
                                    view.cancelPendingInputEvents();
                                }
                            }
                        }
                    });
                    mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE);//创建标识
                    mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);
                }

                //初始化 本地页面缓存
                if (isCacheData()) {
                    GT_Cache.initCache(context);
                    cacheKey = context.getPackageName() + getClass().getName();
                }

                initView(view);
                getCache(GT_Cache.getCacheData(cacheKey, String.class));//获取缓存数据
                loadData(view);
                if (viewGroup != null && viewGroup instanceof ViewGroup) {
                    viewGroup.addView(view);
                }
            }

            protected void initView(View view) {
//                setViewBackListener(view);
              /*  view.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                    }
                });*/
            }


            /**
             * 给EditText 组件设置返回事件
             *
             * @param viewGroup
             */
            protected void setViewBackListener(View viewLayout) {

                ViewGroup viewGroup = null;

                //如果是Edit类型的那就监听返回事件
                if (viewLayout instanceof EditText) {
                    if (context != null)
                        Thread.runAndroid(new Runnable() {
                            @Override
                            public void run() {
                                GT_Fragment.onKeyDown(viewLayout, new View.OnKeyListener() {
                                    @Override
                                    public boolean onKey(View v, int keyCode, KeyEvent event) {
                                        if (event == null) return false;
                                        if (event.getAction() == KeyEvent.ACTION_UP && keyCode == KeyEvent.KEYCODE_BACK) {
                                            return onBackPressed();// 回调按下返回键
                                        }
                                        return false;
                                    }
                                });
                            }
                        });
                    return;
                } else if (viewLayout instanceof ViewGroup) {

                    try {
                        viewGroup = (ViewGroup) viewLayout;
                    } catch (Exception e) {
//                        logs("异常返回 viewGroup:" + viewGroup.getClass());
                        return;
                    }

                    int childCount = viewGroup.getChildCount();
                    if (childCount == 0) return;

                    for (int i = 0; i < childCount; i++) {
                        View childAt = viewGroup.getChildAt(i);
                        setViewBackListener(childAt);
                    }
                }

            }

            public void loadData(View view) {
            }

            //简单缓存 存储 与 获取
            @Override
            public void getCache(String json) {

            }

            @Override
            public String putCache() {
                return null;
            }


            protected void putCache(String key, Object obj) {
                if (key == null) {
                    key = context.getPackageName() + getClass().getName();
                }
                GT_Cache.putCacheData(key, obj);
            }

            protected <T> T getCache(String key, Class<T> classz) {
                if (key == null) {
                    key = context.getPackageName() + getClass().getName();
                }
                return GT_Cache.getCacheData(key, classz);
            }

            protected void putCacheMap(Map<String, Object> map) {
                GT_Cache.putCacheMap(map);
            }

            public Object startView(ViewGroup viewGroup) {
                Thread.runAndroid(new Runnable() {
                    @Override
                    public void run() {
                        viewGroup.addView(view);
                    }
                });
                return this;
            }

            //按下其他地方是否销毁
            public boolean onBackPressed() {
                return false;
            }

            //销毁当前对象
            public void finish() {
                hide();
                onDestroy();
            }

            protected void onDestroy() {
                try {
                    if (mLifecycleRegistry != null) {
                        mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_STOP);
                        mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_DESTROY);
                        mLifecycleRegistry = null;
                    }

                    if (view != null) {
                        ((ViewGroup) view.getParent()).removeView(view);
                        view = null;
                    }

                    Object bean = putCache();
                    if (bean != null) {
                        GT_Cache.putCacheData(cacheKey, bean);
                    }
                    Runtime.getRuntime().gc();
                } catch (Exception e) {

                }
            }

        }

        /**
         * 封装第二代 View 实现注解
         */
        public static abstract class AnnotationView extends BaseView {

            public AnnotationView() {
            }

            /**
             * 构造方法
             *
             * @param context
             */
            public AnnotationView(Context context) {
                super(context);
            }

            public AnnotationView(Context context, ViewGroup viewGroup) {
                super(context, viewGroup);
            }

            @Override
            protected void bingData() {
                super.bingData();
                GT.build(this);
            }


            @Override
            public void setLayout(int resLayout) {
                super.setLayout(resLayout);
            }

            @Override
            protected void initView(View view) {
                super.initView(view);
                GT.build(this);
                EventBus.getDefault().register(this);//注册订阅者
            }

            @Override
            public void finish() {
                super.finish();
                EventBus.getDefault().unregister(this);//取消订阅者
                GT.EventBus.unregisterInteriors(this);//取消内部订阅者
            }


            /**
             * 内容由 ViewModel 层去提供
             *
             * @param obj
             */
            /*public void onViewModeFeedback(Object... obj) {

            }*/
        }

        /**
         * 封装第三代 View
         * 封装特点：
         * 1.继承上代所有优点
         * 2.获取组件可以直接无需获取，直接使用。
         *
         * @param <T>
         */
        public abstract static class DataBindingView extends AnnotationView {

            public DataBindingView() {

            }

            public DataBindingView(Context context) {
                super(context);
            }

            public DataBindingView(Context context, ViewGroup viewGroup) {
                super(context, viewGroup);
            }
        }

    }

    /**
     * 封装 WebView
     */
    public static class GT_WebView implements SaveObject.SaveBean {

        /**
         * 封装第一代 WebView 实例 WebView 有两种方法，2种构造方法
         * <p>
         * Js 调用 Android 方法注解：
         *
         * @JavascriptInterface 权限:
         * <uses-permission android:name="android.permission.INTERNET"/>
         * <p>
         * 拦截返回键:
         * public boolean onKeyDown(int keyCode, KeyEvent event) {
         * if ((keyCode == KEYCODE_BACK) && mWebView.isBack()) {
         * mWebView.back();
         * return true;
         * }
         * return super.onKeyDown(keyCode, event);
         * }
         * <p>
         * //可以直接添加 JS 代码或动态修改 Html
         * String code = "function callAndroid3() {alert("单击成功");} callAndroid3()";
         * String code2 = "document.getElementById('button1').style.display = 'none';";
         * gtWebView.callJS(code2);
         */
        public static abstract class BaseWebView extends WebView implements Frame.ViewModelFeedback, LifecycleOwner {

            @Override
            public void onViewModeFeedback(Object... obj) {

            }

            @NonNull
            @Override
            public ViewModelStore getViewModelStore() {
                return new ViewModelStore();
            }

            //使用观察者模式
            private LifecycleRegistry mLifecycleRegistry;

            @Override
            public Lifecycle getLifecycle() {
                //利用监听者模式，实时监听 Lifecycle 状态
                return mLifecycleRegistry;
            }

            public Context context;
            protected float width, height;
            protected boolean isCache = false;//是否缓存 (默认不缓存)
            protected boolean isZoom = false;//是否缩放
            protected boolean isPC = false;//是否以PC端方式加载
            protected boolean isParseSourceCode = false;//是否解析源码
            protected boolean isAddListener = true;//是否 是否添加监听
            protected String url = "";//当前加载成功的 URL
            private boolean isResume = false;//激活WebView为活跃状态，能正常执行网页的响应
            private String title = "";//标题
            protected String jsToAndroidName = "";//js调用Android 名称
            public WebSettings webSettings;
            public static WebView webView;
            public FileView fileView;
            private String cacheKey;//缓存标识
            public String phone, PC = defaultPC;//手机或电脑动态数据
            //手机或电脑默认数据
            public static String defaultPhone = "Mozilla/5.0 (Linux; Android 14; NE2210 Build/UKQ1.230924.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/119.0.6045.66 Mobile Safari/537.36";
            public static String defaultPC = "Mozilla/5.0 (WindowUtilss NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.134 Safari/537.36";

            private Bundle mArguments;

            public void setArguments(@Nullable Bundle args) {
                mArguments = args;
            }

            @Nullable
            final public Bundle getArguments() {
                return mArguments;
            }

            public boolean isAddListener() {
                return isAddListener;
            }

            public void setAddListener(boolean addListener) {
                isAddListener = addListener;
            }

            //是否缓存开启数据
            protected boolean isCacheData() {
                return false;
            }

            public BaseWebView(@NonNull Context context) {
                super(context);
                onCreateView(context);
            }

            public BaseWebView(@NonNull Context context, ViewGroup viewGroup) {
                super(context);
                onCreateView(context);
                if (viewGroup == null) return;
                viewGroup.addView(this);
            }

            public BaseWebView(@NonNull Context context, ViewGroup viewGroup, Bundle bundle) {
                super(context);
                mArguments = bundle;
                onCreateView(context);
                if (viewGroup == null) return;
                viewGroup.addView(this);
            }

            public BaseWebView(@NonNull Context context, @Nullable AttributeSet attrs) {
                super(context, attrs);
                onCreateView(context);
            }

            public BaseWebView(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
                super(context, attrs, defStyleAttr);
                onCreateView(context);
            }

            public BaseWebView(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr, int defStyleRes) {
                super(context, attrs, defStyleAttr, defStyleRes);
                onCreateView(context);
            }

            protected void onCreateView(Context context) {
                this.context = context;
                //初始化 本地页面缓存
                if (isCacheData()) {
                    GT_Cache.initCache(context);
                    cacheKey = context.getPackageName() + getClass().getName();
                }
                webView = this;
                webSettings = getSettings();
                if (!isPC && phone == null) {//手机
                    phone = webSettings.getUserAgentString();
                }

                initView(context, this);
                getCache(GT_Cache.getCacheData(cacheKey, String.class));//获取缓存数据
                loadData(context, this);
            }

            //简单缓存 存储 与 获取
            @Override
            public void getCache(String json) {

            }

            @Override
            public String putCache() {
                return null;
            }


            protected void putCache(String key, Object obj) {
                if (key == null) {
                    key = context.getPackageName() + getClass().getName();
                }
                GT_Cache.putCacheData(key, obj);
            }

            protected <T> T getCache(String key, Class<T> classz) {
                if (key == null) {
                    key = context.getPackageName() + getClass().getName();
                }
                return GT_Cache.getCacheData(key, classz);
            }

            protected void putCacheMap(Map<String, Object> map) {
                GT_Cache.putCacheMap(map);
            }

            public WebViewUtils.OnLoadWebViewListener getOnLoadWebViewListener() {
                return onLoadWebViewListener;
            }

            public void setOnLoadWebViewListener(WebViewUtils.OnLoadWebViewListener onLoadWebViewListener) {
                this.onLoadWebViewListener = onLoadWebViewListener;
            }

            public boolean isZoom() {
                return isZoom;
            }

            public void setZoom(boolean zoom) {
                isZoom = zoom;
            }

            public boolean isCache() {
                return isCache;
            }

            public void setCache(boolean cache) {
                isCache = cache;
            }

            public boolean isParseSourceCode() {
                return isParseSourceCode;
            }

            public void setParseSourceCode(boolean parseSourceCode) {
                isParseSourceCode = parseSourceCode;
            }

            public boolean isPC() {
                return isPC;
            }

            public void setPC(boolean PC) {
                isPC = PC;
            }

            public void setWidth(float width) {
                this.width = width;
            }

            public void setHeight(float height) {
                this.height = height;
            }

            /**
             * 更新 WebView 宽高
             *
             * @param wh
             */
            public void updateUI(int... wh) {
                switch (wh.length) {
                    case 1:
                        width = wh[0];
                        break;
                    case 2:
                        width = wh[0];
                        height = wh[1];
                        break;
                }
                ViewGroup.LayoutParams layoutParams = getLayoutParams();
                if (layoutParams == null) return;
                layoutParams.width = ApplicationUtils.dip2px(context, width);
                layoutParams.height = ApplicationUtils.dip2px(context, height);
                setLayoutParams(layoutParams);
            }

            protected void initView(Context context, WebView webView) {
                //设置监听者
                if (Build.VERSION.SDK_INT >= 19 && mLifecycleRegistry == null) {
                    mLifecycleRegistry = new LifecycleRegistry(this);
                    mLifecycleRegistry.addObserver(new LifecycleEventObserver() {
                        @Override
                        public void onStateChanged(@NonNull LifecycleOwner source, @NonNull Lifecycle.Event event) {
                            if (event == Lifecycle.Event.ON_STOP) {
                                if (webView != null) {
                                    webView.cancelPendingInputEvents();
                                }
                            }
                        }
                    });
                    mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE);//创建标识
                    mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);
                }

                // 特别注意：5.1以上默认禁止了https和http混用，以下方式是开启
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                    webView.getSettings().setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);
                }

                //设置充满全部容器
                setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));

                //监听是否在最前端
                Thread.getInstance(0).execute(new Runnable() {
                    @Override
                    public void run() {
                        while (webView != null) {
                            Thread.sleep(1000);
                            if (ApplicationUtils.isFrontDesk(context)) {
                                if (isResume) continue;
                                Thread.runAndroid(new Runnable() {
                                    @Override
                                    public void run() {
                                        onResume();
                                        onStart();
                                    }
                                });
                            } else {
                                if (!isResume) continue;
                                Thread.runAndroid(new Runnable() {
                                    @Override
                                    public void run() {
                                        onPause();
                                        onStop();
                                    }
                                });
                            }
                        }

                        if (webView != null) {
                            finish();
                        }

                    }
                });


                jsToAndroidName = getClass().getName();
                jsToAndroidName = jsToAndroidName.replaceAll("\\.", "_");

                //建立 Java 与 JS 通讯桥梁
                addJavascriptInterface(this, jsToAndroidName);//AndroidtoJS类对象映射到js的test对象

                //设置背景颜色
                setBackgroundColor(85621);

                webSettings = getSettings();
            }

            public void loadData(Context context, WebView webView) {
                if (isPC) {//设置PC网
                    webView.getSettings().setUserAgentString(PC);
                    webView.requestFocusFromTouch();//支持获取手势焦点
                } else {//设置手机网
                    String userAgentString = webView.getSettings().getUserAgentString();
                    if (userAgentString != null && userAgentString == PC) {
                        if (phone == null) {
                            phone = defaultPhone;
                            userAgentString = phone;
                        }
                        webView.getSettings().setUserAgentString(userAgentString);
                    }

                }

                //设置WebView强化功能
                WebViewUtils.setWebView(context, webView, isCache, isZoom, new DownloadListener() {
                    @Override
                    public void onDownloadStart(String url, String userAgent, String contentDisposition, String mimetype, long contentLength) {
                        //设置 浏览器下载文件
                        onDownloadFile(url, userAgent, contentDisposition, mimetype, FileUtils.formetFileSize(contentLength), contentLength);
                    }
                });

                //添加监听
                if (isAddListener) {
                    WebViewUtils.addListener(this, onLoadWebViewListener);
                }

            }

            public static void setPhotoName(String photoName) {
                if (photoName == null) return;
                FileView.photoName = photoName;
            }

            public static void setPhotographName(String photographName) {
                if (photographName == null) return;
                FileView.photographName = photographName;
            }

            public static void setVideoName(String videoName) {
                if (videoName == null) return;
                FileView.videoName = videoName;
            }

            public static void setShootVideoName(String shootVideoName) {
                if (shootVideoName == null) return;
                FileView.shootVideoName = shootVideoName;
            }

            public static void setFileName(String fileName) {
                if (fileName == null) return;
                FileView.fileName = fileName;
            }

            public static void setCancelName(String cancelName) {
                if (cancelName == null) return;
                FileView.cancelName = cancelName;
            }


            public boolean isDefaultDialog = false;
            public static ValueCallback<Uri[]> valueCallback2;//安卓5.0之上适配

            //网页加载
            WebViewUtils.OnLoadWebViewListener onLoadWebViewListener = new WebViewUtils.OnLoadWebViewListener() {

                @Override
                public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback, FileChooserParams fileChooserParams) {
                    //设置 H5 调用原生 相册与拍照
                    if (fileView == null) {
                        fileView = new FileView(context, (ViewGroup) webView.getParent());
                    }
                    valueCallback2 = filePathCallback;
                    String[] acceptTypes = fileChooserParams.getAcceptTypes();
                    if (acceptTypes.length > 0) {
                        if (onShowFileChoosers(acceptTypes[0])) {
                            if (!fileView.isShow) {
                                fileView.show2();
                            }
                        } else {//如果返回的是 false 那就让自定义处理
                            return true;
                        }
                    } else {
                        filePathCallback.onReceiveValue(null);
                    }
                    return true;
                }

                @Override
                public boolean shouldOverrideUrlLoading(WebView view, String url) {
                    return shouldOverrideUrlLoad(view, url);
                }

                @Override
                public boolean onJsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result) {
                    jsPrompt(view, url, message, defaultValue, result);
                    return super.onJsPrompt(view, url, message, defaultValue, result);
                }

                @Override
                public boolean onJsConfirm(WebView view, String url, String message, JsResult result) {
                    jsConfirm(view, url, message, result);
                    return super.onJsConfirm(view, url, message, result);
                }

                @Override
                public boolean onJsAlert(WebView view, String url, String message, JsResult result) {
                    jsAlert(view, url, message, result);
                    return super.onJsAlert(view, url, message, result);
                }

                private String loadUrl = "";//仅仅用来记录是否需要重新获取网页源码

                @Override
                protected void onLoadingProgress(WebView view, int progress) {
                    super.onLoadingProgress(view, progress);
                    if (view == null) return;

                    String url = view.getUrl();
                    if (!url.equals(loadUrl)) {
                        loadUrl = url;
                        WebViewUtils.isRun = false;
                        if (isParseSourceCode) {
                            WebViewUtils.getHtmlData(url, new WebViewUtils.OnGetHtmlCodeListener() {
                                @Override
                                public void onGetStart(String url) {
                                    onFeedbackHtmlCode(0, "GetStart:" + url);
                                }

                                @Override
                                public void onGetProgress(int progress) {
                                    if (progress < 100)
                                        onFeedbackHtmlCode(progress, "GetProgress:" + url);
                                }

                                @Override
                                public void onGetClose(String url, String htmlCode, long htmlSize) {
                                    onFeedbackHtmlCode(100, htmlCode);
                                }

                                @Override
                                public void onGetError(String url, Object errorMessage) {
                                    onFeedbackHtmlCode(0, "GetError:" + errorMessage);
                                }
                            });
                        }
                    }


                    loadProgress(progress);
                    if (progress >= 100) {
                        isResume = true;
                        onStart();
                    }
                }

                @Override
                public void onPageStarted(WebView view, String url, Bitmap favicon) {
                    super.onPageStarted(view, url, favicon);
                    if (isPC) {//电脑
                        if (PC == null) {
                            PC = defaultPC;
                        }
                    } else {//手机
                        if (phone == null) {
                            phone = view.getSettings().getUserAgentString();
                        }
                    }
                    pageStarted(view, url, favicon);
                }

                @Override
                public void onPageFinished(WebView view, String url) {
                    super.onPageFinished(view, url);
                    pageFinished(view, url);

                }

                @Override
                public void onLoadResource(WebView view, String url) {
                    super.onLoadResource(view, url);
                    loadResource(view, url);
                }

                @Override
                public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {
                    super.onReceivedError(view, request, error);
                    receivedError(view, request, error);
                }

                @Override
                public void onReceivedTitle(WebView view, String title) {
                    super.onReceivedTitle(view, title);
                    receivedTitle(view, title);
                }
            };

            //回调
            public boolean onShowFileChoosers(String acceptType) {

                return true;
            }

            //返回选中的资源

            public void onFeedbackFile(Object obj) {
            }

            public void onFeedbackFile(Intent intent) {
            }

            public void onFeedbackFile(Uri uri) {

            }

            public void onFeedbackFile(Bitmap bitmap) {
            }


            //返回 H5 相片资源
            public static void initShowFileChoosers(Object data, Context... contexts) {
                Context context = null;
                if (contexts.length > 0) {
                    context = contexts[0];
                }
                if (context == null) {
                    context = GT.getActivity();
                }
                Uri uri = null;

                if (data instanceof Intent) {
                    Intent intent = (Intent) data;
                    uri = intent.getData();
                } else if (data instanceof Bitmap) {
                    Bitmap bitmap = (Bitmap) data;
                    uri = ImageViewTools.bitmapToUri(context, bitmap);
                } else if (data instanceof Uri) {
                    uri = (Uri) data;
                }

                if (valueCallback2 != null) {
                    if (data != null) {
                        Uri[] results = new Uri[]{uri};
                        valueCallback2.onReceiveValue(results);
                    } else {
                        valueCallback2.onReceiveValue(null);
                    }
                    valueCallback2 = null;
                }
            }


            //重写该方法进行接收数据
            public void readData(String json) {

            }
            //发送安卓数据给JS

            public void sendAndroidData(String json, OnListener<String>... onListeners) {
                callJS("readData('" + json + "')", onListeners);
            }
            //这个方法是给网页调用的，不是给Android 调用的

            @JavascriptInterface
            public void sendH5Data(String json) {
                readData(json);
            }

            //直接退出
            public void back(int... index) {
                if (canGoBack()) return;
                if (index.length > 0) {
                    goBackOrForward((Math.abs(index[0]) * -1));
                } else {
                    goBack();
                }
            }

            @Override
            public void addJavascriptInterface(@NonNull Object object, @NonNull String name) {
                super.addJavascriptInterface(object, name);

            }

            //是否可以后退
            public boolean isBack() {
                return canGoBack();
            }

            /**
             * 前进 WebView
             *
             * @param index
             */
            public void start(int... index) {
                if (!canGoForward()) return;
                if (index.length > 0) {
                    goBackOrForward(Math.abs(index[0]));
                } else {
                    goForward();
                }
            }

            //是否可以前进
            public boolean isStart() {
                return canGoForward();
            }

            //由于内核缓存是全局的因此这个方法不仅仅针对webview而是针对整个应用程序.
            public void clearAllWebCache() {
                clearCache(true);
            }

            //清除当前webview访问的历史记录
            public void clearWebHistory() {
                clearHistory();
            }

            //这个api仅仅清除自动完成填充的表单数据，并不会清除WebView存储到本地的数据
            public void clearWebFormData() {
                clearFormData();
            }

            //App可用时或 切换到前台时调用
            public void onStart() {

            }

            //销毁前 或 app应用在后台时调用
            public void onStop() {
                if (mLifecycleRegistry != null) {
                    mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_STOP);
                }
            }

            @Override
            public void onResume() {
                super.onResume();
                isResume = true;
                if (mLifecycleRegistry != null) {
                    mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_RESUME);
                }
            }

            @Override
            public void onPause() {
                super.onPause();
                isResume = false;
                if (mLifecycleRegistry != null) {
                    mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_PAUSE);
                }
            }

            public void startWebView(ViewGroup viewGroup) {
                viewGroup.addView(this);
            }

            @Override
            public void loadUrl(@NonNull String url) {
                if (url == null) return;
                super.loadUrl(url);
                this.url = url;
                loadDataSave();
            }

            public void clearLoadData() {
                loadUrl("");
            }

            public void loadWeb(String url) {
                loadUrl(url);
            }

            /**
             * 加载一个Asset 文件里的 html 文件
             *
             * @param webView
             * @param htmlFile 需要加上后缀名 如：test.html
             * @return
             */
            public boolean loadAsset(String htmlFile) {
                if (htmlFile == null) return false;
                this.url = htmlFile;
                loadDataSave();
                return WebViewUtils.loadAsset(this, htmlFile);
            }

            /**
             * 加载一个 SD卡里的
             *
             * @param webView
             * @param htmlFile
             * @return
             */
            public boolean loadSdCard(String htmlFile) {
                if (htmlFile == null) return false;
                this.url = htmlFile;
                loadDataSave();
                return WebViewUtils.loadSdCard(this, htmlFile);
            }

            /**
             * 加载富文本
             */
            public boolean loadHtmlCode(String htmlCode) {
                if (htmlCode == null) return false;
                this.url = htmlCode;
                loadDataSave();
                return WebViewUtils.loadHtmlCode(this, htmlCode);
            }

            /**
             * 调用 JS 方法
             *
             * @param functionName
             * @param onListeners
             */
            public void callJS(String functionName, OnListener<String>... onListeners) {
                // 因为该方法在 Android 4.4 版本才可使用，所以使用时需进行版本判断
                if (Build.VERSION.SDK_INT < 18) {
                    loadUrl("javascript:" + functionName);
                } else {
                    evaluateJavascript("javascript:" + functionName, new ValueCallback<String>() {
                        @Override
                        public void onReceiveValue(String value) {
                            if (onListeners.length > 0) {
                                onListeners[0].onListener(value);//获取js返回值
                            }
                        }
                    });
                }

            }

            /**
             * 设置网页文字大小
             *
             * @param size
             */
            public void setWebTextSize(int size) {
                if (webSettings == null) return;
                webSettings.setTextZoom(size);
            }

            //设定加载开始的操作
            public void pageStarted(WebView view, String url, Bitmap favicon) {
            }

            //加载进度
            public void loadProgress(int progress) {
            }

            //默认处理 下载文件的逻辑，自定义可重写该方法
            public void onDownloadFile(String downloadUrl, String userAgent, String contentDisposition, String mimetype, String fileSize, long contentLength) {

            }

            //反馈Html源码
            public void onFeedbackHtmlCode(int progress, String code) {
            }

            //设定加载结束的操作
            public void pageFinished(WebView view, String url) {
            }

            //设定加载资源的操作
            public void loadResource(WebView view, String url) {
            }

            //加载错误 404 时调用
            public void receivedError(WebView view, WebResourceRequest request, WebResourceError error) {
            }

            //设置标题
            public void receivedTitle(WebView view, String title) {
            }

            //设置 警告框
            public void jsAlert(WebView view, String url, String message, final JsResult result) {
            }

            //设置 确认框
            public void jsConfirm(WebView view, String url, String message, final JsResult result) {
            }

            //设置 输入框
            public void jsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result) {

            }


            /**
             * 用于获取与JS通讯的协议
             * document.location = "js://webview?arg1=111&arg2=222";
             * <p>
             * Uri uri = Uri.parse(url);
             * if ( uri.getScheme().equals("js")) {
             * if (uri.getAuthority().equals("webview")) {
             * logt("js调用了Android的方法");
             * Set<String> collection = uri.getQueryParameterNames();
             * logt("collection:" + collection);
             * }
             * return true;
             * }
             *
             * @param view
             * @param url
             * @return
             */
            public boolean shouldOverrideUrlLoad(WebView view, String url) {

                return false;
            }

            //加载数据信息保存的本地
            private void loadDataSave() {
                //防止泄露隐私
                if (url.startsWith("file://") && webSettings != null) {
                    webSettings.setAllowFileAccess(true);
                    webSettings.setAllowFileAccessFromFileURLs(false);
                    webSettings.setAllowUniversalAccessFromFileURLs(false);
                } else {
                    webSettings.setJavaScriptEnabled(true);
                }
            }

            //按下其他地方是否销毁
            public boolean onBackPressed() {
                return false;
            }

            //销毁当前对象
            public void finish() {
                try {
                    onStop();
                    removeJavascriptInterface(jsToAndroidName); //删除 JS调用对象，防止接口使用执行泄露被破解的风险
                    //先销毁 WebView
                    loadDataWithBaseURL(null, "", "text/html", "utf-8", null);
                    clearHistory();//清空缓存
                    ViewGroup parent = (ViewGroup) getParent();
                    if (parent != null) {
                        parent.removeView(this);//重父类将WebView移除
                        parent.removeAllViews();
                        parent = null;
                    }
                    destroy();//销毁WebView
                    context = null;
                    if (fileView != null) {
                        fileView.finish();
                        fileView = null;
                    }
                    onDestroy();
                } catch (Exception e) {

                }
            }

            //已销毁了WebView
            public void onDestroy() {
                if (mLifecycleRegistry != null) {
                    mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_STOP);
                    mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_DESTROY);
                    mLifecycleRegistry = null;
                }
                Object bean = putCache();
                if (bean != null) {
                    GT_Cache.putCacheData(cacheKey, bean);
                }
                Runtime.getRuntime().gc();
            }

            /**************************************** H5 侵入式开发 API **************************************/

            private StringBuilder stringBuilder;

            //清空js
            public BaseWebView beginTransaction() {
                if (stringBuilder == null) {
                    stringBuilder = new StringBuilder();
                }
                stringBuilder.delete(0, stringBuilder.length());
                return this;
            }

            //提交 js 并返回 js
            public String commit(boolean... isRun) {
                if (isRun.length > 0) {
                    if (isRun[0]) {
                        callJS(stringBuilder.toString());
                    }
                }
                return stringBuilder.toString();
            }

            /**
             * 添加自定义的 JS 代码
             *
             * @param id
             * @return
             */
            public BaseWebView addJsCode(String viewName) {
                stringBuilder.append(viewName);
                return this;
            }

            /**
             * 根据自定义的 View变量名 查找
             *
             * @param id
             * @return
             */
            public BaseWebView findViewByViewName(String viewName) {
                stringBuilder.append(" " + viewName);
                return this;
            }

            /**
             * 根据元素 ID 查找
             *
             * @param id
             * @return
             */
            public BaseWebView findViewById(String id) {
                stringBuilder.append(" document.getElementById('" + id + "')");
                return this;
            }

            /**
             * 根据元素 标签 查找 实际用法： findViewByTagName("img",0);
             *
             * @param tag   （如，<a>a标签</a> 或 <img>图片标签</img> ）
             * @param index 查找第多少位元素
             * @return
             */
            public BaseWebView findViewByTagName(String tag, int... index) {
                int number = 0;
                if (index.length > 0) {
                    number = index[0];
                }
                stringBuilder.append(" document.getElementsByTagName('" + tag + "')[" + number + "]");
                return this;
            }


            /**
             * 根据多个元素 标签 查找 实际用法： findViewByTagName("img",0);
             *
             * @param tag   （如，<a>a标签</a> 或 <img>图片标签</img> ）
             * @param index 查找第多少位元素
             * @return
             */
            public BaseWebView findViewByTagNames(String tag) {
                stringBuilder.append(" document.getElementsByTagName('" + tag + "')");
                return this;
            }


            /**
             * 根据元素 name属性 查找
             *
             * @param name  （如，name="name_a"）
             * @param index 查找第多少位元素
             * @return
             */
            public BaseWebView findViewByName(String name, int... index) {
                int number = 0;
                if (index.length > 0) {
                    number = index[0];
                }
                stringBuilder.append(" document.getElementsByName('" + name + "')[" + number + "]");
                return this;
            }


            /**
             * 根据多个元素 name属性 查找
             *
             * @param name  （如，name="name_a"）
             * @param index 查找第多少位元素
             * @return
             */
            public BaseWebView findViewByNames(String name) {
                stringBuilder.append(" document.getElementsByName('" + name + "')");
                return this;
            }


            /**
             * 根据元素 className属性 查找
             *
             * @param className
             * @param index     查找第多少位元素
             * @return
             */
            public BaseWebView findViewByClassName(String className, int... index) {
                int number = 0;
                if (index.length > 0) {
                    number = index[0];
                }
                stringBuilder.append(" document.getElementsByClassName('" + className + "')[" + number + "]");
                return this;
            }


            /**
             * 根据多个元素 className属性 查找
             *
             * @param className
             * @return
             */
            public BaseWebView findViewByClassNames(String className) {
                stringBuilder.append(" document.getElementsByClassName('" + className + "')");
                return this;
            }


            //其他简便 JS API

            /**
             * 设置新文本内容
             *
             * @param text
             * @return
             */
            public BaseWebView setText(String text) {
                stringBuilder.append(".innerHTML='" + text + "'; ");
                return this;
            }

            /**
             * 设置文字大小
             *
             * @param dp
             * @return
             */
            public BaseWebView setTextSize(int dp) {
                stringBuilder.append(".style.fontSize='" + dp + "'; ");
                return this;
            }

            /**
             * 设置文字颜色
             *
             * @param color (例如:red)
             * @return
             */
            public BaseWebView setTextColor(String color) {
                stringBuilder.append(".style.color='" + color + "'; ");
                return this;
            }

            /**
             * 设置 元素 隐藏
             *
             * @return
             */
            public BaseWebView setHide() {
                stringBuilder.append(".style.display='" + "none" + "'; ");
                return this;
            }

            /**
             * 设置 元素 显示
             *
             * @return
             */
            public BaseWebView setShow() {
                stringBuilder.append(".style.display='" + "block" + "'; ");
                return this;
            }

            /**
             * 设置 元素 显示或隐藏
             *
             * @param tf
             * @param data 设置自定义值
             * @return
             */
            public BaseWebView setShowOrHide(boolean tf, String... data) {
                if (data.length > 0) {
                    stringBuilder.append(".style.display='" + data[0] + "';");
                } else {
                    stringBuilder.append(".style.display='" + (tf ? "none" : "block") + "'; ");
                }
                return this;
            }

            //提供给侵入式单击事件功能
            private OnListener onClickListener;

            @JavascriptInterface
            public void onClickListener(String json) {
                onClickListener.onListener(json);
            }

            /**
             * 设置 监听Html按钮 单击事件
             *
             * @return
             */
            public BaseWebView setOnClickListener(OnListener onClickListener) {
                this.onClickListener = onClickListener;
                stringBuilder.append(".onclick = function(){ " + jsToAndroidName + ".onClickListener(''); }; ");
                return this;
            }

            /**
             * 设置单击后触发的方法
             *
             * @return
             */
            public BaseWebView setOnClickFunction(String functionName) {
                stringBuilder.append(".onclick = function(){ " + functionName + " }; ");
                return this;
            }

            /**
             * 设置单击后触发安卓方法(切记 安卓方法需要加上 @JavascriptInterface 注解)
             *
             * @return
             */
            public BaseWebView setOnClickAndroidFunction(String functionName) {
                stringBuilder.append(".onclick = function(){ " + jsToAndroidName + "." + functionName + " }; ");
                return this;
            }

            /**
             * 设置 单击跳转链接
             *
             * @param url       设置跳转链接
             * @param isNewPage 设置是否新开一个页面去跳转链接
             * @return
             */
            public BaseWebView setOnClickLink(String url) {
                stringBuilder.append(".setAttribute('href', '" + url + "'); ");
                return this;
            }

            /**
             * 设置 自动点击 元素
             *
             * @return
             */
            public BaseWebView setOnPerformClick() {
                stringBuilder.append(".click(); ");
                return this;
            }

            /**
             * 设置 html 标题
             *
             * @return
             */
            public BaseWebView setTitle(String title) {
                stringBuilder.append(".document.title='" + title + "'; ");
                return this;
            }


            /**
             * 设置新图片地址
             *
             * @param urlImg
             * @return
             */
            public BaseWebView setImgUrl(String urlImg) {
                stringBuilder.append(".src='" + urlImg + "'; ");
                return this;
            }

            /**
             * 创建一个新的 元素
             *
             * @param view (例如: h1)
             * @return
             */
            public String newView(String viewName, String view) {
                return " var " + viewName + " = document.createElement('" + view + "'); ";
            }

            /**
             * 创建一个新的 元素
             *
             * @param text 文本内容
             * @return
             */
            public String newTextView(String viewName, String text) {
                return " var " + viewName + " = document.createTextNode('" + text + "'); ";
            }

            /**
             * 创建一个新的图片 元素
             *
             * @param imgUrl 设置图片资源 (可选项)
             * @return
             */
            public BaseWebView newImgView(String viewName, String... imgUrl) {
                String img = null;
                if (imgUrl.length > 0) {
                    img = imgUrl[0];
                }
                if (img == null) {
                    stringBuilder.append(" var " + viewName + " = document.createElement('img'); ");
                } else {
                    stringBuilder.append(" var " + viewName + " = document.createElement('img'); " + viewName + ".src='" + img + "'; ");
                }
                return this;
            }

            /**
             * 添加一个元素到 另外一个元素 中
             *
             * @param viewGroup
             * @param viewName
             * @return
             */
            public BaseWebView addViewToViewGroup(String viewGroupName, String viewName) {
                stringBuilder.append(viewGroupName + ".appendChild(" + viewName + ");");
                return this;
            }

            /**
             * 添加一个元素到 另外一个元素 中
             *
             * @param viewName
             * @return
             */
            public BaseWebView addView(String viewName) {
                stringBuilder.append(".appendChild(" + viewName + "); ");
                return this;
            }

            /**
             * 添加一个元素到 body 中
             *
             * @param view (例如: newView("h1"))
             * @return
             */
            public BaseWebView addBodyView(String viewName) {
                stringBuilder.append(" document.body.appendChild(" + viewName + "); ");
                return this;
            }


            /**

             <html>
             <head>
             <meta charset="utf-8">
             <title>交互信息</title>

             <script>


             function getView(){

             //寻找元素方法
             //document.getElementById('id_a').style.display = 'none'
             //document.getElementsByTagName("a")[0].style.display = 'none'
             //document.getElementsByName("name_a")[0].style.display = 'none'
             //document.getElementsByClassName("class_a")[0].style.display = 'none'

             //document.getElementsByTagName('span')[0].innerHTML="码龄99年";//设置新文本
             //document.getElementById('id_a').style.fontSize= '100px';//设置字体大小
             //document.getElementById('id_a').style.color= 'red';//设置字体颜色
             //document.getElementById('id_a').style.display = 'none'//隐藏
             //document.getElementById('id_a').style.display = 'block'//显示
             //document.getElementById('id_a').onclick = function(){ alert("单击成功") };
             //document.getElementsByTagName("img")[0].src="https://profile.csdnimg.cn/7/5/9/1_qq_39799899"//设置新图片
             //document.createElement("h1")//创建新的元素点
             //document.body.appendChild(h1);//在 body 上添加元素
             //var t = document.createTextNode("键盘输入(JS纯净版)"); document.getElementById('id_a').appendChild(t);//添加新的文字进入
             //document.title = '我的标题'//设置标题

             //document.getElementById('id_a').onclick = function(){ alert("单击成功") };


             <!--
             //1.设置新文本、颜色、字体大小
             //2.隐藏/显示
             //3.设置单击事件
             //4.设置新图片
             //5.创建新的元素节点//添加
             //6.设置元素单击新链接
             //7.
             -->

             }

             </script>

             </head>

             <body>
             <div id="id_div" title="已加入 CSDN 5年" class="person-code-age" style="background-color:#C7E9FD;color:#1E68D8;" data-v-d1dbb6f8="">
             <img src="https://img-home.csdnimg.cn/images/20210108035952.gif" alt="" data-v-d1dbb6f8="">
             <span data-v-d1dbb6f8="">码龄100年</span>
             </div> </br>

             <a id="id_a" class="class_a" name="name_a" >A</a>

             <button onclick="getView()">获取</button></br>
             </body>
             </html>


             */


        }

        /**
         * 封装第二代 WebView 实现注解
         */
        public static abstract class AnnotationWebView extends BaseWebView {

            public AnnotationWebView(@NonNull Context context) {
                super(context);
            }

            public AnnotationWebView(@NonNull Context context, ViewGroup viewGroup) {
                super(context, viewGroup);
            }

            public AnnotationWebView(@NonNull Context context, ViewGroup viewGroup, Bundle bundle) {
                super(context, viewGroup, bundle);
            }

            public AnnotationWebView(@NonNull Context context, @Nullable AttributeSet attrs) {
                super(context, attrs);
            }

            public AnnotationWebView(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
                super(context, attrs, defStyleAttr);
            }

            public AnnotationWebView(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr, int defStyleRes) {
                super(context, attrs, defStyleAttr, defStyleRes);
            }

            protected void initView(Context context, WebView webView) {
                super.initView(context, webView);
                EventBus.getDefault().register(this);//注册订阅者
            }

            @Override
            public void finish() {
                super.finish();
                EventBus.getDefault().unregister(this);//取消订阅者
                GT.EventBus.unregisterInteriors(this);//取消内部订阅者
            }


            /**
             * 内容由 ViewModel 层去提供
             *
             * @param obj
             */
            public void onViewModeFeedback(Object... obj) {

            }
        }

        /**
         * 封装第三代 WebView
         * 封装特点：
         * 1.继承上代所有优点
         * 2.获取组件可以直接无需获取，直接使用。
         *
         * @param <T>
         */
        public abstract static class DataBindingWebView extends AnnotationWebView {


            public DataBindingWebView(@NonNull Context context) {
                super(context);
            }

            public DataBindingWebView(@NonNull Context context, ViewGroup viewGroup) {
                super(context, viewGroup);
            }

            public DataBindingWebView(@NonNull Context context, ViewGroup viewGroup, Bundle bundle) {
                super(context, viewGroup, bundle);
            }

            public DataBindingWebView(@NonNull Context context, @Nullable AttributeSet attrs) {
                super(context, attrs);
            }

            public DataBindingWebView(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
                super(context, attrs, defStyleAttr);
            }

            public DataBindingWebView(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr, int defStyleRes) {
                super(context, attrs, defStyleAttr, defStyleRes);
            }
        }


        /************************ Web 调用安卓 获取文件、拍摄相册工具类 ******************************/

        public static class FileView extends GT_View.AnnotationView implements View.OnClickListener {
            private int height;

            private View ll_bottom1;
            private View view_bg;
            private Button btn_cancel;
            private TextView tv_img;
            private TextView tv_photo;
            private TextView tv_video;
            private TextView tv_shoot_video;
            private TextView tv_file;

            private boolean isShow = false;

            private String feedbackMethodName = "onFeedbackFile";//反馈方法名称

            //支持自定义 按钮名称
            private static String photoName = "";
            private static String photographName = "";
            private static String videoName = "";
            private static String shootVideoName = "";
            private static String fileName = "";

            private static String cancelName = "";

            public String getFeedbackMethodName() {
                return feedbackMethodName;
            }

            public void setFeedbackMethodName(String feedbackMethodName) {
                this.feedbackMethodName = feedbackMethodName;
            }

            @Override
            protected int loadLayout() {
                return R.layout.view_file;
            }

            public FileView(Context context, ViewGroup viewGroup, String... feedbackMethodNames) {
                super(context, viewGroup);
                if (feedbackMethodNames.length > 0) {
                    feedbackMethodName = feedbackMethodNames[0];
                }
            }

            @Override
            protected void initView(View view) {
                super.initView(view);
                ll_bottom1 = findViewById(R.id.ll_bottom1);
                ll_bottom1.setOnClickListener(null);
                view_bg = findViewById(R.id.view_bg);
                btn_cancel = (Button) findViewById(R.id.btn_cancel);

                tv_img = (TextView) findViewById(R.id.tv_img);
                tv_photo = (TextView) findViewById(R.id.tv_photo);
                tv_video = (TextView) findViewById(R.id.tv_video);
                tv_shoot_video = (TextView) findViewById(R.id.tv_shoot_video);
                tv_file = (TextView) findViewById(R.id.tv_file);

                tv_img.setOnClickListener(this);
                tv_photo.setOnClickListener(this);
                tv_video.setOnClickListener(this);
                tv_shoot_video.setOnClickListener(this);
                tv_file.setOnClickListener(this);
                btn_cancel.setOnClickListener(this);
                view_bg.setOnClickListener(this);

                hide();
            }

            @Override
            public void onClick(View view) {
                if (view.getId() == R.id.tv_photo) {//拍照
                    GTActivity.startActivity(context, GTActivity.CODE_PHOTOGRAPH, feedbackMethodName);
                    hide();
                } else if (view.getId() == R.id.tv_img) {//从相册里选择
                    GTActivity.startActivity(context, GTActivity.CODE_PHOTO, feedbackMethodName);
                    hide();
                } else if (view.getId() == R.id.tv_video) {//视频
                    GTActivity.startActivity(context, GTActivity.CODE_VIDEO, feedbackMethodName);
                    hide();
                } else if (view.getId() == R.id.tv_shoot_video) {//拍摄视频
                    GTActivity.startActivity(context, GTActivity.CODE_SHOOT_VIDEO, feedbackMethodName);
                    hide();
                } else if (view.getId() == R.id.tv_file) {//上传文件
                    GTActivity.startActivity(context, GTActivity.CODE_FILE, feedbackMethodName);
                    hide();
                } else if (view.getId() == R.id.btn_cancel || view.getId() == R.id.view_bg) {//取消
                    BaseWebView.valueCallback2.onReceiveValue(null);
                    hide();
                } else {

                }
            }

            public void show2(String... feedbackMethodNames) {

                //默认显示全部选项
                if (
                        photographName.length() != 0 || photoName.length() != 0 ||
                                shootVideoName.length() != 0 || videoName.length() != 0 ||
                                fileName.length() != 0 || cancelName.length() != 0
                ) {
                    if (photographName.length() != 0) {
                        tv_photo.setText(photographName);
                        tv_photo.setVisibility(View.VISIBLE);
                    } else {
                        tv_photo.setVisibility(View.GONE);
                    }

                    if (photoName.length() != 0) {
                        tv_img.setText(photoName);
                        tv_img.setVisibility(View.VISIBLE);
                    } else {
                        tv_img.setVisibility(View.GONE);
                    }

                    if (shootVideoName.length() != 0) {
                        tv_shoot_video.setText(shootVideoName);
                        tv_shoot_video.setVisibility(View.VISIBLE);
                    } else {
                        tv_shoot_video.setVisibility(View.GONE);
                    }

                    if (videoName.length() != 0) {
                        tv_video.setText(videoName);
                        tv_video.setVisibility(View.VISIBLE);
                    } else {
                        tv_video.setVisibility(View.GONE);
                    }

                    if (fileName.length() != 0) {
                        tv_file.setText(fileName);
                        tv_file.setVisibility(View.VISIBLE);
                    } else {
                        tv_file.setVisibility(View.GONE);
                    }

                    if (cancelName.length() != 0) {
                        btn_cancel.setText(cancelName);
                    } else {
                        btn_cancel.setText(Res.string(context, R.string.gt_string_cancel));
                    }
                }

                show(feedbackMethodNames);
            }

            //显示动画
            public void show(String... feedbackMethodNames) {
                isShow = true;
                if (feedbackMethodNames.length > 0) {
                    feedbackMethodName = feedbackMethodNames[0];
                }
                height = view_bg.getHeight();
                view_bg.setVisibility(View.VISIBLE);
                GT_Animation.getDefault().translateY_T(height, 0, 300, 1, false, ll_bottom1);
                GT_Animation.getDefault().translateY_T(height, 0, 300, 1, false, btn_cancel);
                Thread.getInstance(0).execute(() -> {
                    for (float a = 0; a < 1; ) {
                        if (view_bg == null) break;
                        a += 0.01;
                        Thread.sleep(1);
                        float finalA = a;
                        Thread.runAndroid(() -> {
                            if (view_bg != null) {
                                view_bg.setAlpha(finalA);
                            }
                        });
                    }
                });


            }

            //隐藏动画
            @Override
            public GT_View.BaseView hide() {
                isShow = false;
                height = view_bg.getHeight();
                if (height == 0) {
                    GT_Animation.getDefault().translateY_T(0, 3000, 1, 1, false, ll_bottom1);
                    GT_Animation.getDefault().translateY_T(0, 3000, 1, 1, false, btn_cancel);
                    view_bg.setAlpha(0);
                    view_bg.setVisibility(View.INVISIBLE);
                } else {
                    GT_Animation.getDefault().translateY_T(0, height, 300, 1, false, ll_bottom1);
                    GT_Animation.getDefault().translateY_T(0, height, 300, 1, false, btn_cancel);
                    Thread.getInstance(0).execute(() -> {
                        for (float a = 1; a > 0; ) {
                            a -= 0.01;
                            Thread.sleep(1);
                            float finalA = a;
                            Thread.runAndroid(() -> {
                                if (view_bg != null) {
                                    view_bg.setAlpha(finalA);
                                    view_bg.setVisibility(View.INVISIBLE);
                                }
                            });

                        }
                    });
                }
                return this;
            }


            @Override
            public void onViewModeFeedback(Object... obj) {

            }
        }


    }

    /**
     * 封装 Notification 通知类
     */
    public static class GT_Notification implements SaveObject.SaveBean {

        private static int NOTIFYID = 0x1079; //通知id
        private static String CHANEL_ID = "com.gsls.king";
        private static String CHANEL_NAME = "GT_Android";
        private static String CHANEL_DESCRIPTION = "GT_Description";
        private static NotificationManagerCompat notificationManagerCompat;
        public static final String SEPARATOR = "_GT_";//分隔符
        private static final Map<Integer, Object> map = new ArrayMap<>();

        public static void close() {
            map.clear();
        }

        public static NotificationManagerCompat getNotificationManagerCompat(Context... contexts) {
            Context context = getActivity();
            if (contexts.length > 0) {
                context = contexts[0];
            }
            if (notificationManagerCompat == null) {
                notificationManagerCompat = NotificationManagerCompat.from(context.getApplicationContext());
            }
            return notificationManagerCompat;
        }

        public static void setNotificationManagerCompat(NotificationManagerCompat notificationManagerCompat) {
            GT_Notification.notificationManagerCompat = notificationManagerCompat;
        }

        /**
         * 封装的第一代 通知 (非服务开启，想在服务里启动的话自己加)
         * <uses-permission android:name="android.permission.POST_NOTIFICATIONS" /><!-- 通知栏权限 -->
         *
         * @return
         */
        public static abstract class BaseNotification implements SaveObject.SaveBean, Frame.ViewModelFeedback {

            @Override
            public void onViewModeFeedback(Object... obj) {

            }

            @Override
            public ViewModelStore getViewModelStore() {
                return new ViewModelStore();
            }

            private Object tag;
            protected int layout1;
            protected int layout2;
            public Context context;
            public RemoteViews remoteViews1;
            public RemoteViews remoteViews2;
            private NotificationCompat.Builder builder;
            private boolean isShowFrontDesk = false;
            public Map<Integer, PendingIntent> mapClick = new ArrayMap<>();//用于记录 单击事件
            public Map<Integer, String> mapUIText = new ArrayMap<>();//用于记录 所有当前最新UI
            public Map<Integer, Object> mapUIImage = new ArrayMap<>();//用于记录 所有当前最新UI
            public NotificationManagerCompat notificationManagerCompat;//通知管理器
            //保存基础信息，用于更新UI
            private int icon;
            private boolean clickCancel;
            private boolean isLockScreenShow;
            private boolean isOngoing;
            private String notificationChannel;
            private Intent intent;
            private long time;
            public int NOTIFYID = 0x1079; //通知id
            private String cacheKey;//缓存标识
            private Bundle mArguments;

            public void setArguments(@Nullable Bundle args) {
                mArguments = args;
            }

            @Nullable
            final public Bundle getArguments() {
                return mArguments;
            }

            //是否缓存开启数据
            protected boolean isCacheData() {
                return false;
            }

            public Object getTag() {
                return tag;
            }

            public void setTag(Object tag) {
                this.tag = tag;
            }

            public int getNotifyid() {
                return NOTIFYID;
            }

            public void setNotifyid(int notifyid) {
                NOTIFYID = notifyid;
            }

            public void setLayout1(int layout1) {
                this.layout1 = layout1;
            }

            public void setLayout2(int layout2) {
                this.layout2 = layout2;
            }

            public RemoteViews getLayout1() {
                return remoteViews1;
            }

            public RemoteViews getLayout2() {
                return remoteViews2;
            }

            protected int loadLayout1() {
                return layout1;
            }

            protected int loadLayout2() {
                return layout2;
            }

            protected View findViewById1(int id) {
                return null;
            }

            protected View findViewById2(int id) {
                return null;
            }

            //简单缓存 存储 与 获取
            @Override
            public void getCache(String json) {

            }

            @Override
            public String putCache() {
                return null;
            }


            protected void putCache(String key, Object obj) {
                if (key == null) {
                    key = context.getPackageName() + getClass().getName();
                }
                GT_Cache.putCacheData(key, obj);
            }

            protected <T> T getCache(String key, Class<T> classz) {
                if (key == null) {
                    key = context.getPackageName() + getClass().getName();
                }
                return GT_Cache.getCacheData(key, classz);
            }

            protected void putCacheMap(Map<String, Object> map) {
                GT_Cache.putCacheMap(map);
            }

            protected void bingData() {
            }

            public BaseNotification() {
                this.context = getActivity();
                builder = new NotificationCompat.Builder(context);
            }

            public BaseNotification(Context context) {
                onCreate(context);
            }

            public BaseNotification(Context context, Bundle bundles) {
                mArguments = bundles;
                onCreate(context);
            }

            public void onCreate(Context context) {
                this.context = context;
                builder = new NotificationCompat.Builder(context);
                bingData();
                //初始化 本地页面缓存
                if (isCacheData()) {
                    GT_Cache.initCache(context);
                    cacheKey = context.getPackageName() + getClass().getName();
                }
                initView(context);
                getCache(GT_Cache.getCacheData(cacheKey, String.class));//获取缓存数据
                loadData(context);
            }

            /**
             * 设置属性
             *
             * @param icon             图标
             * @param clickCancel      是否单击取消
             * @param isLockScreenShow 锁屏是否显示
             * @param isOngoing        用户是否可以取消（true:不可取消, false:可取消）
             * @param intent           单击意图
             * @param time             发送的时间
             * @param isShowFrontDesk  是否悬浮显示
             * @param notifyids        通知key
             */
            protected NotificationCompat.Builder setInitData(int icon, boolean clickCancel, boolean isLockScreenShow, boolean isOngoing, Intent intent, long time, boolean isShowFrontDesk, int... notifyids) {
                this.icon = icon;
                this.clickCancel = clickCancel;
                this.isLockScreenShow = isLockScreenShow;
                this.isOngoing = isOngoing;
                this.intent = intent;
                this.time = time;

                builder.setAutoCancel(clickCancel);//设置通知打开后自动消失

                //如果 设置了-1，那就默认给透明的图标
                if (icon <= 0) {
                    icon = R.color.touMing;
                }
                builder.setSmallIcon(icon);//设置左边的通知图标 且当前属性必须存在

                //设置发送时间
                if (time > 0) {
                    if (time == 0) {
                        time = System.currentTimeMillis();
                    }
                    builder.setWhen(time);//设置发送时间
                }

                builder.setDefaults(Notification.DEFAULT_VIBRATE | Notification.DEFAULT_SOUND | Notification.DEFAULT_LIGHTS | Notification.FLAG_SHOW_LIGHTS);//设置默认的声音与默认的振动
                //创建一个启动详细页面的 Intent 对象
                if (intent == null) {
                    intent = new Intent();
                } else {
                    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
                }
                builder.setContentIntent(PendingIntent.getActivities(context, 0, new Intent[]{intent}, PendingIntent.FLAG_IMMUTABLE));//设置通知栏 点击跳转


                PendingIntent pendingIntent = null;
                // 适配12.0及以上
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                    pendingIntent = PendingIntent.getActivity(context, 0, intent, PendingIntent.FLAG_IMMUTABLE);
                } else {
                    pendingIntent = PendingIntent.getActivity(context, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
                }
                builder.setFullScreenIntent(pendingIntent, true);

                if (notifyids.length > 0) {
                    NOTIFYID = notifyids[0];
                }

                builder.setCategory(Notification.CATEGORY_MESSAGE);//设置通知类别

                if (isLockScreenShow)
                    builder.setVisibility(NotificationCompat.VISIBILITY_PRIVATE); // 屏幕可见性，锁屏时，显示icon和标题，内容隐藏

                builder.setOngoing(isOngoing);//持久性的通知,用户无法删除

                builder.setStyle(new NotificationCompat.DecoratedCustomViewStyle());

                this.isShowFrontDesk = isShowFrontDesk;
                if (isShowFrontDesk) {
                    builder.setPriority(NotificationCompat.PRIORITY_HIGH);
                }
                return builder;
            }

            protected void initView(Context context) {
                if (notificationChannel == null)
                    notificationChannel = createNotificationChannel(context);
                builder.setChannelId(notificationChannel);
                notificationManagerCompat = GT_Notification.getNotificationManagerCompat(context);
                layout1 = loadLayout1();
                layout2 = loadLayout2();
                if (layout1 > 0) {
                    remoteViews1 = new RemoteViews(context.getPackageName(), layout1);
                }
                if (layout2 > 0) {
                    remoteViews2 = new RemoteViews(context.getPackageName(), layout2);
                }
                builder.setStyle(new NotificationCompat.DecoratedCustomViewStyle());
            }

            public void loadData(Context context) {

                if (remoteViews1 != null) {
                    builder.setCustomContentView(remoteViews1);
                }
                if (remoteViews2 != null) {
                    builder.setCustomBigContentView(remoteViews2);
                }

            }


            /**
             * 动态设置修改通知里的图片
             *
             * @param imageId  修改图片组件的ID
             * @param resource 修改图片组件的对象
             * @param isCommit 是否自动提交刷新UI
             * @return
             */
            public BaseNotification setImageRes(int imageId, int resource) {
                if (imageId < 0 || resource == 0) return this;
                remoteViews1.setImageViewResource(imageId, resource);
                remoteViews2.setImageViewResource(imageId, resource);
                mapUIImage.put(imageId, resource);//保存UI状态
                return this;
            }

            private int imageId;
            private Object resource;

            /**
             * 动态设置修改通知里的图片
             *
             * @param imageId  修改图片组件的ID
             * @param resource 修改图片组件的对象
             * @param isCommit 是否自动提交刷新UI
             * @return
             */
            public BaseNotification setImageUrl(int imageId, Object resource) {
                if (imageId < 0 || resource == null) return this;
                this.imageId = imageId;
                this.resource = resource;
                Thread.getInstance(0).execute(new Runnable() {
                    @Override
                    public void run() {
                        Bitmap bitmap = ImageViewTools.ObjectToBitmap(resource);
                        mapUIImage.put(imageId, bitmap);//保存UI状态
                    }
                });
                return this;
            }

            /**
             * 设置文字属性
             *
             * @param tvId     文本组件ID
             * @param text     显示内容
             * @param isCommit 是否自动提交刷新UI
             * @return
             */
            public BaseNotification setTextViewText(int tvId, String text) {
                if (tvId < 0) return this;
                if (text != null) {
                    remoteViews1.setTextViewText(tvId, text);
                    remoteViews2.setTextViewText(tvId, text);
                    mapUIText.put(tvId, text);//保存UI状态
                }
                return this;
            }

            /**
             * Android 13 后需要添加权限 <uses-permission android:name="android.permission.POST_NOTIFICATIONS"/>
             * 提交刷新通知
             *
             * @param builders
             * @return
             */
            public BaseNotification commit(NotificationCompat.Builder... builders) {
                commit(null, builders);
                return this;
            }

            /**
             * Android 13 后需要添加权限 <uses-permission android:name="android.permission.POST_NOTIFICATIONS"/>
             * 自动检查权限，并提交刷新通知
             *
             * @param activity
             * @param builders
             * @return
             */
            public BaseNotification commit(FragmentActivity activity, NotificationCompat.Builder... builders) {
                if (builders.length > 0) {
                    builder = builders[0];
                }
                if (resource != null) {
                    Observable.getDefault().execute(new Observable.RunJavaR<Bitmap>() {
                        @Override
                        public Bitmap run() {
                            return ImageViewTools.ObjectToBitmap(resource);
                        }
                    }).execute(new Observable.RunAndroidV<Bitmap>() {
                        @Override
                        public void run(Bitmap bitmap) {
                            //重新创建一个通知栏 用于更新UI
                            if (notificationChannel == null)
                                notificationChannel = createNotificationChannel(context);
                            builder = new NotificationCompat.Builder(context, notificationChannel);

                            setInitData(icon, clickCancel, isLockScreenShow, isOngoing, intent, time, isShowFrontDesk, NOTIFYID);

                            //创建新的布局对象 并设更新好UI
                            remoteViews1 = new RemoteViews(context.getPackageName(), layout1);
                            remoteViews2 = new RemoteViews(context.getPackageName(), layout2);

                            for (int id : mapUIImage.keySet()) {
                                Object resObj = mapUIImage.get(id);
                                if (resObj instanceof Integer) {
                                    int res = Integer.parseInt(String.valueOf(resObj));
                                    remoteViews1.setImageViewResource(id, res);
                                    remoteViews2.setImageViewResource(id, res);
                                } else if (resObj instanceof Bitmap) {
                                    Bitmap resBit = (Bitmap) resObj;
                                    remoteViews1.setImageViewBitmap(id, resBit);
                                    remoteViews2.setImageViewBitmap(id, resBit);
                                }

                            }

                            for (int id : mapUIText.keySet()) {
                                String text = mapUIText.get(id);
                                remoteViews1.setTextViewText(id, text);
                                remoteViews2.setTextViewText(id, text);
                            }

                            remoteViews1.setImageViewBitmap(imageId, bitmap);
                            remoteViews2.setImageViewBitmap(imageId, bitmap);

                            //将新创建的UI 注入已存在的单击事件
                            for (int key : mapClick.keySet()) {
                                PendingIntent pendingIntent = mapClick.get(key);
                                remoteViews1.setOnClickPendingIntent(key, pendingIntent);
                                remoteViews2.setOnClickPendingIntent(key, pendingIntent);
                            }

                            //将布局UI添加通知栏里去
                            builder.setCustomContentView(remoteViews1);
                            builder.setCustomBigContentView(remoteViews2);
                            resource = 0;
                            imageId = 0;

                            GT_Notification.startNotification(builder, NOTIFYID); //最终发布更新通知栏
                            resource = null;
                        }
                    });
                } else {
                    if (activity != null) {
                        GT_Notification.startNotification(activity, builder, NOTIFYID); //最终发布更新通知栏
                    } else {
                        GT_Notification.startNotification(builder, NOTIFYID); //最终发布更新通知栏
                    }
                }
                return this;
            }

            public void finish() {
                onDestroy();

            }

            /**
             * 清空当前通知
             *
             * @param notifyids
             */
            public void cancel(int... notifyids) {
                if (notificationManagerCompat == null) return;
                if (notifyids.length > 0) {
                    notificationManagerCompat.cancel(notifyids[0]);//清除当前 id 为 NOTIFYID 的通知
                } else {
                    notificationManagerCompat.cancel(NOTIFYID);//清除当前 id 为 NOTIFYID 的通知
                }
            }


            protected void onDestroy() {
                if (notificationManagerCompat != null) {
                    notificationManagerCompat.cancel(NOTIFYID);//清除当前 id 为 NOTIFYID 的通知
                }

                Object bean = putCache();
                if (bean != null) {
                    GT_Cache.putCacheData(cacheKey, bean);
                }

                Runtime.getRuntime().gc();
            }


        }

        //封装的第二代 通知 (非服务端开启，想在服务里启动的话自己加)
        public static abstract class AnnotationNotification extends BaseNotification {

            public AnnotationNotification() {
                super();
                registerNotificationReceiver(context);
            }

            public AnnotationNotification(Context context) {
                super(context);
                registerNotificationReceiver(context);
            }

            public AnnotationNotification(Context context, Bundle bundle) {
                super(context, bundle);
                registerNotificationReceiver(context);
            }

            private int[] clickViews;

            //注册通知广播
            private void registerNotificationReceiver(Context context) {
                //注册广播
                IntentFilter filter = new IntentFilter();
                if (clickViews == null || clickViews.length == 0) return;
                //设置单击事件
                for (int i = 0; i < clickViews.length; i++) {
                    filter.addAction(getClass().getName() + ":" + clickViews[i]);
                }
                //注册广播
                context.registerReceiver(mBroadcastReceiver, filter);
            }


            @Override
            protected void bingData() {
                super.bingData();
                GT.build(this);
            }

            @Override
            public void setLayout1(int resLayout) {
                super.setLayout1(resLayout);
            }

            @Override
            public void setLayout2(int resLayout) {
                super.setLayout2(resLayout);
            }

            @Override
            protected void initView(Context context) {
                super.initView(context);
                EventBus.getDefault().register(this);//注册订阅者
                setOnClickListener();
            }

            @Override
            public BaseNotification commit(NotificationCompat.Builder... builders) {
                super.commit(builders);
                return this;
            }

            //设置单击事件
            private void setOnClickListener() {
                Class<?> aClass = getClass();
                Method[] methods;
                try {
                    methods = aClass.getDeclaredMethods();
                } catch (Throwable th) {
                    methods = aClass.getMethods();
                }
                for (Method method : methods) {
                    method.setAccessible(true);
                    Annotations.GT_Click initView = method.getAnnotation(Annotations.GT_Click.class);
                    if (initView != null) {
                        clickViews = initView.value();
                        if (clickViews == null || clickViews.length == 0) return;
                        //设置单击事件
                        for (int i = 0; i < clickViews.length; i++) {
                            int clickView = clickViews[i];
                            Intent intent = new Intent(getClass().getName() + ":" + clickView);
                            PendingIntent pendingIntent = PendingIntent.getBroadcast(context, 0, intent, PendingIntent.FLAG_IMMUTABLE);
                            mapClick.put(clickView, pendingIntent);
                            remoteViews1.setOnClickPendingIntent(clickView, pendingIntent);
                            remoteViews2.setOnClickPendingIntent(clickView, pendingIntent);
                        }
                    }
                }
            }

            // 声明一个广播用于接受单击状态栏
            public BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {
                private View view;

                @Override
                public void onReceive(Context context, Intent intent) {
//                    logt("接收到广播:" + intent.getAction());
                    onClickView(view, intent);
                }
            };

            private void onClickView(View view, Intent intent) {
                if (view == null) view = new View(context);
                String action = intent.getAction();
                if (!action.contains(":")) return;
                String[] split = action.split(":");
                if (getClass().getName().equals(split[0])) {//过滤掉不是当前类注册的组件单击事件
                    try {
                        view.setId(Integer.parseInt(split[1]));
                        onClick(view);
                    } catch (Exception e) {

                    }
                }
            }

            //单击事件触发的方法
            public void onClick(View view) {

            }

            public void finish() {
                super.finish();
            }

            @Override
            protected void onDestroy() {
                super.onDestroy();
                EventBus.getDefault().unregister(this);//取消订阅者
                GT.EventBus.unregisterInteriors(this);//取消内部订阅者
                try {
                    context.unregisterReceiver(mBroadcastReceiver);
                } catch (Exception e) {

                }
            }

            /**
             * 内容由 ViewModel 层去提供数据 给到 View 层
             *
             * @param obj
             */
            public void onViewModeFeedback(Object... obj) {

            }

        }

        //封装的第三代 通知 (非服务端开启，想在服务里启动的话自己加)
        public abstract static class DataBindingNotification extends AnnotationNotification {

            public DataBindingNotification() {
                super();
            }

            public DataBindingNotification(Context context) {
                super(context);
            }

            public DataBindingNotification(Context context, Bundle bundle) {
                super(context, bundle);
            }
        }

        /**
         * @param context          上下文
         * @param icon             左上角图片
         * @param iconBottomRight  右下角图片
         * @param title            标题
         * @param msg              通知内容
         * @param clickCancel      点击是否取消
         * @param isShowFrontDesk  是否在前台(浮动)显示
         * @param isLockScreenShow 是否锁屏显示
         * @param intent           点击意图
         * @param time             发送通知的时间 0：使用当前系统时间 -1：不显示发送时间 >0:自定义时间
         * @param progressMax      进度最大值
         * @param progressCurrent  进度当前值
         * @param notifyids        通知 key
         * @return
         */
        public static NotificationCompat.Builder createNotificationProgress(Context context, int icon, Object iconBottomRight, String title, String msg, boolean clickCancel, boolean isShowFrontDesk, boolean isLockScreenShow, Intent intent, long time, int progressMax, int progressCurrent, int... notifyids) {
            NotificationCompat.Builder notification = createNotificationForNormal(context, icon, iconBottomRight, title, msg, clickCancel, isLockScreenShow, intent, time, false, notifyids);

            if (isShowFrontDesk) {
                notification.setTicker(msg);
                PendingIntent pendingIntent = null;

                // 适配12.0及以上
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                    pendingIntent = PendingIntent.getActivity(context, 0, intent, PendingIntent.FLAG_IMMUTABLE);
                } else {
                    pendingIntent = PendingIntent.getActivity(context, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
                }
                notification.setFullScreenIntent(pendingIntent, true);

                notification.setDefaults(NotificationCompat.DEFAULT_ALL);
                notification.setPriority(Notification.PRIORITY_HIGH);

            }

            notification.setOngoing(true);//持久性的通知,用户无法删除
            notification.setProgress(progressMax, progressCurrent, false);
            return notification;
        }

        /**
         * 更新度条通知进
         *
         * @param builder         进度条通知对象
         * @param msg             下载消息
         * @param progressMax     进度条最大值
         * @param progressCurrent 当前进度
         * @param isHide          是否隐藏到后台进行下载
         * @param endAutoCancel   进度条到达最大值后是否自动取消通知
         * @param endMsg          进度条到达最大值后的 信息
         * @param sleepTime       自动取消通知的延时时间(若不设置自动取消则该参数无效)
         * @param notifyids       通知 key
         */
        public static void updateNotificationProgress(NotificationCompat.Builder builder, String msg, int progressMax, int progressCurrent, boolean isHide, boolean endAutoCancel, String endMsg, int sleepTime, int... notifyids) {
            if (notifyids.length > 0) {
                NOTIFYID = notifyids[0];
            }

            if (sleepTime <= 0) sleepTime = 3000;

            //刷新UI
            if (msg != null)
                builder.setContentText(msg);
            builder.setProgress(progressMax, progressCurrent, false);

            //是否隐藏
            if (isHide && builder.getPriority() != NotificationCompat.PRIORITY_DEFAULT) {
                Thread.getInstance(0).execute(new Runnable() {
                    @Override
                    public void run() {
                        Thread.sleep(1000);
                        builder.setPriority(NotificationCompat.PRIORITY_DEFAULT);
                    }
                });
            }

            //结束关闭
            if (progressCurrent >= progressMax) {
                if (endMsg != null)
                    builder.setContentText(endMsg);
                notificationManagerCompat.notify(NOTIFYID, builder.build());
                if (endAutoCancel) {
                    Thread.sleep(sleepTime);
                    GT_Notification.cancelNotification(NOTIFYID);
                }
            } else {
                notificationManagerCompat.notify(NOTIFYID, builder.build());
            }
        }

        /**
         * @param context          上下文
         * @param icon             左上角图片
         * @param iconBottomRight  右下角图片
         * @param iconMax          大图片
         * @param title            标题
         * @param msg              通知内容
         * @param clickCancel      点击是否取消
         * @param isLockScreenShow 锁屏是否显示
         * @param intent           点击意图
         * @param time             发送通知的时间 0：使用当前系统时间 -1：不显示发送时间 >0:自定义时间
         * @param notifyids        通知 key
         * @return
         */
        public static NotificationCompat.Builder createNotificationImg(Context context, int icon, Object iconBottomRight, int iconMax, String title, String msg, boolean clickCancel, boolean isLockScreenShow, Intent intent, long time, int... notifyids) {
            NotificationCompat.Builder notification = createNotificationForNormal(context, icon, iconBottomRight, title, msg, clickCancel, isLockScreenShow, intent, time, false, notifyids);
            if (iconMax > 0)
                notification.setStyle(new NotificationCompat.BigPictureStyle()
                        .bigPicture(BitmapFactory.decodeResource(context.getResources(), iconMax)));
            return notification;
        }

        /**
         * @param context          上下文
         * @param icon             左上角图片
         * @param iconBottomRight  右下角图片
         * @param text             主要内容
         * @param title            标题
         * @param msg              通知内容
         * @param clickCancel      点击是否取消
         * @param isLockScreenShow 锁屏是否显示
         * @param intent           点击意图
         * @param time             发送通知的时间 0：使用当前系统时间 -1：不显示发送时间 >0:自定义时间
         * @param notifyids        通知 key
         * @return
         */
        public static NotificationCompat.Builder createNotificationText(Context context, int icon, Object iconBottomRight, String title, String text, boolean clickCancel, boolean isLockScreenShow, Intent intent, long time, int... notifyids) {
            NotificationCompat.Builder notification = createNotificationForNormal(context, icon, iconBottomRight, title, null, clickCancel, isLockScreenShow, intent, time, false, notifyids);
            if (text != null) {
                notification.setStyle(
                        new NotificationCompat.BigTextStyle().bigText(text)
                );
            }
            return notification;
        }

        public static NotificationCompat.Builder createNotificationMsgs(Context context, int icon, Object iconBottomRight, String title, boolean clickCancel, boolean isLockScreenShow, Intent intent, long time, int notifyid, String... msgs) {
            NotificationCompat.Builder notification = createNotificationForNormal(context, icon, iconBottomRight, title, null, clickCancel, isLockScreenShow, intent, time, false, notifyid);
            if (msgs.length > 0) {
                NotificationCompat.MessagingStyle messagingStyle = new NotificationCompat.MessagingStyle("Msg");
                for (String text : msgs) {
                    String[] split = text.split(SEPARATOR);
                    switch (split.length) {
                        case 1:
                            messagingStyle.addMessage(text, System.currentTimeMillis(), "");
                            break;
                        case 2:
                            messagingStyle.addMessage(split[1], System.currentTimeMillis(), split[0]);
                            break;
                        case 3:
                            messagingStyle.addMessage(split[1], Long.parseLong(split[2]), split[0]);
                            break;
                    }
                }
                notification.setStyle(messagingStyle);
                map.put(notifyid, messagingStyle);
            }
            return notification;
        }

        /**
         * 添加一条新的 消息
         *
         * @param builder  通知对象
         * @param notifyid 通知 key
         * @param texts    新增加的消息
         * @return
         */
        public static NotificationCompat.Builder addLineMsg(NotificationCompat.Builder builder, int notifyid, String... msgs) {
            if (msgs.length > 0) {
                NotificationCompat.MessagingStyle messagingStyle = (NotificationCompat.MessagingStyle) map.get(notifyid);
                if (messagingStyle != null)
                    for (String text : msgs) {
                        String[] split = text.split(SEPARATOR);
                        switch (split.length) {
                            case 1:
                                messagingStyle.addMessage(text, System.currentTimeMillis(), "");
                                break;
                            case 2:
                                messagingStyle.addMessage(split[1], System.currentTimeMillis(), split[0]);
                                break;
                            case 3:
                                messagingStyle.addMessage(split[1], Long.parseLong(split[2]), split[0]);
                                break;
                        }
                    }
                builder.setStyle(messagingStyle);
            }
            NOTIFYID = notifyid;
            notificationManagerCompat.notify(NOTIFYID, builder.build());
            return builder;
        }

        /**
         * @param context          上下文
         * @param icon             左上角图片
         * @param iconBottomRight  右下角图片
         * @param text             主要内容
         * @param title            标题
         * @param msg              通知内容
         * @param clickCancel      点击是否取消
         * @param isLockScreenShow 锁屏是否显示
         * @param intent           点击意图
         * @param time             发送通知的时间 0：使用当前系统时间 -1：不显示发送时间 >0:自定义时间
         * @param notifyids        通知 key
         * @return
         */
        public static NotificationCompat.Builder createNotificationTexts(Context context, int icon, Object iconBottomRight, String title, boolean clickCancel, boolean isLockScreenShow, Intent intent, long time, int notifyid, String... texts) {
            NotificationCompat.Builder notification = createNotificationForNormal(context, icon, iconBottomRight, title, null, clickCancel, isLockScreenShow, intent, time, false, notifyid);
            if (texts.length > 0) {
                NotificationCompat.InboxStyle inboxStyle = new NotificationCompat.InboxStyle();
                for (String text : texts) {
                    inboxStyle.addLine(text);
                }
                notification.setStyle(inboxStyle);
                map.put(notifyid, inboxStyle);
            }
            return notification;
        }

        /**
         * 添加一条新的 数据
         *
         * @param builder  通知对象
         * @param notifyid 通知 key
         * @param texts    新增加的数据
         * @return
         */
        public static NotificationCompat.Builder addLineText(NotificationCompat.Builder builder, int notifyid, String... texts) {
            if (texts.length > 0) {
                NotificationCompat.InboxStyle inboxStyle = (NotificationCompat.InboxStyle) map.get(notifyid);
                if (inboxStyle != null)
                    for (String text : texts) {
                        inboxStyle.addLine(text);
                    }
                builder.setStyle(inboxStyle);
            }
            NOTIFYID = notifyid;
            notificationManagerCompat.notify(NOTIFYID, builder.build());
            return builder;
        }

        /**
         * 创建简易的 通知
         *
         * @param context          上下文
         * @param icon             图标
         * @param layout1          折叠布局
         * @param layout2          展开布局
         * @param clickCancel      单击是否取消通知
         * @param isLockScreenShow 锁屏的时候是否显示
         * @param intent           单击跳转意图
         * @param time             发送通知时间
         * @param notifyids        通知 key
         * @return
         */
        public static NotificationCompat.Builder createNotificationFoldView(Context context, int icon, int layout1, int layout2, boolean clickCancel, boolean isLockScreenShow, Intent intent, long time, int... notifyids) {
            NotificationCompat.Builder notification = createNotificationForNormal(context, icon, -1, null, null, clickCancel, isLockScreenShow, intent, time, false, notifyids);
            RemoteViews layoutView1 = null, layoutView2 = null;
            if (layout1 > 0) {
                layoutView1 = new RemoteViews(context.getPackageName(), layout1);
            }
            if (layout2 > 0) {
                layoutView2 = new RemoteViews(context.getPackageName(), layout2);
            }
            notification.setStyle(new NotificationCompat.DecoratedCustomViewStyle());

            if (layoutView2 != null) {
                notification.setCustomBigContentView(layoutView2);
            }
            if (layoutView1 != null) {
                notification.setCustomContentView(layoutView1);
            }
            return notification;
        }

        /**
         * 创建普通通知
         *
         * @param context          上下文
         * @param icon             左上角图片
         * @param iconBottomRight  右下角图片
         * @param title            标题
         * @param msg              通知内容
         * @param clickCancel      点击是否取消
         * @param isLockScreenShow 锁屏是否显示
         * @param intent           点击意图
         * @param time             发送通知的时间 0：使用当前系统时间 -1：不显示发送时间 >0:自定义时间
         * @param isStart          是否直接启动通知
         * @param notifyids        通知 key
         * @return
         */
        public static NotificationCompat.Builder createNotificationForNormal(Context context, int icon, Object iconBottomRight, String title, String msg, boolean clickCancel, boolean isLockScreenShow, Intent intent, long time, boolean isStart, int... notifyids) {

            if (notificationManagerCompat == null) {
                notificationManagerCompat = NotificationManagerCompat.from(context.getApplicationContext());
            }

            Bitmap bitmap = null;
            if (iconBottomRight instanceof Integer) {
                bitmap = BitmapFactory.decodeResource(getActivity().getResources(), (Integer) iconBottomRight);
            } else if (iconBottomRight instanceof Bitmap) {
                bitmap = (Bitmap) iconBottomRight;
            }

            String name = createNotificationChannel(context);
            NotificationCompat.Builder builder = new NotificationCompat.Builder(context, name);//创建Notification并与Channel关联
            builder.setAutoCancel(clickCancel);//设置通知打开后自动消失

            PendingIntent pendingIntent = null;
            if (intent == null) {
                intent = new Intent();
            }
            // 适配12.0及以上
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                pendingIntent = PendingIntent.getActivity(context, 0, intent, PendingIntent.FLAG_IMMUTABLE);
            } else {
                pendingIntent = PendingIntent.getActivity(context, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
            }
            builder.setFullScreenIntent(pendingIntent, true);

            //如果 设置了-1，那就默认给透明的图标
            if (icon <= 0) {
                icon = R.color.touMing;
            }

            builder.setSmallIcon(icon);//设置左边的通知图标 且当前属性必须存在
            if (bitmap != null) {
                builder.setLargeIcon(bitmap);//设置右下角的图标 该属性可不设置
            }
            if (title != null)
                builder.setContentTitle(title);//设置标题
            if (msg != null)
                builder.setContentText(msg);//设置内容

            //设置发送时间
            if (time > 0) {
                if (time == 0) {
                    time = System.currentTimeMillis();
                }
                builder.setWhen(time);//设置发送时间
            }

            builder.setDefaults(Notification.DEFAULT_VIBRATE | Notification.DEFAULT_SOUND | Notification.DEFAULT_LIGHTS | Notification.FLAG_SHOW_LIGHTS);//设置默认的声音与默认的振动
            //创建一个启动详细页面的 Intent 对象
            if (intent == null) {
                intent = new Intent();
            } else {
                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
            }
            builder.setContentIntent(PendingIntent.getActivities(context, 0, new Intent[]{intent}, PendingIntent.FLAG_IMMUTABLE));//设置通知栏 点击跳转

            if (notifyids.length > 0) {
                NOTIFYID = notifyids[0];
            }

            if (isLockScreenShow)
                builder.setVisibility(NotificationCompat.VISIBILITY_PRIVATE); // 屏幕可见性，锁屏时，显示icon和标题，内容隐藏

            if (notifyids.length > 0) {
                NOTIFYID = notifyids[0];
            }
            if (isStart) {
                notificationManagerCompat.notify(NOTIFYID, builder.build());
            }

            return builder;

        }

        /**
         * Android 13 后需要添加权限 <uses-permission android:name="android.permission.POST_NOTIFICATIONS"/>
         * 启动通知
         *
         * @param builder   启动的通知
         * @param notifyids 通知 key 若不填默认是最近创建的通知 key
         */
        public static void startNotification(NotificationCompat.Builder builder, int... notifyids) {
            if (notifyids.length > 0) {
                NOTIFYID = notifyids[0];
            }
            notificationManagerCompat.notify(NOTIFYID, builder.build());
        }

        /**
         * Android 13 后需要添加权限 <uses-permission android:name="android.permission.POST_NOTIFICATIONS"/>
         * 自动检查权限并申请后，再启动通知
         *
         * @param activity  activity
         * @param builder   启动的通知
         * @param notifyids 通知 key 若不填默认是最近创建的通知 key
         */
        public static void startNotification(FragmentActivity activity, NotificationCompat.Builder builder, int... notifyids) {
            if (activity != null) {
                GT.AppAuthorityManagement.notification(activity, new OneListener<Boolean>() {
                    @Override
                    public void onOneListener(Boolean obj) {
                        super.onOneListener(obj);
                        if (obj) {
                            if (notifyids.length > 0) {
                                NOTIFYID = notifyids[0];
                            }
                            notificationManagerCompat.notify(NOTIFYID, builder.build());
                        }
                    }
                });
            } else {
                if (notifyids.length > 0) {
                    NOTIFYID = notifyids[0];
                }
                notificationManagerCompat.notify(NOTIFYID, builder.build());
            }
        }

        /**
         * Android 13 后需要添加权限 <uses-permission android:name="android.permission.POST_NOTIFICATIONS"/>
         * 启动GT通知
         *
         * @param builder
         */
        public static BaseNotification startNotification(BaseNotification notificationBase) {
            notificationManagerCompat.notify(NOTIFYID, notificationBase.builder.build());
            return notificationBase;
        }

        /**
         * 删除通知
         *
         * @param notifyids 被删除通知的 key
         */
        public static void cancelNotification(int... notifyids) {
            if (notifyids.length > 0) {
                NOTIFYID = notifyids[0];
            }
            GT_Notification.getNotificationManagerCompat(getActivity()).cancel(NOTIFYID);//清除当前 id 为 NOTIFYID 的通知
        }

        //清空通知
        public static void emptyNotification() {
            notificationManagerCompat.cancelAll();
        }

        /**
         * 创建 通知名称
         *
         * @param context
         * @return
         */
        private static String createNotificationChannel(Context context) {
            // O (API 26)及以上版本的通知需要NotificationChannels。

            CHANEL_ID = context.getPackageName();

            if (context != null && Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                // 初始化NotificationChannel
                NotificationChannel notificationChannel = new NotificationChannel(CHANEL_ID, CHANEL_NAME, NotificationManager.IMPORTANCE_HIGH);
                notificationChannel.enableLights(true); //是否在桌面icon右上角展示小红点
                notificationChannel.setLightColor(Color.GREEN); //小红点颜色
                notificationChannel.setShowBadge(true); //是否在久按桌面图标时显示此渠道的通知
                notificationChannel.setDescription(CHANEL_DESCRIPTION);
                // 向系统添加 NotificationChannel。试图创建现有通知
                // 通道的初始值不执行任何操作，因此可以安全地执行
                // 启动顺序
                NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
                notificationManager.createNotificationChannel(notificationChannel);
                return CHANEL_ID;
            } else {
                return CHANEL_ID; // 为pre-O(26)设备返回 null
            }
        }

    }

    //DataBinding xml 布局解析并赋值
    public static class DataBindingUtil<T> {

        //DataBinding 实体类
        public static class ViewBean<T> {

            private Class<T> tClass;
            private String viewName;
            private int viewId;
            private View view;

            public ViewBean() {
                super();
            }

            public ViewBean(Class<T> tClass, String viewName, int viewId, View view) {
                this.tClass = tClass;
                this.viewName = viewName;
                this.viewId = viewId;
                this.view = view;
            }

            public Class<T> gettClass() {
                return tClass;
            }

            public void settClass(Class<T> tClass) {
                this.tClass = tClass;
            }

            public String getViewName() {
                return viewName;
            }

            public void setViewName(String viewName) {
                this.viewName = viewName;
            }

            public int getViewId() {
                return viewId;
            }

            public void setViewId(int viewId) {
                this.viewId = viewId;
            }

            public View getView() {
                return view;
            }

            public void setView(View view) {
                this.view = view;
            }

            @Override
            public String toString() {
                return "ViewBean{" +
                        "tClass=" + tClass +
                        ", viewName='" + viewName + '\'' +
                        ", viewId=" + viewId +
                        ", view=" + view +
                        '}';
            }
        }

        //解析 xml 布局后的信息
        private final static Map<String, ViewBean> viewBeanList = new ArrayMap<>();

        /**
         * 给 Activity 进行绑定的
         *
         * @param activity
         * @param <T>
         * @return
         */
        public static <T> T setContentView(Object bindingView) {
            if (bindingView == null) return null;
            //获取 Context 与 View
            Object[] objects = AnnotationAssist.returnActivityOrView(bindingView);
            Context context = (Context) objects[0];
            View view = (View) objects[1];
            if (context == null) context = getActivity();
            if (view == null) view = getActivityLayout((Activity) context);


            //清空 xml 布局信息
            viewBeanList.clear();
            //第一步：取布局中所有设置了ID的组件名与ID值
            analysisLayout(context, view);
            //第二部：获取代码自动生成的 DataBinding
            T bean = getDataBindingBean(bindingView.getClass().getName());//1
            //第三步：绑定类的数据
            bindClassData(bean, bindingView);

            return bean;
        }

        /**
         * 给 View 页面进行绑定的
         *
         * @param <T>
         * @param obj
         * @return
         */
        public static <T> T setContentView(Object bindingView, View view) {
            if (bindingView == null || view == null) return null;

            Context context = null;

            if (context == null) {

                context = (Context) AnnotationAssist.returnActivityOrView(bindingView)[0];

                if (context == null && bindingView instanceof Context) {
                    context = (Context) bindingView;
                }

                if (context == null) {
                    context = view.getContext();
                }

                if (context == null) {
                    context = GT.getActivity();
                }
            }

            //清空 xml 布局信息
            viewBeanList.clear();
            //第一步：取布局中所有设置了ID的组件名与ID值
            analysisLayout(context, view);
            //第二部：获取代码自动生成的 DataBinding
            T bean = getDataBindingBean(bindingView.getClass().getName());//2
            //第三步：绑定类的数据
            bindClassData(bean, view);
            return bean;
        }

        /**
         * 设置 绑定 View
         *
         * @param bindingView
         * @param view
         * @param context
         * @param <T>
         * @return
         */
        public static <T> T setContentView(Object bindingView, View view, Context context) {
            if (bindingView == null || view == null) return null;

            if (context == null) {

                context = (Context) AnnotationAssist.returnActivityOrView(bindingView)[0];

                if (context == null && bindingView instanceof Context) {
                    context = (Context) bindingView;
                }

                if (context == null) {
                    context = view.getContext();
                }

                if (context == null) {
                    context = GT.getActivity();
                }
            }

            //清空 xml 布局信息
            viewBeanList.clear();
            //第一步：取布局中所有设置了ID的组件名与ID值
            analysisLayout(context, view);
            //第二部：获取代码自动生成的 DataBinding
            T bean = getDataBindingBean(bindingView.getClass().getName());//3
            //第三步：绑定类的数据
            bindClassData(bean, view);
            return bean;
        }

        //绑定 ViewModel
        public static <T> T dataBinding(Object thisObj) {
            if (thisObj == null) return null;
            T obj = null;
            try {
                boolean isCache = false;
                Class<ViewModel> classStr = (Class<ViewModel>) AnnotationAssist.getGenericityClass(thisObj);
                if (classStr != null) {
                    ViewModel viewModel = GT_Cache.getViewModel(classStr);
                    if (viewModel != null && viewModel instanceof ViewModel) {
                        obj = (T) viewModel;
                        isCache = true;
                    }
                }

                if (obj == null) {
                    //如果没有手动设置Model 那就从ViewModel类中智能取泛型model
                    if (classStr != null && thisObj instanceof ViewModelStoreOwner) {
                        ViewModelStoreOwner viewModelStoreOwner = (ViewModelStoreOwner) thisObj;
                        try {
                            obj = (T) new ViewModelProvider(viewModelStoreOwner).get(classStr);
                        } catch (Exception e) {
                            obj = (T) new AnnotationAssist().getGenericityObject(thisObj);
                        }
                    } else {
                        obj = (T) new AnnotationAssist().getGenericityObject(thisObj);
                    }

                    if (obj != null && obj instanceof ViewModel) {
                        GT_Cache.addViewModel(classStr, (ViewModel) obj);
                    }
                }

                if (!isCache) {//如果不是缓存，那就调用初始化方法
                    //关联 onViewModeFeedback 方法触发
                    Object state = AnnotationAssist.setReflectMethodValue(obj, "setBindingData", String.class, Object.class, thisObj);
                    if ("false".equals(state)) {
                        if (LOG.GT_LOG_TF) {
                            GT.errs("View 与 ViewMode 自动绑定失败，请手动绑定");
                            logt("反射出来的类：" + obj);
                            logt("被操作的类:" + obj);
                            logt("自适应返回值类型:" + thisObj);
                            logt("反射赋值的方法");
                        }
                    }
                } else {//如果是缓存，那就仅仅加载 bindingView
                    Object state = AnnotationAssist.setReflectMethodValue(obj, "loadBindingView", String.class, Object.class, thisObj);
                    if ("false".equals(state)) {
                        if (LOG.GT_LOG_TF) {
                            GT.errs("View 与 ViewMode 自动绑定失败，请手动绑定");
                            logt("反射出来的类：" + obj);
                            logt("被操作的类:" + obj);
                            logt("自适应返回值类型:" + thisObj);
                            logt("反射赋值的方法");
                        }
                    }
                }

            } catch (Exception e) {
                if (LOG.GT_LOG_TF) {
                    GT.errt("thisObj:" + thisObj);
                    GT.errt("View 与 ViewMode 自动绑定失败，请手动绑定:" + e);
                }
            }
            return obj;
        }

        /**
         * 绑定类数据
         *
         * @param bean
         * @param activity
         * @param <T>
         * @return
         */
        private static <T> T bindClassData(T bean, Object mView1) {
            if (bean == null) return null;
            Field[] fields = bean.getClass().getDeclaredFields();
            for (Field field : fields) {
                View view = null;
                String name = field.getName();
                field.setAccessible(true);
                ViewBean viewBean = viewBeanList.get(name);
                if (viewBean != null) {
                    View mView2 = null;

                    if (mView1 instanceof Activity) {
                        view = ((Activity) mView1).findViewById(viewBean.getViewId());
                    }

                    if (mView1 instanceof View) {
                        view = ((View) mView1).findViewById(viewBean.getViewId());
                    }

//                    logt("view:" + view);
                    try {
                        if (mView1 != null && view != null) field.set(bean, view);
                    } catch (Exception e) {
                        GT.log("e:" + e);
                    }
                    viewBean.view = null;
                    viewBean = null;
                }
            }
            viewBeanList.clear();
            return bean;
        }

        /**
         * 获取数据绑定的类
         *
         * @param activity
         * @param <T>
         * @return
         */
        private static <T> T getDataBindingBean(String className) {
            Class<T> cla = null;
            try {
                cla = (Class<T>) Class.forName(className + "Binding");
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }
            if (cla == null) return null;
            //第二步:获取数据绑定的具体类
            T bean = null;//定义泛型
            try {
                bean = cla.newInstance();//实体化
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            } catch (InstantiationException e) {
                e.printStackTrace();
            }
            return bean;
        }

        /**
         * 获取 Activity 布局
         *
         * @param activity
         * @return
         */
        private static View getActivityLayout(Activity activity) {
            View decorView = activity.getWindow().getDecorView();
            ViewGroup parent = decorView.findViewById(android.R.id.content);
            if (parent.getChildCount() > 0) {
                return parent.getChildAt(parent.getChildCount() - 1);
            }
            return null;
        }

        /**
         * 解析布局
         *
         * @param view
         */
        private static void analysisLayout(Context context, View view) {
            if (view == null) return;
            try {
                ViewBean viewBean = new ViewBean();
                if (view instanceof ViewGroup) {
                    ViewGroup viewGroup = (ViewGroup) view;
                    viewBean.setView(viewGroup);
                    viewBean.settClass(viewGroup.getClass());
                    if (viewGroup.getId() > 1079) {
                        viewBean.setViewId(viewGroup.getId());
                        String idName = context.getResources().getResourceEntryName(viewGroup.getId());
                        viewBean.setViewName(idName);
                    }
                    viewBeanList.put(viewBean.getViewName(), viewBean);
                    for (int index = 0; index < viewGroup.getChildCount(); index++) {
                        analysisLayout(context, viewGroup.getChildAt(index));//回调解析
                    }
                } else {
                    viewBean.setView(view);
                    viewBean.settClass(view.getClass());
                    if (view.getId() != -1) {
                        viewBean.setViewId(view.getId());
                        String idName = context.getResources().getResourceEntryName(view.getId());
                        viewBean.setViewName(idName);
                    }
                    viewBeanList.put(viewBean.getViewName(), viewBean);
                }
            } catch (Exception e) {

            }
        }


    }

    //自定义组工具集合
    public static class ViewUtils {

        /**
         * 跑马灯
         */
        public static class MarqueeTextView extends TextView {

            public MarqueeTextView(Context context) {
                this(context, null);
            }

            public MarqueeTextView(Context context, AttributeSet attrs) {
                super(context, attrs);
                //设置单行
                setSingleLine();
                //设置Ellipsize
                setEllipsize(TextUtils.TruncateAt.MARQUEE);
                //获取焦点
                setFocusable(true);
                //走马灯的重复次数，-1代表无限重复
                setMarqueeRepeatLimit(-1);
                //强制获得焦点
                setFocusableInTouchMode(true);
            }

            /*
             *这个属性这个View得到焦点,在这里我们设置为true,这个View就永远是有焦点的
             */
            @Override
            public boolean isFocused() {
                return true;
            }

        }

        /**
         * 遥感控制
         * 使用教程请查看官网：https://github.com/1079374315/GT
         */
        public static class RockerView extends View {

            //返回字符串方向
            public static String getDirection(Direction direction) {
                String message = null;
                switch (direction) {
                    case DIRECTION_LEFT:
                        message = "左";
                        break;
                    case DIRECTION_RIGHT:
                        message = "右";
                        break;
                    case DIRECTION_UP:
                        message = "上";
                        break;
                    case DIRECTION_DOWN:
                        message = "下";
                        break;
                    case DIRECTION_UP_LEFT:
                        message = "左上";
                        break;
                    case DIRECTION_UP_RIGHT:
                        message = "右上";
                        break;
                    case DIRECTION_DOWN_LEFT:
                        message = "左下";
                        break;
                    case DIRECTION_DOWN_RIGHT:
                        message = "右下";
                        break;
                    default:
                        break;
                }
                return message;
            }

            private static final int DEFAULT_SIZE = 400;
            private static final int DEFAULT_ROCKER_RADIUS = 50;
            private Paint mAreaBackgroundPaint;
            private Paint mRockerPaint;
            private Point mRockerPosition;
            private Point mCenterPoint;
            private int mAreaRadius;
            private int mRockerRadius;
            private CallBackMode mCallBackMode;
            private OnAngleChangeListener mOnAngleChangeListener;
            private OnShakeListener mOnShakeListener;
            private DirectionMode mDirectionMode;
            private Direction tempDirection;
            private static final double ANGLE_0 = 0.0D;
            private static final double ANGLE_360 = 360.0D;
            private static final double ANGLE_HORIZONTAL_2D_OF_0P = 90.0D;
            private static final double ANGLE_HORIZONTAL_2D_OF_1P = 270.0D;
            private static final double ANGLE_VERTICAL_2D_OF_0P = 0.0D;
            private static final double ANGLE_VERTICAL_2D_OF_1P = 180.0D;
            private static final double ANGLE_4D_OF_0P = 0.0D;
            private static final double ANGLE_4D_OF_1P = 90.0D;
            private static final double ANGLE_4D_OF_2P = 180.0D;
            private static final double ANGLE_4D_OF_3P = 270.0D;
            private static final double ANGLE_ROTATE45_4D_OF_0P = 45.0D;
            private static final double ANGLE_ROTATE45_4D_OF_1P = 135.0D;
            private static final double ANGLE_ROTATE45_4D_OF_2P = 225.0D;
            private static final double ANGLE_ROTATE45_4D_OF_3P = 315.0D;
            private static final double ANGLE_8D_OF_0P = 22.5D;
            private static final double ANGLE_8D_OF_1P = 67.5D;
            private static final double ANGLE_8D_OF_2P = 112.5D;
            private static final double ANGLE_8D_OF_3P = 157.5D;
            private static final double ANGLE_8D_OF_4P = 202.5D;
            private static final double ANGLE_8D_OF_5P = 247.5D;
            private static final double ANGLE_8D_OF_6P = 292.5D;
            private static final double ANGLE_8D_OF_7P = 337.5D;
            private static final int AREA_BACKGROUND_MODE_PIC = 0;
            private static final int AREA_BACKGROUND_MODE_COLOR = 1;
            private static final int AREA_BACKGROUND_MODE_XML = 2;
            private static final int AREA_BACKGROUND_MODE_DEFAULT = 3;
            private int mAreaBackgroundMode;
            private Bitmap mAreaBitmap;
            private int mAreaColor;
            private static final int ROCKER_BACKGROUND_MODE_PIC = 4;
            private static final int ROCKER_BACKGROUND_MODE_COLOR = 5;
            private static final int ROCKER_BACKGROUND_MODE_XML = 6;
            private static final int ROCKER_BACKGROUND_MODE_DEFAULT = 7;
            private int mRockerBackgroundMode;
            private Bitmap mRockerBitmap;
            private int mRockerColor;

            public RockerView(Context context, AttributeSet attrs) {
                super(context, attrs);
                this.mCallBackMode = CallBackMode.CALL_BACK_MODE_MOVE;
                this.tempDirection = Direction.DIRECTION_CENTER;
                this.mAreaBackgroundMode = 3;
                this.mRockerBackgroundMode = 7;
                this.initAttribute(context, attrs);
                if (this.isInEditMode()) {
                    //            GT.log("RockerView", "RockerView: isInEditMode");
                }

                this.mAreaBackgroundPaint = new Paint();
                this.mAreaBackgroundPaint.setAntiAlias(true);
                this.mRockerPaint = new Paint();
                this.mRockerPaint.setAntiAlias(true);
                this.mCenterPoint = new Point();
                this.mRockerPosition = new Point();
            }

            private void initAttribute(Context context, AttributeSet attrs) {
                TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.RockerView);
                Drawable areaBackground = typedArray.getDrawable(R.styleable.RockerView_areaBackground);
                if (null != areaBackground) {
                    if (areaBackground instanceof BitmapDrawable) {
                        this.mAreaBitmap = ((BitmapDrawable) areaBackground).getBitmap();
                        this.mAreaBackgroundMode = 0;
                    } else if (areaBackground instanceof GradientDrawable) {
                        this.mAreaBitmap = this.drawable2Bitmap(areaBackground);
                        this.mAreaBackgroundMode = 2;
                    } else if (areaBackground instanceof ColorDrawable) {
                        this.mAreaColor = ((ColorDrawable) areaBackground).getColor();
                        this.mAreaBackgroundMode = 1;
                    } else {
                        this.mAreaBackgroundMode = 3;
                    }
                } else {
                    this.mAreaBackgroundMode = 3;
                }

                Drawable rockerBackground = typedArray.getDrawable(R.styleable.RockerView_rockerBackground);
                if (null != rockerBackground) {
                    if (rockerBackground instanceof BitmapDrawable) {
                        this.mRockerBitmap = ((BitmapDrawable) rockerBackground).getBitmap();
                        this.mRockerBackgroundMode = 4;
                    } else if (rockerBackground instanceof GradientDrawable) {
                        this.mRockerBitmap = this.drawable2Bitmap(rockerBackground);
                        this.mRockerBackgroundMode = 6;
                    } else if (rockerBackground instanceof ColorDrawable) {
                        this.mRockerColor = ((ColorDrawable) rockerBackground).getColor();
                        this.mRockerBackgroundMode = 5;
                    } else {
                        this.mRockerBackgroundMode = 7;
                    }
                } else {
                    this.mRockerBackgroundMode = 7;
                }

                this.mRockerRadius = typedArray.getDimensionPixelOffset(R.styleable.RockerView_rockerRadius, 50);
                //        GT.log("RockerView", "initAttribute: mAreaBackground = " + areaBackground + "   mRockerBackground = " + rockerBackground + "  mRockerRadius = " + this.mRockerRadius);
                typedArray.recycle();
            }

            protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                int widthMode = MeasureSpec.getMode(widthMeasureSpec);
                int heightMode = MeasureSpec.getMode(heightMeasureSpec);
                int widthSize = MeasureSpec.getSize(widthMeasureSpec);
                int heightSize = MeasureSpec.getSize(heightMeasureSpec);
                int measureWidth;
                if (widthMode == 1073741824) {
                    measureWidth = widthSize;
                } else {
                    measureWidth = 400;
                }

                int measureHeight;
                if (heightMode == 1073741824) {
                    measureHeight = heightSize;
                } else {
                    measureHeight = 400;
                }

                this.setMeasuredDimension(measureWidth, measureHeight);
            }

            protected void onDraw(Canvas canvas) {
                super.onDraw(canvas);
                int measuredWidth = this.getMeasuredWidth();
                int measuredHeight = this.getMeasuredHeight();
                int cx = measuredWidth / 2;
                int cy = measuredHeight / 2;
                this.mCenterPoint.set(cx, cy);
                this.mAreaRadius = measuredWidth <= measuredHeight ? cx : cy;
                if (0 == this.mRockerPosition.x || 0 == this.mRockerPosition.y) {
                    this.mRockerPosition.set(this.mCenterPoint.x, this.mCenterPoint.y);
                }

                Rect src;
                Rect dst;
                if (0 != this.mAreaBackgroundMode && 2 != this.mAreaBackgroundMode) {
                    if (1 == this.mAreaBackgroundMode) {
                        this.mAreaBackgroundPaint.setColor(this.mAreaColor);
                        canvas.drawCircle((float) this.mCenterPoint.x, (float) this.mCenterPoint.y, (float) this.mAreaRadius, this.mAreaBackgroundPaint);
                    } else {
                        this.mAreaBackgroundPaint.setColor(-7829368);
                        canvas.drawCircle((float) this.mCenterPoint.x, (float) this.mCenterPoint.y, (float) this.mAreaRadius, this.mAreaBackgroundPaint);
                    }
                } else {
                    src = new Rect(0, 0, this.mAreaBitmap.getWidth(), this.mAreaBitmap.getHeight());
                    dst = new Rect(this.mCenterPoint.x - this.mAreaRadius, this.mCenterPoint.y - this.mAreaRadius, this.mCenterPoint.x + this.mAreaRadius, this.mCenterPoint.y + this.mAreaRadius);
                    canvas.drawBitmap(this.mAreaBitmap, src, dst, this.mAreaBackgroundPaint);
                }

                if (4 != this.mRockerBackgroundMode && 6 != this.mRockerBackgroundMode) {
                    if (5 == this.mRockerBackgroundMode) {
                        this.mRockerPaint.setColor(this.mRockerColor);
                        canvas.drawCircle((float) this.mRockerPosition.x, (float) this.mRockerPosition.y, (float) this.mRockerRadius, this.mRockerPaint);
                    } else {
                        this.mRockerPaint.setColor(-65536);
                        canvas.drawCircle((float) this.mRockerPosition.x, (float) this.mRockerPosition.y, (float) this.mRockerRadius, this.mRockerPaint);
                    }
                } else {
                    src = new Rect(0, 0, this.mRockerBitmap.getWidth(), this.mRockerBitmap.getHeight());
                    dst = new Rect(this.mRockerPosition.x - this.mRockerRadius, this.mRockerPosition.y - this.mRockerRadius, this.mRockerPosition.x + this.mRockerRadius, this.mRockerPosition.y + this.mRockerRadius);
                    canvas.drawBitmap(this.mRockerBitmap, src, dst, this.mRockerPaint);
                }

            }

            public boolean onTouchEvent(MotionEvent event) {
                switch (event.getAction()) {
                    case 0:
                        this.callBackStart();
                    case 2:
                        float moveX = event.getX();
                        float moveY = event.getY();
                        this.mRockerPosition = this.getRockerPositionPoint(this.mCenterPoint, new Point((int) moveX, (int) moveY), (float) this.mAreaRadius, (float) this.mRockerRadius);
                        this.moveRocker((float) this.mRockerPosition.x, (float) this.mRockerPosition.y);
                        break;
                    case 1:
                    case 3:
                        this.callBackFinish();
                        float upX = event.getX();
                        float upY = event.getY();
                        this.moveRocker((float) this.mCenterPoint.x, (float) this.mCenterPoint.y);
                        //                GT.log("RockerView", "onTouchEvent: 抬起位置 : x = " + upX + " y = " + upY);
                }

                return true;
            }

            private Point getRockerPositionPoint(Point centerPoint, Point touchPoint, float regionRadius, float rockerRadius) {
                float lenX = (float) (touchPoint.x - centerPoint.x);
                float lenY = (float) (touchPoint.y - centerPoint.y);
                float lenXY = (float) Math.sqrt((double) (lenX * lenX + lenY * lenY));
                double radian = Math.acos((double) (lenX / lenXY)) * (double) (touchPoint.y < centerPoint.y ? -1 : 1);
                double angle = this.radian2Angle(radian);
                this.callBack(angle);
                //        GT.log("RockerView", "getRockerPositionPoint: 角度 :" + angle);
                if (lenXY + rockerRadius <= regionRadius) {
                    return touchPoint;
                } else {
                    int showPointX = (int) ((double) centerPoint.x + (double) (regionRadius - rockerRadius) * Math.cos(radian));
                    int showPointY = (int) ((double) centerPoint.y + (double) (regionRadius - rockerRadius) * Math.sin(radian));
                    return new Point(showPointX, showPointY);
                }
            }

            private void moveRocker(float x, float y) {
                this.mRockerPosition.set((int) x, (int) y);
                //        GT.log("RockerView", "onTouchEvent: 移动位置 : x = " + this.mRockerPosition.x + " y = " + this.mRockerPosition.y);
                this.invalidate();
            }

            private double radian2Angle(double radian) {
                double tmp = (double) Math.round(radian / 3.141592653589793D * 180.0D);
                return tmp >= 0.0D ? tmp : 360.0D + tmp;
            }

            private Bitmap drawable2Bitmap(Drawable drawable) {
                int width = drawable.getIntrinsicWidth();
                int height = drawable.getIntrinsicHeight();
                @SuppressLint("WrongConstant") Bitmap.Config config = drawable.getOpacity() != -1 ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565;
                Bitmap bitmap = Bitmap.createBitmap(width, height, config);
                Canvas canvas = new Canvas(bitmap);
                drawable.setBounds(0, 0, width, height);
                drawable.draw(canvas);
                return bitmap;
            }

            private void callBackStart() {
                this.tempDirection = Direction.DIRECTION_CENTER;
                if (null != this.mOnAngleChangeListener) {
                    this.mOnAngleChangeListener.onStart();
                }

                if (null != this.mOnShakeListener) {
                    this.mOnShakeListener.onStart();
                }

            }

            private void callBack(double angle) {
                if (null != this.mOnAngleChangeListener) {
                    this.mOnAngleChangeListener.angle(angle);
                }

                if (null != this.mOnShakeListener) {
                    if (CallBackMode.CALL_BACK_MODE_MOVE == this.mCallBackMode) {
                        switch (this.mDirectionMode) {
                            case DIRECTION_2_HORIZONTAL:
                                if ((0.0D > angle || 90.0D <= angle) && (270.0D > angle || 360.0D <= angle)) {
                                    if (90.0D <= angle && 270.0D > angle) {
                                        this.mOnShakeListener.direction(Direction.DIRECTION_LEFT);
                                    }
                                } else {
                                    this.mOnShakeListener.direction(Direction.DIRECTION_RIGHT);
                                }
                                break;
                            case DIRECTION_2_VERTICAL:
                                if (0.0D <= angle && 180.0D > angle) {
                                    this.mOnShakeListener.direction(Direction.DIRECTION_DOWN);
                                } else if (180.0D <= angle && 360.0D > angle) {
                                    this.mOnShakeListener.direction(Direction.DIRECTION_UP);
                                }
                                break;
                            case DIRECTION_4_ROTATE_0:
                                if (0.0D <= angle && 90.0D > angle) {
                                    this.mOnShakeListener.direction(Direction.DIRECTION_DOWN_RIGHT);
                                } else if (90.0D <= angle && 180.0D > angle) {
                                    this.mOnShakeListener.direction(Direction.DIRECTION_DOWN_LEFT);
                                } else if (180.0D <= angle && 270.0D > angle) {
                                    this.mOnShakeListener.direction(Direction.DIRECTION_UP_LEFT);
                                } else if (270.0D <= angle && 360.0D > angle) {
                                    this.mOnShakeListener.direction(Direction.DIRECTION_UP_RIGHT);
                                }
                                break;
                            case DIRECTION_4_ROTATE_45:
                                if ((0.0D > angle || 45.0D <= angle) && (315.0D > angle || 360.0D <= angle)) {
                                    if (45.0D <= angle && 135.0D > angle) {
                                        this.mOnShakeListener.direction(Direction.DIRECTION_DOWN);
                                    } else if (135.0D <= angle && 225.0D > angle) {
                                        this.mOnShakeListener.direction(Direction.DIRECTION_LEFT);
                                    } else if (225.0D <= angle && 315.0D > angle) {
                                        this.mOnShakeListener.direction(Direction.DIRECTION_UP);
                                    }
                                } else {
                                    this.mOnShakeListener.direction(Direction.DIRECTION_RIGHT);
                                }
                                break;
                            case DIRECTION_8:
                                if ((0.0D > angle || 22.5D <= angle) && (337.5D > angle || 360.0D <= angle)) {
                                    if (22.5D <= angle && 67.5D > angle) {
                                        this.mOnShakeListener.direction(Direction.DIRECTION_DOWN_RIGHT);
                                    } else if (67.5D <= angle && 112.5D > angle) {
                                        this.mOnShakeListener.direction(Direction.DIRECTION_DOWN);
                                    } else if (112.5D <= angle && 157.5D > angle) {
                                        this.mOnShakeListener.direction(Direction.DIRECTION_DOWN_LEFT);
                                    } else if (157.5D <= angle && 202.5D > angle) {
                                        this.mOnShakeListener.direction(Direction.DIRECTION_LEFT);
                                    } else if (202.5D <= angle && 247.5D > angle) {
                                        this.mOnShakeListener.direction(Direction.DIRECTION_UP_LEFT);
                                    } else if (247.5D <= angle && 292.5D > angle) {
                                        this.mOnShakeListener.direction(Direction.DIRECTION_UP);
                                    } else if (292.5D <= angle && 337.5D > angle) {
                                        this.mOnShakeListener.direction(Direction.DIRECTION_UP_RIGHT);
                                    }
                                } else {
                                    this.mOnShakeListener.direction(Direction.DIRECTION_RIGHT);
                                }
                        }
                    } else if (CallBackMode.CALL_BACK_MODE_STATE_CHANGE == this.mCallBackMode) {
                        switch (this.mDirectionMode) {
                            case DIRECTION_2_HORIZONTAL:
                                if ((0.0D <= angle && 90.0D > angle || 270.0D <= angle && 360.0D > angle) && this.tempDirection != Direction.DIRECTION_RIGHT) {
                                    this.tempDirection = Direction.DIRECTION_RIGHT;
                                    this.mOnShakeListener.direction(Direction.DIRECTION_RIGHT);
                                } else if (90.0D <= angle && 270.0D > angle && this.tempDirection != Direction.DIRECTION_LEFT) {
                                    this.tempDirection = Direction.DIRECTION_LEFT;
                                    this.mOnShakeListener.direction(Direction.DIRECTION_LEFT);
                                }
                                break;
                            case DIRECTION_2_VERTICAL:
                                if (0.0D <= angle && 180.0D > angle && this.tempDirection != Direction.DIRECTION_DOWN) {
                                    this.tempDirection = Direction.DIRECTION_DOWN;
                                    this.mOnShakeListener.direction(Direction.DIRECTION_DOWN);
                                } else if (180.0D <= angle && 360.0D > angle && this.tempDirection != Direction.DIRECTION_UP) {
                                    this.tempDirection = Direction.DIRECTION_UP;
                                    this.mOnShakeListener.direction(Direction.DIRECTION_UP);
                                }
                                break;
                            case DIRECTION_4_ROTATE_0:
                                if (0.0D <= angle && 90.0D > angle && this.tempDirection != Direction.DIRECTION_DOWN_RIGHT) {
                                    this.tempDirection = Direction.DIRECTION_DOWN_RIGHT;
                                    this.mOnShakeListener.direction(Direction.DIRECTION_DOWN_RIGHT);
                                } else if (90.0D <= angle && 180.0D > angle && this.tempDirection != Direction.DIRECTION_DOWN_LEFT) {
                                    this.tempDirection = Direction.DIRECTION_DOWN_LEFT;
                                    this.mOnShakeListener.direction(Direction.DIRECTION_DOWN_LEFT);
                                } else if (180.0D <= angle && 270.0D > angle && this.tempDirection != Direction.DIRECTION_UP_LEFT) {
                                    this.tempDirection = Direction.DIRECTION_UP_LEFT;
                                    this.mOnShakeListener.direction(Direction.DIRECTION_UP_LEFT);
                                } else if (270.0D <= angle && 360.0D > angle && this.tempDirection != Direction.DIRECTION_UP_RIGHT) {
                                    this.tempDirection = Direction.DIRECTION_UP_RIGHT;
                                    this.mOnShakeListener.direction(Direction.DIRECTION_UP_RIGHT);
                                }
                                break;
                            case DIRECTION_4_ROTATE_45:
                                if ((0.0D <= angle && 45.0D > angle || 315.0D <= angle && 360.0D > angle) && this.tempDirection != Direction.DIRECTION_RIGHT) {
                                    this.tempDirection = Direction.DIRECTION_RIGHT;
                                    this.mOnShakeListener.direction(Direction.DIRECTION_RIGHT);
                                } else if (45.0D <= angle && 135.0D > angle && this.tempDirection != Direction.DIRECTION_DOWN) {
                                    this.tempDirection = Direction.DIRECTION_DOWN;
                                    this.mOnShakeListener.direction(Direction.DIRECTION_DOWN);
                                } else if (135.0D <= angle && 225.0D > angle && this.tempDirection != Direction.DIRECTION_LEFT) {
                                    this.tempDirection = Direction.DIRECTION_LEFT;
                                    this.mOnShakeListener.direction(Direction.DIRECTION_LEFT);
                                } else if (225.0D <= angle && 315.0D > angle && this.tempDirection != Direction.DIRECTION_UP) {
                                    this.tempDirection = Direction.DIRECTION_UP;
                                    this.mOnShakeListener.direction(Direction.DIRECTION_UP);
                                }
                                break;
                            case DIRECTION_8:
                                if ((0.0D <= angle && 22.5D > angle || 337.5D <= angle && 360.0D > angle) && this.tempDirection != Direction.DIRECTION_RIGHT) {
                                    this.tempDirection = Direction.DIRECTION_RIGHT;
                                    this.mOnShakeListener.direction(Direction.DIRECTION_RIGHT);
                                } else if (22.5D <= angle && 67.5D > angle && this.tempDirection != Direction.DIRECTION_DOWN_RIGHT) {
                                    this.tempDirection = Direction.DIRECTION_DOWN_RIGHT;
                                    this.mOnShakeListener.direction(Direction.DIRECTION_DOWN_RIGHT);
                                } else if (67.5D <= angle && 112.5D > angle && this.tempDirection != Direction.DIRECTION_DOWN) {
                                    this.tempDirection = Direction.DIRECTION_DOWN;
                                    this.mOnShakeListener.direction(Direction.DIRECTION_DOWN);
                                } else if (112.5D <= angle && 157.5D > angle && this.tempDirection != Direction.DIRECTION_DOWN_LEFT) {
                                    this.tempDirection = Direction.DIRECTION_DOWN_LEFT;
                                    this.mOnShakeListener.direction(Direction.DIRECTION_DOWN_LEFT);
                                } else if (157.5D <= angle && 202.5D > angle && this.tempDirection != Direction.DIRECTION_LEFT) {
                                    this.tempDirection = Direction.DIRECTION_LEFT;
                                    this.mOnShakeListener.direction(Direction.DIRECTION_LEFT);
                                } else if (202.5D <= angle && 247.5D > angle && this.tempDirection != Direction.DIRECTION_UP_LEFT) {
                                    this.tempDirection = Direction.DIRECTION_UP_LEFT;
                                    this.mOnShakeListener.direction(Direction.DIRECTION_UP_LEFT);
                                } else if (247.5D <= angle && 292.5D > angle && this.tempDirection != Direction.DIRECTION_UP) {
                                    this.tempDirection = Direction.DIRECTION_UP;
                                    this.mOnShakeListener.direction(Direction.DIRECTION_UP);
                                } else if (292.5D <= angle && 337.5D > angle && this.tempDirection != Direction.DIRECTION_UP_RIGHT) {
                                    this.tempDirection = Direction.DIRECTION_UP_RIGHT;
                                    this.mOnShakeListener.direction(Direction.DIRECTION_UP_RIGHT);
                                }
                        }
                    }
                }

            }

            private void callBackFinish() {
                this.tempDirection = Direction.DIRECTION_CENTER;
                if (null != this.mOnAngleChangeListener) {
                    this.mOnAngleChangeListener.onFinish();
                }

                if (null != this.mOnShakeListener) {
                    this.mOnShakeListener.onFinish();
                }

            }

            public void setCallBackMode(CallBackMode mode) {
                this.mCallBackMode = mode;
            }

            public void setOnAngleChangeListener(OnAngleChangeListener listener) {
                this.mOnAngleChangeListener = listener;
            }

            public void setOnShakeListener(DirectionMode directionMode, OnShakeListener listener) {
                this.mDirectionMode = directionMode;
                this.mOnShakeListener = listener;
            }

            public interface OnAngleChangeListener {
                void onStart();

                void angle(double var1);

                void onFinish();
            }

            public interface OnShakeListener {
                void onStart();

                void direction(Direction var1);

                void onFinish();
            }

            public static enum Direction {
                DIRECTION_LEFT,
                DIRECTION_RIGHT,
                DIRECTION_UP,
                DIRECTION_DOWN,
                DIRECTION_UP_LEFT,
                DIRECTION_UP_RIGHT,
                DIRECTION_DOWN_LEFT,
                DIRECTION_DOWN_RIGHT,
                DIRECTION_CENTER;

                private Direction() {
                }
            }

            public static enum DirectionMode {
                DIRECTION_2_HORIZONTAL,
                DIRECTION_2_VERTICAL,
                DIRECTION_4_ROTATE_0,
                DIRECTION_4_ROTATE_45,
                DIRECTION_8;

                private DirectionMode() {
                }
            }

            public static enum CallBackMode {
                CALL_BACK_MODE_MOVE,
                CALL_BACK_MODE_STATE_CHANGE;

                private CallBackMode() {
                }
            }
        }

        /**
         * 流动布局
         */
        public static class FlowLayout extends ViewGroup {


            /**
             * 当前行已用的宽度，由子View宽度加上横向间隔
             */
            private int mUsedWidth = 0;
            /**
             * 代表一行
             */
            private Line mLine = null;
            /**
             * 默认间隔
             */
            public static final int DEFAULT_SPACING = 20;
            /**
             * 横向间隔
             */
            private int mHorizontalSpacing = DEFAULT_SPACING;
            /**
             * 纵向间隔
             */
            private int mVerticalSpacing = DEFAULT_SPACING;
            /**
             * 代表行的集合
             */
            private final List<Line> mLines = new ArrayList<Line>();
            /**
             * 默认的最大的行数
             */
            private int mMaxLinesCount = Integer.MAX_VALUE;
            /**
             * 是否让子view充满该行
             */
            private boolean fillLine = false;

            public FlowLayout(Context context) {
                super(context);
            }

            public FlowLayout(Context context, AttributeSet attrs) {
                super(context, attrs);
            }

            /**
             * 是否填充满改行，如果是false，右边有空间
             */
            public void setFillLine(boolean fill) {
                fillLine = fill;
            }

            // 设置两个view水平间距
            public void setHorizontalSpacing(int spacing) {
                if (mHorizontalSpacing != spacing) {
                    mHorizontalSpacing = spacing;
                    requestLayout();
                }
            }

            /**
             * 设置纵向间距
             */
            public void setVerticalSpacing(int spacing) {
                if (mVerticalSpacing != spacing) {
                    mVerticalSpacing = spacing;
                    requestLayout();
                }
            }

            @Override
            protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                // 1获取with height 以及mode
                int widthMode = MeasureSpec.getMode(widthMeasureSpec);
                int heightMode = MeasureSpec.getMode(heightMeasureSpec);

                int heightSize = MeasureSpec.getSize(heightMeasureSpec)
                        - getPaddingBottom() - getPaddingTop();
                int widthSize = MeasureSpec.getSize(widthMeasureSpec)
                        - getPaddingLeft() - getPaddingRight();
                restoreLine();
                int count = getChildCount();
                // 2 测量子View
                for (int i = 0; i < count; i++) {
                    View child = getChildAt(i);

                    int widthSpec = MeasureSpec.makeMeasureSpec(widthSize,
                            widthMode == MeasureSpec.EXACTLY ? MeasureSpec.AT_MOST
                                    : widthMode);
                    int heightSpec = MeasureSpec.makeMeasureSpec(heightSize,
                            heightMode == MeasureSpec.EXACTLY ? MeasureSpec.AT_MOST
                                    : heightMode);

                    child.measure(widthSpec, heightSpec);
                    if (mLine == null) {
                        mLine = new Line();
                    }
                    // 将childview 添加到每一行中
                    int childWidth = child.getMeasuredWidth();
                    // 当前行已经占用的宽度
                    mUsedWidth += childWidth;
                    if (mUsedWidth < widthSize) {
                        // 当前行还没有达到上限，那么该child就添加进这一行
                        mLine.addView(child);
                        mUsedWidth += mHorizontalSpacing; // 添加上两个子View之间水平方向的间隔
                    } else {
                        // 说明长度超出了当前的最大宽度
                        if (mLine.getViewCount() == 0) {
                            // 表示当前行中还没有元素，添加的第一个元素 长度就超过了最大宽度，那么也要把该child 添加进去保证有数据
                            mLine.addView(child);
                            // 同时换行
                        } else {
                            // 表示当前行中已经有元素，那么换一行，添加进去
                            newLine();
                            mLine.addView(child);
                            // 改变已使用的宽度
                            mUsedWidth += mHorizontalSpacing + childWidth;
                        }

                    }
                }

                // 前面只有换行的时候才将Line 添加到lines 集合中，这里要判断一下最后一行，将最后一行也添加进去
                if (mLine != null && mLine.getViewCount() > 0
                        && !mLines.contains(mLine)) {
                    // 表示有数据
                    mLines.add(mLine);
                }

                // 设置测量的宽高setMeasuredDimension
                int totoalHeight = 0;
                for (int i = 0; i < mLines.size(); i++) {
                    totoalHeight += mLines.get(i).mHeight;// N行的高度
                }
                // 加上 行间距
                totoalHeight += (mLines.size() - 1) * mVerticalSpacing;
                // 加上padding
                totoalHeight += getPaddingBottom() + getPaddingTop();
                // 设置FlowLayout的宽度值 高度值 宽度就是默认的宽度，高度是总的高度
                int measuredHeight = resolveSize(totoalHeight, heightMeasureSpec);
                setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec),
                        measuredHeight);
            }

            @Override
            protected void onLayout(boolean changed, int l, int t, int r, int b) {
                // 主要是调用child.layout
                int count = mLines.size();
                int left = getPaddingLeft();
                int top = getPaddingTop();

                for (int i = 0; i < count; i++) {
                    Line line = mLines.get(i);
                    line.layout(left, top);
                    top += mVerticalSpacing + line.mHeight;
                }
            }


            /**
             * 还原所有数据
             */
            private void restoreLine() {
                mLines.clear();
                mLine = new Line();
                mUsedWidth = 0;
            }

            /**
             * 新增加一行
             */
            private boolean newLine() {
                mLines.add(mLine);
                if (mLines.size() < mMaxLinesCount) {
                    mLine = new Line();
                    mUsedWidth = 0;
                    return true;
                }
                return false;
            }

            /***
             * 代表着一行，封装了一行所占高度，该行子View的集合，以及所有View的宽度总和
             *
             * @author Administrator
             *
             */
            public class Line {

                int mWidth = 0;// 该行中所有的子View累加的宽度
                int mHeight = 0;// 该行中所有的子View中高度最高的那个子View的高度

                List<View> views = new ArrayList<View>();// 存放一行中的View

                public void addView(View child) {
                    views.add(child);
                    mWidth += child.getMeasuredWidth();
                    int childHeight = child.getMeasuredHeight();
                    mHeight = mHeight < childHeight ? childHeight : mHeight;// 高度等于一行中最高的View
                }

                /***
                 * layout 子view
                 * @param l
                 * @param t
                 */
                public void layout(int l, int t) {
                    int left = l;
                    int top = t;
                    // 父布局的宽度
                    int totoalWidth = getMeasuredWidth() - getPaddingLeft()
                            - getPaddingRight();
                    // 当前line 中view的个数
                    int count = getViewCount();
                    // 剩余空间平分给每个View
                    int spaceLast = totoalWidth - mWidth - (count - 1)
                            * mHorizontalSpacing;
                    int averageWidth = spaceLast / count;
                    // 平分的宽度
                    // int splitSpacing = (int) (spaceLast / count + 0.5);
                    for (int i = 0; i < count; i++) {
                        View child = views.get(i);
                        int childHeight = child.getMeasuredHeight();
                        int childWidth = child.getMeasuredWidth();

                        if (fillLine) {// 要充满该行
                            childWidth += averageWidth;
                            child.getLayoutParams().width = childWidth;
                            // 改变了原来的宽高，重新测量一次
                            int widthMeasureSpec = MeasureSpec.makeMeasureSpec(
                                    childWidth, MeasureSpec.EXACTLY);
                            int heightMeasureSpec = MeasureSpec.makeMeasureSpec(
                                    childHeight, MeasureSpec.EXACTLY);
                            // 再次测量
                            child.measure(widthMeasureSpec, heightMeasureSpec);

                        }
                        // 布局View
                        child.layout(left, top, left + childWidth, top + childHeight);
                        left += childWidth + mHorizontalSpacing; // 为下一个View的left赋值
                    }
                }

                /**
                 * 该行中view的个数
                 *
                 * @return
                 */
                public int getViewCount() {
                    return views.size();
                }

            }
        }

        /**
         * 拖动View
         */
        public static class TouchView {

            /**
             * 设置View可拖动
             *
             * @param view
             * @param isDrag 是否可拖动
             */
            public static void setDrag(View view, boolean isDrag) {
                if (!isDrag) {
                    view.setOnTouchListener(null);
                    return;
                }

                final double[] lastX = new double[1];
                final double[] lastY = new double[1];
                view.setOnTouchListener(new View.OnTouchListener() {
                    @Override
                    public boolean onTouch(View v, MotionEvent event) {
                        //此方法获取的是手指相对于view的左上角的x,y值
                        int x = (int) event.getX();
                        int y = (int) event.getY();
                        switch (event.getAction()) {
                            case MotionEvent.ACTION_DOWN:
                                lastX[0] = x;
                                lastY[0] = y;
                                break;
                            case MotionEvent.ACTION_MOVE:
                                int offsetX = (int) (x - lastX[0]);
                                int offsetY = (int) (y - lastY[0]);
                                view.layout(view.getLeft() + offsetX, view.getTop() + offsetY, view.getRight() + offsetX, view.getBottom() + offsetY);
                                break;
                        }
                        return false;
                    }
                });

            }

        }

        /**
         * 设置触摸放大
         */
        public static class ViewTouchMagnify {
            private static int viewWidth;        //保存按钮宽度
            private static int viewHeight;       //保存按钮高度

            /**
             * 为按钮设置触摸事件
             *
             * @param view
             */
            public static void touchZoomInView(final View view) {
                //设置按钮触摸事件
                view.setOnTouchListener(new View.OnTouchListener() {
                    public boolean onTouch(View arg0, MotionEvent arg1) {
                        ViewGroup.LayoutParams layoutParams = view.getLayoutParams();
                        if (arg1.getAction() == MotionEvent.ACTION_DOWN) {//如果用户手指触摸屏幕
                            viewWidth = view.getWidth();        //保存按钮的宽度
                            viewHeight = view.getHeight();        //保存按钮的高度
                            //                        view.setTextSize(18);								//设置按钮放大时字体大小
                            layoutParams.width = viewWidth + 20;                //设置按钮放大时的宽度
                            layoutParams.height = viewHeight + 10;            //设置按钮放大时的高度
                        } else if (arg1.getAction() == MotionEvent.ACTION_UP) {//如果用户手指离开屏幕
                            //                        button.setTextSize(15);							//设置按钮为原来字体大小
                            layoutParams.width = viewWidth;                //设置按钮为原来的宽度
                            layoutParams.height = viewHeight;                //设置按钮为原来的高度
                        }
                        view.setLayoutParams(layoutParams);    //提交事务
                        return false; //设置为未完成消耗掉的时间   如果将此返回为     true  那么按钮的  单击事件将会被屏蔽掉
                    }
                });

            }

        }

        /**
         * 嵌套滑动
         */
        public static class NestScrollView extends ScrollView {
            public NestScrollView(Context context) {
                this(context, null);
            }

            public NestScrollView(Context context, AttributeSet attrs) {
                this(context, attrs, 0);
            }

            public NestScrollView(Context context, AttributeSet attrs, int defStyleAttr) {
                super(context, attrs, defStyleAttr);
            }

            @Override
            public boolean onInterceptTouchEvent(MotionEvent ev) {
                //关键点在这
                getParent().requestDisallowInterceptTouchEvent(true);//不要拦截父事件
                return super.onInterceptTouchEvent(ev);
            }

        }

        /**
         * 延迟触发(如：EditText输入完后再触发)
         */
        public static class DelayTrigger {

            private OnTriggerValue onTriggerValue;
            private EditText et;

            public void EditText(EditText et, int sleep, OnTriggerValue onTriggerValue) {
                this.et = et;
                this.onTriggerValue = onTriggerValue;
                et.addTextChangedListener(new TextWatcher() {
                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                        //在文本之前改变
                    }

                    @Override
                    public void onTextChanged(CharSequence s, int start, int before, int count) {
                        //正在改变中
                    }

                    @Override
                    public void afterTextChanged(Editable s) {
                        //文本之后改变了
                        if (delayRun != null) {
                            //每次editText有变化的时候，则移除上次发出的延迟线程
                            handler.removeCallbacks(delayRun);
                        }
                        //延迟800ms，如果不再输入字符，则执行该线程的run方法
                        handler.postDelayed(delayRun, sleep);
                    }
                });

            }

            private static Handler handler = new Handler();
            /**
             * 延迟线程，看是否还有下一个字符输入
             */
            private Runnable delayRun = new Runnable() {
                @Override
                public void run() {
                    //在这里调用服务器的接口，获取数据
                    if (onTriggerValue != null && et != null)
                        onTriggerValue.onTriggerValue(et.getText().toString());
                }
            };

            public interface OnTriggerValue {
                void onTriggerValue(String str);
            }
        }

        /**
         * 用于获取输入法高度
         */
        public static class KeyboardLayout extends FrameLayout {

            private KeyboardLayoutListener mListener;
            private int delayTime;
            private boolean mIsKeyboardActive = false; //　输入法是否激活
            private int mKeyboardHeight = 0; // 输入法高度
            private Context context;
            private boolean isActive;
            private int keyboardHeight;

            public KeyboardLayout(Context context) {
                this(context, null, 0);
            }

            public KeyboardLayout(Context context, AttributeSet attrs) {
                this(context, attrs, 0);
            }

            public KeyboardLayout(Context context, AttributeSet attrs, int defStyleAttr) {
                super(context, attrs, defStyleAttr);// 监听布局变化
                getViewTreeObserver().addOnGlobalLayoutListener(new KeyboardOnGlobalChangeListener());
            }

            private class KeyboardOnGlobalChangeListener implements ViewTreeObserver.OnGlobalLayoutListener {
                private int mScreenHeight = 0;

                @Override
                public void onGlobalLayout() {
                    keyboardHeight = 0;
                    final Rect rect = new Rect();
                    // 获取当前页面窗口的显示范围
                    ((Activity) getContext()).getWindow().getDecorView().getWindowVisibleDisplayFrame(rect);
                    int screenHeight = getScreenHeight();
                    keyboardHeight = screenHeight - rect.bottom; // 输入法的高度
                    isActive = false;
                    if (Math.abs(keyboardHeight) > screenHeight / 5) {
                        isActive = true; // 超过屏幕五分之一则表示弹出了输入法
                        mKeyboardHeight = keyboardHeight;
                    }
                    mIsKeyboardActive = isActive;
                    if (mListener != null) {
                        if (delayRun != null) {
                            //每次editText有变化的时候，则移除上次发出的延迟线程
                            handler.removeCallbacks(delayRun);
                        }
                        //延迟触发，如果不再有反馈则触发，则执行该线程的run方法
                        handler.postDelayed(delayRun, delayTime);
                    }
                }

                private int getScreenHeight() {
                    if (mScreenHeight > 0) {
                        return mScreenHeight;
                    }
                    mScreenHeight = ((WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE))
                            .getDefaultDisplay().getHeight();
                    return mScreenHeight;
                }
            }


            private Handler handler = new Handler();
            /**
             * 延迟线程，看是否还有下一个字符输入
             */
            private Runnable delayRun = new Runnable() {
                @Override
                public void run() {
                    //在这里调用服务器的接口，获取数据
                    mListener.onKeyboardStateChanged(isActive, keyboardHeight);
                }
            };

            /**
             * @param listener
             * @param delayTime 灵敏度，灵敏度越小，检测反馈时间越短，但有可能会出现反馈多次的情况,推荐值 100毫秒
             */
            public void setKeyboardListener(KeyboardLayoutListener listener, int delayTime) {
                mListener = listener;
                if (delayTime < 0) {
                    delayTime = 0;
                }
                this.delayTime = delayTime;
            }

            public KeyboardLayoutListener getKeyboardListener() {
                return mListener;
            }

            public boolean isKeyboardActive() {
                return mIsKeyboardActive;
            }

            /**
             * 获取输入法高度
             *
             * @return
             */
            public int getKeyboardHeight() {
                return mKeyboardHeight;
            }

            public interface KeyboardLayoutListener {
                /**
                 * @param isActive       输入法是否激活
                 * @param keyboardHeight 输入法面板高度
                 */
                void onKeyboardStateChanged(boolean isActive, int keyboardHeight);
            }


        }

        /**
         * 圆角图片
         * 用法如下:
         * <!--
         * X轴圆角度：app:corner_x="100dp"
         * Y轴圆角度：app:corner_y="100dp"
         * 圆形边宽度：app:border_width="5dp"
         * 边框的颜色：app:border_color="#FF00"
         * -->
         * <view
         * class="com.gsls.gt.RoundImageView"
         * android:layout_width="200dp"
         * android:layout_height="200dp"
         * android:src="@mipmap/gt_logo"
         * app:layout_constraintTop_toTopOf="parent"
         * app:layout_constraintBottom_toBottomOf="parent"
         * app:layout_constraintStart_toStartOf="parent"
         * app:layout_constraintEnd_toEndOf="parent"
         * app:corner_x="100dp"
         * app:corner_y="100dp"
         * app:border_width="5dp"
         * app:border_color="#FF00"
         * android:scaleType="fitXY"
         * />
         */
        //参考源码来自于：https://www.2cto.com/kf/201605/508420.html
        public static class RoundImageView extends ImageView {

            private float mCornerXValue;
            private float mCornerYValue;

            private int mBorderColor;
            private float mBorderValue;

            public RoundImageView(Context context, AttributeSet attrs) {
                super(context, attrs);
                // 获取自定义参数
                TypedArray typedArray = context.obtainStyledAttributes(attrs,
                        R.styleable.RoundImageView);
                // board颜色
                mBorderColor = typedArray.getColor(R.styleable.RoundImageView_border_color, Color.argb(0, 0, 0, 0));
                // 获取X方向曲率
                mCornerXValue = typedArray.getDimension(R.styleable.RoundImageView_corner_x, 0);
                // 获取Y方向曲率
                mCornerYValue = typedArray.getDimension(R.styleable.RoundImageView_corner_y, 0);
                // 图像的圆宽
                mBorderValue = typedArray.getDimension(R.styleable.RoundImageView_border_width, 0);

                // 用完需要recycle
                typedArray.recycle();

                initPaints();
            }

            private void initPaints() {
                // 创建普通画笔
                if (mNomalPaint == null) {
                    mNomalPaint = new Paint();
                    mNomalPaint.setAntiAlias(true);
                }

                // 创建遮罩画笔
                if (mPaintClip == null) {
                    mPaintClip = new Paint();
                    mPaintClip.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));
                    mPaintClip.setAntiAlias(true);
                }

                // 创建board的画笔
                if (mPaintBoard == null) {
                    mPaintBoard = new Paint();
                    mPaintBoard.setColor(mBorderColor);
                    mPaintBoard.setAntiAlias(true);
                    mPaintBoard.setStyle(Paint.Style.STROKE);
                    mPaintBoard.setStrokeWidth(mBorderValue);
                }
            }

            Bitmap mDestBitmap;
            Bitmap mSrcBitmap;
            Canvas mDestCanvas;
            Canvas mSrcCanvas;
            Paint mPaintClip;
            Paint mNomalPaint;
            Paint mPaintBoard;
            RectF mRoundRectClip;
            RectF mRoundRectBorder;


            private int getMeasureSize(int measureSpec) {
                int mode = MeasureSpec.getMode(measureSpec);
                int size = MeasureSpec.getSize(measureSpec);
                return mode == MeasureSpec.EXACTLY ? size : 200;
            }

            private int mSize;

            @Override
            protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                super.onMeasure(widthMeasureSpec, heightMeasureSpec);
                int width = getMeasureSize(widthMeasureSpec);
                int height = getMeasureSize(heightMeasureSpec);
                mSize = Math.min(width, height);
            }

            @SuppressLint("NewApi")
            @Override
            protected void onDraw(Canvas canvas) {
                // 创建遮罩图片和画布
                if (mDestBitmap == null) {
                    mDestBitmap = Bitmap.createBitmap(getWidth(), getHeight(), Bitmap.Config.ARGB_8888);
                    mSrcBitmap = Bitmap.createBitmap(getWidth(), getHeight(), Bitmap.Config.ARGB_8888);
                    mDestCanvas = new Canvas(mDestBitmap);
                    mSrcCanvas = new Canvas(mSrcBitmap);
                }
                // 获取imageview原先的图片
                super.onDraw(mDestCanvas);

                // 创建矩形，表示圆角矩形
                if (mRoundRectClip == null) {
                    mRoundRectClip = new RectF(mBorderValue, mBorderValue, getWidth() - mBorderValue, getHeight() - mBorderValue);
                }
                // 绘制圆角矩形
                mSrcCanvas.drawRoundRect(mRoundRectClip, mCornerXValue, mCornerYValue, mNomalPaint);

                // 使用遮罩画笔扣除原图中的圆角矩形外面的部分
                mDestCanvas.drawBitmap(mSrcBitmap, 0, 0, mPaintClip);

                // 创建board的矩形
                if (mRoundRectBorder == null) {
                    mRoundRectBorder = new RectF(mBorderValue / 2, mBorderValue / 2, getWidth() - mBorderValue / 2, getHeight() - mBorderValue / 2);
                }
                // 绘制board
                mDestCanvas.drawRoundRect(mRoundRectBorder, mCornerXValue, mCornerYValue, mPaintBoard);

                // 绘制最终的圆角带有board的图
                canvas.drawBitmap(mDestBitmap, 0, 0, mNomalPaint);
            }
        }

        /**
         * 圆角动态图 组件
         * GT-ImageView用法:
         * <view class="com.gsls.gt.GT$ViewUtils$GTImageView"
         * android:id="@+id/giv"
         * android:layout_width="200dp"
         * android:layout_height="200dp"
         * app:layout_constraintBottom_toBottomOf="parent"
         * app:layout_constraintEnd_toEndOf="parent"
         * app:layout_constraintStart_toStartOf="parent"
         * app:layout_constraintTop_toTopOf="parent"
         * android:src="@mipmap/gif_logo"
         * app:radius_top_left="30dp"
         * app:radius_top_right="30dp" />
         */
        public static class GTImageView extends AppCompatImageView {

            //圆形
            private float width, height;
            private int defaultRadius = 0;
            private int radius;
            private Path path;
            private int leftTopRadius;
            private int rightTopRadius;
            private int rightBottomRadius;
            private int leftBottomRadius;
            private Context context;

            //动态图
            private Resources resources;
            private Movie mMovie;

            private int dur = 0;

            private int gifSpeed = 16;//动态图执行速度

            private int mCurrentAnimationTime;//动态图当前显示第几帧
            private float ratioWidth;
            private float ratioHeight;

            private String url;
            private Object resource2;


            private Object placeholder;//占位图
            private Object error;//加载异常图

            private boolean isCache = true;//是否缓存（推荐打开缓存）

            private Paint paint;

            private ExecutorService instance;

            //获取 GIF运行速度
            public int getGifSpeed() {
                return gifSpeed;
            }

            //设置 GIF运行速度
            public void setGifSpeed(int gifSpeed) {
                this.gifSpeed = gifSpeed;
            }

            public boolean isCache() {
                return isCache;
            }

            public void setCache(boolean cache) {
                isCache = cache;
            }

            public Object getPlaceholder() {
                return placeholder;
            }

            private boolean isRun = true;
            private static String savePath;

            //启动/恢复Gif动画
            public void start() {
                isRun = true;
                invalidateView();
            }

            //暂停Gif动画
            public void stop() {
                isRun = false;
                invalidateView();
            }

            public void setPlaceholder(Object placeholder) {
                this.placeholder = placeholder;
            }

            public Object getError() {
                return error;
            }

            public void setError(Object error) {
                this.error = error;
            }

            public int getRadius() {
                return radius;
            }

            public void setRadius(int radius) {
                this.radius = radius;
            }

            public int getLeftTopRadius() {
                return leftTopRadius;
            }

            public void setLeftTopRadius(int leftTopRadius) {
                this.leftTopRadius = leftTopRadius;
            }

            public int getRightTopRadius() {
                return rightTopRadius;
            }

            public void setRightTopRadius(int rightTopRadius) {
                this.rightTopRadius = rightTopRadius;
            }

            public int getRightBottomRadius() {
                return rightBottomRadius;
            }

            public void setRightBottomRadius(int rightBottomRadius) {
                this.rightBottomRadius = rightBottomRadius;
            }

            public int getLeftBottomRadius() {
                return leftBottomRadius;
            }

            public void setLeftBottomRadius(int leftBottomRadius) {
                this.leftBottomRadius = leftBottomRadius;
            }

            public String getUrl() {
                return url;
            }

            public void setUrl(String url) {
                this.url = url;
            }

            //监听前台显示后台暂停,设置值后会自动监听设置暂停与运行动态图
            public void setApplication(Application application) {
                if (application == null) return;

            }

            public GTImageView(Context context) {
                this(context, null);
                init(context, null);
            }

            public GTImageView(Context context, int radiusAll) {
                this(context, null);
                this.radius = radiusAll;
                init(context, null);
            }

            public GTImageView(Context context, int topLeft, int topRight, int bottomLeft, int bottomRight) {
                this(context, null);
                this.leftTopRadius = topLeft;
                this.rightTopRadius = topRight;
                this.leftBottomRadius = bottomLeft;
                this.rightBottomRadius = bottomRight;
                init(context, null);
            }

            public GTImageView(Context context, AttributeSet attrs) {
                this(context, attrs, 0);
                init(context, attrs);
            }

            public GTImageView(Context context, AttributeSet attrs, int defStyleAttr) {
                super(context, attrs, defStyleAttr);
                init(context, attrs);
            }

            private void init(Context context, AttributeSet attrs) {
                if (instance == null) {
                    instance = GT.Thread.getInstance(0);
                }

                paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                this.context = context;
                // 读取配置
                TypedArray array = context.obtainStyledAttributes(attrs, com.gsls.gt.R.styleable.GTImageView);
                int resourceId = array.getResourceId(R.styleable.GTImageView_src, -1);
                resources = context.getResources();
                if (resourceId > 0) {
                    instance.execute(() -> {
                        InputStream inputStream = resources.openRawResource(resourceId);
                        if (inputStream != null) {
                            mMovie = Movie.decodeStream(inputStream);
                            movieLoad(resourceId, mMovie);
                        }
                    });
                }
                load(array);
                array.recycle();
                requestLayout();
            }

            /**
             * 加载图片
             *
             * @param array
             */
            private void load(TypedArray array) {
                if (radius == 0)
                    radius = array.getDimensionPixelOffset(R.styleable.GTImageView_radius, defaultRadius);

                if (leftTopRadius == 0)
                    leftTopRadius = array.getDimensionPixelOffset(R.styleable.GTImageView_radius_top_left, defaultRadius);
                if (rightTopRadius == 0)
                    rightTopRadius = array.getDimensionPixelOffset(R.styleable.GTImageView_radius_top_right, defaultRadius);
                if (rightBottomRadius == 0)
                    rightBottomRadius = array.getDimensionPixelOffset(R.styleable.GTImageView_radius_bottom_right, defaultRadius);
                if (leftBottomRadius == 0)
                    leftBottomRadius = array.getDimensionPixelOffset(R.styleable.GTImageView_radius_bottom_left, defaultRadius);

                //如果四个角的值没有设置，那么就使用通用的radius的值。
                if (defaultRadius == leftTopRadius) {
                    leftTopRadius = radius;
                }
                if (defaultRadius == rightTopRadius) {
                    rightTopRadius = radius;
                }
                if (defaultRadius == rightBottomRadius) {
                    rightBottomRadius = radius;
                }
                if (defaultRadius == leftBottomRadius) {
                    leftBottomRadius = radius;
                }

            }

            /**
             * 设置 GIF 动态图
             *
             * @param resource
             * @param contexts
             */
            public void setGifResource(Object resource, Context... contexts) {
                if (resource == null) return;
                instance.execute(new Runnable() {
                    @Override
                    public void run() {

                        if (mMovie != null && String.valueOf(resource2).equals(String.valueOf(resource))) {
                            return;
                        } else {
                            resource2 = resource;
                        }

                        if (GT.Glide.gifCacheMovieList.size() != 0 && GT.Glide.gifCacheMovieList.containsKey(resource)) {
                            Movie movie = GT.Glide.gifCacheMovieList.get(resource);
                            if (mMovie != null && mMovie == movie) {
                                return;
                            }
                            if (movie != null) {
                                if ((resource instanceof Integer)) {
                                    if (movie.width() == 0 && movie.hashCode() == 0) {
                                        movieLoad(resource, movie);
                                        return;
                                    }
                                } else {
                                    movieLoad(resource, movie);
                                    return;
                                }
                            }
                        }

                        InputStream inputStream;
                        if (resource instanceof Integer) {
                            int resourceId = (int) resource;
                            if (resourceId == -1) return;
                            inputStream = resources.openRawResource(resourceId);
                        } else if (resource instanceof InputStream) {
                            inputStream = (InputStream) resource;
                        } else if (resource instanceof File) {
                            instance.execute(() -> {
                                File file = (File) resource;
                                Movie movie = Movie.decodeFile(file.getPath());
                                movieLoad(resource, movie);
                            });
                            return;
                        } else if (resource instanceof Movie) {
                            movieLoad(null, (Movie) resource);
                            return;
                        } else if (resource instanceof String) {
                            String gifData = String.valueOf(resource);
                            if (!gifData.contains("http") && !gifData.contains(":")) { //判断是否为本地gif资源
                                inputStream = fileToInputStream(new File(gifData), isCache);
                            } else {
                                //网络动态图 加载
                                initFilePath();
                                String path = savePath + GT.Encryption.MD5.encryptMD5(gifData);
                                if (!GT.FileUtils.fileExist(path)) {
                                    GT.HttpUtil.downloadFile(gifData, path, new GT.HttpUtil.OnLoadData<File>() {
                                        @Override
                                        public void onDownloadSuccess(File file) {
                                            super.onDownloadSuccess(file);
                                            instance.execute(() -> {
                                                Movie movie = Movie.decodeFile(file.getPath());
                                                movieLoad(resource, movie);
                                            });
                                        }

                                        @Override
                                        public void onDownloadFailed(Exception e) {
                                            super.onDownloadFailed(e);
                                            if (error != null) {
                                                GT.Glide.with(this).load(error).into(GTImageView.this, false);//2
                                            }
                                        }
                                    }, true);
                                } else {
                                    instance.execute(() -> {
                                        Movie movie = Movie.decodeFile(path);
                                        movieLoad(resource, movie);
                                    });
                                }
                                return;
                            }
                        } else {
                            //当前仅仅支持 四种 Gif 资源类型加载(Integer、InputStream、String、File)，其余的都默认当静态图片加载
                            GT.Glide.with(this).load(resource).into(GTImageView.this);//3
                            return;
                        }

                        if (inputStream == null) return;
                        InputStream finalInputStream = inputStream;
                        instance.execute(() -> {
                            mMovie = Movie.decodeStream(finalInputStream);
                            movieLoad(resource, mMovie);
                        });
                    }

                    //初始化 路径
                    private void initFilePath() {
                        if (savePath == null) {
                            if (context == null && contexts != null && contexts.length > 0) {
                                context = contexts[0];
                            }
                            if (contexts != null && contexts.length > 0) {
                                context = contexts[0];
                                if (context == null) {
                                    context = GT.getActivity();
                                }
                            }
                            savePath = GT.FileUtils.getGTPath(context) + "img/";//gif一般比较大，所以必须缓存，缓存本地路径
                            File file = new File(savePath);
                            if (!file.exists()) {
                                file.mkdirs();
                            }
                        }
                    }
                });
            }

            /**
             * 加载GIF
             *
             * @param resource
             * @param movie
             */
            private void movieLoad(Object resource, Movie movie) {
                if (movie == null) return;
                mMovie = movie;
                setLayerType(View.LAYER_TYPE_SOFTWARE, null);
                //开始执行 GIF
                GT.Thread.runAndroid(this::requestLayout);

                if (resource != null) {
                    //开始缓存 mMovie
                    instance.execute(() -> {
                        if (!GT.Glide.gifCacheMovieList.containsKey(resource)) {
                            GT.Glide.gifCacheMovieList.put(resource, movie);
                        }

                        GT.Thread.sleep(100);
                        if (mMovie == null) {
                            setGifResource(resource2);
                        }
                    });
                }
            }


            /**
             * File 转 InputStream
             *
             * @param file
             * @param isCache
             * @return
             */
            private InputStream fileToInputStream(File file, boolean isCache) {
                if (file == null || !file.exists()) return null;
                InputStream inputStream = null;
                try {
                    if (!isCache) {
                        instance.execute(() -> {
                            GT.Thread.sleep(100);
                            file.delete();
                        });
                    }
                    inputStream = GT.ImageViewTools.getImageInputStreamFile(file.getPath());
                } catch (Exception e) {

                }
                return inputStream;
            }

            public void setResource(Object resource) {
                GT.Glide.with(this).load(resource).into(this);//4
            }

            /**
             * 设置 Assets 资源
             *
             * @param resource
             */
            public void setGifAssets(String resource) {
                try {
                    InputStream inputStream = context.getAssets().open(resource);
                    mMovie = Movie.decodeStream(inputStream);
                    if (mMovie != null) {
                        setLayerType(View.LAYER_TYPE_SOFTWARE, null);
                        requestLayout();
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            public static boolean isOne = false;

            @Override
            protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                super.onMeasure(widthMeasureSpec, heightMeasureSpec);
                if (!isOne) {
                    isOne = true;
                    return;
                }
                if (mMovie != null) {//gif图片
                    int w = mMovie.width();
                    int h = mMovie.height();
                    if (w <= 0) {
                        w = 1;
                    }
                    if (h <= 0) {
                        h = 1;
                    }
                    int pLeft = getPaddingLeft();
                    int pRight = getPaddingRight();
                    int pTop = getPaddingTop();
                    int pBottom = getPaddingBottom();
                    int widthSize;
                    int heightSize;
                    w += pLeft + pRight;
                    h += pTop + pBottom;
                    w = Math.max(w, getSuggestedMinimumWidth());
                    h = Math.max(h, getSuggestedMinimumHeight());
                    widthSize = resolveSizeAndState(w, widthMeasureSpec, 0);
                    heightSize = resolveSizeAndState(h, heightMeasureSpec, 0);
                    ratioWidth = (float) widthSize / w;
                    ratioHeight = (float) heightSize / h;
                    setMeasuredDimension(widthSize, heightSize);
                } else {
                    //非GIF图片
                    super.onMeasure(widthMeasureSpec, heightMeasureSpec);
                }
            }

            @Override
            protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
                super.onLayout(changed, left, top, right, bottom);
                width = getWidth();
                height = getHeight();
            }

            private final float radiusValue = 1.5f;


            @Override
            protected void onDraw(Canvas canvas) {
                if (mMovie != null) {//GIF图片加载

                    //绘制圆角 ok
                    if (radius != 0) {
                        canvas.drawRoundRect(0, 0, width, height, radius, radius, paint);
                        path = new Path();
                        float rids[] = {radius, radius, radius, radius, radius, radius, radius, radius};
                        path.addRoundRect(new RectF(0, 0, width, height), rids, Path.Direction.CW);
                        canvas.clipPath(path);
                    } else {
                        //单圆角
                        //左上圆角 和 右上圆角
                        if (leftTopRadius != 0 || rightTopRadius != 0) {
                            path = new Path();
                            float rids[] = {leftTopRadius, leftTopRadius, rightTopRadius, rightTopRadius, rightBottomRadius, rightBottomRadius, leftBottomRadius, leftBottomRadius};
                            path.addRoundRect(new RectF(0, 0, width, height), rids, Path.Direction.CW);
                            canvas.clipPath(path);
                        }

                        //左下圆角
                        if (leftBottomRadius != 0 || rightBottomRadius != 0) {
                            if (leftBottomRadius != 0 && rightBottomRadius != 0) {
                                int min = Math.min(leftBottomRadius, rightBottomRadius);
                                canvas.drawRoundRect(0, 0, width, height, min, min, paint);
                            }

                            //辅助参数
                            if (leftTopRadius == 0) leftTopRadius = 1;
                            if (rightTopRadius == 0) rightTopRadius = 1;
                            if (leftBottomRadius == 0) leftBottomRadius = 1;
                            if (rightBottomRadius == 0) rightBottomRadius = 1;

                            path = new Path();
                            float rids[] = {leftTopRadius, leftTopRadius, rightTopRadius, rightTopRadius, rightBottomRadius, rightBottomRadius, leftBottomRadius, leftBottomRadius};
                            path.addRoundRect(new RectF(0, 0, width, height), rids, Path.Direction.CW);
                            canvas.clipPath(path);
                        }

                    }

                    if (isRun) {//启动动画
                        dur = mMovie.duration();
                        if (dur == 0) {
                            dur = 1000;
                        }

                        mCurrentAnimationTime += gifSpeed;
                        if (mCurrentAnimationTime > dur) {
                            mCurrentAnimationTime = dur;
                        }
                        mMovie.setTime(mCurrentAnimationTime);
                        float scale = Math.min(ratioWidth, ratioHeight);
                        canvas.scale(scale, scale);
                        mMovie.draw(canvas, 0, 0);
                        invalidate();
                        if (mCurrentAnimationTime == dur) {
                            mCurrentAnimationTime = 0;
                        }
                    } else {//暂停动画
                        mMovie.setTime(mCurrentAnimationTime);
                        float scale = Math.min(ratioWidth, ratioHeight);
                        canvas.scale(scale, scale);
                        mMovie.draw(canvas, 0, 0);
                        canvas.restore();
                    }
                } else {  //非GIF图片加载
                    initDraw(canvas);
                }

            }

            @SuppressLint("WrongCall")
            private void initDraw(Canvas canvas) {
                //静态图绘制
                Drawable drawable = getDrawable();
                if (null != drawable) {
                    Bitmap bitmap = GT.ImageViewTools.getBitmap(drawable);

                    if (radius != 0) {
                        bitmap = GT.ImageViewTools.RoundedCorners.clipAll(bitmap, getWidth(), getHeight(), radius, 0);
                    } else {

                        if (leftTopRadius != 0) {
                            bitmap = GT.ImageViewTools.RoundedCorners.fillet(bitmap, leftTopRadius, GT.ImageViewTools.RoundedCorners.CORNER_TOP_LEFT);
                        }

                        if (rightTopRadius != 0) {
                            bitmap = GT.ImageViewTools.RoundedCorners.fillet(bitmap, rightTopRadius, GT.ImageViewTools.RoundedCorners.CORNER_TOP_RIGHT);
                        }

                        if (rightBottomRadius != 0) {
                            bitmap = GT.ImageViewTools.RoundedCorners.fillet(bitmap, rightBottomRadius, GT.ImageViewTools.RoundedCorners.CORNER_BOTTOM_RIGHT);
                        }

                        if (leftBottomRadius != 0) {
                            bitmap = GT.ImageViewTools.RoundedCorners.fillet(bitmap, leftBottomRadius, GT.ImageViewTools.RoundedCorners.CORNER_BOTTOM_LEFT);
                        }

                    }

                    //静态图大小设置
                    final Rect rectSrc = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());
                    final Rect rectDest = new Rect(0, 0, getWidth(), getHeight());
                    paint.reset();
                    canvas.drawBitmap(bitmap, rectSrc, rectDest, paint);

                } else {
                    super.onDraw(canvas);
                }

            }

            /**
             * 设置要显示第几帧动画
             *
             * @param time
             */
            public void setMovieTime(int time) {
                mCurrentAnimationTime = time;
                invalidate();
            }

            /**
             * 是否显示动画,为true表示显示，false表示不显示
             */
            private boolean mVisible = true;

            @SuppressLint("NewApi")
            @Override
            public void onScreenStateChanged(int screenState) {
                super.onScreenStateChanged(screenState);
                mVisible = screenState == SCREEN_STATE_ON;
                invalidateView();
            }

            @SuppressLint("NewApi")
            @Override
            protected void onVisibilityChanged(View changedView, int visibility) {
                super.onVisibilityChanged(changedView, visibility);
                mVisible = visibility == View.VISIBLE;
                invalidateView();
            }

            @Override
            protected void onWindowVisibilityChanged(int visibility) {
                super.onWindowVisibilityChanged(visibility);
                mVisible = visibility == View.VISIBLE;
                invalidateView();
            }

            /**
             * 重绘
             */
            @SuppressLint("NewApi")
            private void invalidateView() {
                if (mVisible) {
                    postInvalidateOnAnimation();
                }
            }


        }

        /**
         * 颜色选择
         */
        public static class ColorPickerDialog extends Dialog {

            Context context;
            private String title;//标题
            private int mInitialColor;//初始颜色

            private static int mCacheColor = -1;//缓存颜色
            private OnColorChangedListener mListener;

            /**
             * 初始颜色 缓存颜色
             *
             * @param context
             * @param title    对话框标题
             * @param listener 回调
             */
            public ColorPickerDialog(Context context, String title, OnColorChangedListener listener) {
                this(context, mCacheColor, title, listener);
            }

            /**
             * @param context
             * @param initialColor 初始颜色
             * @param title        标题
             * @param listener     回调
             */
            public ColorPickerDialog(Context context, int initialColor, String title, OnColorChangedListener listener) {
                super(context);
                this.context = context;
                mListener = listener;
                mInitialColor = initialColor;
                mCacheColor = initialColor;
                this.title = title;
            }

            @Override
            protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                WindowManager manager = getWindow().getWindowManager();
                int height = (int) (manager.getDefaultDisplay().getHeight() * 0.5f);
                int width = (int) (manager.getDefaultDisplay().getWidth() * 0.7f);
                ColorPickerView myView = new ColorPickerView(context, height, width);
                setContentView(myView);
                setTitle(title);
            }

            private class ColorPickerView extends View {
                private Paint mPaint;//渐变色环画笔
                private Paint mCenterPaint;//中间圆画笔
                private Paint mLinePaint;//分隔线画笔
                private Paint mRectPaint;//渐变方块画笔

                private Shader rectShader;//渐变方块渐变图像
                private float rectLeft;//渐变方块左x坐标
                private float rectTop;//渐变方块右x坐标
                private float rectRight;//渐变方块上y坐标
                private float rectBottom;//渐变方块下y坐标

                private final int[] mCircleColors;//渐变色环颜色
                private final int[] mRectColors;//渐变方块颜色

                private int mHeight;//View高
                private int mWidth;//View宽
                private float r;//色环半径(paint中部)
                private float centerRadius;//中心圆半径

                private boolean downInCircle = true;//按在渐变环上
                private boolean downInRect;//按在渐变方块上
                private boolean highlightCenter;//高亮
                private boolean highlightCenterLittle;//微亮

                public ColorPickerView(Context context, int height, int width) {
                    super(context);
                    this.mHeight = height - 36;
                    this.mWidth = width;
                    setMinimumHeight(height - 36);
                    setMinimumWidth(width);

                    //渐变色环参数
                    mCircleColors = new int[]{0xFFFF0000, 0xFFFF00FF, 0xFF0000FF,
                            0xFF00FFFF, 0xFF00FF00, 0xFFFFFF00, 0xFFFF0000};
                    Shader s = new SweepGradient(0, 0, mCircleColors, null);
                    mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
                    mPaint.setShader(s);
                    mPaint.setStyle(Paint.Style.STROKE);
                    mPaint.setStrokeWidth(50);
                    r = width / 2 * 0.7f - mPaint.getStrokeWidth() * 0.5f;

                    //中心圆参数
                    mCenterPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
                    mCenterPaint.setColor(mInitialColor);
                    mCenterPaint.setStrokeWidth(5);
                    centerRadius = (r - mPaint.getStrokeWidth() / 2) * 0.7f;

                    //边框参数
                    mLinePaint = new Paint(Paint.ANTI_ALIAS_FLAG);
                    mLinePaint.setColor(Color.parseColor("#72A1D1"));
                    mLinePaint.setStrokeWidth(4);

                    //黑白渐变参数
                    mRectColors = new int[]{0xFF000000, mCenterPaint.getColor(), 0xFFFFFFFF};
                    mRectPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
                    mRectPaint.setStrokeWidth(5);
                    rectLeft = -r - mPaint.getStrokeWidth() * 0.5f;
                    rectTop = r + mPaint.getStrokeWidth() * 0.5f +
                            mLinePaint.getStrokeMiter() * 0.5f + 15;
                    rectRight = r + mPaint.getStrokeWidth() * 0.5f;
                    rectBottom = rectTop + 50;
                }

                @Override
                protected void onDraw(Canvas canvas) {
                    //移动中心
                    canvas.translate(mWidth / 2, mHeight / 2 - 50);
                    //画中心圆
                    canvas.drawCircle(0, 0, centerRadius, mCenterPaint);
                    //是否显示中心圆外的小圆环
                    if (highlightCenter || highlightCenterLittle) {
                        int c = mCenterPaint.getColor();
                        mCenterPaint.setStyle(Paint.Style.STROKE);
                        if (highlightCenter) {
                            mCenterPaint.setAlpha(0xFF);
                        } else if (highlightCenterLittle) {
                            mCenterPaint.setAlpha(0x90);
                        }
                        canvas.drawCircle(0, 0,
                                centerRadius + mCenterPaint.getStrokeWidth(), mCenterPaint);

                        mCenterPaint.setStyle(Paint.Style.FILL);
                        mCenterPaint.setColor(c);
                    }
                    //画色环
                    canvas.drawOval(new RectF(-r, -r, r, r), mPaint);
                    //画黑白渐变块
                    if (downInCircle) {
                        mRectColors[1] = mCenterPaint.getColor();
                    }
                    rectShader = new LinearGradient(rectLeft, 0, rectRight, 0, mRectColors, null, Shader.TileMode.MIRROR);
                    mRectPaint.setShader(rectShader);
                    canvas.drawRect(rectLeft, rectTop, rectRight, rectBottom, mRectPaint);
                    float offset = mLinePaint.getStrokeWidth() / 2;
                    canvas.drawLine(rectLeft - offset, rectTop - offset * 2,
                            rectLeft - offset, rectBottom + offset * 2, mLinePaint);//左
                    canvas.drawLine(rectLeft - offset * 2, rectTop - offset,
                            rectRight + offset * 2, rectTop - offset, mLinePaint);//上
                    canvas.drawLine(rectRight + offset, rectTop - offset * 2,
                            rectRight + offset, rectBottom + offset * 2, mLinePaint);//右
                    canvas.drawLine(rectLeft - offset * 2, rectBottom + offset,
                            rectRight + offset * 2, rectBottom + offset, mLinePaint);//下
                    super.onDraw(canvas);
                }

                @Override
                public boolean onTouchEvent(MotionEvent event) {
                    float x = event.getX() - mWidth / 2;
                    float y = event.getY() - mHeight / 2 + 50;
                    boolean inCircle = inColorCircle(x, y,
                            r + mPaint.getStrokeWidth() / 2, r - mPaint.getStrokeWidth() / 2);
                    boolean inCenter = inCenter(x, y, centerRadius);
                    boolean inRect = inRect(x, y);

                    switch (event.getAction()) {
                        case MotionEvent.ACTION_DOWN:
                            downInCircle = inCircle;
                            downInRect = inRect;
                            highlightCenter = inCenter;
                        case MotionEvent.ACTION_MOVE:
                            if (downInCircle && inCircle) {//down按在渐变色环内, 且move也在渐变色环内
                                float angle = (float) Math.atan2(y, x);
                                float unit = (float) (angle / (2 * Math.PI));
                                if (unit < 0) {
                                    unit += 1;
                                }
                                mCenterPaint.setColor(interpCircleColor(mCircleColors, unit));
                            } else if (downInRect && inRect) {//down在渐变方块内, 且move也在渐变方块内
                                mCenterPaint.setColor(interpRectColor(mRectColors, x));
                            }
                            if ((highlightCenter && inCenter) || (highlightCenterLittle && inCenter)) {//点击中心圆, 当前移动在中心圆
                                highlightCenter = true;
                                highlightCenterLittle = false;
                            } else if (highlightCenter || highlightCenterLittle) {//点击在中心圆, 当前移出中心圆
                                highlightCenter = false;
                                highlightCenterLittle = true;
                            } else {
                                highlightCenter = false;
                                highlightCenterLittle = false;
                            }
                            invalidate();
                            break;
                        case MotionEvent.ACTION_UP:
                            if (highlightCenter && inCenter) {//点击在中心圆, 且当前启动在中心圆
                                if (mListener != null) {
                                    mListener.colorChanged(mCenterPaint.getColor());
                                    ColorPickerDialog.this.dismiss();
                                }
                            }
                            if (downInCircle) {
                                downInCircle = false;
                            }
                            if (downInRect) {
                                downInRect = false;
                            }
                            if (highlightCenter) {
                                highlightCenter = false;
                            }
                            if (highlightCenterLittle) {
                                highlightCenterLittle = false;
                            }
                            invalidate();
                            break;
                    }
                    return true;
                }

                @Override
                protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                    super.onMeasure(mWidth, mHeight);
                }

                /**
                 * 坐标是否在色环上
                 *
                 * @param x         坐标
                 * @param y         坐标
                 * @param outRadius 色环外半径
                 * @param inRadius  色环内半径
                 * @return
                 */
                private boolean inColorCircle(float x, float y, float outRadius, float inRadius) {
                    double outCircle = Math.PI * outRadius * outRadius;
                    double inCircle = Math.PI * inRadius * inRadius;
                    double fingerCircle = Math.PI * (x * x + y * y);
                    if (fingerCircle < outCircle && fingerCircle > inCircle) {
                        return true;
                    } else {
                        return false;
                    }
                }

                /**
                 * 坐标是否在中心圆上
                 *
                 * @param x            坐标
                 * @param y            坐标
                 * @param centerRadius 圆半径
                 * @return
                 */
                private boolean inCenter(float x, float y, float centerRadius) {
                    double centerCircle = Math.PI * centerRadius * centerRadius;
                    double fingerCircle = Math.PI * (x * x + y * y);
                    if (fingerCircle < centerCircle) {
                        return true;
                    } else {
                        return false;
                    }
                }

                /**
                 * 坐标是否在渐变色中
                 *
                 * @param x
                 * @param y
                 * @return
                 */
                private boolean inRect(float x, float y) {
                    if (x <= rectRight && x >= rectLeft && y <= rectBottom && y >= rectTop) {
                        return true;
                    } else {
                        return false;
                    }
                }

                /**
                 * 获取圆环上颜色
                 *
                 * @param colors
                 * @param unit
                 * @return
                 */
                private int interpCircleColor(int colors[], float unit) {
                    if (unit <= 0) {
                        return colors[0];
                    }
                    if (unit >= 1) {
                        return colors[colors.length - 1];
                    }

                    float p = unit * (colors.length - 1);
                    int i = (int) p;
                    p -= i;

                    // now p is just the fractional part [0...1) and i is the index
                    int c0 = colors[i];
                    int c1 = colors[i + 1];
                    int a = ave(Color.alpha(c0), Color.alpha(c1), p);
                    int r = ave(Color.red(c0), Color.red(c1), p);
                    int g = ave(Color.green(c0), Color.green(c1), p);
                    int b = ave(Color.blue(c0), Color.blue(c1), p);

                    return Color.argb(a, r, g, b);
                }

                /**
                 * 获取渐变块上颜色
                 *
                 * @param colors
                 * @param x
                 * @return
                 */
                private int interpRectColor(int colors[], float x) {
                    int a, r, g, b, c0, c1;
                    float p;
                    if (x < 0) {
                        c0 = colors[0];
                        c1 = colors[1];
                        p = (x + rectRight) / rectRight;
                    } else {
                        c0 = colors[1];
                        c1 = colors[2];
                        p = x / rectRight;
                    }
                    a = ave(Color.alpha(c0), Color.alpha(c1), p);
                    r = ave(Color.red(c0), Color.red(c1), p);
                    g = ave(Color.green(c0), Color.green(c1), p);
                    b = ave(Color.blue(c0), Color.blue(c1), p);
                    return Color.argb(a, r, g, b);
                }

                private int ave(int s, int d, float p) {
                    return s + Math.round(p * (d - s));
                }
            }


            public interface OnColorChangedListener {

                void colorChanged(int color);
            }

            public String getTitle() {
                return title;
            }

            public void setTitle(String title) {
                this.title = title;
            }

            public int getmInitialColor() {
                return mInitialColor;
            }

            public void setmInitialColor(int mInitialColor) {
                this.mInitialColor = mInitialColor;
            }

            public OnColorChangedListener getmListener() {
                return mListener;
            }

            public void setmListener(OnColorChangedListener mListener) {
                this.mListener = mListener;
            }

        }

        /**
         * 摩天轮
         */
        public static class CircleMenuLayout extends ViewGroup {
            private int mRadius;
            /**
             * 该容器内child item的默认尺寸
             */
            private static final float RADIO_DEFAULT_CHILD_DIMENSION = 1 / 4f;
            /**
             * 菜单的中心child的默认尺寸
             */
            private float RADIO_DEFAULT_CENTERITEM_DIMENSION = 1 / 3f;
            /**
             * 该容器的内边距,无视padding属性，如需边距请用该变量
             */
            private static final float RADIO_PADDING_LAYOUT = 1 / 12f;

            /**
             * 当每秒移动角度达到该值时，认为是快速移动
             */
            private static final int FLINGABLE_VALUE = 300;

            /**
             * 如果移动角度达到该值，则屏蔽点击
             */
            private static final int NOCLICK_VALUE = 3;

            /**
             * 当每秒移动角度达到该值时，认为是快速移动
             */
            private int mFlingableValue = FLINGABLE_VALUE;
            /**
             * 该容器的内边距,无视padding属性，如需边距请用该变量
             */
            private float mPadding;
            /**
             * 布局时的开始角度
             */
            private double mStartAngle = 0;

            /**
             * 检测按下到抬起时旋转的角度
             */
            private float mTmpAngle;
            /**
             * 检测按下到抬起时使用的时间
             */
            private long mDownTime;

            /**
             * 判断是否正在自动滚动
             */
            private boolean isFling;

            //旋转速度
            private final int DEFAULT_ROTATIONAL_SPEED = 10;//默认旋转速度
            private int mRotationalSpeed = DEFAULT_ROTATIONAL_SPEED;//旋转速度

            public void setRotationalSpeed(int rotationalSpeed) {
                this.mRotationalSpeed = rotationalSpeed;
            }

            private int id_circle_menu_item_center;

            /**
             * 是否自动旋转摩天轮
             */
            private boolean mRotate = false;//默认自动旋转

            /**
             * 开始旋转
             */
            public void startRotate() {
                mRotate = true;
            }

            /**
             * 暂停旋转
             */
            public void pauseRotate() {
                mRotate = false;
            }

            /**
             * 停止旋转
             */
            public void stopRotate() {
                mRotate = false;
                removeCallbacks(mFlingRunnable);
                isFling = false;
            }

            public CircleMenuLayout(Context context, AttributeSet attrs) {
                super(context, attrs);
                // 无视padding
                setPadding(0, 0, 0, 0);
                initAttrs(context, attrs);
            }

            private void initAttrs(Context context, AttributeSet attrs) {
                TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CircleMenuLayout);
                mRotate = typedArray.getBoolean(R.styleable.CircleMenuLayout_rotate, false);
                mRotationalSpeed = typedArray.getInteger(R.styleable.CircleMenuLayout_rotationalSpeed, DEFAULT_ROTATIONAL_SPEED);
            }

            /**
             * 设置布局的宽高，并策略menu item宽高
             */
            @Override
            protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                int resWidth = 0;
                int resHeight = 0;

                /**
                 * 根据传入的参数，分别获取测量模式和测量值
                 */
                int width = MeasureSpec.getSize(widthMeasureSpec);
                int widthMode = MeasureSpec.getMode(widthMeasureSpec);

                int height = MeasureSpec.getSize(heightMeasureSpec);
                int heightMode = MeasureSpec.getMode(heightMeasureSpec);

                /**
                 * 如果宽或者高的测量模式非精确值
                 */
                if (widthMode != MeasureSpec.EXACTLY
                        || heightMode != MeasureSpec.EXACTLY) {
                    // 主要设置为背景图的高度
                    resWidth = getSuggestedMinimumWidth();
                    // 如果未设置背景图片，则设置为屏幕宽高的默认值
                    resWidth = resWidth == 0 ? getDefaultWidth() : resWidth;

                    resHeight = getSuggestedMinimumHeight();
                    // 如果未设置背景图片，则设置为屏幕宽高的默认值
                    resHeight = resHeight == 0 ? getDefaultWidth() : resHeight;
                } else {
                    // 如果都设置为精确值，则直接取小值；
                    resWidth = resHeight = Math.min(width, height);
                }

                setMeasuredDimension(resWidth, resHeight);

                // 获得半径
                mRadius = Math.max(getMeasuredWidth(), getMeasuredHeight());

                // menu item数量
                final int count = getChildCount();
                // menu item尺寸
                int childSize = (int) (mRadius * RADIO_DEFAULT_CHILD_DIMENSION);
                // menu item测量模式
                int childMode = MeasureSpec.EXACTLY;

                // 迭代测量
                for (int i = 0; i < count; i++) {
                    final View child = getChildAt(i);

                    if (child.getVisibility() == GONE) {
                        continue;
                    }

                    // 计算menu item的尺寸；以及和设置好的模式，去对item进行测量
                    int makeMeasureSpec = -1;

                    if (child.getId() == id_circle_menu_item_center) {
                        makeMeasureSpec = MeasureSpec.makeMeasureSpec(
                                (int) (mRadius * RADIO_DEFAULT_CENTERITEM_DIMENSION),
                                childMode);
                    } else {
                        makeMeasureSpec = MeasureSpec.makeMeasureSpec(childSize,
                                childMode);
                    }
                    child.measure(makeMeasureSpec, makeMeasureSpec);
                }

                mPadding = RADIO_PADDING_LAYOUT * mRadius;

            }

            /**
             * MenuItem的点击事件接口
             *
             * @author zhy
             */
            public interface OnMenuItemClickListener {
                void itemClick(View view, int pos);

                void itemCenterClick(View view);
            }

            /**
             * MenuItem的点击事件接口
             */
            private OnMenuItemClickListener mOnMenuItemClickListener;

            /**
             * 设置MenuItem的点击事件接口
             *
             * @param mOnMenuItemClickListener
             */
            public void setOnMenuItemClickListener(
                    OnMenuItemClickListener mOnMenuItemClickListener) {
                this.mOnMenuItemClickListener = mOnMenuItemClickListener;
            }

            /**
             * 设置menu item的位置
             */
            @Override
            protected void onLayout(boolean changed, int l, int t, int r, int b) {
                int layoutRadius = mRadius;

                // Laying out the child views
                final int childCount = getChildCount();

                int left, top;
                // menu item 的尺寸
                int cWidth = (int) (layoutRadius * RADIO_DEFAULT_CHILD_DIMENSION);

                // 根据menu item的个数，计算角度
                float angleDelay = (float) 360 / (getChildCount() - 1);

                // 遍历去设置menuitem的位置
                for (int i = 0; i < childCount; i++) {
                    final View child = getChildAt(i);

                    if (child.getId() == id_circle_menu_item_center)
                        continue;

                    if (child.getVisibility() == GONE) {
                        continue;
                    }

                    mStartAngle %= 360;

                    // 计算，中心点到menu item中心的距离
                    float tmp = layoutRadius / 2f - cWidth / 2 - mPadding;

                    // tmp cosa 即menu item中心点的横坐标
                    left = layoutRadius
                            / 2
                            + (int) Math.round(tmp
                            * Math.cos(Math.toRadians(mStartAngle)) - 1 / 2f
                            * cWidth);
                    // tmp sina 即menu item的纵坐标
                    top = layoutRadius
                            / 2
                            + (int) Math.round(tmp
                            * Math.sin(Math.toRadians(mStartAngle)) - 1 / 2f
                            * cWidth);

                    child.layout(left, top, left + cWidth, top + cWidth);
                    // 叠加尺寸
                    mStartAngle += angleDelay;
                }

                // 找到中心的view，如果存在设置onclick事件
                View cView = findViewById(id_circle_menu_item_center);
                if (cView != null) {
                    cView.setOnClickListener(v -> {
                        if (mOnMenuItemClickListener != null) {
                            mOnMenuItemClickListener.itemCenterClick(v);
                        }
                    });
                    // 设置center item位置
                    int cl = layoutRadius / 2 - cView.getMeasuredWidth() / 2;
                    int cr = cl + cView.getMeasuredWidth();
                    cView.layout(cl, cl, cr, cr);
                }

            }

            /**
             * 记录上一次的x，y坐标
             */
            private float mLastX;
            private float mLastY;

            /**
             * 自动滚动的Runnable
             */
            private AutoFlingRunnable mFlingRunnable;

            @Override
            public boolean dispatchTouchEvent(MotionEvent event) {
                float x = event.getX();
                float y = event.getY();
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN:

                        mLastX = x;
                        mLastY = y;
                        mDownTime = System.currentTimeMillis();
                        mTmpAngle = 0;

                        // 如果当前已经在快速滚动
                        if (isFling) {
                            // 移除快速滚动的回调
                            removeCallbacks(mFlingRunnable);
                            isFling = false;
                            return super.dispatchTouchEvent(event);
                        }

                        break;
                    case MotionEvent.ACTION_MOVE:
                        //获得开始的角度
                        float start = getAngle(mLastX, mLastY);
                        //获得当前的角度
                        float end = getAngle(x, y);
                        // 如果是一、四象限，则直接end-start，角度值都是正值
                        if (getQuadrant(x, y) == 1 || getQuadrant(x, y) == 4) {
                            mStartAngle += end - start;
                            mTmpAngle += end - start;
                        } else {// 二、三象限，色角度值是负值
                            mStartAngle += start - end;
                            mTmpAngle += start - end;
                        }
                        // 重新布局
                        requestLayout();

                        mLastX = x;
                        mLastY = y;

                        break;
                    case MotionEvent.ACTION_UP:
                        // 计算，每秒移动的角度
                        float anglePerSecond = mTmpAngle * 1000 / (System.currentTimeMillis() - mDownTime);
                        // 如果达到该值认为是快速移动
                        if (Math.abs(anglePerSecond) > mFlingableValue && !isFling) {
                            // post一个任务，去自动滚动，并进行旋转速率自动衰减
                            post(mFlingRunnable = new AutoFlingRunnable(anglePerSecond, true));
                        } else {//如果没有达到快速旋转，那就按默认的旋转速率来旋转
                            if (mRotate) {
                                post(mFlingRunnable = new AutoFlingRunnable(mRotationalSpeed, false));
                            }
                        }
                        // 如果当前旋转角度超过NOCLICK_VALUE屏蔽点击
                        if (Math.abs(mTmpAngle) > NOCLICK_VALUE) return true;
                }
                return super.dispatchTouchEvent(event);
            }

            /**
             * 主要为了action_down时，返回true
             */
            @Override
            public boolean onTouchEvent(MotionEvent event) {
                return true;
            }

            /**
             * 根据触摸的位置，计算角度
             *
             * @param xTouch
             * @param yTouch
             * @return
             */
            private float getAngle(float xTouch, float yTouch) {
                double x = xTouch - (mRadius / 2d);
                double y = yTouch - (mRadius / 2d);
                return (float) (Math.asin(y / Math.hypot(x, y)) * 180 / Math.PI);
            }

            /**
             * 根据当前位置计算象限
             *
             * @param x
             * @param y
             * @return
             */
            private int getQuadrant(float x, float y) {
                int tmpX = (int) (x - mRadius / 2);
                int tmpY = (int) (y - mRadius / 2);
                if (tmpX >= 0) {
                    return tmpY >= 0 ? 4 : 1;
                } else {
                    return tmpY >= 0 ? 3 : 2;
                }
            }

            /**
             * 用于初始化加载动态布局的
             *
             * @author zhy
             */
            public interface OnInitLayoutListener<T> {
                void onLoadLayout(View view, T item, int index);
            }

            /**
             * 动态设置摩天轮布局
             *
             * @param id_circle_menu_item_center 摩天轮中心ID
             * @param layout                     摩天轮 item单个布局
             * @param cpList                     摩天轮数据
             * @param onInitLayoutListener       布局和实体类的回调
             * @param <T>
             */
            public <T> void setItemLayout(int id_circle_menu_item_center, int layout, List<T> cpList, OnInitLayoutListener<T> onInitLayoutListener) {
                this.id_circle_menu_item_center = id_circle_menu_item_center;
                if (cpList == null || cpList.isEmpty()) return;
                LayoutInflater mInflater = LayoutInflater.from(getContext());
                for (int index = 0; index < cpList.size(); index++) {
                    View view = mInflater.inflate(layout, this, false);
                    onInitLayoutListener.onLoadLayout(view, cpList.get(index), index);
                    addView(view);// 添加view到容器中
                }
                if (mRotate) {
                    post(mFlingRunnable = new AutoFlingRunnable(mRotationalSpeed, false));
                }
            }

            /**
             * 如果每秒旋转角度到达该值，则认为是自动滚动
             *
             * @param mFlingableValue
             */
            public void setFlingableValue(int mFlingableValue) {
                this.mFlingableValue = mFlingableValue;
            }

            /**
             * 设置内边距的比例
             *
             * @param mPadding
             */
            public void setPadding(float mPadding) {
                this.mPadding = mPadding;
            }

            /**
             * 获得默认该layout的尺寸
             *
             * @return
             */
            private int getDefaultWidth() {
                WindowManager wm = (WindowManager) getContext().getSystemService(
                        Context.WINDOW_SERVICE);
                DisplayMetrics outMetrics = new DisplayMetrics();
                wm.getDefaultDisplay().getMetrics(outMetrics);
                return Math.min(outMetrics.widthPixels, outMetrics.heightPixels);
            }

            /**
             * 自动滚动的任务
             *
             * @author zhy
             */
            private class AutoFlingRunnable implements Runnable {

                private float angelPerSecond;//衰减速率值
                private boolean isDamping;//是否旋转速度自动衰减

                public AutoFlingRunnable(float velocity, boolean isDamping) {
                    this.angelPerSecond = velocity;
                    this.isDamping = isDamping;
                }

                public void run() {
                    //外部控制暂停摩天轮的旋转
                    isFling = true;

                    // 如果小于20,则停止
                    if ((int) Math.abs(angelPerSecond) <= mRotationalSpeed) {
                        angelPerSecond = mRotationalSpeed;
                        isDamping = false;
                        if (!mRotate) return;
                    }

                    // 不断改变mStartAngle，让其滚动，/30为了避免滚动太快
                    mStartAngle += (angelPerSecond / 30);
                    if (isDamping) {
                        // 逐渐减小这个值
                        angelPerSecond /= 1.0366F;
                    }

                    postDelayed(this, 10);
                    // 重新布局
                    requestLayout();
                }
            }

        }


    }

    //============================================= 编程思想辅助框架 ======================================

    //MVC MVP MVVM GTM_MVVM 框架类
    public static class Frame {

        /**
         * 作者推荐：根据项目模块的不同，选择相适应的框架进行实现
         */

        /**
         * 标准的MVC模式
         * Model:继承自 MVC_Model (模型/数据处理):是应用程序中用于处理应用程序数据逻辑的部分。通常模型对象负责在数据库中存取数据
         * View: xml布局文件 (视图/UI描述):是应用程序中处理数据显示的部分。通常视图是依据模型数据创建的
         * Controller: Activity/Fragment (控制器/用户交互):是应用程序中处理用户交互的部分。通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据
         * 关系图：View -> Controller -> Model -> View
         *
         * @param <T>
         */
        public abstract static class MVC_Model<T> extends ViewModel {
            protected T bindingView;//持有的 Controller/View 对象

            public MVC_Model() {

            }

            public void setBindingView(T bindingView) {
                this.bindingView = bindingView;
            }

            public MVC_Model(T t) {
                bindingView = t;
            }
        }

        /**
         * 标准的MVP模式
         * Model:继承自 MVP_Model (模型/数据处理):主要提供数据存取功能
         * View: Activity/Fragment (视图/UI事件):初始化View,处理用户事件和视图
         * Presenter:继承自 MVP_Presenter (展示层/衔接):负责通过Model存取数据，连接View和Model，从Model中取出数据交给View
         * 关系图：View ←→ Presenter , Presenter ←→ Model (View与Model完全隔离)
         *
         * @param <T>
         */
        public abstract static class MVP_Presenter<T> extends MVC_Model<T> {
            private Activity activity;
            private View view;

            public MVP_Presenter() {

            }

            public MVP_Presenter(T t) {
                super(t);
                Object[] objects = AnnotationAssist.returnActivityOrView(t);
                activity = (Activity) objects[0];
                view = (View) objects[1];
                initView();
            }


            //初始化View
            protected void initView() {
            }

            //加载数据
            public void loadData() {
            }

            protected <K extends View> K findViewById(int id) {
                try {
                    if (activity != null) {
                        return activity.findViewById(id);
                    } else if (view != null) {
                        return view.findViewById(id);
                    } else {
                        errt("activity add view null");
                        return null;
                    }
                } catch (Exception e) {
                    return null;
                }
            }


        }

        public abstract static class MVP_Model<T> extends MVC_Model<T> {
            public MVP_Model(T t) {
                super(t);
            }

            public MVP_Model() {
            }
        }

        /**
         * 标准的MVVM模式
         * Model:继承自 MVVM_Model (模型/数据处理):主要提供数据存取功能
         * View: Activity/Fragment (视图/UI事件):初始化View,处理用户事件和视图
         * ViewModel:继承自 MVVM_ViewModel (展示层/衔接):负责通过Model存取数据，连接View和Model，从Model中取出数据交给View
         * 关系图：View ←→ ViewModel , ViewModel ←→ Model (View与Model完全隔离)
         *
         * @param <T>
         */
        //不推荐将 UI 处理放这里面(UI请放到 view 层处理)，这里面用于处理业务逻辑
        public abstract static class MVVM_ViewModel<T> extends MVP_Presenter<T> {

            public MVVM_ViewModel() {
            }

            public MVVM_ViewModel(T bindingView) {
                super(bindingView);
            }

            @Override
            public void setBindingView(T bindingView) {
                super.setBindingView(bindingView);
            }
        }

        public abstract static class MVVM_Model<T> extends MVP_Model<T> {
            public MVVM_Model(T t) {
                super(t);
            }

            public MVVM_Model() {
            }
        }

        /**
         * 标准的GT_MVVM模式
         * Model:继承自 GT_Model (模型/数据处理):主要提供数据存取功能
         * View: Activity/Fragment (视图/UI事件):初始化View,处理用户事件和视图
         * ViewModel:继承自 GT_ViewModel (展示层/衔接):负责通过Model存取数据，连接View和Model，从Model中取出数据交给View
         * 关系图：View ←→ GT_ViewModel , GT_ViewModel ←→ GT_Model (View与Model完全隔离)
         *
         * @param <T>
         */
        //不推荐将 UI 处理放这里面(UI请放到 view 层处理)，这里面用于处理业务逻辑
        public abstract static class GT_ViewModel<V, VM, M> extends MVVM_ViewModel<VM> {

            protected V bindingData;
            protected M bindingModel;

            public void loadBindingView(V bindingData) {
                this.bindingData = bindingData;
                bindingView = bindingData.getClass().getSuperclass().getSuperclass().toString().contains("class com.gsls.gt.GT$") &&
                        bindingData.getClass().getSuperclass().getSuperclass().toString().contains("$DataBinding") ?
                        (VM) bindingData : DataBindingUtil.setContentView(bindingData);
            }

            public void initBindingView(V bindingData) {
                this.bindingData = bindingData;
                bindingView = bindingData.getClass().getSuperclass().getSuperclass().toString().contains("class com.gsls.gt.GT$") &&
                        bindingData.getClass().getSuperclass().getSuperclass().toString().contains("$DataBinding") ?
                        (VM) bindingData : DataBindingUtil.setContentView(bindingData);
                initView();
                loadData();
            }

            public void setBindingData(V bindingData) {
                this.bindingData = bindingData;
                setModel(bindingData);
                initView();
                loadData();
            }

            public GT_ViewModel() {
            }


            /**
             * 特别重要的回调
             * 设置 Model、View、ViewModel的值
             *
             * @param bindingData
             */
            public GT_ViewModel(V bindingData) {
                //如果是接受过 GT绑定 的就不进行再次绑定了
                super((
                        bindingData.getClass().getSuperclass().getSuperclass().toString().contains("class com.gsls.gt.GT$") &&
                                bindingData.getClass().getSuperclass().getSuperclass().toString().contains("$DataBinding") ?
                                (VM) bindingData : DataBindingUtil.setContentView(bindingData)
                ));
                bindingModel(bindingData);
            }

            protected void setModel(V bindingData) {
                bindingView = bindingData.getClass().getSuperclass().getSuperclass().toString().contains("class com.gsls.gt.GT$") &&
                        bindingData.getClass().getSuperclass().getSuperclass().toString().contains("$DataBinding") ?
                        (VM) bindingData : DataBindingUtil.setContentView(bindingData);
                bindingModel(bindingData);
            }

            private void bindingModel(V bindingData) {
                this.bindingData = bindingData;
                bindingModel = setBindingModel();//获取手动设置的Model
                if (bindingModel != null) return;//如果没有手动设置Model那就智能生成Model
                M obj = null;

                try {
                    Class<ViewModel> classStr = (Class<ViewModel>) AnnotationAssist.getGenericityClass(this);
                    if (classStr != null) {
                        ViewModel viewModel = GT_Cache.getViewModel(classStr);
                        if (viewModel != null && viewModel instanceof ViewModel) {
                            obj = (M) viewModel;
                        }
                    }

                    if (obj == null) {
                        //如果没有手动设置Model 那就从ViewModel类中智能取泛型model
                        //转为 ViewModel
                        if (classStr != null && this instanceof ViewModelStoreOwner) {
                            ViewModelStoreOwner viewModelStoreOwner = (ViewModelStoreOwner) this;
                            try {
                                obj = (M) new ViewModelProvider(viewModelStoreOwner).get(classStr);
                            } catch (Exception e) {
                                obj = (M) new AnnotationAssist().getGenericityObject(this);
                            }
                        } else {
                            obj = (M) new AnnotationAssist().getGenericityObject(this);
                        }
                        if (obj != null && obj instanceof ViewModel) {
                            GT_Cache.addViewModel(classStr, (ViewModel) obj);
                        }
                    }

                    //将当前的 ViewModel 设置进入 Model中
                    Object state = AnnotationAssist.setReflectMethodValue(obj, "setBindingView", String.class, Object.class, this);
                    if ("false".equals(state)) {
                        if (LOG.GT_LOG_TF) {
                            GT.err("ViewMode 与 Model 自动绑定失败，请手动绑定");
                            logt("反射出来的类：" + obj);
                            logt("被操作的类:" + obj);
                            logt("自适应返回值类型:" + this);
                            logt("反射赋值的方法");
                        }
                    }
                    bindingModel = obj;

                } catch (Exception e) {
                    if (LOG.GT_LOG_TF) {
                        GT.errt("View 与 ViewMode 自动绑定失败，请手动绑定:" + e);
                    }
                }
            }

            protected M setBindingModel() {
                return bindingModel;
            }

        }

        /**
         * GT_BindingViewModel模式:是 GT_MVVM 的升级版
         * Model:继承自 GT_BindingModel (模型/数据处理):主要提供数据存取功能
         * View: Activity/Fragment (视图/UI事件):初始化View,处理用户事件和视图
         * ViewModel:继承自 GT_BindingViewModel (展示层/衔接):负责通过Model存取数据，连接View和Model，从Model中取出数据交给View
         * 关系图：View ←→ GT_BindingViewModel , GT_BindingViewModel ←→ GT_BindingModel (View与Model完全隔离)
         * <p>
         * // 有两种方式 初始化 ViewModel:
         * 1.通过泛类进行 映射实例化 实例化的ViewModel 需要有无参构造方法 或 有参与无参构造方法可同在
         * 如：public class MainActivity extends MainActivityBinding<MainViewModel> {
         * <p>
         * 2.通过 new 来实例化，如： new MainViewModel(this);
         * 如果需要绑定 ViewModel 可使用 bindingViewModel(new MainViewModel(this));
         * 这样就可以在 View 中使用 viewModel 变量来进行操作
         *
         * @param <T>
         */
        //不推荐将 UI 处理放这里面(UI请放到 view 层处理)，这里面用于处理业务逻辑
        public abstract static class GT_BindingViewModel<V, M> extends GT_ViewModel<V, V, M> {

            // 使用 ViewModel 泛类型绑定
            public GT_BindingViewModel() {
            }

            /**
             * 使用 new 实例化 时使用 设置 Model、View、ViewModel的值
             *
             * @param bindingData
             */
            public GT_BindingViewModel(V bindingData) {
                super(bindingData);
                bindingView = bindingData;//将普通页面类与对应的Binding类相对等
                loadData();
            }


        }

        //不推荐将 UI 处理放这里面(UI请放到 view 层处理)，这里面用于处理数据相关的，如：Http 网络请求数据、SQL 数据库数据、一次性的工具包、其他缓存等
        public abstract static class GT_Model<T> extends MVVM_Model<T> {

            public GT_Model() {
            }

            public GT_Model(T t) {
                super(t);
            }


        }

        //反馈
        public abstract static interface ViewModelFeedback extends ViewModelStoreOwner {
            /**
             * 内容由 ViewModel 层去提供数据 给到 View 层
             *
             * @param obj
             */
            public void onViewModeFeedback(Object... obj);

            //ViewModel
            public ViewModelStore getViewModelStore();

            public void getCache(String json);

            public String putCache();

        }

    }

//============================================= 设备监听类 ======================================

    public static class DeviceListening {

        //AudioManager 安卓手机音量类
        public static class GT_AudioManager {
            /**
             * 提示：再设置音量大小时，请先搞清楚，该音量的最大值
             */
            private AudioManager mAudioManager;//定义 AudioManager
            private Activity activity;//定义 Activity
            private int max;//最大值
            private int current;//当前值

            /**
             * 初始化
             *
             * @param activity
             */
            public GT_AudioManager(Activity activity) {
                this.activity = activity;
                mAudioManager = (AudioManager) activity.getSystemService(activity.AUDIO_SERVICE);
            }//初始化

            /**
             * 获取 通话声音 最大值 与 当前通过的声音值
             *
             * @return
             */
            public int getVoiceCall() {
                current = mAudioManager.getStreamVolume(AudioManager.STREAM_VOICE_CALL);
                return current;
            }

            /**
             * 获取 音量操作类对象
             *
             * @return
             */
            public int getVoiceCallMax() {
                max = mAudioManager.getStreamMaxVolume(AudioManager.STREAM_VOICE_CALL);
                return max;
            }

            /**
             * 设置音量大小
             *
             * @param value
             */
            public void setVoiceCallValue(int value) {
                mAudioManager.setStreamVolume(AudioManager.STREAM_VOICE_CALL, value, AudioManager.FLAG_PLAY_SOUND);//设置 通话声音 音量大小为 0 静音
            }//设置 通话声音 的音量

            /**
             * 获取当前手机的声音值
             *
             * @return
             */
            public int getVoiceSystem() {
                max = mAudioManager.getStreamMaxVolume(AudioManager.STREAM_SYSTEM);
                current = mAudioManager.getStreamVolume(AudioManager.STREAM_SYSTEM);
                return current;
            }

            /**
             * 获取 系统音量 最大值
             *
             * @return
             */
            public int getVoiceSystemMax() {
                max = mAudioManager.getStreamMaxVolume(AudioManager.STREAM_SYSTEM);
                return max;
            }

            /**
             * 设置系统音量值
             *
             * @param value
             */
            public void setVoiceSystemValue(int value) {
                mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, value, AudioManager.FLAG_PLAY_SOUND);//设置 通话声音 音量大小为 0 静音
            }//设置 系统音量 的音量

            /**
             * 获取 当前通过的声音值
             *
             * @return
             */
            public int getVoiceRing() {
                current = mAudioManager.getStreamVolume(AudioManager.STREAM_RING);
                return current;
            }

            /**
             * 铃声音量 最大值
             *
             * @return
             */
            public int getVoiceRingMax() {
                max = mAudioManager.getStreamMaxVolume(AudioManager.STREAM_RING);
                return max;
            }

            /**
             * 设置 铃声音量 的音量
             *
             * @param value
             */
            public void setVoiceRingValue(int value) {
                mAudioManager.setStreamVolume(AudioManager.STREAM_RING, value, AudioManager.FLAG_PLAY_SOUND);//设置 铃声音量 音量大小为 0 静音
            }//设置 铃声音量 的音量

            /**
             * 获取 当前通过的声音值
             *
             * @return
             */
            public int getVoiceMusic() {
                current = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
                return current;
            }

            /**
             * 获取 音乐音量(多媒体) 最大值
             *
             * @return
             */
            public int getVoiceMusicMax() {
                max = mAudioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
                return max;
            }

            /**
             * 设置 多媒体 的音量
             *
             * @param value
             */
            public void setMusicValue(int value) {
                mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, value, AudioManager.FLAG_PLAY_SOUND);//设置多媒体音量大小为 0 静音
            }//设置 多媒体 的音量

            /**
             * 获取  当前通过的声音值
             *
             * @return
             */
            public int getVoiceAlarm() {
                current = mAudioManager.getStreamVolume(AudioManager.STREAM_ALARM);
                return current;
            }

            /**
             * 获取 提示声音 音量 最大值
             *
             * @return
             */
            public int getVoiceAlarmMax() {
                max = mAudioManager.getStreamMaxVolume(AudioManager.STREAM_ALARM);
                return max;
            }

            /**
             * 设置 提示声音 的音量
             *
             * @param value
             */
            public void setVoiceAlarmValue(int value) {
                mAudioManager.setStreamVolume(AudioManager.STREAM_ALARM, value, AudioManager.FLAG_PLAY_SOUND);//设置 铃声音量 音量大小为 0 静音
            }//设置 提示声音 的音量

            /**
             * 游戏过程中只允许调整多媒体音量，而不允许调整通话音量。
             */
            public void gemgMusiceNoSet() {
                activity.setVolumeControlStream(AudioManager.STREAM_MUSIC);
            }//游戏过程中只允许调整多媒体音量，而不允许调整通话音量。

        }

        //ScreenListener 监听屏幕状态类
        public static class ScreenListener {
            /**
             * 监听
             * 手机屏幕点亮
             * 手机屏幕锁屏
             * 手机屏幕解锁
             * <p>
             * 使用实例:
             * GT.ScreenListener screenListener  = new GT.ScreenListener(this); //初始化 ScreenListener
             * screenListener.begin(new GT.ScreenListener.ScreenStateListener(){....} //new 一个匿名内部类 即可
             * 在销毁该 Activity 时一定要 调用该方法来注销广播
             * unregisterListener(); 方法来注销该广播
             */

            private Context context2;                                //联系上下文
            private ScreenBroadcastReceiver mScreenReceiver;        //定义一个广播
            private ScreenStateListener mScreenStateListener;       //定义个内部接口

            /**
             * 初始化
             */
            public ScreenListener(Context context) {
                this.context2 = context;
                mScreenReceiver = new ScreenBroadcastReceiver();//初始化广播
            }

            /**
             * 自定义接口
             */
            public interface ScreenStateListener {
                void onScreenOn();            //手机屏幕点亮

                void onScreenOff();            //手机屏幕锁屏

                void onUserPresent();        //手机屏幕解锁
            }

            /**
             * 获取screen的状态
             */
            private void getScreenState() {
                //初始化powerManager
                PowerManager manager = (PowerManager) context2.getSystemService(Context.POWER_SERVICE);
                if (manager.isScreenOn()) {   //如果监听已经开启
                    if (mScreenStateListener != null) {
                        mScreenStateListener.onScreenOn();
                    }
                } else {                      //如果监听没开启
                    if (mScreenStateListener != null) {
                        mScreenStateListener.onScreenOff();
                    }
                }
            }

            /**
             * 写一个内部的广播
             */
            private class ScreenBroadcastReceiver extends BroadcastReceiver {
                private String action = null;

                @Override
                public void onReceive(Context context, Intent intent) {
                    action = intent.getAction();
                    if (Intent.ACTION_SCREEN_ON.equals(action)) {        //屏幕亮时操作
                        mScreenStateListener.onScreenOn();
                    } else if (Intent.ACTION_SCREEN_OFF.equals(action)) {   //屏幕关闭时操作
                        mScreenStateListener.onScreenOff();
                    } else if (Intent.ACTION_USER_PRESENT.equals(action)) {//解锁时操作
                        mScreenStateListener.onUserPresent();
                    }
                }
            }

            /**
             * 开始监听广播状态
             */
            public void begin(ScreenStateListener listener) {
                mScreenStateListener = listener;
                registerListener();                                //注册监听
                getScreenState();                                //获取监听
            }

            /**
             * 启动广播接收器
             */
            private void registerListener() {
                IntentFilter filter = new IntentFilter();
                filter.addAction(Intent.ACTION_SCREEN_ON);            //屏幕亮起时开启的广播
                filter.addAction(Intent.ACTION_SCREEN_OFF);            //屏幕关闭时开启的广播
                filter.addAction(Intent.ACTION_USER_PRESENT);        //屏幕解锁时开启的广播
                context2.registerReceiver(mScreenReceiver, filter);    //发送广播

            }

            /**
             * 解除广播
             */
            public void unregisterListener() {
                context2.unregisterReceiver(mScreenReceiver); //注销广播
            }
        }

        //HeadsetPlugReceiver 监听耳机是否插入
        public static class GT_HeadsetPlugReceiver {

            /**
             * 监听 耳机
             * <p>
             * 使用实例:
             * GT.GT_HeadsetPlugReceiver gt_headsetPlugReceiver = new GT.GT_HeadsetPlugReceiver(this); //初始化 GT_HeadsetPlugReceiver
             * gt_headsetPlugReceiver.isHeadset_TF();    //获取当前耳机的状态  插入则返回 true 否则返回 false
             * 在销毁该 Activity 时一定要 调用该方法来注销广播
             * unregisterListener(); 方法来注销该广播
             */

            private Activity activity;
            private static boolean headset_TF;//定义耳机是否插入
            private HeadsetPlugReceiver headsetPlugReceiver;//监听手机是否有耳机插入广播

            /**
             * 检测是否插入耳机
             *
             * @return true则插入 false则未插入
             */
            public boolean isHeadset_TF() {
                registerHeadsetPlugReceiver();
                return headset_TF;
            }

            /**
             * 实例化 耳机监听
             *
             * @param activity
             */
            public GT_HeadsetPlugReceiver(Activity activity) {
                this.activity = activity;
            }

            /**
             * /注销广播
             */
            public void unregisterListener() {
                activity.unregisterReceiver(headsetPlugReceiver); //注销广播
            }

            /**
             * 注册 广播
             */
            public void registerHeadsetPlugReceiver() {
                headsetPlugReceiver = new HeadsetPlugReceiver();
                IntentFilter intentFilter = new IntentFilter();
                intentFilter.addAction("android.intent.action.HEADSET_PLUG");
                activity.registerReceiver(headsetPlugReceiver, intentFilter);
            }

            /**
             * 内部类
             */
            private static class HeadsetPlugReceiver extends BroadcastReceiver {
                @Override
                public void onReceive(Context context, Intent intent) {
                    if (intent.hasExtra("state")) {
                        if (intent.getIntExtra("state", 0) == 0) {
                            if (LOG.GT_LOG_TF)
                                headset_TF = false;
                        } else if (intent.getIntExtra("state", 0) == 1) {
                            if (LOG.GT_LOG_TF)
                                headset_TF = true;
                        }
                    }
                }
            }

        }

        //Spiritleve 屏幕旋转监听
        public abstract static class Spiritleve implements SensorEventListener {
            /**
             * 用法如下：
             * //屏幕旋转监听 内部类
             * public class SV extends GT.DeviceListening.Spiritleve {
             * <p>
             * private OnClickAdapterListener<String> onClickAdapterListener;
             * <p>
             * public SV(Context context,OnClickAdapterListener<String> onClickAdapterListener) {
             * super(context);
             * this.onClickAdapterListener = onClickAdapterListener;
             * }
             *
             * @Override protected void getPosition(float xAngle, float yAngle) {
             * super.getPosition(xAngle, yAngle);
             * int mobilePosition = getMobilePosition(xAngle, yAngle);
             * logt("mobilePosition:" + mobilePosition);
             * if(mobilePosition == 3){
             * onClickAdapterListener.onClickAdapter("横屏");
             * }else{
             * onClickAdapterListener.onClickAdapter("其他");
             * }
             * }
             * <p>
             * <p>
             * }
             * *
             * 最后再在方法中初始化
             * new SV(activity);
             * *
             */
            float[] acceleromterValues = new float[3];//加速度传感器的值
            float[] magneticValues = new float[3];//磁场传感器的值

            //动作定义 常量
            public static final int LIE_LOW = 0;         //平躺
            public static final int SLEEPER = 1;         //卧铺
            public static final int STAND_RIGHT = 2;     //右立;
            public static final int LEFT_STANDING = 3;   //左立
            public static final int STAND = 4;           //站立
            public static final int HANDSTAND = 5;       //倒立

            public static final int ZHP = 1;            //正横屏
            public static final int FHP = -1;           //反横屏
            public static final int ZSP = 2;            //正竖屏
            public static final int FSP = -2;           //反竖屏

            private SensorManager sensorManager;       //定义取消屏幕监听

            public Spiritleve(Context context) {
                sensorManager = (SensorManager) context.getSystemService(Context.SENSOR_SERVICE);//获取传感器管理器
                //为磁场传感器注册监听器
                sensorManager.registerListener(this, sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD), SensorManager.SENSOR_DELAY_GAME);
                //为加速度传感器注册监听器
                sensorManager.registerListener(this, sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER), SensorManager.SENSOR_DELAY_GAME);
            }

            @Override
            public void onSensorChanged(SensorEvent event) {    //值改变触发

                if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {
                    acceleromterValues = event.values.clone();//获取加速度传感器的值
                } else if (event.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD) {
                    magneticValues = event.values.clone();//获取磁场传感器的值
                }

                float[] R = new float[9];//保存旋转数据的数组
                float[] values = new float[3];//保存方向数据的数组

                SensorManager.getRotationMatrix(R, null, acceleromterValues, magneticValues);//获得一个包含旋转矩阵的数组
                SensorManager.getOrientation(R, values);//获取方向值

                float xAngle = (float) Math.toDegrees(values[1]);//x轴旋转角度
                float yAngle = (float) Math.toDegrees(values[2]);//y轴旋转角度

                getPosition(xAngle, yAngle);//获取小球的位置坐标

            }

            //根据X轴和Y轴的旋转角度确定小篮球的位置
            protected void getPosition(float xAngle, float yAngle) {
                            /*
                                这里会返回具体的手机位置信息
                                使用 getMobilePosition 或 getScreenPosition 方法判定 当前手机的位置
                             */
            }

            @Override
            public void onAccuracyChanged(Sensor sensor, int accuracy) {
                //精度改变触发
            }

            /**
             * 获取当前手机位置
             * 手机仰天躺(LIE_LOW)、手机卧铺躺(SLEEPER)、手机右立(STAND_RIGHT)、
             * 手机左立(LEFT_STANDING)、手机站起(STAND)、手机倒立(HANDSTAND)
             */
            public int getMobilePosition(float xAngle, float yAngle) {
                int X = (int) xAngle;
                int Y = (int) yAngle;
                if ((X >= -10 && X <= 10) && (Y >= -10 && Y <= 10)) {//手机仰天躺
                    return LIE_LOW;
                } else if ((X >= -10 && X <= 10) && (Y >= 170 && Y <= 179)) {//手机卧铺躺
                    return SLEEPER;
                } else if ((X >= 0 && X <= 2) && (Y >= 11 && Y <= 90)) {//手机右立
                    return STAND_RIGHT;
                } else if ((X >= 0 && X <= 2) && (Y <= -1 && Y >= -90)) {//手机左立
                    return LEFT_STANDING;
                } else if (X <= -50 && X >= -90) {//手机站起
                    return STAND;
                } else if ((X >= 50 && X <= 90)) {//手机倒立
                    return HANDSTAND;
                }
                return SLEEPER;//默认仰天躺
            }

            /**
             * 获取当前手机屏幕位置
             * 正横屏(ZHP.1)、反横屏(FHP.-1)、竖屏(SP.0)
             */
            public int getScreenPosition(float xAngle, float yAngle) {
                int X = (int) xAngle;
                int Y = (int) yAngle;

                if ((X >= -30 && X <= 0) && (Y <= -40 && Y >= -179)) {
                    return ZHP;
                } else if ((X >= -30 && X <= 0) && (Y >= 40 && Y <= 179)) {
                    return FHP;
                } else if ((X >= -90 && X <= -10) && (Y >= -39 && Y <= 179)) {
                    return ZSP;
                } else if ((X <= 90 && X >= 10) && (Y <= 39 && Y >= -179)) {
                    return FSP;
                }
                return -181;//默认正横屏
            }

            public void close() {
                sensorManager.unregisterListener(this);//取消注册的屏幕监听
            }

        }


    }

//============================================= 多媒体类 ========================================

    /**
     * 播放音乐 长音频
     */
    public static class GT_MediaPlayer {

        private boolean isPlay = true;    //定义是否为可播放状态
        private MediaPlayer mediaPlayer;
        private int resid = 0;
        private String url = null;

        /**
         * 获取 mediaPlayer 组件
         *
         * @return
         */
        public MediaPlayer getMediaPlayer() {
            return mediaPlayer;
        }

        public GT_MediaPlayer() {
        }

        /**
         * 加载或切换 res 目录下的资源文件
         *
         * @param activity
         * @param resid
         * @return
         */
        public GT_MediaPlayer loadMusic(Activity activity, int resid) {
            this.resid = resid;
            if (!isPlay) {       //停止过播放
                if (mediaPlayer != null && mediaPlayer.isPlaying()) {//如果属于播放状态
                    mediaPlayer.stop();//停止播放
                    mediaPlayer.release();//释放资源
                }
            }
            if (mediaPlayer != null) {
                mediaPlayer.stop();
                mediaPlayer.release();
                mediaPlayer = null;//清空内存中对象
            }
            mediaPlayer = MediaPlayer.create(activity, resid);    //初始化 MediaPlayer 对象
            isPlay = true;//恢复可播放状态
            return this;
        }//加载 res 目录下的资源文件

        /**
         * 加载或切换
         *
         * @param url
         * @return
         */
        public GT_MediaPlayer loadMusic(String url) {
            this.url = url;
            try {
                if (mediaPlayer != null && mediaPlayer.isPlaying()) {
                    mediaPlayer.stop();
                    mediaPlayer.release();
                    mediaPlayer = null;//清空内存中对象
                }
                mediaPlayer = new MediaPlayer();
                mediaPlayer.setDataSource(url);
                mediaPlayer.prepare();//预加载音频
            } catch (IOException e) {
                GT.errt("你的音频资源可能 需要添加 网络或访问SD卡的读取权限，否则无法进行有效的获取资源 url:" + url);
            }
            isPlay = true;//恢复可播放状态
            return this;
        }//获取 网络 或 SD 上的的音频资源

        /**
         * 播放音频
         *
         * @return
         */
        public GT_MediaPlayer play(Activity activity) {
            if (mediaPlayer != null) {
                recover_play(activity);//如果音频被停止了就恢复音频可播放，在进行 start
                mediaPlayer.start();
            }
            return this;
        }//播放

        /**
         * 暂停播放
         *
         * @return
         */
        public GT_MediaPlayer pause() {
            if (mediaPlayer != null) {
                mediaPlayer.pause();
            }
            return this;
        }//暂停

        /**
         * 播放 与 暂停
         *
         * @param activity   上下文
         * @param onLoadData 播放监听
         * @param times      进度刷新间隔(毫秒)
         * @return
         */
        private boolean isPlayEnd = false;//是否播放完成

        /**
         * 添加监听
         *
         * @param onLoadData
         * @param times
         * @return
         */
        public GT_MediaPlayer addListener(OnLoadData onLoadData, long... times) {
            if (onLoadData == null) return this;
            long time = 1000;//默认1秒刷新
            if (times != null && times.length > 0) {
                time = times[0];
            }
            try {
                long finalTime = time;
                Thread.getInstance(0).execute(() -> {
                    boolean isStart = false;//是否开始播放
                    while (mediaPlayer != null && mediaPlayer.isPlaying()) {
                        int currentPosition = mediaPlayer.getCurrentPosition();
                        if (currentPosition != 0) {
                            if (!isStart) {//是否开始播放
                                isStart = true;
                                onLoadData.onPlayStart(mediaPlayer);
                                mediaPlayer.setOnCompletionListener(mp -> {
                                    isPlayEnd = true;
                                    Thread.runAndroid(() -> onLoadData.onPlayProgress(mediaPlayer.getDuration(), mediaPlayer.getCurrentPosition(), 100, mp));
                                    Thread.sleep(finalTime);
                                    Thread.runAndroid(() -> onLoadData.onPlayEnd(mp));
                                });
                            }
                            if (!isPlayEnd) {//是否结束播放
                                int mProgress = (int) (((float) mediaPlayer.getCurrentPosition() / mediaPlayer.getDuration()) * 100);
                                onLoadData.onPlayProgress(mediaPlayer.getDuration(), currentPosition, mProgress, mediaPlayer);
                            }
                        }
                        Thread.sleep(finalTime);//进度监听间隔
                    }
                });

            } catch (Exception e) {
                onLoadData.onPlayFailed(e);
            }
            return this;
        }

        public GT_MediaPlayer play_pause(Activity activity, MediaPlayer.OnCompletionListener onCompletionListener, long... times) {
            if (activity == null) return this;
       /* long time = 1000;//默认1秒刷新
        if (times != null && times.length > 0) {
            time = times[0];
        }*/
            try {
                if (mediaPlayer != null) {
                    recover_play(activity);//如果音频被停止了就恢复音频可播放，在进行 start
                    if (!mediaPlayer.isPlaying()) { //如果当前的 mediaPlayer 处于暂停状态  且 播放状态为 false 没有在播放
                        mediaPlayer.start();//继续播放
//                    addListener(onLoadData, time);
                        if (onCompletionListener != null)
                            mediaPlayer.setOnCompletionListener(onCompletionListener);
                    } else {  //当前处于音乐暂停状态
                        mediaPlayer.pause();//暂停音乐
                    }
                }
            } catch (Exception e) {
//            if (onLoadData != null) onLoadData.onPlayFailed(e);
            }
            return this;
        }

        /**
         * 获取是否还在播放
         *
         * @return
         */
        public boolean isPlaying() {
            if (mediaPlayer != null) {
                return mediaPlayer.isPlaying();
            }
            return false;
        }

        /**
         * 停止音乐
         *
         * @return
         */
        public GT_MediaPlayer stop() {
            if (mediaPlayer != null && isPlay) {
                isPlay = false;//设置为暂停状态
                mediaPlayer.stop();
            }
            return this;
        }//停止音乐

        /**
         * 恢复可播放
         *
         * @return
         */
        private GT_MediaPlayer recover_play(Activity activity) {
            if (mediaPlayer != null) {
                if (!isPlay) {       //停止过播放
                    if (mediaPlayer.isPlaying()) {//如果属于播放状态
                        mediaPlayer.stop();//停止播放
                    }
                    mediaPlayer.release();//释放资源
                    mediaPlayer = null;//清空内存中对象
                    if (resid != 0) {
                        mediaPlayer = MediaPlayer.create(activity, resid);    //初始化 MediaPlayer 对象
                    } else if (url != null) {
                        mediaPlayer = new MediaPlayer();
                        try {
                            mediaPlayer.setDataSource(url);
                            mediaPlayer.prepare();//预加载音频
                        } catch (IOException e) {
                            GT.errt("你的音频资源可能 需要添加 网络或访问SD卡的读取权限，否则无法进行有效的获取资源 url:" + url);
                        }
                    }
                    isPlay = true;//恢复可播放状态
                }
            }
            return this;
        }//恢复可播放

        /**
         * 释放资源
         */
        public void close() {
            if (mediaPlayer != null) {
                if (mediaPlayer.isPlaying()) {//如果属于播放状态
                    mediaPlayer.stop();//停止播放
                }
                mediaPlayer.release();//释放资源
                mediaPlayer = null;
            }
        }//释放资源


        //增强版请求接口
        public static abstract class OnLoadData {
            /**
             * 开始播放
             */
            public void onPlayStart(MediaPlayer mediaPlayer) {
            }

            /**
             * 下载进度
             *
             * @param max             当前播放进度最大值
             * @param currentPosition 当前播放进度
             * @param progress        播放百分比
             * @param mediaPlayer     当前播放控制
             */
            public void onPlayProgress(int max, int currentPosition, int progress, MediaPlayer mediaPlayer) {
            }

            /**
             * 播放完毕
             */
            public void onPlayEnd(MediaPlayer mediaPlayer) {
            }

            /**
             * 播放异常
             */
            public void onPlayFailed(Exception e) {
            }

        }


    }

    /**
     * 播放音频 短音频
     */
    public static class GT_SoundPool {

        private Context context;
        private static SoundPool soundPool;
        private AudioAttributes attr = null;
        private static Map<String, Integer> map = new ArrayMap<>();      //初始化 map  用于存放 音频 key 与 值
        private static Map<String, Integer> mapMusic = new ArrayMap<>(); //初始化 mapMusic 用于存放待播放的音频

        /**
         * 初始化 Content
         *
         * @param context
         */
        public GT_SoundPool(Context context) {
            this.context = context;
        }

        /**
         * 设置音频属性
         *
         * @param attr
         * @return
         */
        public GT_SoundPool setAudioAttributes(AudioAttributes attr) {
            this.attr = attr;
            return this;
        }//设置音频属性


        /**
         * 加载音频
         *
         * @param map
         * @return
         */
        @SuppressLint("NewApi")
        public GT_SoundPool initMusic(Map<String, Integer> map) {
            if (map != null) {
                this.map = map;
                if (attr == null) {
                    //设置音效属性 如果为空,就设置默认的音频属性
                    attr = new AudioAttributes.Builder()
                            .setUsage(AudioAttributes.USAGE_GAME)//设置音效的使用场景 为游戏
                            .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)//设置音效类型
                            .build();
                }

                //初始化
                soundPool = new SoundPool.Builder()
                        .setAudioAttributes(attr)//设置音效池的属性
                        .setMaxStreams(map.size())//最大容纳 动态添加最大值 个音频
                        .build();

                loadMusic();//初始化 音频流
            }
            return this;
        }

        /**
         * 添加音频
         *
         * @param key
         * @param rawId
         * @return
         */
        @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
        public GT_SoundPool addMusic(String key, int rawId) {
            if (map != null) {
                if (!map.containsKey(key)) { //如果当前 map 中没有此 key
                    map.put(key, rawId); //将值保存到 map 中

                    if (attr == null) {
                        //设置音效属性 如果为空,就设置默认的音频属性
                        attr = new AudioAttributes.Builder()
                                .setUsage(AudioAttributes.USAGE_GAME)//设置音效的使用场景 为游戏
                                .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)//设置音效类型
                                .build();
                    }

                    //初始化
                    soundPool = new SoundPool.Builder()
                            .setAudioAttributes(attr)//设置音效池的属性
                            .setMaxStreams(map.size())//最大容纳 动态添加最大值 个音频
                            .build();

                    loadMusic();//初始化 音频流

                } else {
                    GT.log(getLineInfo(1), "添加音频无效，当前已经包含相同的 key，无法再进行装载相同的 key");//提示无效的添加
                }
            }
            return this;
        } //添加音频

        /**
         * 初始化音频
         */
        private void loadMusic() {
            if (map != null && mapMusic != null) {
                for (String key : map.keySet()) {
                    mapMusic.put(key, soundPool.load(context, map.get(key), 1));//初始化 待播放的音频
                }
            }
        }//初始化音频

        /**
         * 移除音频
         *
         * @param key
         * @return
         */
        public GT_SoundPool removalMusic(Integer key) {
            if (map != null && mapMusic != null) {
                if (map.containsKey(key)) {
                    map.remove(key);
                    mapMusic.remove(key);
                    loadMusic();//初始化音频
                } else {
                    log(getLineInfo(1), "移除音频失败，当前并不存在此 key:" + key);
                }
            }
            return this;
        }//移除音频

        /**
         * 清空音频
         *
         * @return
         */
        public GT_SoundPool clear() {
            if (map != null && mapMusic != null) {
                map.clear();
                mapMusic.clear();
            }
            return this;
        }//清空音频

        /**
         * 修改音频
         *
         * @param key
         * @param rawId
         * @return
         */
        public GT_SoundPool updateMusic(String key, Integer rawId) {
            if (map != null && mapMusic != null) {
                if (map.containsKey(key)) {
                    map.put(key, rawId);
                    mapMusic.put(key, rawId);
                    loadMusic();//初始化音频
                } else {
                    GT.log(getLineInfo(1), "修改音频无效，当前并不存在当前 key，无法进行更新操作");//提示无效的更新
                }
            }
            return this;
        }//修改音频

        /**
         * 播放音频
         *
         * @param key  指定播放的音频key
         * @param loop 是否循环 false为不循环, true 为循环
         * @param rate 速率 为正常速率 1  最低为 0.5，最高为 2
         * @return
         */
        public GT_SoundPool play(String key, boolean loop, float rate) {
            //播放所选音频
            if (soundPool != null) {
                soundPool.play(
                        mapMusic.get(key),           //指定播放的音频 key
                        1,              //左声道 为0.0 到 1.0
                        1,             //右声道 为0.0 到 1.0
                        0,                 //优先级 0
                        (loop == true ? -1 : 0),    //是否循环 0为不循环, -1 为循环
                        rate                        //速率 为正常速率 1  最低为 0.5，最高为 2
                );
            }
            return this;
        }
    }

    /**
     * 播放视频
     */
    public static class GT_Video implements SurfaceHolder.Callback {

        /**
         * 使用说明：
         * 第一步：在 xml 中 定义好 SurfaceView 组件
         * 第二步：video = new GT.GT_Video(this,R.raw.lmh,surfaceView);//初始化 GT_Video 视频播放器
         * 第三步：播放 video.play();、暂停 video.pause();、 停止 video.stop();、释放资源 video.close();
         */

        private MediaPlayer mediaPlayer = null;
        private SurfaceView surfaceView;
        private SurfaceHolder surfaceHolder;
        private Context context;
        private int resId;
        private static boolean isPlay = true;   //定义是否被停止播放过视频

        /**
         * 初始化视频 ()注意，需要单击才有效果 一个坑
         *
         * @param context     上下文
         * @param resId       资源id
         * @param surfaceView surfaceView
         */
        public GT_Video(Context context, int resId, SurfaceView surfaceView) {
            this.context = context;
            this.surfaceView = surfaceView;
            this.resId = resId;
            surfaceHolder = this.surfaceView.getHolder();
            surfaceHolder.addCallback(this);
        }

        /**
         * 播放 视频
         *
         * @return
         */
        public GT_Video play() {
            if (mediaPlayer != null) {
                recover_play();
                mediaPlayer.start();
            }
            return this;
        }

        /**
         * 暂停视频
         *
         * @return
         */
        public GT_Video pause() {
            if (mediaPlayer != null) {
                recover_play();
                mediaPlayer.pause();
            }
            return this;
        }

        /**
         * 释放资源
         *
         * @return
         */
        public GT_Video stop() {
            if (mediaPlayer != null) {
                mediaPlayer.stop();
                isPlay = false;
            }
            return this;
        }

        /**
         * 恢复可播放
         *
         * @return
         */
        private MediaPlayer recover_play() {
            if (!isPlay) {       //停止过播放
                close();
                mediaPlayer = null;//清空内存中对象
                if (resId != 0) {
                    mediaPlayer = MediaPlayer.create(context, resId);//设置加载的视频资源
                    mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
                    mediaPlayer.setDisplay(surfaceHolder);    //设置显示视频显示在SurfaceView上
                }
                isPlay = true;//恢复可播放状态
            }
            return mediaPlayer;
        }//恢复可播放


        /**
         * 释放资源
         */
        public void close() {
            if (mediaPlayer.isPlaying()) {
                mediaPlayer.stop();
            }
            mediaPlayer.release();
        }//释放资源


        /**
         * 初始化 视频 数据
         *
         * @param holder
         */
        public void surfaceCreated(SurfaceHolder holder) {
            mediaPlayer = MediaPlayer.create(context, resId);//设置加载的视频资源
            mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
            mediaPlayer.setDisplay(surfaceHolder);    //设置显示视频显示在SurfaceView上
        }

        @Override
        public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {

        }

        @Override
        public void surfaceDestroyed(SurfaceHolder holder) {

        }
    }

//======================================= Run GT 的内部注解 =====================================

    /**
     * 注解类
     * 注意:如果app项目中无法使用注解，那就需要在 gradle.properties 文件中 加入以下代码：android.nonFinalResIds=false
     */
    public static class Annotations {

        /**
         * 为给 Activity 类 标的注解 用法如下：
         *
         * @Activity(R.layout.activity_***) public class DemoActivity extends AppCompatActivity {....}
         */
        @Target(ElementType.TYPE)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface GT_AnnotationActivity {
            int value() default 0;//竖屏布局

            int valueHD() default 0;//横屏布局

            int[] values() default 0;//其他自定义特殊布局

            int valueIndex() default -1;//与 values 进行配合，指定第几个布局有效

            //如果横竖屏缺少 Context 就绑定 GT.GT_Cache.setContext(activity);
        }

        /**
         * 为给 Fragment 类 标的注解 用法如下：
         */
        @Target(ElementType.TYPE)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface GT_AnnotationFragment {
            int value() default 0;//竖屏布局

            int valueHD() default 0;//横屏布局

            int[] values() default 0;//其他自定义特殊布局

            int valueIndex() default -1;//与 values 进行配合，指定第几个布局有效

            //如果横竖屏缺少 Context 就绑定 GT.GT_Cache.setContext(activity);

        }

        /**
         * 为给 DialogFragment 类 标的注解 用法如下：
         */
        @Target(ElementType.TYPE)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface GT_AnnotationDialogFragment {
            int value() default 0;//竖屏布局

            int valueHD() default 0;//横屏布局

            int[] values() default 0;//其他自定义特殊布局

            int valueIndex() default -1;//与 values 进行配合，指定第几个布局有效
        }

        /**
         * 为悬浮窗注解
         */
        @Target(ElementType.TYPE)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface GT_AnnotationFloatingWindow {
            int value() default 0;//竖屏布局

            int valueHD() default 0;//横屏布局

            int[] values() default 0;//其他自定义特殊布局

            int valueIndex() default -1;//与 values 进行配合，指定第几个布局有效

            //如果横竖屏缺少 Context 就绑定 GT.GT_Cache.setContext(activity);
        }

        /**
         * 为 PopupWindow 注解
         */
        @Target(ElementType.TYPE)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface GT_AnnotationPopupWindow {
            int value() default 0;//竖屏布局

            int valueHD() default 0;//横屏布局

            int[] values() default 0;//其他自定义特殊布局

            int valueIndex() default -1;//与 values 进行配合，指定第几个布局有效

            //如果横竖屏缺少 Context 就绑定 GT.GT_Cache.setContext(activity);
        }

        /**
         * 为 适配器 注解
         */
        @Target(ElementType.TYPE)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface GT_AnnotationAdapter {
            int value() default 0;//竖屏布局

            int valueHD() default 0;//横屏布局

            int[] values() default 0;//其他自定义特殊布局

            int valueIndex() default -1;//与 values 进行配合，指定第几个布局有效

            //如果横竖屏缺少 Context 就绑定 GT.GT_Cache.setContext(activity);
        }

        /**
         * 为 自定义 View 给需要 特别复杂的View 给与页面的操作方式
         */
        @Target(ElementType.TYPE)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface GT_AnnotationView {
            int value() default 0;//竖屏布局

            int valueHD() default 0;//横屏布局

            int[] values() default 0;//其他自定义特殊布局

            int valueIndex() default -1;//与 values 进行配合，指定第几个布局有效

            //如果横竖屏缺少 Context 就绑定 GT.GT_Cache.setContext(activity);
        }

        /**
         * 为给 View 组件标的注解
         * 用法如下：
         *
         * @GT_View(R.id.ioc_tv) private TextView tv;
         */
        @Target(ElementType.FIELD)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface GT_View {
            int value();
        }


        /**
         * 为给 GT_Window 类 标的注解 用法如下：
         */
        @Target(ElementType.TYPE)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface GT_AnnotationWindow {
            int value();
        }

        @Target(ElementType.TYPE)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface GT_Notification {
            int value() default 0;//折叠布局

            int value2() default 0;//展开布局
        }


        /**
         * 为给 单击方法 标的注解
         * 用法如下：切记 单击方法一定要是 public 的修饰符
         *
         * @Click({R.id.ioc_btn01,R.id.ioc_btn02,R.id.ioc_btn03}) public void setButtonOnClickListener(View view){
         * switch (view.getId()){
         * case R.id.ioc_btn01:
         * Log.e(TAG, "单击 1 号" );
         * break;
         * case R.id.ioc_btn02:
         * Log.e(TAG, "单击 2 号" );
         * break;
         * case R.id.ioc_btn03:
         * Log.e(TAG, "单击 3 号" );
         * break;
         * }
         * }
         */
        @Target(ElementType.METHOD)
        @Retention(RetentionPolicy.RUNTIME)
        @OnClickEvent(listenerType = View.OnClickListener.class, listenerSetter = "setOnClickListener", methodName = "onClick")
        public @interface GT_Click {
            int[] value();
        }

        /**
         * 用于协助 单击方法的注解
         */
        @Target(ElementType.ANNOTATION_TYPE)
        @Retention(RetentionPolicy.RUNTIME)
        private @interface OnClickEvent {
            Class<?> listenerType();//接口类型

            String listenerSetter();//设置的方法

            String methodName();//接口里面要实现的方法
        }


        /**
         * 用于注解 普通成员变量的注解 可携带 参数
         * 注意：如果是 对象 那么 构造函数一定不能设置为 单例（构造函数修饰符不能为 private 私有的）否则会注解注入失败！
         */
        @Target(ElementType.FIELD)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface GT_Object {

            /**
             * 定义当前注解 支持的参数类型
             */
            interface TYPE {
                String BYTE = "byte";
                String SHORT = "short";
                String INT = "int";
                String LONG = "long";
                String FLOAT = "float";
                String DOUBLE = "double";
                String BOOLEAN = "boolean";
                String CHAR = "char";
                String STRING = "String";

                String BYTES = "bytes";
                String SHORTS = "shorts";
                String INTS = "ints";
                String LONGS = "longs";
                String FLOATS = "floats";
                String DOUBLES = "doubles";
                String BOOLEANS = "booleans";
                String CHARS = "chars";
                String STRINGS = "Strings";
            }

            /**
             * 单参数的传递
             **/
            byte valueByte() default 0;

            short valueShort() default 0;

            int valueInt() default 0;

            long valueLong() default 0L;

            float valueFloat() default 0.0f;

            double valueDouble() default 0.0d;

            boolean valueBoolean() default false;

            char valueChar() default 0;

            String valueString() default "";

            /**
             * 多参数的传递
             **/
            byte[] valueBytes() default {};

            short[] valueShorts() default {};

            int[] valueInts() default {};

            long[] valueLongs() default {};

            float[] valueFloats() default {};

            double[] valueDoubles() default {};

            boolean[] valueBooleans() default {};

            char[] valueChars() default {};

            String[] valueStrings() default {};

            /**
             * 修改参数的类型
             **/
            String type() default "";

            String[] types() default {};

            /**
             * 要赋值的方法
             **/
            String function() default "";

            String[] functions() default {};

        }

        /**
         * 资源注解
         */
        public @interface GT_Res {

            /**
             * 字符串 注解
             */
            @Target(ElementType.FIELD)
            @Retention(RetentionPolicy.RUNTIME)
            @interface GT_String {
                int value();
            }

            /**
             * 颜色 注解
             */
            @Target(ElementType.FIELD)
            @Retention(RetentionPolicy.RUNTIME)
            @interface GT_Color {
                int value();
            }

            /**
             * 尺寸 注解
             */
            @Target(ElementType.FIELD)
            @Retention(RetentionPolicy.RUNTIME)
            @interface GT_Dimen {
                int value();
            }

            /**
             * 图片 注解
             */
            @Target(ElementType.FIELD)
            @Retention(RetentionPolicy.RUNTIME)
            @interface GT_Drawable {
                int value();
            }

            /**
             * 动画 注解
             */
            @Target(ElementType.FIELD)
            @Retention(RetentionPolicy.RUNTIME)
            @interface GT_Animation {
                int value();
            }

            /**
             * 字符串数组 注解
             */
            @Target(ElementType.FIELD)
            @Retention(RetentionPolicy.RUNTIME)
            @interface GT_StringArray {
                int value();
            }

            /**
             * 整数数组 注解
             */
            @Target(ElementType.FIELD)
            @Retention(RetentionPolicy.RUNTIME)
            @interface GT_IntArray {
                int value();
            }

            /**
             * 将 xml 文件解析成 View 注解
             */
            @Target(ElementType.FIELD)
            @Retention(RetentionPolicy.RUNTIME)
            @interface GT_Layout {
                int value();
            }

            @Target(ElementType.FIELD)
            @Retention(RetentionPolicy.RUNTIME)
            @interface GT_Index {
                int value();
            }

        }

        /**
         * 集合注解
         */
        public @interface GT_Collection {

            /**
             * List 注解
             */
            @Target(ElementType.FIELD)
            @Retention(RetentionPolicy.RUNTIME)
            @interface GT_List {

                String[] valueObject() default {};

                Class<?>[] valueClass() default {};

                String[] valueString() default {};

                byte[] valueByte() default {};

                short[] valueShort() default {};

                int[] valueInt() default {};

                long[] valueLong() default {};

                float[] valueFloat() default {};

                double[] valueDouble() default {};

                boolean[] valueBoolean() default {};

                char[] valueChar() default {};

            }


            /**
             * Map 注解
             */
            @Target(ElementType.FIELD)
            @Retention(RetentionPolicy.RUNTIME)
            @interface GT_Map {

                String[] valueKey() default {};

                String[] valueObject() default {};

                Class<?>[] valueClass() default {};

                String[] valueString() default {};

                byte[] valueByte() default {};

                short[] valueShort() default {};

                int[] valueInt() default {};

                long[] valueLong() default {};

                float[] valueFloat() default {};

                double[] valueDouble() default {};

                boolean[] valueBoolean() default {};

                char[] valueChar() default {};
            }


            /**
             * Set 注解
             */
            @Target(ElementType.FIELD)
            @Retention(RetentionPolicy.RUNTIME)
            @interface GT_Set {

                String[] valueObject() default {};

                Class<?>[] valueClass() default {};

                String[] valueString() default {};

                byte[] valueByte() default {};

                short[] valueShort() default {};

                int[] valueInt() default {};

                long[] valueLong() default {};

                float[] valueFloat() default {};

                double[] valueDouble() default {};

                boolean[] valueBoolean() default {};

                char[] valueChar() default {};

            }

        }

    }

    /**
     * 注解反射工具类
     */
    public static class AnnotationAssist {

        //================================   下面是 初始化 注解内容   ==============================
        //主要用于注解 Activity 与 Fragment 共有的
        public static void initAll(Object object, boolean... isInitUI) {
            if (isInitUI.length != 0) {
                if (isInitUI[0]) {
                    //仅仅初始化UI
                    initAllUI(object);
                    return;
                } else {
                    //仅仅初始化其他工具
                    initAllTool(object);
                    return;
                }
            }
            //初始化所有
            initAllUI(object);
            initAllTool(object);
        }

        /**
         * 初始化所有 UI
         *
         * @param object
         */
        public static void initAllUI(Object object) {
            //注解加载布局
            initAnnotationActivity(object);          //为加载 Activity 布局初始化
            initAnnotationFragment(object);          // 为加载 AnnotationFragment 布局初始化
            initGT_AnnotationDialogFragment(object); // 为加载 DialogFragment 布局初始化
            initGT_AnnotationAdapter(object);        // 为加载 Adapter 布局初始化
            initAnnotationFloatingWindow(object);    //注解悬浮窗
            initAnnotationView(object);              //注解 View
            initAnnotationPopupWindow(object);       //注解弹出式窗 PopupWindow
            initAnnotationNotification(object);      //注解 Notification
        }

        /**
         * 初始化所有 工具
         *
         * @param object
         */
        public static void initAllTool(Object object) {

            //框架注解
            initSQL(object);                         //为加载 SQL 成员变量初始化
            initGT_Fragment(object);                 //为加载 Fragment 框架
            initGT_SharedPreferences(object);        //SP框架注解
            initSerialPortUtils(object);             //串口框架注解
            initTCP(object);                         //TCP框架注解
            initHttpCall(object);                    //为HttpCall

            //这两个需要重点照顾需要
            initView(object);                        //为加载 组件 初始化
            initClick(object);                       //注解单击事件

            // Java 注解部分
            initObject(object);                    //为加载 Object 成员变量初始化
            initList(object);                      //为加载 List 成员变量初始化
            initMap(object);                       //为加载 Map 成员变量初始化
            initSet(object);                       //为加载 Set 成员变量初始化

            //资源 注解
            initAnimation(object);            //为加载 Animation 资源初始化
            initDimen(object);                //为加载 Dimen 资源初始化
            initDrawable(object);             //为加载 Style 资源初始化
            initColor(object);                //为加载 Color 资源初始化
            initString(object);               //为加载 String 资源初始化
            initIntArray(object);             //为加载 IntArray 资源初始化
            initStringArray(object);          //为加载 StringArray 资源初始化
            initLayout(object);               //为加载 Layout 资源初始化
        }


        //================================   下面是 SQL 的注解内容   ==============================

        /**
         * @param object
         * @param mClass
         * @注入 SQL 资源字符串
         */
        private static Object classObject = null;//最终注入的值

        private static void initSQL(Object object) {
            Field[] fields = object.getClass().getDeclaredFields();//获致当前 Activity 所有成员变更
            for (Field field : fields) {
                //获取识别注解
                Hibernate.Build initView_Hibernate = field.getAnnotation(Hibernate.Build.class);
                //初始化GT数据库
                if (initView_Hibernate != null) {
                    String sqlName = initView_Hibernate.setSqlName();//数据库名称
                    int sqlVersion = initView_Hibernate.setSqlVersion();//数据库版本号
                    Class<?>[] classes = initView_Hibernate.setSqlTables();//数据库映射的表
                    boolean IsThread = initView_Hibernate.setIsThread();//是否使用线程创建数据库
                    boolean IsTransaction = initView_Hibernate.setTransaction();//是否使用事务
                    String passWord = initView_Hibernate.setPassWord();//获取加密密码

                    //先从缓存里获取
                    Hibernate hibernateCache = GT_Cache.getHibernate(sqlName);
                    if (hibernateCache != null) {
                        //实例注入
                        try {
                            field.setAccessible(true);
                            field.set(object, hibernateCache);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        continue;
                    }

                    if (getActivity() == null) {
                        err(getLineInfo(LOG.lineInfoIndex), "注入数据库失败！请在 Activity 中绑定GT注解");
                        return;
                    }

                    if (IsThread) {
                        //使用线程的方式创建
                        Thread.getInstance(0).execute(new Runnable() {
                            @Override
                            public void run() {
                                //如果用户没有自己设置映射的表那就扫描标注Bean,Entity的类做表
                                Hibernate hibernate = new Hibernate();
                                hibernate.setTransaction(IsTransaction);
                                if (classes.length == 0) {
                                    classObject = hibernate.initSQL(sqlName, sqlVersion, passWord, ApplicationUtils.getPackageName(getActivity()));
                                } else {
                                    classObject = hibernate.initSQL(sqlName, sqlVersion, passWord, classes);
                                }

                                //存入缓存
                                GT_Cache.putHibernate(sqlName, hibernate);
                                //实例注入
                                try {
                                    field.setAccessible(true);
                                    field.set(object, classObject);
                                } catch (Exception e) {
                                    GT.err("init SQL Error:" + e);
                                }
                            }
                        });
                    } else {
                        //不使用线程的方式创建
                        Hibernate hibernate = new Hibernate();
                        hibernate.setTransaction(IsTransaction);
                        //如果用户没有自己设置映射的表那就扫描标注Bean,Entity的类做表
                        if (classes.length == 0) {
                            classObject = hibernate.initSQL(sqlName, sqlVersion, null, ApplicationUtils.getPackageName(getActivity()));
                        } else {
                            classObject = hibernate.initSQL(sqlName, sqlVersion, null, classes);
                        }
                        //存入缓存
                        GT_Cache.putHibernate(sqlName, hibernate);
                        //实例注入
                        try {
                            field.setAccessible(true);
                            field.set(object, classObject);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }

                }

            }
        }

        //================================   下面是 Java 的注解内容   ==============================

        /**
         * 参数版
         *
         * @param object
         */
        private static void initObject(Object object) {
            Field[] fields = object.getClass().getDeclaredFields();//获致所有成员变更
            for (Field field : fields) {
                Annotations.GT_Object initView = field.getAnnotation(Annotations.GT_Object.class);
                if (initView != null) {

                    //获取 完整的类路径
                    String classPage = field.toString();
                    String[] s = classPage.split(" ");
                    classPage = s[s.length - 2];


                    //实例化一个对象
                    Object object2 = null;
                    try {
                        object2 = Class.forName(classPage).newInstance();
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    } catch (InstantiationException e) {
                        e.printStackTrace();
                    } catch (ClassNotFoundException e) {
                        e.printStackTrace();
                    }

                    //获取参数的值类型
                    String type = initView.type();
                    String[] types = initView.types();

                    //创建保存 参数类型的容器
                    List<Object> valueList = new ArrayList<>();
                    if (type.length() != 0) {
                        valueType(type, valueList, initView, 0);//将当前的单个数据赋值到 listView 中
                    } else if (types.length != 0) {
                        for (int i = 0; i < types.length; i++) {
                            valueType(types[i], valueList, initView, i);//将当前的多个数据赋值到 listView 中
                        }
                    }

                    /** 获取注解传递过来的参数 **/
                    String function = initView.function();
                    String[] functions = initView.functions();

                    /**
                     * 获取当前方法所有方法
                     */
                    if (function.length() != 0 && valueList.size() != 0) {
                        functionValue(field, object2, function, valueList, 0);//对相应的方法进行赋值
                    } else if (functions.length != 0 && valueList.size() != 0) {
                        for (int i = 0; i < functions.length; i++) {
                            functionValue(field, object2, functions[i], valueList, i);//对相应的方法进行赋值
                        }
                    }

                    //给注解下面的 成员变量注入值
                    try {
                        field.setAccessible(true);
                        field.set(object, object2);
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        /**
         * 注入 List 资源字符串
         **/
        private static void initList(Object object) {

            Field[] fields = object.getClass().getDeclaredFields();//获致所有成员变更
            for (Field field : fields) {
                Annotations.GT_Collection.GT_List initView = field.getAnnotation(Annotations.GT_Collection.GT_List.class);
                if (initView != null) {

                    String[] valueObject = initView.valueObject();
                    Class<?>[] valueClass = initView.valueClass();
                    String[] valueString = initView.valueString();

                    byte[] valueByte = initView.valueByte();
                    short[] valueShort = initView.valueShort();
                    int[] valueInt = initView.valueInt();
                    long[] valueLong = initView.valueLong();
                    float[] valueFloat = initView.valueFloat();
                    double[] valueDouble = initView.valueDouble();
                    boolean[] valueBoolean = initView.valueBoolean();
                    char[] valueChar = initView.valueChar();

                    List<Object> objectList = new ArrayList<>();

                    if (valueObject.length != 0) {
                        for (Object value : valueObject) {
                            objectList.add(value);
                        }
                    } else if (valueClass.length != 0) {
                        for (Class cla : valueClass) {
                            String classPage = cla.toString();
                            String[] s = classPage.split(" ");
                            classPage = s[1];

                            //实例化一个对象
                            Object object2 = null;
                            try {
                                object2 = Class.forName(classPage).newInstance();
                            } catch (IllegalAccessException e) {
                                e.printStackTrace();
                            } catch (InstantiationException e) {
                                e.printStackTrace();
                            } catch (ClassNotFoundException e) {
                                e.printStackTrace();
                            }
                            objectList.add(object2);//添加每一个经过反射得到的 对象
                        }

                    } else if (valueString.length != 0) {
                        for (Object value : valueString) {
                            objectList.add(value);
                        }
                    } else if (valueByte.length != 0) {
                        for (Object value : valueByte) {
                            objectList.add(value);
                        }
                    } else if (valueShort.length != 0) {
                        for (Object value : valueShort) {
                            objectList.add(value);
                        }
                    } else if (valueInt.length != 0) {
                        for (Object value : valueInt) {
                            objectList.add(value);
                        }
                    } else if (valueLong.length != 0) {
                        for (Object value : valueLong) {
                            objectList.add(value);
                        }
                    } else if (valueFloat.length != 0) {
                        for (Object value : valueFloat) {
                            objectList.add(value);
                        }
                    } else if (valueDouble.length != 0) {
                        for (Object value : valueDouble) {
                            objectList.add(value);
                        }
                    } else if (valueBoolean.length != 0) {
                        for (Object value : valueBoolean) {
                            objectList.add(value);
                        }
                    } else if (valueChar.length != 0) {
                        for (Object value : valueChar) {
                            objectList.add(value);
                        }
                    }

                    //实例注入 List
                    try {
                        field.setAccessible(true);
                        field.set(object, objectList);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                }
            }

        }

        /**
         * 注入 Map 资源字符串
         **/
        private static void initMap(Object object) {

            Field[] fields = object.getClass().getDeclaredFields();//获致所有成员变更
            for (Field field : fields) {
                Annotations.GT_Collection.GT_Map initView = field.getAnnotation(Annotations.GT_Collection.GT_Map.class);
                if (initView != null) {

                    Map<Object, Object> objectMap = new ArrayMap<>();//创建一个 Map
                    String[] valueKey = initView.valueKey();
                    if (valueKey.length != 0) {    //如果不为 0 则创建 map 后并注入值 否则仅创建新的 Map 对象

                        String[] valueObject = initView.valueObject();
                        Class<?>[] valueClass = initView.valueClass();
                        String[] valueString = initView.valueString();

                        byte[] valueByte = initView.valueByte();
                        short[] valueShort = initView.valueShort();
                        int[] valueInt = initView.valueInt();
                        long[] valueLong = initView.valueLong();
                        float[] valueFloat = initView.valueFloat();
                        double[] valueDouble = initView.valueDouble();
                        boolean[] valueBoolean = initView.valueBoolean();
                        char[] valueChar = initView.valueChar();

                        if (valueObject.length != 0) {
                            for (int i = 0; i < valueKey.length; i++) {
                                objectMap.put(valueKey[i], valueObject[i]);
                            }
                        } else if (valueClass.length != 0) {
                            for (Class cla : valueClass) {

                                //截取 类的 class 路径属性
                                String classPage = cla.toString();
                                String[] s = classPage.split(" ");
                                classPage = s[1];

                                //实例化一个对象
                                Object object2 = null;
                                try {
                                    object2 = Class.forName(classPage).newInstance();
                                } catch (IllegalAccessException e) {
                                    e.printStackTrace();
                                } catch (InstantiationException e) {
                                    e.printStackTrace();
                                } catch (ClassNotFoundException e) {
                                    e.printStackTrace();
                                }

                                for (int i = 0; i < valueKey.length; i++) {
                                    objectMap.put(valueKey[i], object2);
                                }

                            }

                        } else if (valueString.length != 0) {
                            for (int i = 0; i < valueKey.length; i++) {
                                objectMap.put(valueKey[i], valueString[i]);
                            }
                        } else if (valueByte.length != 0) {
                            for (int i = 0; i < valueKey.length; i++) {
                                objectMap.put(valueKey[i], valueByte[i]);
                            }
                        } else if (valueShort.length != 0) {
                            for (int i = 0; i < valueKey.length; i++) {
                                objectMap.put(valueKey[i], valueShort[i]);
                            }
                        } else if (valueInt.length != 0) {
                            for (int i = 0; i < valueKey.length; i++) {
                                objectMap.put(valueKey[i], valueInt[i]);
                            }
                        } else if (valueLong.length != 0) {
                            for (int i = 0; i < valueKey.length; i++) {
                                objectMap.put(valueKey[i], valueLong[i]);
                            }
                        } else if (valueFloat.length != 0) {
                            for (int i = 0; i < valueKey.length; i++) {
                                objectMap.put(valueKey[i], valueFloat[i]);
                            }
                        } else if (valueDouble.length != 0) {
                            for (int i = 0; i < valueKey.length; i++) {
                                objectMap.put(valueKey[i], valueDouble[i]);
                            }
                        } else if (valueBoolean.length != 0) {
                            for (int i = 0; i < valueKey.length; i++) {
                                objectMap.put(valueKey[i], valueBoolean[i]);
                            }
                        } else if (valueChar.length != 0) {
                            for (int i = 0; i < valueKey.length; i++) {
                                objectMap.put(valueKey[i], valueChar[i]);
                            }
                        }

                    }

                    try {
                        field.setAccessible(true);
                        field.set(object, objectMap);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                }
            }

        }

        /**
         * 注入 Set 资源字符串
         **/
        private static void initSet(Object object) {

            Field[] fields = object.getClass().getDeclaredFields();//获致所有成员变更
            for (Field field : fields) {
                Annotations.GT_Collection.GT_Set initView = field.getAnnotation(Annotations.GT_Collection.GT_Set.class);
                if (initView != null) {

                    String[] valueObject = initView.valueObject();
                    Class<?>[] valueClass = initView.valueClass();
                    String[] valueString = initView.valueString();

                    byte[] valueByte = initView.valueByte();
                    short[] valueShort = initView.valueShort();
                    int[] valueInt = initView.valueInt();
                    long[] valueLong = initView.valueLong();
                    float[] valueFloat = initView.valueFloat();
                    double[] valueDouble = initView.valueDouble();
                    boolean[] valueBoolean = initView.valueBoolean();
                    char[] valueChar = initView.valueChar();

                    Set<Object> objectSet = new HashSet<>();

                    if (valueObject.length != 0) {
                        for (Object value : valueObject) {
                            objectSet.add(value);
                        }
                    } else if (valueClass.length != 0) {
                        for (Class cla : valueClass) {
                            String classPage = cla.toString();
                            String[] s = classPage.split(" ");
                            classPage = s[1];

                            //实例化一个对象
                            Object object2 = null;
                            try {
                                object2 = Class.forName(classPage).newInstance();
                            } catch (IllegalAccessException e) {
                                e.printStackTrace();
                            } catch (InstantiationException e) {
                                e.printStackTrace();
                            } catch (ClassNotFoundException e) {
                                e.printStackTrace();
                            }
                            objectSet.add(object2);//添加每一个经过反射得到的 对象
                        }

                    } else if (valueString.length != 0) {
                        for (Object value : valueString) {
                            objectSet.add(value);
                        }
                    } else if (valueByte.length != 0) {
                        for (Object value : valueByte) {
                            objectSet.add(value);
                        }
                    } else if (valueShort.length != 0) {
                        for (Object value : valueShort) {
                            objectSet.add(value);
                        }
                    } else if (valueInt.length != 0) {
                        for (Object value : valueInt) {
                            objectSet.add(value);
                        }
                    } else if (valueLong.length != 0) {
                        for (Object value : valueLong) {
                            objectSet.add(value);
                        }
                    } else if (valueFloat.length != 0) {
                        for (Object value : valueFloat) {
                            objectSet.add(value);
                        }
                    } else if (valueDouble.length != 0) {
                        for (Object value : valueDouble) {
                            objectSet.add(value);
                        }
                    } else if (valueBoolean.length != 0) {
                        for (Object value : valueBoolean) {
                            objectSet.add(value);
                        }
                    } else if (valueChar.length != 0) {
                        for (Object value : valueChar) {
                            objectSet.add(value);
                        }
                    }

                    //实例注入 List
                    try {
                        field.setAccessible(true);
                        field.set(object, objectSet);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                }
            }

        }

        //================================   下面是 通用 的注解内容   ==========================

        private static void initView(Object obj) {
            if (obj == null) return;
            Class<?> clazz = obj.getClass();//获取该类信息
            Field[] fields = clazz.getDeclaredFields();//获致所有成员变更
            for (Field field : fields) {
                Annotations.GT_View initView = field.getAnnotation(Annotations.GT_View.class);
                if (initView != null) {
                    int viewId = initView.value();
                    try {
                        field.setAccessible(true);
                        //匹配是 Activity 还是 View
                        Object[] objects = returnActivityOrView(obj);
                        Activity activity = (Activity) objects[0];
                        View view = (View) objects[1];
                        if (activity != null) {
                            field.set(obj, activity.findViewById(viewId));
                        } else if (view != null) {
                            field.set(obj, view.findViewById(viewId));
                        }
                    } catch (Exception e) {
//                        GT.logs("e:" + e);
                        e.printStackTrace();
                    }
                }
            }
        }

        /**
         * 注入控件
         *
         * @param object
         * @param mClass
         * @param view
         */
        private static void initView(Object object, View view) {
            Field[] fields = object.getClass().getDeclaredFields();//获致所有成员变更
            for (Field field : fields) {
                Annotations.GT_View initView = field.getAnnotation(Annotations.GT_View.class);
                if (initView != null) {
                    int viewId = initView.value();
                    try {
                        View viewById = view.findViewById(viewId);
                        field.setAccessible(true);
                        field.set(object, viewById);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        /**
         * 注入点击事件
         */
        private static void initClick(Object object, View view) {
            Method[] methods = object.getClass().getMethods();//获取所有声明为公有的方法
            for (Method method : methods) {//遍历所有公有方法
                Annotation[] annotations = method.getAnnotations();//获取该公有方法的所有注解
                for (Annotation annotation : annotations) {//遍历所有注解
                    Class<? extends Annotation> annotationType = annotation.annotationType();//获取具体的注解类
                    Annotations.OnClickEvent onClickEvent = annotationType.getAnnotation(Annotations.OnClickEvent.class);//取出注解的onClickEvent注解
                    if (onClickEvent != null) {//如果不为空
                        try {
                            Method valueMethod = annotationType.getDeclaredMethod("value");//获取注解InjectOnClick的value方法
                            int[] viewIds = (int[]) valueMethod.invoke(annotation, (Object[]) null);//获取控件值
                            Class<?> listenerType = onClickEvent.listenerType();//获取接口类型
                            String listenerSetter = onClickEvent.listenerSetter();//获取set方法
                            String methodName = onClickEvent.methodName();//获取接口需要实现的方法
                            MyInvocationHandler handler = new MyInvocationHandler(object);//自己实现的代码，负责调用
                            handler.setMethodMap(methodName, method);//设置方法及设置方法
                            Object object2 = Proxy.newProxyInstance(listenerType.getClassLoader(), new Class<?>[]{listenerType}, handler);//创建动态代理对象类
                            for (int viewId : viewIds) {//遍历要设置监听的控件
                                try {
                                    View view2 = view.findViewById(viewId);//获取该控件
                                    Method m = view2.getClass().getMethod(listenerSetter, listenerType);//获取方法
                                    m.invoke(view2, object2);//调用方法
                                } catch (Exception e) {
//                                    logt("e:" + e);
                                }
                            }
                        } catch (Exception e) {
//                            logt("e:" + e);
                            e.printStackTrace();
                        }
                    }
                }
            }
        }

        /**
         * 注入点击事件
         */
        private static void initClick(Object obj) {
            Method[] methods = obj.getClass().getMethods();//获取所有声明为公有的方法
            for (Method method : methods) {//遍历所有公有方法
                Annotation[] annotations = method.getAnnotations();//获取该公有方法的所有注解
                for (Annotation annotation : annotations) {//遍历所有注解
                    Class<? extends Annotation> annotationType = annotation.annotationType();//获取具体的注解类
                    Annotations.OnClickEvent onClickEvent = annotationType.getAnnotation(Annotations.OnClickEvent.class);//取出注解的onClickEvent注解
                    if (onClickEvent != null) {//如果不为空
                        try {
                            Method valueMethod = annotationType.getDeclaredMethod("value");//获取注解InjectOnClick的value方法
                            int[] viewIds = (int[]) valueMethod.invoke(annotation, (Object[]) null);//获取控件值
                            Class<?> listenerType = onClickEvent.listenerType();//获取接口类型
                            String listenerSetter = onClickEvent.listenerSetter();//获取set方法
                            String methodName = onClickEvent.methodName();//获取接口需要实现的方法
                            MyInvocationHandler handler = new MyInvocationHandler(obj);//自己实现的代码，负责调用
                            handler.setMethodMap(methodName, method);//设置方法及设置方法
                            Object object2 = Proxy.newProxyInstance(listenerType.getClassLoader(), new Class<?>[]{listenerType}, handler);//创建动态代理对象类

                            //匹配是 Activity 还是 View
                            Object[] objects = returnActivityOrView(obj);
                            Activity activity = (Activity) objects[0];
                            View view = (View) objects[1];

                            if (activity != null) {
                                for (int viewId : viewIds) {//遍历要设置监听的控件
                                    try {
                                        View view2 = activity.findViewById(viewId);//获取该控件
                                        Method m = view2.getClass().getMethod(listenerSetter, listenerType);//获取方法
                                        m.invoke(view2, object2);//调用方法
                                    } catch (Exception e) {
//                                       logt("e:" + e);
                                    }
                                }
                            } else if (view != null) {
                                for (int viewId : viewIds) {//遍历要设置监听的控件
                                    try {
                                        View view2 = view.findViewById(viewId);//获取该控件
                                        Method m = view2.getClass().getMethod(listenerSetter, listenerType);//获取方法
                                        m.invoke(view2, object2);//调用方法
                                    } catch (Exception e) {
//                                        logt("e:" + e);
                                    }
                                }
                            }
                        } catch (Exception e) {
//                            logt("e:" + e);
                            e.printStackTrace();
                        }
                    }
                }
            }
        }

        /**
         * 注入 Animation 资源字符串
         **/
        private static void initAnimation(Object object) {
            for (Field field : object.getClass().getDeclaredFields()) {
                Annotations.GT_Res.GT_Animation initView = field.getAnnotation(Annotations.GT_Res.GT_Animation.class);
                if (initView != null) {
                    int viewRes = initView.value();
                    try {
                        Context context = (Context) AnnotationAssist.returnActivityOrView(object)[0];
                        if (context == null) {
                            context = getActivity();
                        }
                        if (context != null) {
                            Animation animation = AnimationUtils.loadAnimation(context, viewRes);
                            field.setAccessible(true);
                            field.set(object, animation);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        /**
         * 注入 Dimen 资源字符串
         **/
        private static void initDimen(Object object) {
            Field[] fields = object.getClass().getDeclaredFields();//获致所有成员变更
            for (Field field : fields) {
                Annotations.GT_Res.GT_Dimen initView = field.getAnnotation(Annotations.GT_Res.GT_Dimen.class);
                if (initView != null) {
                    int viewRes = initView.value();
                    try {
                        Context context = (Context) AnnotationAssist.returnActivityOrView(object)[0];
                        if (context == null) {
                            context = getActivity();
                        }
                        float dimension = context.getResources().getDimension(viewRes);
                        field.setAccessible(true);
                        field.set(object, dimension);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        /**
         * 注入 Drawable 资源字符串
         **/
        private static void initDrawable(Object object) {
            Field[] fields = object.getClass().getDeclaredFields();//获致所有成员变更
            for (Field field : fields) {
                Annotations.GT_Res.GT_Drawable initView = field.getAnnotation(Annotations.GT_Res.GT_Drawable.class);
                if (initView != null) {
                    int viewRes = initView.value();
                    try {
                        Context context = (Context) AnnotationAssist.returnActivityOrView(object)[0];
                        if (context == null) {
                            context = getActivity();
                        }
                        Drawable drawable = context.getResources().getDrawable(viewRes);
                        field.setAccessible(true);
                        field.set(object, drawable);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        /**
         * 注入 Color 资源字符串
         **/
        private static void initColor(Object object) {
            Field[] fields = object.getClass().getDeclaredFields();//获致所有成员变更
            for (Field field : fields) {
                Annotations.GT_Res.GT_Color initView = field.getAnnotation(Annotations.GT_Res.GT_Color.class);
                if (initView != null) {
                    int viewRes = initView.value();
                    try {
                        Context context = (Context) AnnotationAssist.returnActivityOrView(object)[0];
                        if (context == null) {
                            context = getActivity();
                        }
                        int color = context.getResources().getColor(viewRes);
                        field.setAccessible(true);
                        field.set(object, color);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        /**
         * 注入 String 资源字符串
         **/
        private static void initString(Object object) {
            Field[] fields = object.getClass().getDeclaredFields();//获致所有成员变更
            for (Field field : fields) {
                Annotations.GT_Res.GT_String initView = field.getAnnotation(Annotations.GT_Res.GT_String.class);
                if (initView != null) {
                    int viewRes = initView.value();
                    try {
                        Context context = (Context) AnnotationAssist.returnActivityOrView(object)[0];
                        if (context == null) {
                            context = getActivity();
                        }
                        String string = context.getResources().getString(viewRes);
                        field.setAccessible(true);
                        field.set(object, string);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }

        }

        /**
         * 注入 Int 资源字符串数组
         **/
        private static void initIntArray(Object object) {
            Field[] fields = object.getClass().getDeclaredFields();//获致所有成员变更
            for (Field field : fields) {
                Annotations.GT_Res.GT_IntArray initView = field.getAnnotation(Annotations.GT_Res.GT_IntArray.class);
                if (initView != null) {
                    int viewRes = initView.value();
                    try {
                        Context context = (Context) AnnotationAssist.returnActivityOrView(object)[0];
                        if (context == null) {
                            context = getActivity();
                        }
                        int[] intArray = context.getResources().getIntArray(viewRes);
                        field.setAccessible(true);
                        field.set(object, intArray);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }

        }

        /**
         * 注入 String 资源字符串数组
         **/
        private static void initStringArray(Object object) {
            Field[] fields = object.getClass().getDeclaredFields();//获致所有成员变更
            for (Field field : fields) {
                Annotations.GT_Res.GT_StringArray initView = field.getAnnotation(Annotations.GT_Res.GT_StringArray.class);
                if (initView != null) {
                    int viewRes = initView.value();
                    try {
                        Context context = (Context) AnnotationAssist.returnActivityOrView(object)[0];
                        if (context == null) {
                            context = getActivity();
                        }
                        String[] stringArray = context.getResources().getStringArray(viewRes);
                        field.setAccessible(true);
                        field.set(object, stringArray);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }

        }

        /**
         * 解析 Layout 资源文件成 View
         **/
        private static void initLayout(Object object) {
            Field[] fields = object.getClass().getDeclaredFields();//获致所有成员变更
            for (Field field : fields) {
                Annotations.GT_Res.GT_Layout initView = field.getAnnotation(Annotations.GT_Res.GT_Layout.class);
                if (initView != null) {
                    int viewRes = initView.value();
                    try {
                        Context context = (Context) AnnotationAssist.returnActivityOrView(object)[0];
                        if (context == null) {
                            context = getActivity();
                        }
                        if (context != null) {
                            View viewLayout = LayoutInflater.from(context).inflate(viewRes, null);
                            field.setAccessible(true);
                            field.set(object, viewLayout);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }

        }

        //================================   下面是其他注解内容   ==========================

        /**
         * 注入 ContextView
         *
         * @param activity
         */
        private static void initAnnotationActivity(Object obj) {
            Annotations.GT_AnnotationActivity contentView = obj.getClass().getAnnotation(Annotations.GT_AnnotationActivity.class);//获取该类 ContextView 的注解类
            //如果有注解
            if (contentView != null) {
                if (obj instanceof Activity) {
                    Activity activity = (Activity) obj;
                    int value = contentView.value();// 获取注解类参数
                    int valueHD = contentView.valueHD();// 获取注解类参数
                    int[] values = contentView.values();// 获取注解类参数
                    int valueIndex = contentView.valueIndex();// 获取注解类参数

                    try {
                        if (value != 0 || valueHD != 0) {
                            if (!WindowUtils.isLandscapeAndPortrait(activity)) {//竖屏
                                if (value == 0) {
                                    value = valueHD;
                                }
                                activity.setContentView(value);
                            } else {//横屏
                                if (valueHD == 0) {
                                    valueHD = value;
                                }
                                activity.setContentView(valueHD);
                            }
                        } else if (values != null && values.length >= 1) {
                            switch (values.length) {
                                case 1:
                                    activity.setContentView(values[0]);
                                    break;
                                case 2:
                                    if (GT_Fragment.valueIndex <= -1 && valueIndex <= -1) {
                                        if (!WindowUtils.isLandscapeAndPortrait(activity)) {//竖屏
                                            activity.setContentView(values[0]);
                                        } else {//横屏
                                            activity.setContentView(values[1]);
                                        }
                                    } else {
                                        if (GT_Fragment.valueIndex >= 0) {
                                            activity.setContentView(values[GT_Fragment.valueIndex]);
                                        } else if (valueIndex >= 0) {
                                            activity.setContentView(values[valueIndex]);
                                        }
                                    }
                                    break;
                                default:
                                    if (GT_Fragment.valueIndex != -1 && GT_Fragment.valueIndex <= (values.length - 1) || valueIndex != -1 && valueIndex <= (values.length - 1)) {
                                        if (GT_Fragment.valueIndex >= 0) {
                                            activity.setContentView(values[GT_Fragment.valueIndex]);
                                        } else if (valueIndex >= 0) {
                                            activity.setContentView(values[valueIndex]);
                                        }
                                    } else {
                                        activity.setContentView(values[GT_Random.getInt(0, values.length - 1)]);
                                    }
                                    break;
                            }

                        }


                    } catch (Exception e) {
                        if (LOG.LOG_TF)
                            GT.errs("e:" + e);
                    }


                }
            }
        }

        /**
         * 注解 Fragment
         *
         * @param object
         * @param mClass
         */
        private static void initAnnotationFragment(Object object) {
            Annotations.GT_AnnotationFragment contentView = object.getClass().getAnnotation(Annotations.GT_AnnotationFragment.class);// 获取该类 ContextView 的注解类
            // 如果有注解
            if (contentView != null) {
                int value = contentView.value();// 获取注解类参数
                int valueHD = contentView.valueHD();// 获取注解类参数
                int[] values = contentView.values();// 获取注解类参数
                int valueIndex = contentView.valueIndex();// 获取注解类参数
                try {
                    Method method = object.getClass().getMethod("setLayout", int.class);// 获取该方法的信息
                    method.setAccessible(true);// 获取该方法的访问权限

                    if (value != 0 || valueHD != 0) {
                        if (!WindowUtils.isLandscapeAndPortrait(GT.getActivity())) {//竖屏
                            if (value == 0) {
                                value = valueHD;
                            }
                            method.invoke(object, value);// 调用该方法的，并设置该方法参数
                        } else {//横屏
                            if (valueHD == 0) {
                                valueHD = value;
                            }
                            method.invoke(object, valueHD);// 调用该方法的，并设置该方法参数
                        }
                    } else if (values != null && values.length >= 1) {
                        switch (values.length) {
                            case 1:
                                method.invoke(object, values[0]);//显示当前一个仅有的布局
                                break;
                            case 2:
                                if (GT_Fragment.valueIndex <= -1 && valueIndex <= -1) {
                                    if (!WindowUtils.isLandscapeAndPortrait(GT.getActivity())) {//竖屏
                                        method.invoke(object, values[0]);// 调用该方法的，并设置该方法参数
                                    } else {//横屏
                                        method.invoke(object, values[1]);// 调用该方法的，并设置该方法参数
                                    }
                                } else {
                                    if (GT_Fragment.valueIndex >= 0) {
                                        method.invoke(object, values[GT_Fragment.valueIndex]);//指定显示二个其中一个布局
                                    } else if (valueIndex >= 0) {
                                        method.invoke(object, values[valueIndex]);//指定显示二个其中一个布局
                                    }
                                }
                                break;
                            default:
                                if (GT_Fragment.valueIndex != -1 && GT_Fragment.valueIndex <= (values.length - 1) || valueIndex != -1 && valueIndex <= (values.length - 1)) {
                                    if (GT_Fragment.valueIndex >= 0) {
                                        method.invoke(object, values[GT_Fragment.valueIndex]);//指定显示二个其中一个布局
                                    } else if (valueIndex >= 0) {
                                        method.invoke(object, values[valueIndex]);//指定显示二个其中一个布局
                                    }
                                } else {
                                    method.invoke(object, values[GT_Random.getInt(0, values.length - 1)]);// 在多个布局中随机显示其中一个布局
                                }
                                break;
                        }

                    }


                } catch (NoSuchMethodException e) {
//					e.printStackTrace();
                    GT.errs("e:" + e);
                } catch (IllegalAccessException e) {
//					e.printStackTrace();
                    GT.errs("e:" + e);
                } catch (InvocationTargetException e) {
//					e.printStackTrace();
                    GT.errs("e:" + e);
                } finally {
                    GT_Fragment.valueIndex = -1;
                }
            }
        }

        /**
         * 注解 Fragment
         *
         * @param object
         * @param mClass
         */
        private static void initGT_AnnotationDialogFragment(Object object) {
            Annotations.GT_AnnotationDialogFragment contentView = object.getClass().getAnnotation(Annotations.GT_AnnotationDialogFragment.class);// 获取该类 ContextView 的注解类
            // 如果有注解
            if (contentView != null) {
                int value = contentView.value();// 获取注解类参数
                int valueHD = contentView.valueHD();// 获取注解类参数
                int[] values = contentView.values();// 获取注解类参数
                int valueIndex = contentView.valueIndex();// 获取注解类参数
                try {
                    Method method = object.getClass().getMethod("setLayout", int.class);// 获取该方法的信息
                    method.setAccessible(true);// 获取该方法的访问权限

                    if (value != 0 || valueHD != 0) {
                        if (!WindowUtils.isLandscapeAndPortrait(GT.getActivity())) {//竖屏
                            if (value == 0) {
                                value = valueHD;
                            }
                            method.invoke(object, value);// 调用该方法的，并设置该方法参数
                        } else {//横屏
                            if (valueHD == 0) {
                                valueHD = value;
                            }
                            method.invoke(object, valueHD);// 调用该方法的，并设置该方法参数
                        }
                    } else if (values != null && values.length >= 1) {
                        switch (values.length) {
                            case 1:
                                method.invoke(object, values[0]);//显示当前一个仅有的布局
                                break;
                            case 2:
                                if (GT_Fragment.valueIndex <= -1 && valueIndex <= -1) {
                                    if (!WindowUtils.isLandscapeAndPortrait(GT.getActivity())) {//竖屏
                                        method.invoke(object, values[0]);// 调用该方法的，并设置该方法参数
                                    } else {//横屏
                                        method.invoke(object, values[1]);// 调用该方法的，并设置该方法参数
                                    }
                                } else {
                                    if (GT_Fragment.valueIndex >= 0) {
                                        method.invoke(object, values[GT_Fragment.valueIndex]);//指定显示二个其中一个布局
                                    } else if (valueIndex >= 0) {
                                        method.invoke(object, values[valueIndex]);//指定显示二个其中一个布局
                                    }
                                }
                                break;
                            default:
                                if (GT_Fragment.valueIndex != -1 && GT_Fragment.valueIndex <= (values.length - 1) || valueIndex != -1 && valueIndex <= (values.length - 1)) {
                                    if (GT_Fragment.valueIndex >= 0) {
                                        method.invoke(object, values[GT_Fragment.valueIndex]);//指定显示二个其中一个布局
                                    } else if (valueIndex >= 0) {
                                        method.invoke(object, values[valueIndex]);//指定显示二个其中一个布局
                                    }
                                } else {
                                    method.invoke(object, values[GT_Random.getInt(0, values.length - 1)]);// 在多个布局中随机显示其中一个布局
                                }
                                break;
                        }

                    }
//                    method.invoke(object, value);// 调用该方法的，并设置该方法参数
                } catch (NoSuchMethodException e) {
//					e.printStackTrace();
                    GT.errs("e:" + e);
                } catch (IllegalAccessException e) {
//					e.printStackTrace();
                    GT.errs("e:" + e);
                } catch (InvocationTargetException e) {
//					e.printStackTrace();
                    GT.errs("e:" + e);
                }
            }
        }

        /**
         * 注解 Fragment
         *
         * @param object
         * @param mClass
         */
        private static void initGT_AnnotationAdapter(Object object) {
            Annotations.GT_AnnotationAdapter contentView = object.getClass().getAnnotation(Annotations.GT_AnnotationAdapter.class);// 获取该类 ContextView 的注解类
            // 如果有注解
            if (contentView != null) {
                int value = contentView.value();// 获取注解类参数
                int valueHD = contentView.valueHD();// 获取注解类参数
                int[] values = contentView.values();// 获取注解类参数
                int valueIndex = contentView.valueIndex();// 获取注解类参数
                try {
                    Method method = object.getClass().getMethod("setLayout", int.class);// 获取该方法的信息
                    method.setAccessible(true);// 获取该方法的访问权限

                    if (value != 0 || valueHD != 0) {
                        if (!WindowUtils.isLandscapeAndPortrait(GT.getActivity())) {//竖屏
                            if (value == 0) {
                                value = valueHD;
                            }
                            method.invoke(object, value);// 调用该方法的，并设置该方法参数
                        } else {//横屏
                            if (valueHD == 0) {
                                valueHD = value;
                            }
                            method.invoke(object, valueHD);// 调用该方法的，并设置该方法参数
                        }
                    } else if (values != null && values.length >= 1) {
                        switch (values.length) {
                            case 1:
                                method.invoke(object, values[0]);//显示当前一个仅有的布局
                                break;
                            case 2:
                                if (GT_Fragment.valueIndex <= -1 && valueIndex <= -1) {
                                    if (!WindowUtils.isLandscapeAndPortrait(GT.getActivity())) {//竖屏
                                        method.invoke(object, values[0]);// 调用该方法的，并设置该方法参数
                                    } else {//横屏
                                        method.invoke(object, values[1]);// 调用该方法的，并设置该方法参数
                                    }
                                } else {
                                    if (GT_Fragment.valueIndex >= 0) {
                                        method.invoke(object, values[GT_Fragment.valueIndex]);//指定显示二个其中一个布局
                                    } else if (valueIndex >= 0) {
                                        method.invoke(object, values[valueIndex]);//指定显示二个其中一个布局
                                    }
                                }
                                break;
                            default:
                                if (GT_Fragment.valueIndex != -1 && GT_Fragment.valueIndex <= (values.length - 1) || valueIndex != -1 && valueIndex <= (values.length - 1)) {
                                    if (GT_Fragment.valueIndex >= 0) {
                                        method.invoke(object, values[GT_Fragment.valueIndex]);//指定显示二个其中一个布局
                                    } else if (valueIndex >= 0) {
                                        method.invoke(object, values[valueIndex]);//指定显示二个其中一个布局
                                    }
                                } else {
                                    method.invoke(object, values[GT_Random.getInt(0, values.length - 1)]);// 在多个布局中随机显示其中一个布局
                                }
                                break;
                        }

                    }

//                    method.invoke(object, value);// 调用该方法的，并设置该方法参数
                } catch (NoSuchMethodException e) {
//					e.printStackTrace();
                    GT.errs("e:" + e);
                } catch (IllegalAccessException e) {
//					e.printStackTrace();
                    GT.errs("e:" + e);
                } catch (InvocationTargetException e) {
//					e.printStackTrace();
                    GT.errs("e:" + e);
                }
            }
        }

        /**
         * 注解Fragment构建
         *
         * @param object
         * @param mClass
         */
        private static void initGT_Fragment(Object object) {
            Field[] fields = object.getClass().getDeclaredFields();//获致当前 Activity 所有成员变更
            for (Field field : fields) {
                Object classObject = null;//最终注入的值

                //带参数的
                GT_Fragment.Build initView_GT_Fragments = field.getAnnotation(GT_Fragment.Build.class);

                //GT_Fragment 注解不为null
                if (initView_GT_Fragments != null) {
                    //如果注解的Activity不为null 那就直接构建注解的GT_Fragment并注入
                    Activity activity = (Activity) getActivity();
                    Class<?> aClass = initView_GT_Fragments.setClass();
                    //获取注解的值
                    int layoutHome = initView_GT_Fragments.setLayoutHome();
                    int layoutMain = initView_GT_Fragments.setLayoutMain();
                    int startMode = initView_GT_Fragments.setStartMode();
                    int switchingMode = initView_GT_Fragments.setSwitchingMode();

                    if (activity != null) {
                        if (aClass != GT_Fragment.Build.class) {
                            GT_Fragment.addNotBack(aClass);//初始化
                            GT_Fragment.gt_fragment = GT_Fragment.Build((FragmentActivity) activity, layoutHome, layoutMain, aClass, activity.getIntent().getExtras(), startMode, switchingMode);
                        } else {
                            GT_Fragment.gt_fragment = GT_Fragment.Build((FragmentActivity) activity, layoutHome, layoutMain, null, activity.getIntent().getExtras(), startMode, switchingMode);
                        }
                    }

                    classObject = GT_Fragment.gt_fragment;
                    //实例注入
                    try {
                        field.setAccessible(true);
                        field.set(object, classObject);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                }

            }
        }

        /**
         * 注解 GT_SharedPreferences
         *
         * @param object
         * @param mClass
         */
        private static void initGT_SharedPreferences(Object object) {
            Field[] fields = object.getClass().getDeclaredFields();//获致当前 Activity 所有成员变更
            for (Field field : fields) {
                Object classObject = null;//最终注入的值

                //带参数的
                GT_SharedPreferences.Build initView_GT_SharedPreferences = field.getAnnotation(GT_SharedPreferences.Build.class);

                //GT_Fragment 注解不为null
                if (initView_GT_SharedPreferences != null) {
                    GT_SharedPreferences gt_sharedPreferences = null;
                    //获取注解的值
                    String spName = initView_GT_SharedPreferences.setSpName();
                    boolean iSCommit = initView_GT_SharedPreferences.setISCommit();

                    //优先从缓存里找对应的对象
                    gt_sharedPreferences = GT_Cache.getSP(spName);

                    //如果对象经过前面流程还为null 那就进行初始化一个
                    if (gt_sharedPreferences == null) {
                        //如果注解的Activity不为null 那就直接构建注解的GT_Fragment并注入
                        Activity activity = (Activity) getActivity();
                        if (activity != null) {
                            gt_sharedPreferences = new GT_SharedPreferences(activity, spName, iSCommit);

                            //如果这个对象缓存中没有，那就进行缓存
                            GT_Cache.putSP(spName, gt_sharedPreferences);
                        }
                    }

                    //实例注入
                    try {
                        field.setAccessible(true);
                        field.set(object, gt_sharedPreferences);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                }

            }
        }

        /**
         * 注解 SerialPortUtils
         *
         * @param object
         * @param mClass
         */
        private static void initSerialPortUtils(Object object) {
            Field[] fields = object.getClass().getDeclaredFields();//获致当前 Activity 所有成员变更
            for (Field field : fields) {
                Object classObject = null;//最终注入的值

                //带参数的
                SerialPortUtils.Build initBuild = field.getAnnotation(SerialPortUtils.Build.class);

                //GT_Fragment 注解不为null
                if (initBuild != null) {
                    //如果注解的Activity不为null 那就直接构建注解的GT_Fragment并注入
                    Activity activity = (Activity) getActivity();
                    SerialPortUtils serialPortUtils = null;
                    String comAll = initBuild.setComAll();
                    int baudRate = initBuild.setBaudRate();
                    boolean iSLog = initBuild.setISLog();

                    //从缓存里拿
                    serialPortUtils = GT_Cache.getSerialPort(comAll);

                    if (serialPortUtils == null && activity != null) {
                        //获取注解的值
                        serialPortUtils = new SerialPortUtils(activity, comAll, baudRate, iSLog);
                        GT_Cache.putSerialPort(comAll, serialPortUtils);//存入缓存
                    }

                    //实例注入
                    try {
                        field.setAccessible(true);
                        field.set(object, serialPortUtils);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                }

            }
        }

        /**
         * 注解 TCP
         *
         * @param object
         * @param mClass
         */
        private static void initTCP(Object object) {
            Field[] fields = object.getClass().getDeclaredFields();//获致当前 Activity 所有成员变更
            for (Field field : fields) {
                Object classObject = null;//最终注入的值

                //带参数的
                GT_Socket.TCP.Build initBuild = field.getAnnotation(GT_Socket.TCP.Build.class);

                //GT_Fragment 注解不为null
                if (initBuild != null) {
                    //如果注解的Activity不为null 那就直接构建注解的GT_Fragment并注入
                    Activity activity = (Activity) getActivity();
                    String iP = initBuild.setIP();
                    int port = initBuild.setPort();
                    GT_Socket.TCP tcp = null;

                    tcp = GT_Cache.getSocketTCP(iP + port);
//                    logt("缓存TCP:" + tcp);

                    if (tcp == null && activity != null) {
                        //获取注解的值
                        GT_Socket.isLog = initBuild.isLog();
                        if (iP == null || "null".equals(iP)) {
//                            logt("创建服务器");
                            tcp = new GT_Socket.TCP(port);
                        } else {
//                            logt("创建客户端");
                            tcp = new GT_Socket.TCP(iP, port);
                        }
                        GT_Cache.putSocketTCP(iP + port, tcp);
                    }
                    //实例注入
                    try {
                        field.setAccessible(true);
                        field.set(object, tcp);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                }

            }
        }

        /**
         * 注解 HttpCall
         *
         * @param object
         * @param mClass
         */
        private static void initHttpCall(Object object) {
            Field[] fields = object.getClass().getDeclaredFields();//获致当前 Activity 所有成员变更
            for (Field field : fields) {
                Object classObject = null;//最终注入的值

                //带参数的
                HttpCall.Build initBuild = field.getAnnotation(HttpCall.Build.class);

                //GT_Fragment 注解不为null
                if (initBuild != null) {
                    //如果注解的Activity不为null 那就直接构建注解的GT_Fragment并注入
                    Class<?> classs = field.getType();//获取变量名的class
                    //先从缓存里拿
                    Object obj = GT_Cache.getHttpCall(classs);
                    //如果经历前面流程还为null 那就创建
                    if (obj == null) {
                        obj = HttpCall.create(classs);
                        GT_Cache.putHttpCall(classs.getName(), obj);
                    }
                    //实例注入
                    try {
                        field.setAccessible(true);
                        field.set(object, obj);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                }

            }
        }

        /**
         * 注入 悬浮窗
         *
         * @param object
         * @param mClass
         */
        private static void initAnnotationFloatingWindow(Object object) {
            Annotations.GT_AnnotationFloatingWindow contentView = object.getClass().getAnnotation(Annotations.GT_AnnotationFloatingWindow.class);// 获取该类 ContextView 的注解类
            // 如果有注解
            if (contentView != null) {
                int value = contentView.value();// 获取注解类参数
                int valueHD = contentView.valueHD();// 获取注解类参数
                int[] values = contentView.values();// 获取注解类参数
                int valueIndex = contentView.valueIndex();// 获取注解类参数
                try {
                    Method method = object.getClass().getMethod("setLayout", int.class);// 获取该方法的信息
                    method.setAccessible(true);// 获取该方法的访问权限

                    if (value != 0 || valueHD != 0) {
                        if (!WindowUtils.isLandscapeAndPortrait(GT.getActivity())) {//竖屏
                            if (value == 0) {
                                value = valueHD;
                            }
                            method.invoke(object, value);// 调用该方法的，并设置该方法参数
                        } else {//横屏
                            if (valueHD == 0) {
                                valueHD = value;
                            }
                            method.invoke(object, valueHD);// 调用该方法的，并设置该方法参数
                        }
                    } else if (values != null && values.length >= 1) {
                        switch (values.length) {
                            case 1:
                                method.invoke(object, values[0]);//显示当前一个仅有的布局
                                break;
                            case 2:
                                if (GT_Fragment.valueIndex <= -1 && valueIndex <= -1) {
                                    if (!WindowUtils.isLandscapeAndPortrait(GT.getActivity())) {//竖屏
                                        method.invoke(object, values[0]);// 调用该方法的，并设置该方法参数
                                    } else {//横屏
                                        method.invoke(object, values[1]);// 调用该方法的，并设置该方法参数
                                    }
                                } else {
                                    if (GT_Fragment.valueIndex >= 0) {
                                        method.invoke(object, values[GT_Fragment.valueIndex]);//指定显示二个其中一个布局
                                    } else if (valueIndex >= 0) {
                                        method.invoke(object, values[valueIndex]);//指定显示二个其中一个布局
                                    }
                                }
                                break;
                            default:
                                if (GT_Fragment.valueIndex != -1 && GT_Fragment.valueIndex <= (values.length - 1) || valueIndex != -1 && valueIndex <= (values.length - 1)) {
                                    if (GT_Fragment.valueIndex >= 0) {
                                        method.invoke(object, values[GT_Fragment.valueIndex]);//指定显示二个其中一个布局
                                    } else if (valueIndex >= 0) {
                                        method.invoke(object, values[valueIndex]);//指定显示二个其中一个布局
                                    }
                                } else {
                                    method.invoke(object, values[GT_Random.getInt(0, values.length - 1)]);// 在多个布局中随机显示其中一个布局
                                }
                                break;
                        }

                    }

//                    method.invoke(object, value);// 调用该方法的，并设置该方法参数
                } catch (NoSuchMethodException e) {
                    GT.errs("e:" + e);//e.printStackTrace();
                } catch (IllegalAccessException e) {
                    GT.errs("e:" + e);//e.printStackTrace();
                } catch (InvocationTargetException e) {
                    GT.errs("e:" + e);//e.printStackTrace();
                }
            }
        }

        /**
         * 注入 View 注解
         *
         * @param object
         */
        private static void initAnnotationView(Object object) {
            Annotations.GT_AnnotationView contentView = object.getClass().getAnnotation(Annotations.GT_AnnotationView.class);// 获取该类 ContextView 的注解类
            // 如果有注解
            if (contentView != null) {
                int value = contentView.value();// 获取注解类参数
                int valueHD = contentView.valueHD();// 获取注解类参数
                int[] values = contentView.values();// 获取注解类参数
                int valueIndex = contentView.valueIndex();// 获取注解类参数
                try {
                    Method method = object.getClass().getMethod("setLayout", int.class);// 获取该方法的信息
                    method.setAccessible(true);// 获取该方法的访问权限

                    if (value != 0 || valueHD != 0) {
                        if (!ApplicationUtils.isPad(GT.getActivity())) {//竖屏
                            if (value == 0) {
                                value = valueHD;
                            }
                            method.invoke(object, value);// 调用该方法的，并设置该方法参数
                        } else {//横屏
                            if (valueHD == 0) {
                                valueHD = value;
                            }
                            method.invoke(object, valueHD);// 调用该方法的，并设置该方法参数
                        }
                    } else if (values != null && values.length >= 1) {
                        switch (values.length) {
                            case 1:
                                method.invoke(object, values[0]);//显示当前一个仅有的布局
                                break;
                            case 2:
                                if (GT_Fragment.valueIndex <= -1 && valueIndex <= -1) {
                                    if (!ApplicationUtils.isPad(GT.getActivity())) {//竖屏
                                        method.invoke(object, values[0]);// 调用该方法的，并设置该方法参数
                                    } else {//横屏
                                        method.invoke(object, values[1]);// 调用该方法的，并设置该方法参数
                                    }
                                } else {
                                    if (GT_Fragment.valueIndex >= 0) {
                                        method.invoke(object, values[GT_Fragment.valueIndex]);//指定显示二个其中一个布局
                                    } else if (valueIndex >= 0) {
                                        method.invoke(object, values[valueIndex]);//指定显示二个其中一个布局
                                    }
                                }
                                break;
                            default:
                                if (GT_Fragment.valueIndex != -1 && GT_Fragment.valueIndex <= (values.length - 1) || valueIndex != -1 && valueIndex <= (values.length - 1)) {
                                    if (GT_Fragment.valueIndex >= 0) {
                                        method.invoke(object, values[GT_Fragment.valueIndex]);//指定显示二个其中一个布局
                                    } else if (valueIndex >= 0) {
                                        method.invoke(object, values[valueIndex]);//指定显示二个其中一个布局
                                    }
                                } else {
                                    method.invoke(object, values[GT_Random.getInt(0, values.length - 1)]);// 在多个布局中随机显示其中一个布局
                                }
                                break;
                        }

                    }

//                    method.invoke(object, value);// 调用该方法的，并设置该方法参数
                } catch (NoSuchMethodException e) {
                    GT.errs("e:" + e);//e.printStackTrace();
                } catch (IllegalAccessException e) {
                    GT.errs("e:" + e);//e.printStackTrace();
                } catch (InvocationTargetException e) {
                    GT.errs("e:" + e);//e.printStackTrace();
                }
            }
        }

        /**
         * 注入 Notification 注解
         *
         * @param object
         */
        private static void initAnnotationNotification(Object object) {
            Annotations.GT_Notification contentView = object.getClass().getAnnotation(Annotations.GT_Notification.class);// 获取该类 ContextView 的注解类
            // 如果有注解
            if (contentView != null) {
                int value = contentView.value();// 获取注解类参数
                int value2 = contentView.value2();// 获取注解类参数
                try {
                    Method method = object.getClass().getMethod("setLayout1", int.class);// 获取该方法的信息
                    method.setAccessible(true);// 获取该方法的访问权限
                    if (value != 0) {
                        method.invoke(object, value);// 调用该方法的，并设置该方法参数
                    }

                    Method method2 = object.getClass().getMethod("setLayout2", int.class);// 获取该方法的信息
                    method2.setAccessible(true);// 获取该方法的访问权限
                    if (value2 != 0) {
                        method2.invoke(object, value2);// 调用该方法的，并设置该方法参数
                    }
                } catch (NoSuchMethodException e) {
                    GT.errs("e:" + e);//e.printStackTrace();
                } catch (IllegalAccessException e) {
                    GT.errs("e:" + e);//e.printStackTrace();
                } catch (InvocationTargetException e) {
                    GT.errs("e:" + e);//e.printStackTrace();
                }
            }
        }

        /**
         * 注入 PopupWindow
         *
         * @param object
         * @param mClass
         */
        private static void initAnnotationPopupWindow(Object object) {
            Annotations.GT_AnnotationPopupWindow contentView = object.getClass().getAnnotation(Annotations.GT_AnnotationPopupWindow.class);// 获取该类 ContextView 的注解类
            // 如果有注解
            if (contentView != null) {
                int value = contentView.value();// 获取注解类参数
                int valueHD = contentView.valueHD();// 获取注解类参数
                int[] values = contentView.values();// 获取注解类参数
                int valueIndex = contentView.valueIndex();// 获取注解类参数
                try {
                    Method method = object.getClass().getMethod("setLayout", int.class);// 获取该方法的信息
                    method.setAccessible(true);// 获取该方法的访问权限

                    if (value != 0 || valueHD != 0) {
                        if (!WindowUtils.isLandscapeAndPortrait(GT.getActivity())) {//竖屏
                            if (value == 0) {
                                value = valueHD;
                            }
                            method.invoke(object, value);// 调用该方法的，并设置该方法参数
                        } else {//横屏
                            if (valueHD == 0) {
                                valueHD = value;
                            }
                            method.invoke(object, valueHD);// 调用该方法的，并设置该方法参数
                        }
                    } else if (values != null && values.length >= 1) {
                        switch (values.length) {
                            case 1:
                                method.invoke(object, values[0]);//显示当前一个仅有的布局
                                break;
                            case 2:
                                if (GT_Fragment.valueIndex <= -1 && valueIndex <= -1) {
                                    if (!WindowUtils.isLandscapeAndPortrait(GT.getActivity())) {//竖屏
                                        method.invoke(object, values[0]);// 调用该方法的，并设置该方法参数
                                    } else {//横屏
                                        method.invoke(object, values[1]);// 调用该方法的，并设置该方法参数
                                    }
                                } else {
                                    if (GT_Fragment.valueIndex >= 0) {
                                        method.invoke(object, values[GT_Fragment.valueIndex]);//指定显示二个其中一个布局
                                    } else if (valueIndex >= 0) {
                                        method.invoke(object, values[valueIndex]);//指定显示二个其中一个布局
                                    }
                                }
                                break;
                            default:
                                if (GT_Fragment.valueIndex != -1 && GT_Fragment.valueIndex <= (values.length - 1) || valueIndex != -1 && valueIndex <= (values.length - 1)) {
                                    if (GT_Fragment.valueIndex >= 0) {
                                        method.invoke(object, values[GT_Fragment.valueIndex]);//指定显示二个其中一个布局
                                    } else if (valueIndex >= 0) {
                                        method.invoke(object, values[valueIndex]);//指定显示二个其中一个布局
                                    }
                                } else {
                                    method.invoke(object, values[GT_Random.getInt(0, values.length - 1)]);// 在多个布局中随机显示其中一个布局
                                }
                                break;
                        }

                    }

//                    method.invoke(object, value);// 调用该方法的，并设置该方法参数
                } catch (NoSuchMethodException e) {
                    GT.errs("e:" + e);//e.printStackTrace();
                } catch (IllegalAccessException e) {
                    GT.errs("e:" + e);//e.printStackTrace();
                } catch (InvocationTargetException e) {
                    GT.errs("e:" + e);//e.printStackTrace();
                }
            }
        }

        /**
         * 单击注解 帮助方法
         *
         * @param field
         * @param object
         * @param functionName
         * @param valueList
         * @param index
         */
        private static void functionValue(Field field, Object object, String functionName, List<Object> valueList, int index) {

            if (functionName.length() != 0 && valueList.size() != 0) {

                Class<?> aClass = object.getClass();
                Method[] methods = aClass.getMethods();

                //获取当前类中所有方法
                for (int i = methods.length - 1; i >= 0; i--) {
                    String name = methods[i].getName();
                    if (name.equals(functionName)) {
                        try {
                            Method method = getAllValueTypeMethod(valueList.get(index), functionName, aClass);
                            method.setAccessible(true);
                            field.setAccessible(true);
                            method.invoke(object, valueList.get(index));
                        } catch (Exception e) {
                            if (LOG.isGtLogTf()) {
                                GT.err(getLineInfo(1), "注解注入失败 ！");
                            }
                            //                            e.printStackTrace();
                        }
                    }
                }
            }

        }

        /**
         * 自获取当前传入数据的类型
         *
         * @param data
         * @param functionName
         * @param aClass
         * @return
         */
        private static Method getAllValueTypeMethod(Object data, String functionName, Class<?> aClass) {

            Method method = null;

            Class<?> aClass1 = data.getClass();
            switch (aClass1.toString()) {
                case "class java.lang.Byte":
                    try {
                        method = aClass.getMethod(functionName, byte.class);
                    } catch (NoSuchMethodException e) {
                        //                    e.printStackTrace();
                        if (LOG.isGtLogTf()) {
                            GT.err(getLineInfo(1), "注解 赋值 byte 类型数据 报错");
                        }
                    }
                    break;
                case "class java.lang.Short":
                    try {
                        method = aClass.getMethod(functionName, short.class);
                    } catch (NoSuchMethodException e) {
                        //                    e.printStackTrace();
                        if (LOG.isGtLogTf()) {
                            GT.err(getLineInfo(1), "注解 赋值 Short 类型数据 报错");
                        }
                    }
                    break;
                case "class java.lang.Integer":
                    try {
                        method = aClass.getMethod(functionName, int.class);
                    } catch (NoSuchMethodException e) {
                        //                    e.printStackTrace();
                        if (LOG.isGtLogTf()) {
                            GT.err(getLineInfo(1), "注解 赋值 int 类型数据 报错");
                        }
                    }
                    break;
                case "class java.lang.Long":
                    try {
                        method = aClass.getMethod(functionName, long.class);
                    } catch (NoSuchMethodException e) {
                        //                    e.printStackTrace();
                        if (LOG.isGtLogTf()) {
                            GT.err(getLineInfo(1), "注解 赋值 Long 类型数据 报错");
                        }
                    }
                    break;
                case "class java.lang.Float":
                    try {
                        method = aClass.getMethod(functionName, float.class);
                    } catch (NoSuchMethodException e) {
                        //                    e.printStackTrace();
                        if (LOG.isGtLogTf()) {
                            GT.err(getLineInfo(1), "注解 赋值 Float 类型数据 报错");
                        }
                    }
                    break;
                case "class java.lang.Double":
                    try {
                        method = aClass.getMethod(functionName, double.class);
                    } catch (NoSuchMethodException e) {
                        //                    e.printStackTrace();
                        if (LOG.isGtLogTf()) {
                            GT.err(getLineInfo(1), "注解 赋值 Double 类型数据 报错");
                        }
                    }
                    break;
                case "class java.lang.Boolean":
                    try {
                        method = aClass.getMethod(functionName, boolean.class);
                    } catch (NoSuchMethodException e) {
                        //                    e.printStackTrace();
                        if (LOG.isGtLogTf()) {
                            GT.err(getLineInfo(1), "注解 赋值 Boolean 类型数据 报错");
                        }
                    }
                    break;
                case "class java.lang.Character":
                    try {
                        method = aClass.getMethod(functionName, char.class);
                    } catch (NoSuchMethodException e) {
                        //                    e.printStackTrace();
                        if (LOG.isGtLogTf()) {
                            GT.err(getLineInfo(1), "注解 赋值 Character 类型数据 报错");
                        }
                    }
                    break;
                case "class java.lang.String":
                    try {
                        method = aClass.getMethod(functionName, String.class);
                    } catch (NoSuchMethodException e) {
                        //                    e.printStackTrace();
                        if (LOG.isGtLogTf()) {
                            GT.err(getLineInfo(1), "注解 赋值 String 类型数据 报错");
                        }
                    }
                    break;
            }
            return method;
        }

        /**
         * 给 listView 赋值
         *
         * @param type
         * @param list
         * @param values
         */
        private static void valueType(String type, List<Object> list, Annotations.GT_Object values, int index) {

            switch (type) {

                /** 单个参数的赋值 **/
                case "byte":
                    list.add(values.valueByte());
                    break;
                case "short":
                    list.add(values.valueShort());
                    break;
                case "int":
                    list.add(values.valueInt());
                    break;
                case "long":
                    list.add(values.valueLong());
                    break;
                case "float":
                    list.add(values.valueFloat());
                    break;
                case "double":
                    list.add(values.valueDouble());
                    break;
                case "boolean":
                    list.add(values.valueBoolean());
                    break;
                case "char":
                    list.add(values.valueChar());
                    break;
                case "String":
                    list.add(values.valueString());
                    break;

                /** 多个参数的赋值 **/
                case "bytes":
                    byte[] bytes = values.valueBytes();
                    for (byte value : bytes) {
                        list.add(value);
                    }
                    break;
                case "shorts":
                    short[] shorts = values.valueShorts();
                    list.add(shorts[index]);
                    break;
                case "ints":
                    int[] ints = values.valueInts();
                    list.add(ints[index]);
                    break;
                case "longs":
                    long[] longs = values.valueLongs();
                    list.add(longs[index]);
                    break;
                case "floats":
                    float[] floats = values.valueFloats();
                    list.add(floats[index]);
                    break;
                case "doubles":
                    double[] doubles = values.valueDoubles();
                    list.add(doubles[index]);
                    break;
                case "booleans":
                    boolean[] booleans = values.valueBooleans();
                    list.add(booleans[index]);
                    break;
                case "chars":
                    char[] chars = values.valueChars();
                    list.add(chars[index]);
                    break;
                case "Strings":
                    String[] strings = values.valueStrings();
                    list.add(strings[index]);
                    break;
            }

        }

        /**
         * 初始化注解帮助类
         */
        private static class MyInvocationHandler implements InvocationHandler {

            private Object object;
            private Map<String, Method> methodMap = new ArrayMap<>(1);

            public MyInvocationHandler(Object object) {
                this.object = object;
            }

            public void setMethodMap(String name, Method method) {
                this.methodMap.put(name, method);
            }

            @Override
            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                if (object != null) {
                    String name = method.getName();
                    method = this.methodMap.get(name);
                    if (method != null) {
                        return method.invoke(object, args);
                    }
                }
                return null;
            }

        }

        private static AnnotationAssist annotationAssist;

        public static AnnotationAssist getAnnotationAssist() {
            if (annotationAssist == null) {
                synchronized (AnnotationAssist.class) {
                    if (annotationAssist == null) {
                        annotationAssist = new AnnotationAssist();
                    }
                }
            }
            return annotationAssist;
        }

        //================================   下面是 注解工具方法   ==========================

        public AnnotationAssist() {
        }

        /**
         * 目的：用于判断 当前类是否被 当前的注解注解过
         * 用例：new GT.AnnotationAssist(LogActivity.class, GT.Annotations.Toast.class);
         * 第一个参数：任意对象
         * 第二个参数：被注解的类
         * 再打开 GT 内部的 Log 日志
         */
        public AnnotationAssist(Object obj, Object annotation) {

            /**
             * 获取所有注解
             */
            obj = classToObject(obj);
            Annotation[] annotations = obj.getClass().getAnnotations();
            for (Annotation annotation1 : annotations) if (LOG.GT_LOG_TF) log(annotation1);


            /**
             * 获取声明注解	[Ljava.lang.annotation.Annotation;@28c97a5
             */
            Annotation[] deAnnos = obj.getClass().getDeclaredAnnotations();


            if (annotation != null) {
                //获取被 SubAnnotation 注解过的类
                Annotation subAnnotation = obj.getClass().getAnnotation((Class<Annotation>) annotation);
            }

        }

        /**
         * 返回 Activity 或 View
         *
         * @param obj
         * @return
         */
        public static Object[] returnActivityOrView(Object obj) {
            Context activity = null;
            View view = null;
            if (obj instanceof Activity) {
                activity = (Activity) obj;
            } else if (obj instanceof Fragment) {
                Fragment fragment = (Fragment) obj;
                view = fragment.getView();
            } else if (obj instanceof DialogFragment) {
                DialogFragment fragment = (DialogFragment) obj;
                view = fragment.getView();
            } else if (obj instanceof View) {
                view = (View) obj;
            } else if (obj instanceof GT_FloatingWindow.BaseFloatingWindow) {
                GT_FloatingWindow.BaseFloatingWindow fwb = (GT_FloatingWindow.BaseFloatingWindow) obj;
                view = fwb.getView();
            } else if (obj instanceof GT_View.BaseView) {
                GT_View.BaseView baseView = (GT_View.BaseView) obj;
                view = baseView.view;
            } else if (obj instanceof Adapters.BaseAdapter) {
                Adapters.BaseAdapter baseView = (Adapters.BaseAdapter) obj;
                activity = baseView.context;
            } else if (obj instanceof GT_PopupWindow.BasePopupWindow) {
                GT_PopupWindow.BasePopupWindow baseView = (GT_PopupWindow.BasePopupWindow) obj;
                view = baseView.view;
            } else if (obj instanceof RecyclerView.ViewHolder) {
                RecyclerView.ViewHolder baseView = (RecyclerView.ViewHolder) obj;
                view = baseView.itemView;
            } else if (obj instanceof GT_Notification.BaseNotification) {
                GT_Notification.BaseNotification baseView = (GT_Notification.BaseNotification) obj;
                activity = baseView.context;
            } else {
                GT.err("暂不支持该组件注解：" + obj);
            }
            Object[] objArray = new Object[2];
            objArray[0] = activity;
            objArray[1] = view;
            return objArray;
        }

        /**
         * 解析class 反射 Object
         *
         * @param obj
         * @return
         */
        public static <T> Object classToObject(Object obj) {
            String data = String.valueOf(obj);
            if (data.contains("java.util.List")) {
                return new ArrayList<Object>();
            }
            String[] strs = obj.toString().split(" ");
            String str = "";
            if (strs.length == 2) {
                str = strs[1];
            } else {
                str = obj.toString();
            }
            Class<?> clazz = null;
            try {
                clazz = Class.forName(str);
            } catch (ClassNotFoundException e) {
                if (LOG.GT_LOG_TF) {
                    GT.errt("e:" + e);
                }
            }
            try {
                if (clazz == null) return null;
                obj = clazz.newInstance();
            } catch (IllegalAccessException e) {
                GT.errt("e:" + e);
            } catch (InstantiationException e) {
                GT.errt("e:" + e);
            }
            return obj;
        }


        /**
         * 解析 class 反射 Object ，带参数的构造方法
         *
         * @param obj        反射类 class
         * @param valueTypes 构造参数类型
         * @param objs       构造参数
         * @param <T>
         * @return
         */
        public static <T> Object classToObject(Object obj, Class<?>[] valueTypes, Object[] objs) {
            String data = String.valueOf(obj);
            if (data.contains("java.util.List")) {
                return new ArrayList<Object>();
            }
            String[] strs = obj.toString().split(" ");
            String str = "";
            if (strs.length == 2) {
                str = strs[1];
            } else {
                str = obj.toString();
            }
            Class<?> clazz = null;
            try {
                clazz = Class.forName(str);
            } catch (ClassNotFoundException e) {
                if (LOG.GT_LOG_TF) {
                    GT.errt("e:" + e);
                }
            }
            try {
                if (clazz == null) return null;
                // 获取指定参数类型的构造方法
                Constructor<?> constructor = clazz.getConstructor(valueTypes);
                // 使用构造方法创建对象，并传入参数
                obj = constructor.newInstance(objs);
            } catch (NoSuchMethodException e) {
            } catch (InvocationTargetException e) {
                throw new RuntimeException(e);
            } catch (IllegalAccessException e) {
                throw new RuntimeException(e);
            } catch (InstantiationException e) {
                throw new RuntimeException(e);
            }
            return obj;
        }

        /**
         * 解析 class 反射 Object ，带参数的构造方法
         *
         * @param clazz      反射类 class
         * @param valueTypes 构造参数类型
         * @param objs       构造参数
         * @param <T>
         * @return
         */
        public static <T> Object classToObject(Class<T> clazz, Class<?>[] valueTypes, Object[] objs) {
            try {
                // 获取指定参数类型的构造方法
                Constructor<?> constructor = clazz.getConstructor(valueTypes);
                // 使用构造方法创建对象，并传入参数
                return constructor.newInstance(objs);
            } catch (NoSuchMethodException e) {
            } catch (InvocationTargetException e) {
                throw new RuntimeException(e);
            } catch (IllegalAccessException e) {
                throw new RuntimeException(e);
            } catch (InstantiationException e) {
                throw new RuntimeException(e);
            }
            return null;
        }

        /**
         * 解析 class 反射 Object
         *
         * @param clazz
         * @param <T>
         * @return
         */
        public static <T> Object classToObject(Class<T> clazz) {
            try {
                if (clazz == null) return null;
                return clazz.newInstance();
            } catch (IllegalAccessException e) {
                GT.errt("e:" + e);
//                e.printStackTrace();
            } catch (InstantiationException e) {
                GT.errt("e:" + e);
//                e.printStackTrace();
            }
            return null;
        }

        /**
         * 获取 ListView 中存储类型的bean
         *
         * @param obj
         * @param <T>
         * @return
         */
        public static <T> Class<T> stringListToClass(Object obj) {
            String data = String.valueOf(obj);
            if (data.contains("java.util.List")) {
                data = data.substring(data.indexOf("<") + 1, data.indexOf(">"));
            }
            Class<?> clazz = null;
            try {
                clazz = Class.forName(data);
            } catch (ClassNotFoundException e) {
                if (LOG.GT_LOG_TF) {
                    GT.errt("e:" + e);
                }
//                e.printStackTrace();
            }
            return (Class<T>) clazz;
        }

        /**
         * 获取类的泛类型
         *
         * @param obj 需要获取的类
         * @return
         */
        public static Type[] getClassGenericType(Object obj) {
            Type[] actualTypeArguments = null;
            try {
                Class clazz = obj.getClass();
                Type type = clazz.getGenericSuperclass();
                ParameterizedType p = (ParameterizedType) type;
                actualTypeArguments = p.getActualTypeArguments();
            } catch (Exception e) {
//                GT.errs("e:" + e);
            }
            return actualTypeArguments;
        }

        /**
         * 获取泛型实体
         *
         * @param thisObj
         * @param <T>
         * @return
         */
        public static <T> T getGenericityObject(Object thisObj) {
            Class<?> classStr = AnnotationAssist.getGenericityClass(thisObj);
            //根据 class 反射出实体类
            return (T) AnnotationAssist.classToObject(classStr);
        }

        /**
         * 获取当前类的泛型class
         *
         * @param obj
         * @return
         */
        public static Class<?> getGenericityClass(Object obj) {
            if (obj == null) return null;
            try {
                Type[] classGenericType = getClassGenericType(obj);
                if (classGenericType != null && classGenericType.length > 0) {
                    Type type = classGenericType[classGenericType.length - 1];
                    if (type != null) {
                        String classStr = type.getTypeName();
                        if (classStr.indexOf("<") != -1) {
                            classStr = classStr.substring(0, classStr.indexOf("<"));
                        }
                        Class<?> aClass = stringToClass(classStr);
                        return aClass;
                    }
                }
            } catch (Exception e) {

            }
            return null;
        }

        /**
         * 利用反射给类中方法进行赋值
         *
         * @param setObj            被设置操作的类
         * @param setMethodName     被调用的方法名
         * @param returnType        该方法返回值的类型,若没有返回值填入null即可
         * @param setValueTypeClass 设置值的类型
         * @param setValue          设置的值
         * @param <T>               自适应返回值类型
         * @return 如果返回值类型为null则默认返回 true:设置值成功 false:设置值失败
         */
        public static <T> T setReflectMethodValue(Object setObj, String setMethodName, Class<T> returnType, Class<?> setValueTypeClass, Object... setValue) {
            if (setObj == null) return (T) "false";
            Method m = null;
            try {
                m = setObj.getClass().getMethod(setMethodName, setValueTypeClass);
                m.setAccessible(true);
                T invoke = (T) m.invoke(setObj, setValue);//调用方法
                if (returnType != null) {
                    return invoke;
                } else {
                    return (T) "true";
                }
            } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
//                logt("e:" + e);
                e.printStackTrace();
            }

//            logt("进入异常返回处理:" + returnType);
            if (returnType != null) {
                return null;
            } else {
                return (T) "false";
            }
        }

        /**
         * 设置反射方法值
         * setReflectMethodValue(subscriber, "onDemo", returnType, parameterTypes, "姓名", 5);
         *
         * @param setObj         被反射操作的类
         * @param setMethodName  反射的方法名
         * @param returnType     返回类型 (可填null,默认返回 true 与 false)
         * @param parameterTypes 方法类型数组
         * @param setValue       设置反射的值
         * @param <T>            返回类型
         * @return
         */
        public static <T> T setReflectMethodValue(Object setObj, String setMethodName, Class<T> returnType, Class<?>[] parameterTypes, Object... setValue) {
            Method method;
            try {
                if (parameterTypes.length == 0) {
                    method = setObj.getClass().getMethod(setMethodName);
                } else {
                    method = setObj.getClass().getMethod(setMethodName, parameterTypes);
                }
                method.setAccessible(true);
                T invoke;
                if (parameterTypes.length == 0) {
                    invoke = (T) method.invoke(setObj);//调用方法
                } else {
                    invoke = (T) method.invoke(setObj, setValue);//调用方法
                }
                if (returnType != null && !"void".equals(returnType.toString())) {
                    return invoke;
                } else {
                    return (T) "true";
                }
            } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
//                GT.errs("e:" + e);
            }
            if (returnType != null) {
                return null;
            } else {
                return (T) "false";
            }
        }

        /**
         * 获取反射方法的返回值
         *
         * @param setObj        被设置操作的类
         * @param setMethodName 被调用的方法名
         * @param returnType    该方法返回值的类型
         * @param <T>           自适应返回值类型
         * @return
         */
        public static <T> T runMethod(Object setObj, String setMethodName, Class<T> returnType) {
            if (returnType == null) return null;
            Method m = null;
            try {
                m = setObj.getClass().getMethod(setMethodName);
                T invoke = (T) m.invoke(setObj);//调用方法
                return invoke;
            } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
                GT.err("e:" + e);
                e.printStackTrace();
            }
            return null;
        }

        /**
         * 获取反射方法的返回值
         *
         * @param setObj        被设置操作的类
         * @param setMethodName 被调用的方法名
         * @param returnType    该方法返回值的类型
         * @param <T>           自适应返回值类型
         * @return
         */
        public static <T> T getReflectMethodValue(Object setObj, String setMethodName, Class<T> returnType) {
            if (returnType == null) return null;
            Method m = null;
            try {
                m = setObj.getClass().getMethod(setMethodName);
                T invoke = (T) m.invoke(setObj);//调用方法
                return invoke;
            } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
                GT.err("e:" + e);
                e.printStackTrace();
            }
            return null;
        }

        /**
         * 获取反射变量的值
         *
         * @param classz          反射的类(可接受类型 class、String(类包名)、实体类)
         * @param valueType       反射变量的类型
         * @param returnValueName 反射变量的变量名
         * @param <T>
         * @return
         */
        public static <T> T getReflectVariateValue(Object classz, Class<T> valueType, String returnValueName) {
            T t = null;
            Class aClass = null;
            if (classz instanceof Class) {//class 类
                aClass = (Class) classz;
            } else if (classz instanceof String) {//类包名
                aClass = stringToClass(classz.toString());
            } else {//实体类
                aClass = classz.getClass();
            }
            if (aClass == null) return null;
            Field[] f = aClass.getDeclaredFields();
            for (Field field : f) {
                field.setAccessible(true);//设置可以读取 private 值
                try {
                    if (field.getName().equals(returnValueName)) {//如果是自己想要的值，那就直接返回
                        t = (T) field.get(aClass.newInstance());
                        return t;
                    }
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                } catch (InstantiationException e) {
                    e.printStackTrace();
                }
            }
            return null;
        }

        /**
         * 利用反射给变量设置值
         *
         * @param obj       反射的类
         * @param valueName 赋值的变量名
         * @param value     值
         * @return 返回反射后的对象
         */
        public static <T> T setReflectVariateValue(T obj, String valueName, Object value) {
            Class aClass = obj.getClass();
            try {
                Field name = aClass.getDeclaredField(valueName);
                name.setAccessible(true);
                name.set(obj, value);
                return obj;
            } catch (NoSuchFieldException | IllegalAccessException e) {
                GT.err("e:" + e);
                e.printStackTrace();
            }
            return obj;
        }

        /**
         * 设置反射给变量值
         *
         * @param obj 反射的类
         * @param map 赋值的变量名,值
         * @return 返回反射后的对象
         */
        public static <T> T setReflectVariateValue(T obj, Map<String, Object> map) {
            Class aClass = obj.getClass();
            try {
                for (String key : map.keySet()) {
                    Object value = map.get(key);
                    Field name = aClass.getDeclaredField(key);
                    name.setAccessible(true);
                    name.set(obj, value);
                }
                return obj;
            } catch (NoSuchFieldException | IllegalAccessException e) {
                GT.err("e:" + e);
                e.printStackTrace();
            }
            return obj;
        }

        /**
         * 反射该类所有的变量值 (可接受类型 class、String(类包名)、实体类)
         *
         * @param classz
         * @return
         */
        public static Map<String, Object> getReflectVariateValueAll(Object classz) {
            Map<String, Object> map = new ArrayMap<>();
            Class aClass = null;
            Object obj = null;
            if (classz instanceof Class) {//class 类
                aClass = (Class) classz;
            } else if (classz instanceof String) {//类包名
                aClass = stringToClass(classz.toString());
            } else {//实体类
                obj = classz;
                aClass = classz.getClass();
            }
            if (aClass == null) return null;
            Field[] f = aClass.getDeclaredFields();
            for (Field field : f) {
                field.setAccessible(true);//设置可以读取 private 值
                try {
                    if (obj == null) obj = aClass.newInstance();
                    map.put(field.getName(), field.get(obj));
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                } catch (InstantiationException e) {
                    e.printStackTrace();
                }
            }
            return map;
        }

        /**
         * 字符串转Class
         *
         * @param className 包名 如："com.gsls.gt.Person"
         * @param T
         * @return
         */
        public static Class<?> stringToClass(String className) {
            if (className == null || !className.contains(".")) return null;
            try {
                return Class.forName(className);
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
                return null;
            }
        }

        /**
         * 字符串转Class
         *
         * @param "com.gsls.gt.Person"、Person.class
         * @param T
         * @return
         */
        public static <T> T ObjToObj(Object obj) {
            try {
                if (obj instanceof String) {
                    obj = AnnotationAssist.stringToClass(obj.toString());
                }

                if (obj instanceof Class<?>) {
                    Class<?> objClass = (Class<?>) obj;
                    return (T) AnnotationAssist.classToObject(objClass);
                }
            } catch (Exception e) {

            }
            return (T) obj;
        }

        /**
         * 过去抽象类上的泛型 class
         *
         * @param className 包名 如："com.gsls.gt.Person"
         * @param T
         * @return
         */
        public static Class<?> abstractClasstoGenericity(Class<?> classz) {
            try {
                Type type = classz.getGenericSuperclass();
                String beanType = type.toString();
                beanType = beanType.substring(beanType.indexOf("<") + 1, beanType.lastIndexOf(">"));
                return AnnotationAssist.stringToClass(beanType);
            } catch (Exception e) {
//                e.printStackTrace();
                return null;
            }
        }

        /**
         * 获取方法形参上的注解
         *
         * @param method
         * @return
         */
        public static List<Annotation> getMethodParameterAnnotation(Method method) {
            //获取方法头形参的注解
            List<Annotation> parameList = new ArrayList<>();
            Annotation[][] parameterAnnotations = method.getParameterAnnotations();
            for (Annotation[] annotation1 : parameterAnnotations) {
                for (Annotation annotation : annotation1) {
                    if (annotation != null) {
                        parameList.add(annotation);
                    }
                }
            }
            return parameList;
        }

        /**
         * 返回类型
         *
         * @param type
         * @return
         */
        public static Class<?> returnType(Class<?> type) {
            String name = type.getName();
            if (name.equals("java.lang.String")) {
                return String.class;
            } else if (name.contains("int") || name.contains("Integer")) {
                return int.class;
            } else if (name.contains("Boolean") || name.contains("boolean")) {
                return boolean.class;
            } else if (name.contains("Double") || name.contains("double")) {
                return double.class;
            } else if (name.contains("Float") || name.contains("float")) {
                return float.class;
            } else if (name.contains("Time")) {
                return Time.class;
            } else if (name.contains("Date")) {
                return Date.class;
            } else if (name.contains("Long") || name.contains("long")) {
                return long.class;
            } else if (name.contains("[B")) {
                return byte.class;
            } else if (name.contains("List")) {
                return List.class;
            } else if (name.contains("Map")) {
                return Map.class;
            } else if (name.contains("File")) {
                return File.class;
            } else {
                return Object.class;
            }
        }

        /**
         * 实体类 转 map
         *
         * @param t
         * @param <T>
         * @return
         */
        public static <T> Map<String, Object> beanToMap(T t) {
            if (t == null) return null;
            Map<String, Object> map = new ArrayMap<>();
            Field[] fields = t.getClass().getDeclaredFields();//获致当前 Activity 所有成员变更
            for (Field field : fields) {
                String type = field.getName();
                try {
                    field.setAccessible(true);
                    Object object = field.get(t);
                    map.put(type, object);
                } catch (IllegalAccessException e) {
                    map.put(type, null);
                }

            }
            return map;
        }

        /**
         * 获取 class 源码
         *
         * @param classz
         * @return
         */
        public static String returnClassCode(Class<?> classz) {
            String code = null;
            try {
                String path = classz.getResource("").getPath() + classz.getSimpleName() + ".java";
                if (path != null && path.length() > 0 && "/".equals(path.substring(0, 1))) {
                    path = path.substring(1);
                }
                path = path.replace("/bin/", "/src/");
                code = FileUtils.query(path);
            } catch (Exception e) {

            }
            return code;

        }

        /**
         * 获取反射的变量
         *
         * @param obj                 操作的对象
         * @param returnType          获取变量的类型
         * @param reflectVariableName 反射变量名
         * @param <T>
         * @return
         */
        public static <T> T getReflectObject(Object obj, String reflectVariableName, Class<T> returnType) {
            try {
                Field file = obj.getClass().getDeclaredField(reflectVariableName); // 通过反射获取mMessageView对象，这是类中的成员变量名
                file.setAccessible(true); //私有变量需要使用此方法
                T t = (T) file.get(obj); // 获取textView实例，mBootMsgDialog为具体实例
                return t;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

        /**
         * 获取反射的变量
         *
         * @param obj                 操作的对象
         * @param reflectVariableName 反射变量名
         * @param <T>
         * @return
         */
        public static <T> T getReflectObject(Object obj, String reflectVariableName) {
            try {
                Field file = obj.getClass().getDeclaredField(reflectVariableName); // 通过反射获取mMessageView对象，这是类中的成员变量名
                file.setAccessible(true); //私有变量需要使用此方法
                T t = (T) file.get(obj); // 获取textView实例，mBootMsgDialog为具体实例
                return t;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

        /**
         * ContentValues 转 实体类
         *
         * @param contentValues
         * @param tClass
         * @param <T>
         * @return
         */
        public static <T> T contentValuesToObject(ContentValues contentValues, Class<T> tClass) {
            try {
                T t = tClass.newInstance();
                Field[] fields = tClass.getDeclaredFields();
                for (Field field : fields) {
                    String valueName = field.getName();
                    field.setAccessible(true);
                    Object obj = contentValues.get(valueName);
                    if (obj != null) {
                        field.set(t, obj);
                    }
                }
                return t;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

        //=========================================== 反射 Android 系统方法 ===================================

        /**
         * 拷贝长按单击事件
         *
         * @param view                  被拷贝的View
         * @param toView                拷贝的View
         * @param isCancelOriginalEvent 是否操作性质为  剪切
         * @return
         */
        public static boolean copyLongClickEvent(View view, View toView, boolean... isCancelOriginalEvent) {
            if (view == null || toView == null) return false;
            if (!view.isLongClickable()) return false;

            boolean isCancelEvent = false;
            if (isCancelOriginalEvent != null && isCancelOriginalEvent.length >= 1) {
                isCancelEvent = isCancelOriginalEvent[0];
            }

            //反射点击事件列表
            Method listenerInfoMethod = null;
            try {
                listenerInfoMethod = View.class.getDeclaredMethod("getListenerInfo");
            } catch (NoSuchMethodException e) {
                return false;
            }
            listenerInfoMethod.setAccessible(true);
            Object listenerInfo = null;
            try {
                listenerInfo = listenerInfoMethod.invoke(view);
            } catch (IllegalAccessException e) {
                return false;
            } catch (InvocationTargetException e) {
                return false;
            }
            //要获取单击监听器则在前面加个m 其他同理 例如长按监听器就是mOnLongClickListener
            Class<?> listenerInfoClass = listenerInfo.getClass();
            Field mOnLongClickListenerField = null;
            try {
                mOnLongClickListenerField = listenerInfoClass.getDeclaredField("mOnLongClickListener");
            } catch (NoSuchFieldException e) {
                return false;
            }
            mOnLongClickListenerField.setAccessible(true);

            //通过字段获取此监听器对象
            try {
                View.OnLongClickListener onLongClickListener = (View.OnLongClickListener) mOnLongClickListenerField.get(listenerInfo);
                toView.setOnLongClickListener(onLongClickListener);
            } catch (IllegalAccessException e) {
                return false;
            }

            if (isCancelEvent) {
                try {
                    view.setOnLongClickListener(null);
                } catch (Exception e) {
                    return false;
                }
            }
            return true;
        }

        /**
         * 拷贝单击事件
         *
         * @param view                  被拷贝的View
         * @param toView                拷贝的View
         * @param isCancelOriginalEvent 是否操作性质为  剪切
         * @return
         */
        public static boolean copyClickEvent(View view, View toView, boolean... isCancelOriginalEvent) {
            if (view == null || toView == null) return false;
            if (!view.isClickable()) return false;

            boolean isCancelEvent = false;
            if (isCancelOriginalEvent != null && isCancelOriginalEvent.length >= 1) {
                isCancelEvent = isCancelOriginalEvent[0];
            }

            //反射点击事件列表
            Method listenerInfoMethod = null;
            try {
                listenerInfoMethod = View.class.getDeclaredMethod("getListenerInfo");
            } catch (NoSuchMethodException e) {
                return false;
            }
            listenerInfoMethod.setAccessible(true);
            Object listenerInfo = null;
            try {
                listenerInfo = listenerInfoMethod.invoke(view);
            } catch (IllegalAccessException e) {
                return false;
            } catch (InvocationTargetException e) {
                return false;
            }
            //要获取单击监听器则在前面加个m 其他同理 例如长按监听器就是mOnLongClickListener
            Class<?> listenerInfoClass = listenerInfo.getClass();
            Field mOnClickListenerField = null;
            try {
                mOnClickListenerField = listenerInfoClass.getDeclaredField("mOnClickListener");
            } catch (NoSuchFieldException e) {
                return false;
            }
            mOnClickListenerField.setAccessible(true);

            //通过字段获取此监听器对象
            try {
                View.OnClickListener onClickListener = (View.OnClickListener) mOnClickListenerField.get(listenerInfo);
                toView.setOnClickListener(onClickListener);
            } catch (IllegalAccessException e) {
                return false;
            }

            if (isCancelEvent) {
                try {
                    view.setOnClickListener(null);
                } catch (Exception e) {
                    return false;
                }
            }
            return true;
        }

        /**
         * 拷贝View事件
         *
         * @param view                  被拷贝的View
         * @param toView                拷贝的View
         * @param eventListener         拷贝事件的类型
         * @param isCancelOriginalEvent 是否操作性质为  剪切
         * @return
         */
        public static <T> boolean copyViewEvent(View view, View toView, Class<T> eventListener, boolean... isCancelOriginalEvent) {
            if (view == null || toView == null) return false;

            boolean isCancelEvent = false;
            if (isCancelOriginalEvent != null && isCancelOriginalEvent.length >= 1) {
                isCancelEvent = isCancelOriginalEvent[0];
            }

            //反射点击事件列表
            Method listenerInfoMethod = null;
            try {
                listenerInfoMethod = View.class.getDeclaredMethod("getListenerInfo");
            } catch (NoSuchMethodException e) {
                return false;
            }
            listenerInfoMethod.setAccessible(true);
            Object listenerInfo;
            try {
                listenerInfo = listenerInfoMethod.invoke(view);
            } catch (IllegalAccessException e) {
                return false;
            } catch (InvocationTargetException e) {
                return false;
            }
            //要获取单击监听器则在前面加个m 其他同理 例如长按监听器就是mOnLongClickListener
            Class<?> listenerInfoClass = listenerInfo.getClass();
            Field mOnListenerField;
            try {
                mOnListenerField = listenerInfoClass.getDeclaredField("m" + eventListener.getSimpleName());
                mOnListenerField.setAccessible(true);
            } catch (NoSuchFieldException e) {
                return false;
            }

            //通过字段获取此监听器对象
            try {
                if (eventListener == View.OnClickListener.class) {
                    toView.setOnClickListener((View.OnClickListener) mOnListenerField.get(listenerInfo));
                    if (isCancelEvent) {
                        try {
                            view.setOnClickListener(null);
                        } catch (Exception e) {
                            return false;
                        }
                    }
                } else if (eventListener == View.OnLongClickListener.class) {
                    toView.setOnLongClickListener((View.OnLongClickListener) mOnListenerField.get(listenerInfo));
                    if (isCancelEvent) {
                        try {
                            view.setOnLongClickListener(null);
                        } catch (Exception e) {
                            return false;
                        }
                    }
                } else if (eventListener == View.OnTouchListener.class) {
                    toView.setOnTouchListener((View.OnTouchListener) mOnListenerField.get(listenerInfo));
                    if (isCancelEvent) {
                        try {
                            view.setOnTouchListener(null);
                        } catch (Exception e) {
                            return false;
                        }
                    }
                } else if (eventListener == View.OnKeyListener.class) {
                    toView.setOnKeyListener((View.OnKeyListener) mOnListenerField.get(listenerInfo));
                    if (isCancelEvent) {
                        try {
                            view.setOnKeyListener(null);
                        } catch (Exception e) {
                            return false;
                        }
                    }
                } else if (eventListener == View.OnFocusChangeListener.class) {
                    toView.setOnFocusChangeListener((View.OnFocusChangeListener) mOnListenerField.get(listenerInfo));
                    if (isCancelEvent) {
                        try {
                            view.setOnFocusChangeListener(null);
                        } catch (Exception e) {
                            return false;
                        }
                    }
                } else if (eventListener == View.OnDragListener.class) {
                    toView.setOnDragListener((View.OnDragListener) mOnListenerField.get(listenerInfo));
                    if (isCancelEvent) {
                        try {
                            view.setOnDragListener(null);
                        } catch (Exception e) {
                            return false;
                        }
                    }
                } else if (eventListener == View.OnHoverListener.class) {
                    toView.setOnHoverListener((View.OnHoverListener) mOnListenerField.get(listenerInfo));
                    if (isCancelEvent) {
                        try {
                            view.setOnHoverListener(null);
                        } catch (Exception e) {
                            return false;
                        }
                    }
                } else if (eventListener == View.OnContextClickListener.class) {
                    toView.setOnContextClickListener((View.OnContextClickListener) mOnListenerField.get(listenerInfo));
                    if (isCancelEvent) {
                        try {
                            view.setOnContextClickListener(null);
                        } catch (Exception e) {
                            return false;
                        }
                    }
                } else if (eventListener == View.OnGenericMotionListener.class) {
                    toView.setOnGenericMotionListener((View.OnGenericMotionListener) mOnListenerField.get(listenerInfo));
                    if (isCancelEvent) {
                        try {
                            view.setOnGenericMotionListener(null);
                        } catch (Exception e) {
                            return false;
                        }
                    }
                } else if (eventListener == View.OnLayoutChangeListener.class) {
                    //暂无设置
                } else if (eventListener == View.OnCreateContextMenuListener.class) {
                    toView.setOnCreateContextMenuListener((View.OnCreateContextMenuListener) mOnListenerField.get(listenerInfo));
                    if (isCancelEvent) {
                        try {
                            view.setOnCreateContextMenuListener(null);
                        } catch (Exception e) {
                            return false;
                        }
                    }
                } else if (eventListener == View.OnScrollChangeListener.class) {
                    toView.setOnScrollChangeListener((View.OnScrollChangeListener) mOnListenerField.get(listenerInfo));
                    if (isCancelEvent) {
                        try {
                            view.setOnScrollChangeListener(null);
                        } catch (Exception e) {
                            return false;
                        }
                    }
                } else if (eventListener == View.OnApplyWindowInsetsListener.class) {
                    toView.setOnApplyWindowInsetsListener((View.OnApplyWindowInsetsListener) mOnListenerField.get(listenerInfo));
                    if (isCancelEvent) {
                        try {
                            view.setOnApplyWindowInsetsListener(null);
                        } catch (Exception e) {
                            return false;
                        }
                    }
                } else if (eventListener == View.OnAttachStateChangeListener.class) {
                    //暂无设置
                } else if (eventListener == View.OnSystemUiVisibilityChangeListener.class) {
                    toView.setOnSystemUiVisibilityChangeListener((View.OnSystemUiVisibilityChangeListener) mOnListenerField.get(listenerInfo));
                    if (isCancelEvent) {
                        try {
                            view.setOnSystemUiVisibilityChangeListener(null);
                        } catch (Exception e) {
                            return false;
                        }
                    }
                } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
                    if (eventListener == View.OnUnhandledKeyEventListener.class) {
                        //暂无设置
                    }
                } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                    if (eventListener == View.OnCapturedPointerListener.class) {
                        toView.setOnCapturedPointerListener((View.OnCapturedPointerListener) mOnListenerField.get(listenerInfo));
                        if (isCancelEvent) {
                            try {
                                view.setOnCapturedPointerListener(null);
                            } catch (Exception e) {
                                return false;
                            }
                        }
                    }
                }
            } catch (IllegalAccessException e) {
                return false;
            }
            return true;
        }

    }

    /**
     * 动态代理 封装类
     */
    public static class MethodProxy implements InvocationHandler {

        private volatile static MethodProxy methodProxy;
        private OnRunMethod onRunMethod;

        private MethodProxy() {
        }

        public static MethodProxy getInstance() {
            if (methodProxy == null) {
                synchronized (MethodProxy.class) {
                    if (methodProxy == null) {
                        methodProxy = new MethodProxy();
                    }
                }
            }
            return methodProxy;
        }

        @SuppressWarnings("unchecked")
        public <T> T create(Class<T> classz, OnRunMethod... onRunMethod) {
            if (onRunMethod != null && onRunMethod.length >= 1)
                this.onRunMethod = onRunMethod[0];
            if (classz == null)
                return null;
            return (T) newProxyInstance(classz.getClassLoader(), new Class[]{classz}, methodProxy);
        }

        @Override
        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
            // 如果传进来是一个已实现的具体类（本次演示略过此逻辑)
            if (Object.class.equals(method.getDeclaringClass())) {
                try {
                    return method.invoke(this, args);
                } catch (Throwable t) {
                    t.printStackTrace();
                }
                // 如果传进来的是一个接口（核心)
            } else {
                return runMethod(proxy, method, args, onRunMethod);
            }
            return null;
        }

        public static interface OnRunMethod {
            Object runMethod(Object proxy, Method method, Object[] args);
        }

        /**
         * 实现接口的核心方法
         *
         * @param method
         * @param args
         * @return
         */
        public Object runMethod(Object proxy, Method method, Object[] args, OnRunMethod onRunMethod) {
            // 如远程http调用
            // 如远程方法调用（rmi)
            // ....
            if (onRunMethod != null)
                return onRunMethod.runMethod(proxy, method, args);
            else
                return null;
        }
    }

//========================================== 线程 ==============================================

    /**
     * Thread 更新UI线程
     */
    public static class Thread {

        private static final Handler uiThread = new Handler(Looper.getMainLooper());

        /**
         * 更新 主线程 UI
         *
         * @param runnable
         */
        public static void runAndroid(Runnable runnable) {
            if (Looper.myLooper() == Looper.getMainLooper()) {
                runnable.run();
            } else {
                Thread.uiThread.post(runnable);
            }
        }

        /**
         * 更新 主线程 UI
         *
         * @param runnable
         */
        public static void runAndroidAct(Runnable runnable) {
            if (getActivity() != null) {
                Activity activity = (Activity) getActivity();
                activity.runOnUiThread(runnable);
            } else {
                log(getLineInfo(), "当前未绑定 Activity 无法使用该方法创建 UI 线程");
            }
        }

        /**
         * @param runnable  run
         * @param sleepTime 延时时间
         * @主线程
         */
        public static void runAndroid(Runnable runnable, int delayMillis) {
            Thread.uiThread.postDelayed(runnable, delayMillis);
        }

        /**
         * 更新 主线程 UI
         *
         * @param runnable
         */
        public static void runAndroid(View view, Runnable runnable) {
            view.post(runnable);
        }

        /**
         * 更新 主线程 UI
         *
         * @param runnable
         */
        public static void runAndroid(Activity activity, Runnable runnable) {
            activity.runOnUiThread(runnable);
        }

        /**
         * 开启 Java 子线程
         *
         * @param runnable
         */
        public static void runJava(Runnable runnable) {
            //注意：如果你在引用这个线程里引用了主线程的 对象 请在 run 方法中 加入 Looper.prepare(); 否则会在开始或结束Activity活动时 报异常
            new java.lang.Thread(runnable).start();
        }

        /**
         * 睡眠
         *
         * @param millis
         */
        public static void sleep(long millis) {
            try {
                java.lang.Thread.sleep(millis);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        /**
         * 循环 计时器
         *
         * @param delay     多少秒过后进行 开始计时器
         * @param period    每隔多少毫秒进行一次计时
         * @param timerTask 匿名类 new TimerTask 即可 然后在 run 方法中写耗时操作
         * @return
         */
        public static Timer Timer(long delay, long period, TimerTask timerTask) {
            /**
             * 参数 delay : 待多少秒过后进行 开始计时器
             * 参数 period : 每隔多少毫秒进行一次计时
             * 参数 timerTask : 匿名类 new TimerTask 即可 然后在 run 方法中写耗时操作
             */
            Timer timer = new Timer();
            timer.schedule(timerTask, delay, period);
            return timer;
        }

        /**
         * 简易 循环计时器
         *
         * @param timerTask
         * @return
         */
        public static Timer Timer(TimerTask timerTask) {
            /**
             * 参数 timerTask : 匿名类 new TimerTask 即可 然后在 run 方法中写耗时操作
             */
            Timer timer = new Timer();
            timer.schedule(timerTask, 0, 1);
            return timer;
        }

        /**
         * Timer 整体封装
         */
        public static class GT_Timer {

            private Timer timer;
            private TimerTask timerTask;

            /**
             * 初始化
             *
             * @param timerTask
             */
            public GT_Timer(TimerTask timerTask) {
                this.timerTask = timerTask;
                timer = new Timer();
            }

            /**
             * 开启循环计时
             *
             * @param delay
             * @param period
             * @return
             */
            public GT_Timer start(long delay, long period) {
                if (timer != null && timerTask != null) {
                    timer.schedule(timerTask, delay, period);
                }
                return this;
            }

            /**
             * 启动
             *
             * @return
             */
            public GT_Timer start() {
                if (timer != null && timerTask != null) {
                    timer.schedule(timerTask, 0, 1);
                }
                return this;
            }

            /**
             * 结束循环计时
             */
            public void close() {
                if (timer != null) {
                    timer.cancel();//停止计时
                    timer = null;
                    timerTask = null;
                }
            }


        }

        /**
         * AsyncTask 封装
         *
         * @param gtAsyncTask
         * @return
         */
        public static GTAsyncTask asyncTask(GTAsyncTask gtAsyncTask) {
            return gtAsyncTask;
        }

        /**
         * 自动开启的 AsyncTask 封装
         *
         * @param start
         * @param gtAsyncTask
         * @return
         */
        public static GTAsyncTask asyncTask(boolean start, GTAsyncTask gtAsyncTask) {
            if (start) gtAsyncTask.execute();//如果设置为
            return gtAsyncTask;
        }

        /**
         * AsyncTask 整体封装
         */
        public static class AsyncTask {
            /**
             * 使用实列:    GT.Thread.AsyncTask asyncTask = new GT.Thread.AsyncTask(new GT.Thread.GTAsyncTask(){....}
             */
            private GTAsyncTask gtAsyncTask;    //定义 GTAsyncTask

            /**
             * 获取 GTAsyncTask 对象
             *
             * @return
             */
            public GTAsyncTask getGtAsyncTask() {
                return gtAsyncTask;
            }

            /**
             * 初始化 GTAsyncTask
             *
             * @param gtAsyncTask
             */
            public AsyncTask(GTAsyncTask gtAsyncTask) {
                this.gtAsyncTask = gtAsyncTask;
            }

            //启动 GTAsyncTask
            public void start() {
                if (gtAsyncTask != null) {
                    try {
                        gtAsyncTask.execute();
                    } catch (IllegalStateException e) {
                        if (LOG.GT_LOG_TF) {
                            GT.log(getLineInfo(1), "无法执行任务:任务已在运行。");
                        }
                    }
                }
            }

            /**
             * 关闭 GTAsyncTask 并释放内存
             */
            public void close() {
                if (gtAsyncTask != null) {
                    gtAsyncTask.cancel(true);//强制关闭
                    gtAsyncTask = null;//置空
                }
            }

        }

        /**
         * 定义继承后要实现的类
         */
        public abstract static class GTAsyncTask extends android.os.AsyncTask<Object, Object, Object> {

            /**
             * 用法：继承该类并重写，或者利用 AsyncTask 封装类进行便捷操作
             * onPreExecute 用于初始化
             * onProgressUpdate 用于更新 UI 界面
             * doInBackground 用于进行耗时操作如网络请求、、
             * onPostExecute 用于反馈耗时完成、或者进行资源释放
             */

            @Override
            protected void onPreExecute() {
                //初始化
                super.onPreExecute();
            }

            @Override
            protected void onProgressUpdate(Object... values) {
                //更新 UI
                super.onProgressUpdate(values);
            }

            @Override
            protected Object doInBackground(Object... objects) {
                //阻塞操作 该方法并不在 主线程中调用，不能用于更新 UI 操作
                return null;
            }

            @Override
            protected void onPostExecute(Object object) {
                //在主线程中调用该方法，可以对 UI 进行修改
                super.onPostExecute(object);

            }
        }

        //增加线程池
        /*1.shutDown()  关闭线程池，不影响已经提交的任务
        2.shutDownNow() 关闭线程池，并尝试去终止正在执行的线程
        3.allowCoreThreadTimeOut(boolean value) 允许核心线程闲置超时时被回收
        4.submit 一般情况下我们使用execute来提交任务，但是有时候可能也会用到submit，使用submit的好处是submit有返回值。
        5.beforeExecute() - 任务执行前执行的方法
        6.afterExecute() -任务执行结束后执行的方法
        7.terminated() -线程池关闭后执行的方法*/

        //这种线程池比较灵活，也就是说它的池里的线程数量并不是固定的，理论上可以无限大，任务不需要排队，如果有空闲的线程，则复用，无则新建线程。
        private static ExecutorService executor;//默认使用这种
        //如字面意思，这是一个单例化的线程池，他只有一个线程去执行任务。最常见的一个例子就是我们的UI线程啦。它就是典型的单线程模型。
        private static ExecutorService executorSingle;
        //这个算是一个中规中矩，也是Android sdk的源码中用的比较多的，它的池子里的线程数有个最大值，可以自己设置，如果超过这个最大值，那么任务就会加入任务队列去等待。
        private static ExecutorService executorSize;
        //这也是一个定长的线程池，但是可以支持周期性的任务,以下例子表示延迟一秒过后，每两秒执行一次。
        private static ScheduledExecutorService scheduledThreadPool;
        //创建线程池集合
        private static Map<Object, ExecutorService> mapExecutorService = new ArrayMap<>();

        /**
         * @param name 当前线程池的名称
         * @return
         */
        public synchronized static ExecutorService getInstance(Object name) {
            //如果改名称的线程池已存在 那就直接返回使用
            if (mapExecutorService.keySet().contains(name)) return mapExecutorService.get(name);
            //否则创建一个新的 线程池进入缓存里再返回使用
            ExecutorService instance = getInstance(0);
            mapExecutorService.put(name, instance);
            return instance;
        }


        /**
         * 获取一个新的且自定义线程数的 线程池
         *
         * @param threadSize 获取线程池内线程数量
         * @param name       当前线程池的名称
         * @return
         */
        public synchronized static ExecutorService getInstance(int threadSize, String name) {
            //如果改名称的线程池已存在 那就直接返回使用
            if (mapExecutorService.keySet().contains(name)) return mapExecutorService.get(name);
            //否则创建一个新的 线程池进入缓存里再返回使用
            ExecutorService instance = getInstance(threadSize);
            mapExecutorService.put(name, instance);
            return instance;
        }

        /**
         * @param threadSize 获取线程池内线程数量
         * @return
         */
        public synchronized static ExecutorService getInstance(int threadSize) {
            if (threadSize <= 0) {
                return Executors.newCachedThreadPool();
            } else if (threadSize == 1) {
                return Executors.newSingleThreadExecutor();
            } else {
                return Executors.newFixedThreadPool(threadSize);
            }
        }

        /**
         * 获取不同类型的线程池
         *
         * @param threadSize 获取线程池内线程数量
         * @param isNews     是否获取一个新的线程池
         * @return
         */
        public synchronized static ExecutorService getInstance(int threadSize, boolean... isNews) {
            if (threadSize <= 0) {
                if (isNews != null && isNews.length >= 1)
                    if (isNews[0]) return Executors.newCachedThreadPool();
                if (executor == null) executor = Executors.newCachedThreadPool();//默认使用这种
                return executor;
            } else if (threadSize == 1) {
                if (isNews != null && isNews.length >= 1)
                    if (isNews[0]) return Executors.newSingleThreadExecutor();
                if (executorSingle == null) executorSingle = Executors.newSingleThreadExecutor();
                return executorSingle;
            } else {
                if (isNews != null && isNews.length >= 1)
                    if (isNews[0]) return Executors.newFixedThreadPool(threadSize);
                if (executorSize == null) executorSize = Executors.newFixedThreadPool(threadSize);
                return executorSize;
            }
        }


        /**
         * 获取特殊的循环线程池
         *
         * @param corePoolSize
         * @return
         */
        public static ScheduledExecutorService getCirculationInstance(int corePoolSize) {
            if (scheduledThreadPool == null)
                scheduledThreadPool = Executors.newScheduledThreadPool(corePoolSize);
            return null;
        }

        //判断当前线程是否为主线程
        public static boolean isMainThread() {
            return Looper.myLooper() == Looper.getMainLooper();
        }

        public static Handler getUiThread() {
            return uiThread;
        }

        //使用教程
        //这种线程池比较灵活，也就是说它的池里的线程数量并不是固定的，理论上可以无限大，任务不需要排队，如果有空闲的线程，则复用，无则新建线程。
        /*ExecutorService cachedThreadPool = Executors.newCachedThreadPool();
        cachedThreadPool.execute(new Runnable() {
            @Override
            public void run() {


            }
        });*/


        //这个算是一个中规中矩，也是Android sdk的源码中用的比较多的，它的池子里的线程数有个最大值，可以自己设置，如果超过这个最大值，那么任务就会加入任务队列去等待。
       /* ExecutorService fixedThreadPool = Executors.newFixedThreadPool(2);
        fixedThreadPool.execute(new Runnable() {

            @Override
            public void run() {

            }
        });*/


        //如字面意思，这是一个单例化的线程池，他只有一个线程去执行任务。最常见的一个例子就是我们的UI线程啦。它就是典型的单线程模型。
       /* ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();
        singleThreadExecutor.execute(new Runnable() {

            @Override
            public void run() {

            }
        });*/


        //这也是一个定长的线程池，但是可以支持周期性的任务,以下例子表示延迟一秒过后，每两秒执行一次。
        /*ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(5);
        scheduledThreadPool.scheduleAtFixedRate(new Runnable() {

            @Override
            public void run() {

            }
        },1, 2, TimeUnit.SECONDS);*/


    }

    /**
     * 用于异步操作的一个框架
     * 使用教程:https://blog.csdn.net/qq_39799899/article/details/123871288?spm=1001.2014.3001.5501
     */
    public static class Observable {

        //是否执行完毕
        private static Observable observable;
        //非单例参数
        private static AtomicBoolean isSuccess;
        private static ExecutorService instance;
        private Object obj;
        private static int sleepTime = 1;//默认延迟等待时间

        public Object getObj() {
            return obj;
        }

        public void setObj(Object obj) {
            this.obj = obj;
        }

        /**
         * 设置UI线程等待延时间隔
         *
         * @param sleepTime
         */
        public static void setSleepTime(int sleepTime) {
            Observable.sleepTime = sleepTime;
        }

        /**
         * 手动设置本次UI线程延时通过 ()
         *
         * @param
         */
        public static void setIsSuccess(boolean isSuccess) {
            Observable.isSuccess.set(isSuccess);
        }

        private Observable() {
        }//单例

        /**
         * 获取实例
         *
         * @param isCache 是否使用缓存,默认不使用缓存(大多数情况下是不使用缓存的)
         * @return
         */
        public static Observable getDefault(boolean... isCache) {
            observable = new Observable();
            //是否使用单例,默认不使用缓存
            if (isCache.length >= 1) {
                if (isCache[0]) {//如果是使用缓存
                    if (instance == null) instance = Thread.getInstance(1, true);
                    if (instance == null) isSuccess = new AtomicBoolean(false);
                } else {//不使用缓存
                    instance = Thread.getInstance(1, true);
                    isSuccess = new AtomicBoolean(false);
                }
            } else {//不使用缓存的
                instance = Thread.getInstance(1, true);
                isSuccess = new AtomicBoolean(false);
            }
            return observable;
        }

        /**
         * 停止当前异步处理
         *
         * @param isCompleted 是否强制执行(默认是强制执行)
         */
        public static void stop(boolean... isCompleted) {
            if (instance != null && !instance.isShutdown()) {
                if (isCompleted.length >= 1 && !isCompleted[0]) {
                    instance.shutdown();
                } else {
                    instance.shutdownNow();

                }
            }
        }

        //释放资源
        public static void close() {
            Observable.isSuccess = null;
            Observable.instance = null;
            Observable.observable = null;
        }

        /**
         * 执行:无参数 无返回值 的事件
         *
         * @param runnable
         * @param isWaitFinish 跳过该事件的耗时后,是否保证该事件顺序
         * @param <T>          事件数据类型
         * @return
         */
        public <T> Observable execute(RunJava<T> runnable, boolean... isWaitFinish) {
            try {
                if (isWaitFinish.length >= 1) {
                    if (!isWaitFinish[0]) {
                        Thread.getInstance(0).execute(runnable::run);
                    } else {
                        isSuccess.set(false);
                        instance.execute(() -> {
                            Thread.getInstance(0).execute(() -> {
                                isSuccess.set(true);
                                runnable.run();
                            });

                            while (!isSuccess.get()) {
                                Thread.sleep(sleepTime);
                            }
                        });
                    }
                } else {
                    instance.execute(runnable::run);
                }
            } catch (Exception e) {

            }
            return observable;
        }

        /**
         * 执行:有参数 无返回值 的事件
         *
         * @param runnable
         * @param isWaitFinish 跳过该事件的耗时后,是否保证该事件顺序
         * @param <T>          事件数据类型
         * @return
         */
        public <T> Observable execute(RunJavaV<T> runnable, boolean... isWaitFinish) {
            try {
                if (isWaitFinish.length >= 1) {
                    if (!isWaitFinish[0]) {
                        Thread.getInstance(0).execute(() -> runnable.run(returnT()));
                    } else {
                        isSuccess.set(false);
                        instance.execute(() -> {
                            Thread.getInstance(0).execute(() -> {
                                isSuccess.set(true);
                                runnable.run(returnT());
                            });

                            while (!isSuccess.get()) {
                                Thread.sleep(sleepTime);
                            }

                        });
                    }
                } else {
                    instance.execute(() -> {
                        runnable.run(returnT());
                    });
                }
            } catch (Exception e) {

            }
            return observable;
        }

        /**
         * 执行:无参数 有返回值 的事件
         *
         * @param runnable
         * @param isWaitFinish 跳过该事件的耗时后,是否保证该事件顺序
         * @param <T>          事件数据类型
         * @return
         */
        public <T> Observable execute(RunJavaR<T> runnable, boolean... isWaitFinish) {
            try {
                if (isWaitFinish.length >= 1) {
                    if (!isWaitFinish[0]) {
                        Thread.getInstance(0).execute(() -> obj = runnable.run());
                    } else {
                        isSuccess.set(false);
                        instance.execute(() -> {
                            Thread.getInstance(0).execute(() -> {
                                isSuccess.set(true);
                                obj = runnable.run();
                            });

                            while (!isSuccess.get()) {
                                Thread.sleep(sleepTime);
                            }

                        });
                    }
                } else {
                    instance.execute(() -> {
                        obj = runnable.run();
                    });
                }
            } catch (Exception e) {

            }
            return observable;
        }

        /**
         * 执行:有参数 有返回值 的事件
         *
         * @param runnable
         * @param isWaitFinish 跳过该事件的耗时后,是否保证该事件顺序
         * @param <T>          事件数据类型
         * @return
         */
        public <T> Observable execute(RunJavaVR<T> runnable, boolean... isWaitFinish) {
            try {
                if (isWaitFinish.length >= 1) {
                    if (!isWaitFinish[0]) {
                        Thread.getInstance(0).execute(() -> obj = runnable.run(returnT()));
                    } else {
                        isSuccess.set(false);
                        instance.execute(() -> {
                            Thread.getInstance(0).execute(() -> {
                                isSuccess.set(true);
                                obj = runnable.run(returnT());
                            });

                            while (!isSuccess.get()) {
                                Thread.sleep(sleepTime);
                            }

                        });
                    }
                } else {
                    instance.execute(() -> {
                        obj = runnable.run(returnT());
                    });
                }
            } catch (Exception e) {

            }
            return observable;
        }

        /**
         * 执行:无参数 无返回值 的事件
         *
         * @param runnable
         * @param isWaitFinish 跳过该事件的耗时后,是否保证该事件顺序 (默认为 true)
         * @param <T>          事件数据类型
         * @return
         */
        public <T> Observable execute(RunAndroid<T> runnable, boolean... isWaitFinish) {
            try {
                if (isWaitFinish.length >= 1) {
                    if (!isWaitFinish[0]) {
                        Thread.runAndroid(() -> runnable.run());
                        return observable;
                    }
                }

                instance.execute(() -> {
                    isSuccess.set(false);
                    Thread.getUiThread().post(() -> {
                        runnable.run();
                        isSuccess.set(true);
                    });
                    while (!isSuccess.get()) {
                        Thread.sleep(sleepTime);
                    }
                });
            } catch (Exception e) {

            }
            return observable;
        }

        /**
         * 执行:有参数 无返回值 的事件
         *
         * @param runnable
         * @param isWaitFinish 跳过该事件的耗时后,是否保证该事件顺序 (默认为 true)
         * @param <T>          事件数据类型
         * @return
         */
        public <T> Observable execute(RunAndroidV<T> runnable, boolean... isWaitFinish) {
            try {
                if (isWaitFinish.length >= 1) {
                    if (!isWaitFinish[0]) {
                        Thread.runAndroid(() -> runnable.run(returnT()));
                        return observable;
                    }
                }

                instance.execute(() -> {
                    isSuccess.set(false);
                    Thread.getUiThread().post(() -> {
                        runnable.run(returnT());
                        isSuccess.set(true);
                    });
                    while (!isSuccess.get()) {
                        Thread.sleep(sleepTime);
                    }
                });
            } catch (Exception e) {

            }
            return observable;
        }

        /**
         * 执行:无参数 有返回值 的事件
         *
         * @param runnable
         * @param isWaitFinish 跳过该事件的耗时后,是否保证该事件顺序 (默认为 true)
         * @param <T>          事件数据类型
         * @return
         */
        public <T> Observable execute(RunAndroidR<T> runnable, boolean... isWaitFinish) {
            try {
                if (isWaitFinish.length >= 1) {
                    if (!isWaitFinish[0]) {
                        Thread.runAndroid(() -> obj = runnable.run());
                        return observable;
                    }
                }

                instance.execute(() -> {
                    isSuccess.set(false);
                    Thread.getUiThread().post(() -> {
                        obj = runnable.run();
                        isSuccess.set(true);
                    });
                    while (!isSuccess.get()) {
                        Thread.sleep(sleepTime);
                    }
                });
            } catch (Exception e) {

            }
            return observable;
        }

        /**
         * 执行:有参数 有返回值 的事件
         *
         * @param runnable
         * @param isWaitFinish 跳过该事件的耗时后,是否保证该事件顺序 (默认为 true)
         * @param <T>          事件数据类型
         * @return
         */
        public <T> Observable execute(RunAndroidVR<T> runnable, boolean... isWaitFinish) {
            try {
                if (isWaitFinish.length >= 1) {
                    if (!isWaitFinish[0]) {
                        Thread.runAndroid(() -> obj = runnable.run(returnT()));
                        return observable;
                    }
                }

                instance.execute(() -> {
                    isSuccess.set(false);
                    Thread.getUiThread().post(() -> {
                        obj = runnable.run(returnT());
                        isSuccess.set(true);
                    });
                    while (!isSuccess.get()) {
                        Thread.sleep(sleepTime);
                    }
                });
            } catch (Exception e) {

            }
            return observable;
        }

        //所有异步线程执行了的祖类
        public abstract static class Runnable<T> {

            public T getData() {
                return (T) observable.obj;
            }

            public void setData(Object t) {
                observable.obj = t;
            }

            public void stop(boolean... isCompleted) {
                Observable.stop(isCompleted);
            }

            public Observable execute(RunJava<T> runnable, boolean... isWaitFinish) {
                observable.execute(runnable, isWaitFinish);
                return observable;
            }

            public Observable execute(RunJavaV<T> runnable, boolean... isWaitFinish) {
                observable.execute(runnable, isWaitFinish);
                return observable;
            }

            public Observable execute(RunJavaR<T> runnable, boolean... isWaitFinish) {
                observable.execute(runnable, isWaitFinish);
                return observable;
            }

            public Observable execute(RunJavaVR<T> runnable, boolean... isWaitFinish) {
                observable.execute(runnable, isWaitFinish);
                return observable;
            }

            public Observable execute(RunAndroid<T> runnable, boolean... isWaitFinish) {
                observable.execute(runnable, isWaitFinish);
                return observable;
            }

            public Observable execute(RunAndroidV<T> runnable, boolean... isWaitFinish) {
                observable.execute(runnable, isWaitFinish);
                return observable;
            }

            public Observable execute(RunAndroidR<T> runnable, boolean... isWaitFinish) {
                observable.execute(runnable, isWaitFinish);
                return observable;
            }

            public Observable execute(RunAndroidVR<T> runnable, boolean... isWaitFinish) {
                observable.execute(runnable, isWaitFinish);
                return observable;
            }

            //释放资源
            public void close() {
                Observable.close();
            }

        }

        public static abstract class RunJava<T> extends Runnable<T> {
            public abstract void run();
        }

        public static abstract class RunJavaV<T> extends Runnable<T> {
            public abstract void run(T t);
        }

        public static abstract class RunJavaR<T> extends Runnable<T> {
            public abstract T run();
        }

        public static abstract class RunJavaVR<T> extends Runnable<T> {
            public abstract T run(T t);
        }

        public static abstract class RunAndroid<T> extends Runnable<T> {
            public abstract void run();
        }

        public static abstract class RunAndroidV<T> extends Runnable<T> {
            public abstract void run(T t);
        }

        public static abstract class RunAndroidR<T> extends Runnable<T> {
            public abstract T run();
        }

        public static abstract class RunAndroidVR<T> extends Runnable<T> {
            public abstract T run(T t);
        }

        //设置值
        private <T> T returnT() {
            T t = null;
            try {
                t = (T) this.obj;
            } catch (Exception e) {

            }
            return t;
        }

    }

//=============================================== 接口模块 ===================================================

    //多参数接口
    public static interface OnListener<T> extends SaveObject.SaveBean {
        public void onListener(T... obj);  //返回多个参数，或带有首表示的参数
    }

    //单参数接口
    public static class OneListener<T> implements OnListener<T> {
        public void onOneListener(T obj) {

        }

        public Object onOneReturnListener(T obj) {
            return null;
        }

        @Override
        public void onListener(T... obj) {

        }
    }

//=========================================== GT 桶 =========================================

    public static class GTApplication extends Application {

        public static Application application;//全局 Context
        public static Context context;//全局 Context
        public static ExecutorService thread;//普通逻辑 线程池
        public static GT_SharedPreferences sp_app;//sp存储-属于应用级别的sp存储,所有关于应用级别的都用这个存储，关于用户级别的用另一个存储
        public static final GT_Animation animation = new GT_Animation();//动画
        public static int height, width, navigationBarHeight;//屏幕宽高、导航栏高度
        public static boolean isOneInstall = false;//是否第一次安卓
        public static boolean isFrontDesk = true;//是否前台

        public Application getApplication() {
            return application;
        }

        public void setApplication(Application application) {
            GTApplication.application = application;
        }

        public Context getContext() {
            return context;
        }

        public void setContext(Context context) {
            GTApplication.context = context;
        }

        public ExecutorService getThread() {
            return thread;
        }

        public void setThread(ExecutorService thread) {
            GTApplication.thread = thread;
        }

        public GT_SharedPreferences getSpApp() {
            return sp_app;
        }

        public void setSp(GT_SharedPreferences sp_app) {
            GTApplication.sp_app = sp_app;
        }

        public int getHeight() {
            return height;
        }

        public void setHeight(int height) {
            GTApplication.height = height;
        }

        public int getWidth() {
            return width;
        }

        public void setWidth(int width) {
            GTApplication.width = width;
        }

        public boolean isIsOneInstall() {
            return isOneInstall;
        }

        public void setIsOneInstall(boolean isOneInstall) {
            GTApplication.isOneInstall = isOneInstall;
        }

        public boolean isIsFrontDesk() {
            return isFrontDesk;
        }

        public void setIsFrontDesk(boolean isFrontDesk) {
            GTApplication.isFrontDesk = isFrontDesk;
        }

        @Override
        public void onCreate() {
            super.onCreate();
            application = this;
            context = getApplicationContext();//全局 Context
            thread = Thread.getInstance(0);//获取唯一线程池
            sp_app = new GT_SharedPreferences(context, context.getPackageName(), true);//sp存储,属于应用级别的app
            LOG.LOG_TF = ApplicationUtils.isApkInDebug(this);//设置在测试的时候才会打开日志
            if ("0".equals(String.valueOf(sp_app.query("isOneInstall")))) { //判断是否第一次安装
                isOneInstall = true;
                sp_app.save("isOneInstall", 1);//去掉第一次安装的标识
            }

            //监听是否前台
            registerActivityLifecycleCallbacks(new AppLifecycleManager(new OnListener<Boolean>() {
                @Override
                public void onListener(Boolean... obj) {
                    isFrontDesk = obj[0];
                    onFrontDesk(isFrontDesk);
                }
            }));

            init(context);
            loadData(context);
        }

        public void init(Context context) {

        }

        public void loadData(Context context) {

        }

        //是否前台
        public void onFrontDesk(boolean isFrontDesk) {

        }

        //监听 前后台


    }

    public static class AppLifecycleManager implements Application.ActivityLifecycleCallbacks {

        private OnListener<Boolean> onFrontDesk;

        public AppLifecycleManager(OnListener<Boolean> onFrontDesk) {
            this.onFrontDesk = onFrontDesk;
        }

        @Override
        public void onActivityCreated(Activity activity, Bundle savedInstanceState) {
        }

        @Override
        public void onActivityStarted(Activity activity) {
        }

        @Override
        public void onActivityResumed(Activity activity) {
            onFrontDesk.onListener(true);
        }

        @Override
        public void onActivityPaused(Activity activity) {
        }

        @Override
        public void onActivityStopped(Activity activity) {
            onFrontDesk.onListener(false);
        }

        @Override
        public void onActivitySaveInstanceState(Activity activity, Bundle outState) {
        }

        @Override
        public void onActivityDestroyed(Activity activity) {
        }

    }

    public static class GTActivity extends AppCompatActivity {

        //所有请求码
        public static final int CODE_PHOTO = 1; //从相册图片
        public static final int CODE_PHOTOGRAPH = 2; //拍摄照片
        public static final int CODE_VIDEO = 3; //从相册视频
        public static final int CODE_SHOOT_VIDEO = 4; //拍摄视频
        public static final int CODE_FILE = 5; //文件
        private static int CODE = 0; //默认请求码

        private String feedBack;
        private int videoDuration;

        private Uri imageUri;

        /**
         * 跳转页面
         *
         * @param context
         * @param type               跳转页面功能的 类型
         * @param returnFunctionName 接收数据的方法名称
         * @param classz             返回数据类型
         */
        public static void startActivity(Context context, int type, String returnFunctionName) {
            Intent intent = new Intent(context, GTActivity.class);
            intent.putExtra("type", type);
            intent.putExtra("feedBack", returnFunctionName);
            context.startActivity(intent);
        }

        @Override
        protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
//            setContentView(R.layout.activity_gt);
            Intent intent = getIntent();
            if (intent == null) return;
            CODE = intent.getIntExtra("type", 0);
            feedBack = intent.getStringExtra("feedBack");
            videoDuration = intent.getIntExtra("videoDuration", 10);//默认10秒
            if (feedBack == null) {
                feedBack = "onActivityResult";
            }

            switch (CODE) {
                case CODE_PHOTO://相册
                    getPermissionCamera();
                    Intent openAlbumIntent = new Intent(Intent.ACTION_PICK); //打开相册
                    openAlbumIntent.setType("image/*");     //选择全部照片
                    startActivityForResult(openAlbumIntent, CODE); //发送请求
                    break;
                case CODE_PHOTOGRAPH://拍照
                    getPermissionCamera();
                    Intent intentPhoto = new Intent(Intent.ACTION_PICK);
                    intentPhoto.setDataAndType(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, "image/*");
                    intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                    startActivityForResult(intent, CODE);
                    break;
                case CODE_VIDEO://视频
                    getPermissionCamera();
                    Intent openVideoIntent = new Intent(Intent.ACTION_PICK); //打开相册
                    openVideoIntent.setType("video/*");     //选择全部视频
                    startActivityForResult(openVideoIntent, CODE); //发送请求
                    break;
                case CODE_SHOOT_VIDEO://拍摄视频
                    getPermissionCamera();
                    Intent intentVideo = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);
                    intentVideo.putExtra(MediaStore.EXTRA_VIDEO_QUALITY, 1);
                    intentVideo.putExtra(MediaStore.EXTRA_DURATION_LIMIT, videoDuration);//限制时长
                    startActivityForResult(intentVideo, CODE);//开启摄像机
                    break;
                case CODE_FILE://文件
                    getPermissionCamera();
                    Intent intentFile = new Intent(Intent.ACTION_GET_CONTENT);
                    intentFile.setType("*/*");//选择全部文件
                    startActivityForResult(intentFile, CODE);//开启系统文件选着
                    break;
                default:
                    EventBus.posts(new Intent(), feedBack);
                    EventBus.posts(Uri.parse(""), feedBack);
                    EventBus.posts(Bitmap.createBitmap(1, 1, Bitmap.Config.ALPHA_8), feedBack);
                    finish();
                    break;
            }


        }


        //权限检查
        private void getPermissionCamera() {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                if (ContextCompat.checkSelfPermission(GTActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
                    ActivityCompat.requestPermissions(GTActivity.this, new String[]{Manifest.permission.CAMERA}, 1001);
                }
            }
        }


        /**
         * 处理打开相册请求
         *
         * @param requestCode
         * @param resultCode
         * @param data
         */
        @Override
        protected void onActivityResult(int requestCode, int resultCode, Intent intent) {
            super.onActivityResult(requestCode, resultCode, intent);
            if (intent == null) intent = new Intent();

            Bitmap bitmap = null;
            Uri uri = intent.getData();
            switch (CODE) {
                case CODE_PHOTO://相册
                    if (uri != null) {
                        try {
                            bitmap = ImageViewTools.uriToBitmap(this, uri);
                            if (bitmap != null) uri = ImageViewTools.bitmapToUri(this, bitmap);
                        } catch (Exception e) {

                        }
                    }
                    break;
                case CODE_PHOTOGRAPH://拍照
                    Object obj = intent.getExtras().get("data");
                    if (obj != null && obj instanceof Bitmap) {
                        bitmap = (Bitmap) obj;
                        try {
                            uri = ImageViewTools.bitmapToUri(this, bitmap);
                        } catch (Exception e) {

                        }
                    }
                    break;
                case CODE_VIDEO://视频
                    uri = intent.getData();
                    break;
                case CODE_SHOOT_VIDEO://摄视频
                    uri = intent.getData();
                    break;
                case CODE_FILE://其他文件
                    uri = intent.getData();
                    break;
                default:
                    logt("非法参数！");
                    finish();
                    break;
            }


            //逻辑分别处理
            switch (CODE) {
                case CODE_PHOTO://相册
                case CODE_PHOTOGRAPH://拍照
                case CODE_VIDEO://视频
                case CODE_SHOOT_VIDEO://拍摄视频
                case CODE_FILE://其他文件
                    //初始化必要参数
                    if (uri == null) {
                        uri = Uri.parse("");
                    }
                    if (bitmap == null) {
                        bitmap = Bitmap.createBitmap(1, 1, Bitmap.Config.ALPHA_8);
                    }

                    intent.putExtra("requestCode", requestCode);
                    intent.putExtra("resultCode", resultCode);

                    //目前支持的返回类型
                    EventBus.posts(intent, feedBack);
                    EventBus.posts(uri, feedBack);
                    EventBus.posts(bitmap, feedBack);

                    //返回 H5 相片资源
                    GT_WebView.BaseWebView.initShowFileChoosers(uri, this);

                    //清空本次选着
                    GT_WebView.FileView.photoName = "";
                    GT_WebView.FileView.photographName = "";
                    GT_WebView.FileView.videoName = "";
                    GT_WebView.FileView.shootVideoName = "";
                    GT_WebView.FileView.fileName = "";
                    GT_WebView.FileView.cancelName = "";
                    break;
                default:
                    logt("非法参数！");
                    break;
            }


            finish();
        }


    }

    //=============================================== 黑科技 ===================================================

    /**
     * 黑魔法类
     */
    public static class DarknessMagic {

        //无障碍服务
        public abstract static class AccessibilityServiceBase extends AccessibilityService {

            /**
             * 无障碍服务须知：
             * <p>
             * 第一步：
             * <p>
             * 注意:需要在xml 目录中创建 accessible_service_describe.xml
             * 内容如下：
             * <p>
             * <p>
             * <?xml version="1.0" encoding="utf-8"?>
             * <accessibility-service xmlns:android="http://schemas.android.com/apk/res/android"
             * xmlns:tools="http://schemas.android.com/tools"
             * android:accessibilityEventTypes="typeAllMask"
             * android:accessibilityFeedbackType="feedbackGeneric"
             * android:accessibilityFlags="flagReportViewIds|flagRetrieveInteractiveWindows"
             * android:canPerformGestures="true"
             * android:canRetrieveWindowContent="true"
             * android:description="@string/AccessibleServiceDescribe"
             * android:notificationTimeout="100"
             * tools:ignore="UnusedAttribute" />
             * <p>
             * <!--
             * android:description ：辅助功能描述，描述该辅助功能用来干嘛的
             * android:packageNames ：指定辅助功能监听的包名，不指定表示监听所有应用
             * android:accessibilityEventTypes：辅助功能处理事件类型，一般配置为 typeAllMask 表示接收所有事件
             * android:accessibilityFlags：辅助功能查找截点方式，一般配置为 flagDefault 默认方式。
             * android:accessibilityFeedbackType：操作相应按钮以后辅助功能给用户的反馈类型，包括声音，震动等。
             * android:notificationTimeout：相应时间设置
             * android:canRetrieveWindowContent：是否允许辅助功能获得窗口的节点信息，为了能正常实用辅助功能，请务必保持该项配置为true
             * <p>
             * android:packageNames="com.tencent.mm,com.android.systemui"
             * <p>
             * -->
             * <p>
             * <p>
             * 第二步：在 AndroidManifest.xml 文件中注册该服务
             * <p>
             * <application
             * ...
             * <p>
             * <!-- 无障碍服务 -->
             * <service
             * android:name="创建的无障碍服务类"
             * android:enabled="true"
             * android:exported="true"
             * android:permission="android.permission.BIND_ACCESSIBILITY_SERVICE">
             * <intent-filter>
             * <action android:name="android.accessibilityservice.AccessibilityService" />
             * </intent-filter>
             * <meta-data
             * android:name="android.accessibilityservice"
             * android:resource="@xml/accessible_service_describe" />
             * </service>
             * <p>
             * ...
             * />
             * <p>
             * <p>
             * 第三步：申请无障碍服务并开启
             * <p>
             * //申请无障碍服务
             * if (!DemoService.isStart()) {
             * try {
             * this.startActivity(new Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS));
             * } catch (Exception e) {
             * this.startActivity(new Intent(Settings.ACTION_SETTINGS));
             * e.printStackTrace();
             * }
             * }
             */

            public static AccessibilityServiceBase mService;
            public static String RUN_ACTIVITY = "";//运行动作
            public static boolean TF_LOG = false;//是否打开日
            public static boolean RUN_STATE = false;//运行状态// 志

            //初始化
            @Override
            protected void onServiceConnected() {
                super.onServiceConnected();
                if (TF_LOG)
                    GT.log("无障碍服务——连接中");
                mService = this;
                RUN_STATE = true;
                GT.EventBus.registers(this);

            }

            /**
             * 初始化View,会不停的循环此方法
             *
             * @param action
             * @param packageName
             * @param rootInfo
             * @param event
             */
            protected abstract void initView(int action, String packageName, AccessibilityNodeInfo rootInfo, AccessibilityEvent event);

            /**
             * 业务逻辑,当有正确的动作后才会相应此方法
             *
             * @param action
             * @param packageName
             * @param rootInfo
             * @param event
             * @param run_Activity 接受到信息后请立刻清空消息
             */
            protected void loadData(int action, String packageName, AccessibilityNodeInfo rootInfo, AccessibilityEvent event, String run_Activity) {

            }

            //实现辅助功能
            @Override
            public void onAccessibilityEvent(AccessibilityEvent event) {
                if (TF_LOG)
                    GT.log("无障碍服务——监听中");

                AccessibilityNodeInfo rootInfo = getRootInActiveWindow();
                if (event == null || rootInfo == null || !RUN_STATE) return;

                if (TF_LOG) {
                    GT.log(event.getAction());
                    GT.log(event.getPackageName());
                    GT.log(rootInfo);
                }

                int action = event.getAction();
                CharSequence packageNameCS = event.getPackageName();
                if (packageNameCS == null) return;

                String packageName = String.valueOf(packageNameCS);

                initView(action, packageName, rootInfo, event);

                if (RUN_ACTIVITY == null || RUN_ACTIVITY.length() == 0)
                    loadData(event.getAction(), packageName, rootInfo, event, RUN_ACTIVITY);

            }

            @Override
            public void onInterrupt() {
                if (TF_LOG)
                    GT.log("无障碍服务——停止中");
                mService = null;
                RUN_STATE = false;
            }

            @Override
            public void onDestroy() {
                super.onDestroy();
                if (TF_LOG) {
                    GT.log("无障碍服务——已关闭");
                }
                mService = null;
                RUN_STATE = false;
                GT.EventBus.unregisters(this);
            }

            /**
             * 辅助功能是否启动
             */
            public static boolean isStart() {
                return mService != null;
            }

            public static void finish() {
                RUN_STATE = false;
            }

            public static void start() {
                RUN_STATE = true;
            }


            //仿滑动- 从左往右滑动
            protected void MyGesture() {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
                    Path path = new Path();
                    path.moveTo(1000, 1000);//滑动起点
                    path.lineTo(2000, 1000);//滑动终点
                    GestureDescription.Builder builder = new GestureDescription.Builder();
                    GestureDescription description = builder.addStroke(new GestureDescription.StrokeDescription(path, 100L, 100L)).build();
                    //100L 第一个是开始的时间，第二个是持续时间
                    dispatchGesture(description, new AccessibilityServiceUtils.MyCallBack(), null);
                }
            }

            /**
             * 万能滑动
             *
             * @param x   X轴滑动起点
             * @param tox X轴滑动重终点
             * @param y   y轴滑动起点
             * @param toy y轴滑动重终点
             */
            protected void slidingUniversal(float x, float tox, float y, float toy) {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
                    Path path = new Path();
                    path.moveTo(x, y);//滑动起点
                    path.lineTo(tox, toy);//滑动终点
                    GestureDescription.Builder builder = new GestureDescription.Builder();
                    GestureDescription description = builder.addStroke(new GestureDescription.StrokeDescription(path, 100L, 100L)).build();
                    //100L 第一个是开始的时间，第二个是持续时间
                    dispatchGesture(description, new AccessibilityServiceUtils.MyCallBack(), null);
                }
            }


            //从左滑动
            protected void slideLeft() {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
                    Path path = new Path();
                    path.moveTo(1000, 500);//滑动起点
                    path.lineTo(500, 500);//滑动终点
                    GestureDescription.Builder builder = new GestureDescription.Builder();
                    GestureDescription description = builder.addStroke(new GestureDescription.StrokeDescription(path, 100L, 100L)).build();
                    //100L 第一个是开始的时间，第二个是持续时间
                    dispatchGesture(description, new AccessibilityServiceUtils.MyCallBack(), null);
                }
            }

            //向右滑动
            protected void slideRight() {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
                    Path path = new Path();
                    path.moveTo(500, 500);//滑动起点
                    path.lineTo(1000, 500);//滑动终点
                    GestureDescription.Builder builder = new GestureDescription.Builder();
                    GestureDescription description = builder.addStroke(new GestureDescription.StrokeDescription(path, 100L, 100L)).build();
                    //100L 第一个是开始的时间，第二个是持续时间
                    dispatchGesture(description, new AccessibilityServiceUtils.MyCallBack(), null);
                }
            }

            //向上滑动
            protected void slideUp() {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
                    Path path = new Path();
                    path.moveTo(500, 1300);//滑动起点
                    path.lineTo(500, 300);//滑动终点
                    GestureDescription.Builder builder = new GestureDescription.Builder();
                    GestureDescription description = builder.addStroke(new GestureDescription.StrokeDescription(path, 100L, 100L)).build();
                    //100L 第一个是开始的时间，第二个是持续时间
                    dispatchGesture(description, new AccessibilityServiceUtils.MyCallBack(), null);
                }
            }

            //向下滑动
            protected void slideDown() {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
                    Path path = new Path();
                    path.moveTo(500, 300);//滑动起点
                    path.lineTo(500, 1300);//滑动终点
                    GestureDescription.Builder builder = new GestureDescription.Builder();
                    GestureDescription description = builder.addStroke(new GestureDescription.StrokeDescription(path, 100L, 100L)).build();
                    //100L 第一个是开始的时间，第二个是持续时间
                    dispatchGesture(description, new AccessibilityServiceUtils.MyCallBack(), null);
                }
            }


            /**
             * 立即发送移动的手势
             * 注意7.0以上的手机才有此方法，请确保运行在7.0手机上
             *
             * @param path  移动路径
             * @param mills 持续总时间
             */
            @RequiresApi(24)
            protected void dispatchGestureMove(Path path, long mills) {
                dispatchGesture(new GestureDescription.Builder().addStroke(new GestureDescription.StrokeDescription
                        (path, 0, mills)).build(), null, null);
            }

            /**
             * 点击指定位置
             * 注意7.0以上的手机才有此方法，请确保运行在7.0手机上
             */
            @RequiresApi(24)
            protected void dispatchGestureClick(int x, int y) {
                Path path = new Path();
                path.moveTo(x - 1, y - 1);
                path.lineTo(x + 1, y + 1);
                dispatchGesture(new GestureDescription.Builder().addStroke(new GestureDescription.StrokeDescription
                        (path, 0, 100)).build(), null, null);
            }

            /**
             * 长按指定位置
             * 注意7.0以上的手机才有此方法，请确保运行在7.0手机上
             */
            @RequiresApi(24)
            protected void dispatchGestureLongClick(int x, int y) {
                Path path = new Path();
                path.moveTo(x - 1, y - 1);
                path.lineTo(x, y - 1);
                path.lineTo(x, y);
                path.lineTo(x - 1, y);
                dispatchGesture(new GestureDescription.Builder().addStroke(new GestureDescription.StrokeDescription
                        (path, 0, 1000)).build(), null, null);
            }


            /*  int childCount = rootInfo.getChildCount();
        GT.log("childCount:" + childCount);

        for (int a = 0; a < childCount; a++) {
            AccessibilityNodeInfo child = rootInfo.getChild(a);
            GT.log("child[" + a + "]：" + child);
            if (child == null) continue;

            int childCount1 = child.getChildCount();
            GT.log("childCount1:" + childCount1);

            for (int b = 0; b < childCount1; b++) {
                AccessibilityNodeInfo child1 = child.getChild(b);
                GT.log("child1[" + b + "]：" + child1);
                if (child1 == null) continue;

                if (child1.toString().contains("使用 WLAN")) {
                    GT.log("进入点击 WLAN 流程");
                    RUN_ACTIVITY = "";
                    RUN_STATE = true;
                    clickView(child1);//单击WIFI开关
                    RUN_STATE = false;
                }

                int childCount2 = child1.getChildCount();
                GT.log("childCount2:" + childCount2);

                for (int c = 0; c < childCount2; c++) {
                    AccessibilityNodeInfo child2 = child1.getChild(c);
                    GT.log("child2[" + b + "]：" + child2);
                    if (child2 == null) continue;


                    child2.recycle();
                }


                child1.recycle();//回收资源
                child1 = null;
            }


            child.recycle();//回收资源
            child = null;
        }

        rootInfo.recycle();
        rootInfo = null;


        switch (RUN_ACTIVITY) {
            case "打开WIFI":
                RUN_ACTIVITY = "";//清空动作


                break;

            default:
                MyGesture();//滑动屏幕
                break;
        }*/


        }

        //无障碍服务 工具类
        public abstract static class AccessibilityServiceUtils<T> {

            /**
             * 是包含还必须相等;
             */
            protected final boolean mIsEquals;
            protected final T mCheckData;

            public AccessibilityServiceUtils(@NonNull T checkData, boolean isEquals) {
                mCheckData = checkData;
                mIsEquals = isEquals;
            }

            public abstract boolean checkOk(AccessibilityNodeInfo thisInfo);

            /**
             * 找id，就是findAccessibilityNodeInfosByViewId方法
             * 和找text一样效率最高，如果能找到，尽量使用这个
             */
            public static class IdTF extends AccessibilityServiceUtils<String> implements IdTextTF {
                public IdTF(@NonNull String idFullName) {
                    super(idFullName, true);
                }

                @Override
                public boolean checkOk(AccessibilityNodeInfo thisInfo) {
                    return true;//此处不需要实现
                }

                @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)

                @Override
                public AccessibilityNodeInfo findFirst(AccessibilityNodeInfo root) {
                    List<AccessibilityNodeInfo> list = root.findAccessibilityNodeInfosByViewId(mCheckData);
                    if (isEmptyArray(list)) {
                        return null;
                    }
                    for (int i = 1; i < list.size(); i++) {//其他的均回收
                        list.get(i).recycle();
                    }
                    return list.get(0);
                }

                @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)

                @Override
                public List<AccessibilityNodeInfo> findAll(AccessibilityNodeInfo root) {
                    return root.findAccessibilityNodeInfosByViewId(mCheckData);
                }
            }

            /**
             * 普通text，就是findAccessibilityNodeInfosByText方法
             * 和找id一样效率最高，如果能找到，尽量使用这个
             */
            public static class TextTF extends AccessibilityServiceUtils<String> implements IdTextTF {
                public TextTF(@NonNull String text, boolean isEquals) {
                    super(text, isEquals);
                }

                @Override
                public boolean checkOk(AccessibilityNodeInfo thisInfo) {
                    return true;//此处不需要实现
                }


                @Override
                public AccessibilityNodeInfo findFirst(AccessibilityNodeInfo root) {
                    List<AccessibilityNodeInfo> list = root.findAccessibilityNodeInfosByText(mCheckData);
                    if (isEmptyArray(list)) {
                        return null;
                    }
                    if (mIsEquals) {
                        AccessibilityNodeInfo returnInfo = null;
                        for (AccessibilityNodeInfo info : list) {
                            if (returnInfo == null && info.getText() != null && mCheckData.equals(info.getText().toString())) {
                                returnInfo = info;
                            } else {
                                info.recycle();
                            }
                        }
                        return returnInfo;
                    } else {
                        return list.get(0);
                    }
                }


                @Override
                public List<AccessibilityNodeInfo> findAll(AccessibilityNodeInfo root) {
                    List<AccessibilityNodeInfo> list = root.findAccessibilityNodeInfosByText(mCheckData);
                    if (isEmptyArray(list)) {
                        return null;
                    }
                    if (mIsEquals) {
                        ArrayList<AccessibilityNodeInfo> listNew = new ArrayList<>();
                        for (AccessibilityNodeInfo info : list) {
                            if (info.getText() != null && mCheckData.equals(info.getText().toString())) {
                                listNew.add(info);
                            } else {
                                info.recycle();
                            }
                        }
                        return listNew;
                    } else {
                        return list;
                    }
                }
            }

            /**
             * 类似uc浏览器，有text值但无法直接根据text来找到
             */
            public static class WebTextTF extends AccessibilityServiceUtils<String> {
                public WebTextTF(@NonNull String checkString, boolean isEquals) {
                    super(checkString, isEquals);
                }

                @Override
                public boolean checkOk(AccessibilityNodeInfo thisInfo) {
                    CharSequence text = thisInfo.getText();
                    if (mIsEquals) {
                        return text != null && text.toString().equals(mCheckData);
                    } else {
                        return text != null && text.toString().contains(mCheckData);
                    }
                }
            }

            /**
             * 找ContentDescription字段
             */
            public static class ContentDescriptionTF extends AccessibilityServiceUtils<String> {
                public ContentDescriptionTF(@NonNull String checkString, boolean isEquals) {
                    super(checkString, isEquals);
                }

                @Override
                public boolean checkOk(AccessibilityNodeInfo thisInfo) {
                    CharSequence text = thisInfo.getContentDescription();
                    if (mIsEquals) {
                        return text != null && text.toString().equals(mCheckData);
                    } else {
                        return text != null && text.toString().contains(mCheckData);
                    }
                }
            }

            /**
             * 找ClassName匹配
             */
            public static class ClassNameTF extends AccessibilityServiceUtils<String> {
                public ClassNameTF(@NonNull String checkString, boolean isEquals) {
                    super(checkString, isEquals);
                }

                @Override
                public boolean checkOk(AccessibilityNodeInfo thisInfo) {
                    if (mIsEquals) {
                        return thisInfo.getClassName().toString().equals(mCheckData);
                    } else {
                        return thisInfo.getClassName().toString().contains(mCheckData);
                    }
                }
            }

            /**
             * 在某个区域内的控件
             */
            public static class RectTF extends AccessibilityServiceUtils<Rect> {
                public RectTF(@NonNull Rect rect) {
                    super(rect, true);
                }

                @Override
                public boolean checkOk(AccessibilityNodeInfo thisInfo) {
                    thisInfo.getBoundsInScreen(mRecycleRect);
                    return mCheckData.contains(mRecycleRect);
                }
            }

            public interface IdTextTF {

                AccessibilityNodeInfo findFirst(AccessibilityNodeInfo root);


                List<AccessibilityNodeInfo> findAll(AccessibilityNodeInfo root);
            }

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // 创建方法
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            public static Rect mRecycleRect = new Rect();

            public static final String ST_VIEW = "android.view.View",
                    ST_TEXTVIEW = "android.widget.TextView",
                    ST_IMAGEVIEW = "android.widget.ImageView",
                    ST_BUTTON = "android.widget.Button",
                    ST_IMAGEBUTTON = "android.widget.ImageButton",
                    ST_EDITTEXT = "android.widget.EditText",
                    ST_LISTVIEW = "android.widget.ListView",
                    ST_LINEARLAYOUT = "android.widget.LinearLayout",
                    ST_VIEWGROUP = "android.view.ViewGroup",
                    ST_SYSTEMUI = "com.android.systemui";

            /**
             * 找id，就是findAccessibilityNodeInfosByViewId方法
             * 和找text一样效率最高，如果能找到，尽量使用这个
             *
             * @param pageName 被查找项目的包名:com.android.xxx
             * @param idName   id值:tv_main
             */
            public static AccessibilityServiceUtils newId(String pageName, String idName) {
                return newId(pageName + ":id/" + idName);
            }

            /**
             * @param idfullName id全称:com.android.xxx:id/tv_main
             */
            public static AccessibilityServiceUtils newId(@NonNull String idfullName) {
                return new IdTF(idfullName);
            }

            /**
             * 普通text，就是findAccessibilityNodeInfosByText方法
             * 和找id一样效率最高，如果能找到，尽量使用这个
             */
            public static AccessibilityServiceUtils newText(@NonNull String text, boolean isEquals) {
                return new TextTF(text, isEquals);
            }

            /**
             * 类似uc浏览器，有text值但无法直接根据text来找到
             */
            public static AccessibilityServiceUtils newWebText(@NonNull String webText, boolean isEquals) {
                return new WebTextTF(webText, isEquals);
            }

            /**
             * 找ContentDescription字段
             */
            public static AccessibilityServiceUtils newContentDescription(@NonNull String cd, boolean isEquals) {
                return new ContentDescriptionTF(cd, isEquals);
            }

            /**
             * 找ClassName匹配
             */
            public static AccessibilityServiceUtils newClassName(@NonNull String className) {
                return new ClassNameTF(className, true);
            }

            public static AccessibilityServiceUtils newClassName(@NonNull String className, boolean isEquals) {
                return new ClassNameTF(className, isEquals);
            }

            /**
             * 在某个区域内的控件
             */
            public static AccessibilityServiceUtils newRect(@NonNull Rect rect) {
                return new RectTF(rect);
            }


            //模拟手势的监听
            @SuppressLint("NewApi")
            public static class MyCallBack extends AccessibilityService.GestureResultCallback {

                @Override
                public void onCompleted(GestureDescription gestureDescription) {
                    super.onCompleted(gestureDescription);

                }

                @Override
                public void onCancelled(GestureDescription gestureDescription) {
                    super.onCancelled(gestureDescription);

                }
            }


            /**
             * 点击该控件
             *
             * @return true表示点击成功
             */
            public static boolean clickView(AccessibilityNodeInfo nodeInfo) {
                if (nodeInfo != null) {
                    if (nodeInfo.isClickable()) {
                        nodeInfo.performAction(AccessibilityNodeInfo.ACTION_CLICK);
                        return true;
                    } else {
                        AccessibilityNodeInfo parent = nodeInfo.getParent();
                        if (parent != null) {
                            boolean b = clickView(parent);
                            parent.recycle();
                            if (b) return true;
                        }
                    }
                }
                return false;
            }

            /**
             * 查找第一个匹配的控件
             *
             * @param tfs 匹配条件，多个AbstractTF是&&的关系，如：
             *            AbstractTF.newContentDescription("表情", true),AbstractTF.newClassName(AbstractTF.ST_IMAGEVIEW)
             *            表示描述内容是'表情'并且是imageview的控件
             */

            public AccessibilityNodeInfo findFirst(AccessibilityServiceUtils[] tfs, AccessibilityNodeInfo rootInfo) {
                if (tfs.length == 0) throw new InvalidParameterException("AbstractTF不允许传空");

                if (rootInfo == null) return null;

                int idTextTFCount = 0, idTextIndex = 0;
                for (int i = 0; i < tfs.length; i++) {
                    if (tfs[i] instanceof AccessibilityServiceUtils.IdTextTF) {
                        idTextTFCount++;
                        idTextIndex = i;
                    }
                }
                switch (idTextTFCount) {
                    case 0://id或text数量为0，直接循环查找
                        AccessibilityNodeInfo returnInfo = findFirstRecursive(rootInfo, tfs);
                        rootInfo.recycle();
                        return returnInfo;
                    case 1://id或text数量为1，先查出对应的id或text，然后再查其他条件
                        if (tfs.length == 1) {
                            AccessibilityNodeInfo returnInfo2 = ((IdTextTF) tfs[idTextIndex]).findFirst(rootInfo);
                            rootInfo.recycle();
                            return returnInfo2;
                        } else {
                            List<AccessibilityNodeInfo> listIdText = ((IdTextTF) tfs[idTextIndex]).findAll(rootInfo);
                            if (isEmptyArray(listIdText)) {
                                break;
                            }
                            AccessibilityNodeInfo returnInfo3 = null;
                            for (AccessibilityNodeInfo info : listIdText) {//遍历找到匹配的
                                if (returnInfo3 == null) {
                                    boolean isOk = true;
                                    for (AccessibilityServiceUtils tf : tfs) {
                                        if (!tf.checkOk(info)) {
                                            isOk = false;
                                            break;
                                        }
                                    }
                                    if (isOk) {
                                        returnInfo3 = info;
                                    } else {
                                        info.recycle();
                                    }
                                } else {
                                    info.recycle();
                                }
                            }
                            rootInfo.recycle();
                            return returnInfo3;
                        }
                    default:
                        throw new RuntimeException("由于时间有限，并且多了也没什么用，所以IdTF和TextTF只能有一个");
                }
                rootInfo.recycle();
                return null;
            }

            /**
             * @param tfs 由于是递归循环，会忽略IdTF和TextTF
             */
            public static AccessibilityNodeInfo findFirstRecursive(AccessibilityNodeInfo parent, @NonNull AccessibilityServiceUtils... tfs) {
                if (parent == null) return null;
                if (tfs.length == 0) throw new InvalidParameterException("AbstractTF不允许传空");

                for (int i = 0; i < parent.getChildCount(); i++) {
                    AccessibilityNodeInfo child = parent.getChild(i);
                    if (child == null) continue;
                    boolean isOk = true;
                    for (AccessibilityServiceUtils tf : tfs) {
                        if (!tf.checkOk(child)) {
                            isOk = false;
                            break;
                        }
                    }
                    if (isOk) {
                        return child;
                    } else {
                        AccessibilityNodeInfo childChild = findFirstRecursive(child, tfs);
                        child.recycle();
                        if (childChild != null) {
                            return childChild;
                        }
                    }
                }
                return null;
            }

            /**
             * 查找全部匹配的控件
             *
             * @param tfs 匹配条件，多个AbstractTF是&&的关系，如：
             *            AbstractTF.newContentDescription("表情", true),AbstractTF.newClassName(AbstractTF.ST_IMAGEVIEW)
             *            表示描述内容是'表情'并且是imageview的控件
             */
            @NonNull
            public List<AccessibilityNodeInfo> findAll(AccessibilityServiceUtils[] tfs, AccessibilityNodeInfo rootInfo) {
                if (tfs.length == 0) throw new InvalidParameterException("AbstractTF不允许传空");

                ArrayList<AccessibilityNodeInfo> list = new ArrayList<>();
                if (rootInfo == null) return list;

                int idTextTFCount = 0, idTextIndex = 0;
                for (int i = 0; i < tfs.length; i++) {
                    if (tfs[i] instanceof AccessibilityServiceUtils.IdTextTF) {
                        idTextTFCount++;
                        idTextIndex = i;
                    }
                }
                switch (idTextTFCount) {
                    case 0://id或text数量为0，直接循环查找
                        findAllRecursive(list, rootInfo, tfs);
                        break;
                    case 1://id或text数量为1，先查出对应的id或text，然后再循环
                        List<AccessibilityNodeInfo> listIdText = ((IdTextTF) tfs[idTextIndex]).findAll(rootInfo);
                        if (isEmptyArray(listIdText)) {
                            break;
                        }
                        if (tfs.length == 1) {
                            list.addAll(listIdText);
                        } else {
                            for (AccessibilityNodeInfo info : listIdText) {
                                boolean isOk = true;
                                for (AccessibilityServiceUtils tf : tfs) {
                                    if (!tf.checkOk(info)) {
                                        isOk = false;
                                        break;
                                    }
                                }
                                if (isOk) {
                                    list.add(info);
                                } else {
                                    info.recycle();
                                }
                            }
                        }
                        break;
                    default:
                        throw new RuntimeException("由于时间有限，并且多了也没什么用，所以IdTF和TextTF只能有一个");
                }
                rootInfo.recycle();
                return list;
            }

            /**
             * @param tfs 由于是递归循环，会忽略IdTF和TextTF
             */
            public static void findAllRecursive(List<AccessibilityNodeInfo> list, AccessibilityNodeInfo parent, @NonNull AccessibilityServiceUtils... tfs) {
                if (parent == null || list == null) return;
                if (tfs.length == 0) throw new InvalidParameterException("AbstractTF不允许传空");

                for (int i = 0; i < parent.getChildCount(); i++) {
                    AccessibilityNodeInfo child = parent.getChild(i);
                    if (child == null) continue;
                    boolean isOk = true;
                    for (AccessibilityServiceUtils tf : tfs) {
                        if (!tf.checkOk(child)) {
                            isOk = false;
                            break;
                        }
                    }
                    if (isOk) {
                        list.add(child);
                    } else {
                        findAllRecursive(list, child, tfs);
                        child.recycle();
                    }
                }
            }


            /**
             * 由于太多,最好回收这些AccessibilityNodeInfo
             */
            public static void recycleAccessibilityNodeInfo(List<AccessibilityNodeInfo> listInfo) {
                if (isEmptyArray(listInfo)) return;

                for (AccessibilityNodeInfo info : listInfo) {
                    info.recycle();
                }
            }

            //集合是否是空的
            public static boolean isEmptyArray(Collection list) {
                return list == null || list.size() == 0;
            }

            public static <T> boolean isEmptyArray(T[] list) {
                return list == null || list.length == 0;
            }


        }

        /**
         * 点击屏幕 可根据 屏幕的比例 与 具体的 X,Y 坐标点击
         */
        public static class AutoTouch {
            private static int width = 0;
            private static int height = 0;

            /**
             * 传入在屏幕中的比例位置，坐标左上角为基准
             *
             * @param act    传入Activity对象
             * @param ratioX 需要点击的x坐标在屏幕中的比例位置  0.4375~1
             * @param ratioY 需要点击的y坐标在屏幕中的比例位置  0.537~1
             */
            public static void autoClickRatio(Activity act, final double ratioX, final double ratioY, int... times) {
                width = act.getWindowManager().getDefaultDisplay().getWidth();
                height = act.getWindowManager().getDefaultDisplay().getHeight();
                Thread.getInstance(0).execute(new Runnable() {
                    @Override
                    public void run() {
                        // 线程睡眠0.3s
                        if (times.length != 0) {
                            Thread.sleep(times[0]);
                        } else {
                            Thread.sleep(300);
                        }
                        // 生成点击坐标
                        int x = (int) (width * ratioX);
                        int y = (int) (height * ratioY);
                        // 利用ProcessBuilder执行shell命令
                        String[] order = {"input", "tap", "" + x, "" + y};
                        try {
                            new ProcessBuilder(order).start();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                });
            }

            /**
             * 传入在屏幕中的坐标，坐标左上角为基准
             *
             * @param act 传入Activity对象
             * @param x   需要点击的x坐标
             * @param y   需要点击的x坐标
             */
            public static void autoClickPos(Activity act, final double ratioX, final double ratioY) {
                // 利用ProcessBuilder执行shell命令
                String[] order = {"input", "tap", "" + ratioX, "" + ratioY};
                try {
                    new ProcessBuilder(order).start();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

        }

        //指纹验证,完全自定义对话框,怎么使用的可参考 FingerprintDialogFragment 对话框的使用
        public static class FingerprintUtils {

            private static FingerprintUtils fingerprintUtils;

            public static FingerprintUtils getInstance() {
                if (fingerprintUtils == null) {
                    synchronized (FingerprintUtils.class) {
                        if (fingerprintUtils == null) {
                            fingerprintUtils = new FingerprintUtils();
                        }
                    }
                }
                return fingerprintUtils;
            }

            public final static String KEY_NAME = "keyName";
            public final static String KEY_STORE = "AndroidKeyStore";
            public final static int TYPE_0 = 0;//正常可以 指纹功能
            public final static int TYPE_1 = 1;//您的手机不支持指纹功能
            public final static int TYPE_2 = 2;//您还未设置锁屏，请先设置锁屏并添加一个指纹
            public final static int TYPE_3 = 3;//您至少需要在系统设置中添加一个指纹
            public final static int TYPE_cancel = 4;//用户手动取消了
            public final static int TYPE_SUCCESS = 5;//指纹认证成功
            public final static int TYPE_ERROR = 6;//指纹认证失败，请再试一次
            public final static int TYPE_ERROR2 = 7;//尝试次数过多，请稍后重试。
            private CancellationSignal mCancellationSignal;
            private boolean isSelfCancelled;//标识是否是用户主动取消的认证。
            private OnListener<Integer> onListener;
            private Cipher cipher;
            private FingerprintManager fingerprintManager;


            public FingerprintUtils init(Context context, OnListener<Integer> onListener) {
                if (context == null || onListener == null) return this;
                int type = supportFingerprint(context);
                if (type != TYPE_0) {
                    onListener.onListener(type);
                    return this;
                }
                this.onListener = onListener;
                KeyStore keyStore = initKey();
                cipher = initCipher(keyStore);
                fingerprintManager = context.getSystemService(FingerprintManager.class);
                return this;
            }

            private int supportFingerprint(Context context) {
                if (context == null) return TYPE_1;
                KeyguardManager keyguardManager = context.getSystemService(KeyguardManager.class);
                if (keyguardManager == null) return TYPE_1;
                FingerprintManager fingerprintManager = context.getSystemService(FingerprintManager.class);
                if (fingerprintManager == null) return TYPE_1;
                if (!fingerprintManager.isHardwareDetected()) {
                    return TYPE_1;
                } else if (!keyguardManager.isKeyguardSecure()) {
                    return TYPE_2;
                } else if (!fingerprintManager.hasEnrolledFingerprints()) {
                    return TYPE_3;
                }
                return TYPE_0;
            }

            private KeyStore initKey() {
                KeyStore mKeyStore;
                try {
                    mKeyStore = KeyStore.getInstance(KEY_STORE);
                    if (mKeyStore == null) return null;
                    mKeyStore.load(null);
                    KeyGenerator keyGenerator = KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES, KEY_STORE);
                    KeyGenParameterSpec.Builder builder = new KeyGenParameterSpec.Builder(KEY_NAME,
                            KeyProperties.PURPOSE_ENCRYPT |
                                    KeyProperties.PURPOSE_DECRYPT)
                            .setBlockModes(KeyProperties.BLOCK_MODE_CBC)
                            .setUserAuthenticationRequired(true)
                            .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7);
                    keyGenerator.init(builder.build());
                    keyGenerator.generateKey();
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
                return mKeyStore;
            }

            public void startListening() {
                if (cipher == null || fingerprintManager == null) return;
                isSelfCancelled = false;
                mCancellationSignal = new CancellationSignal();
                fingerprintManager.authenticate(new FingerprintManager.CryptoObject(cipher), mCancellationSignal, 0, new FingerprintManager.AuthenticationCallback() {
                    @Override
                    public void onAuthenticationError(int errorCode, CharSequence errString) {
                        if (!isSelfCancelled) {
                            if (errorCode == FingerprintManager.FINGERPRINT_ERROR_LOCKOUT) {
                                onListener.onListener(TYPE_ERROR2);//尝试次数过多，请稍后重试。
                                onListener = null;
                            }
                        }
                    }

                    @Override
                    public void onAuthenticationHelp(int helpCode, CharSequence helpString) {
                    }

                    @Override
                    public void onAuthenticationSucceeded(FingerprintManager.AuthenticationResult result) {
                        onListener.onListener(TYPE_SUCCESS);//指纹认证成功
                        onListener = null;
                    }

                    @Override
                    public void onAuthenticationFailed() {
                        onListener.onListener(TYPE_ERROR);//指纹认证失败，请再试一次
                        onListener = null;
                    }
                }, null);
            }

            private Cipher initCipher(KeyStore keyStore) {
                if (keyStore == null) return null;
                Cipher mCipher;
                try {
                    SecretKey key = (SecretKey) keyStore.getKey(KEY_NAME, null);
                    mCipher = Cipher.getInstance(KeyProperties.KEY_ALGORITHM_AES + "/"
                            + KeyProperties.BLOCK_MODE_CBC + "/"
                            + KeyProperties.ENCRYPTION_PADDING_PKCS7);
                    mCipher.init(Cipher.ENCRYPT_MODE, key);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
                return mCipher;
            }

            public void stopListening() {
                if (mCancellationSignal != null) {
                    mCancellationSignal.cancel();
                    mCancellationSignal = null;
                    isSelfCancelled = true;
                    onListener = null;
                }
            }
        }

        /**
         * 一个封装好的 指纹验证对话框 需要指纹权限:
         * <uses-permission android:name="android.permission.USE_BIOMETRIC"/>
         */
        public static class FingerprintDialogFragment extends GT_Dialog.BaseDialogFragment {

            @Override
            protected int loadLayout() {
                return R.layout.fingerprint_dialog;
            }

            public final static String TITLE = "title";
            public final static String IS_SHOW_VIEW = "isShowView";
            public final static String CANCEL_NAME = "cancelName";
            public final static String Click_External_NoT_Hides = "click_external_not_hides";
            public final static String TYPE = "type";

            /**
             * 启动指纹验证对话框
             *
             * @param title                指纹验证标题
             * @param cancelName           验证取消文字
             * @param isShowView           是否显示UI
             * @param ClickExternalNoHides 是否单击外部取消对话框
             * @return
             */
            public static FingerprintDialogFragment newInstance(String title, String cancelName, boolean isShowView, boolean... ClickExternalNoHides) {
                Bundle args = new Bundle();
                args.putString(TITLE, title);
                args.putString(CANCEL_NAME, cancelName);
                args.putBoolean(IS_SHOW_VIEW, isShowView);
                if (ClickExternalNoHides != null && ClickExternalNoHides.length > 0) {
                    args.putBoolean(Click_External_NoT_Hides, ClickExternalNoHides[0]);
                }
                FingerprintDialogFragment fragment = new FingerprintDialogFragment();
                fragment.setArguments(args);
                return fragment;
            }

            private TextView tv_error_msg;
            private TextView tv_title;
            private TextView tv_cancel;
            private View ll_main;
            private Intent intent = new Intent();

            private FingerprintUtils init;
            private boolean isClickExternalNoTHides = true;

            @Override
            public void onCreate(@Nullable Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                setStyle(DialogFragment.STYLE_NORMAL, android.R.style.Theme_Material_Light_Dialog);
            }

            @Override
            protected void initView(View view, @Nullable Bundle savedInstanceState) {
                Bundle bundle = getArguments();

                tv_error_msg = view.findViewById(R.id.tv_error_msg);
                tv_title = view.findViewById(R.id.tv_title);
                tv_cancel = view.findViewById(R.id.tv_cancel);
                ll_main = view.findViewById(R.id.ll_main);
                if (bundle != null) {
                    boolean isShowView = bundle.getBoolean(IS_SHOW_VIEW);
                    if (!isShowView) {
                        ll_main.setVisibility(View.GONE);
                    }
                    String title = bundle.getString(TITLE);
                    String cancel = bundle.getString(CANCEL_NAME);
                    isClickExternalNoTHides = bundle.getBoolean(Click_External_NoT_Hides);
                    tv_title.setText(title);
                    tv_cancel.setText(cancel);
                }

                if (isClickExternalNoTHides) {
                    setClickExternalNoHideDialog();
                }
                init = FingerprintUtils.getInstance().init(activity, new OnListener<Integer>() {
                    @Override
                    public void onListener(Integer... integers) {
                        if (integers == null || integers.length == 0) return;
                        intent.putExtra(TYPE, integers[0]);
                        switch (integers[0]) {
                            case FingerprintUtils.TYPE_0://正常可以 指纹功能
                            case FingerprintUtils.TYPE_1://您的手机不支持指纹功能
                            case FingerprintUtils.TYPE_2://您还未设置锁屏，请先设置锁屏并添加一个指纹
                            case FingerprintUtils.TYPE_3://您至少需要在系统设置中添加一个指纹
                            case FingerprintUtils.TYPE_cancel://用户手动取消了
                            case FingerprintUtils.TYPE_SUCCESS://指纹认证成功
                            case FingerprintUtils.TYPE_ERROR2://尝试次数过多，请稍后重试。
                                finish(intent);
                                break;
                            case FingerprintUtils.TYPE_ERROR://指纹认证失败，请再试一次
                                tv_error_msg.setText("指纹认证失败，请再试一次");
                                break;

                        }
                    }
                });
                tv_cancel.setOnClickListener(view1 -> {
                    intent.putExtra(TYPE, FingerprintUtils.TYPE_cancel);
                    finish(intent);
                    init.stopListening();
                });
            }

            @Override
            public void onResume() {
                super.onResume();
                if (init == null) return;
                init.startListening(); // 开始指纹认证监听
            }

            @Override
            public void onPause() {
                super.onPause();
                if (init == null) return;
                init.stopListening();// 停止指纹认证监听
            }

            @Override
            public void onDestroy() {
                super.onDestroy();
                if (init == null) return;
                init.stopListening();
            }

            @Override
            protected boolean onBackPressed() {
                return isClickExternalNoTHides;
            }
        }

        /**
         * 手电筒：五步搞定
         * 1.实例化封装对象：GT.DarknessMagic.Flashlight fl = GT.DarknessMagic.Flashlight()
         * 2.初始化+注册+取消：fl.init(this, null)  注册：fl.onResume()  取消fl.onPause()
         * 3.智能打开关闭: flashlight.automaticSwitch()
         * <p>
         * 注意： 该工具类仅仅只能在整个app生命周期中，初始化一次，所以尽量在 主界面初始化。
         */
        public static class FlashlightUtils {
            private CameraManager mCameraManager;
            private String cameraId = "0";
            private boolean isFlashLightOn = false;
            private GT.OneListener<Boolean> onListener;

            // 判断是否有闪光灯功能
            public static boolean hasFlash(Context context) {
                return context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA_FLASH);
            }

            private final CameraManager.TorchCallback torchCallback = new CameraManager.TorchCallback() {//注册监听手电筒状态
                @Override
                public void onTorchModeChanged(@NonNull String cameraId, boolean enabled) {
                    super.onTorchModeChanged(cameraId, enabled);
                    if (onListener != null) onListener.onOneListener(enabled);
                    isFlashLightOn = enabled;//手电筒状态赋值
                }
            };

            /**
             * 初始化 手电筒
             *
             * @param context
             * @param cameraId (非必填)
             * @return
             */
            public void init(Context context, GT.OneListener<Boolean> onListener, String... cameraId) {
                if (context == null) return;

                if (onListener != null) {
                    this.onListener = onListener;
                }

                if (cameraId != null && cameraId.length > 0) {
                    this.cameraId = cameraId[0];
                }
                if (mCameraManager == null) {
                    mCameraManager = (CameraManager) context.getSystemService(Context.CAMERA_SERVICE);
                }
            }

            /**
             * 自动开关
             *
             * @param openOrClose 强制设置开关
             * @return
             */
            public void automaticSwitch(boolean... openOrClose) {
                if (mCameraManager == null) return;
                if (openOrClose != null && openOrClose.length > 0) {
                    isFlashLightOn = openOrClose[0];
                }
                try {
                    isFlashLightOn = !isFlashLightOn;
                    mCameraManager.setTorchMode(cameraId, isFlashLightOn);
                } catch (CameraAccessException e) {
                }
            }

            //打开
            public void open() {
                if (mCameraManager == null) return;
                isFlashLightOn = true;
                try {
                    mCameraManager.setTorchMode(cameraId, true);
                } catch (CameraAccessException e) {
                }
            }

            //关闭
            public void close() {
                if (mCameraManager == null) return;
                isFlashLightOn = true;
                try {
                    mCameraManager.setTorchMode(cameraId, false);
                } catch (CameraAccessException e) {
                }
            }

            //注册传感器监听器
            public void onResume() {
                if (mCameraManager == null) return;
                mCameraManager.registerTorchCallback(torchCallback, null);
            }

            //取消传感器监听器
            public void onPause() {
                if (mCameraManager == null) return;
                mCameraManager.unregisterTorchCallback(torchCallback);
            }

            //关闭
            public void empty() {
                onListener = null;
                mCameraManager = null;
            }

        }

        /**
         * 声音分贝获取：三步搞定
         * 需要的权限:<uses-permission android:name="android.permission.RECORD_AUDIO" />
         * 1.初始化：private GT.DarknessMagic.AudioRecordDemo mediaRecorderDemo = new GT.DarknessMagic.AudioRecordDemo();
         * 2.开始检测：mediaRecorderDemo.startRecording([回调接口]);
         * 3.结束检测: mediaRecorderDemo.stopRecording();
         */
        public static class AudioRecordUtils {

            private static final int SAMPLE_RATE_IN_HZ = 8000;
            private static final int BUFFER_SIZE = AudioRecord.getMinBufferSize(SAMPLE_RATE_IN_HZ, AudioFormat.CHANNEL_IN_DEFAULT, AudioFormat.ENCODING_PCM_16BIT);
            private AudioRecord mAudioRecord;
            private boolean isGetVoiceRun;
            private final Object mLock;
            private long timeoutMillis = 100;//分贝获取时间间隔

            public long getTimeoutMillis() {
                return timeoutMillis;
            }

            public void setTimeoutMillis(long timeoutMillis) {
                this.timeoutMillis = timeoutMillis;
            }

            public AudioRecordUtils() {
                mLock = new Object();
            }

            public void stopRecording() {
                isGetVoiceRun = false;
            }

            @SuppressLint("MissingPermission")
            public void startRecording(FragmentActivity fragmentActivity, GT.OneListener<Double> onListener) {
                if (isGetVoiceRun) return;
                //权限动态申请
                GT.AppAuthorityManagement.Permission.init(fragmentActivity, new String[]{Manifest.permission.RECORD_AUDIO})
                        .permissions(new GT.AppAuthorityManagement.Permission.OnPermissionListener() {
                            @Override
                            public void onExplainRequestReason(GT.AppAuthorityManagement.Permission.PermissionDescription onPDListener) {
                                onPDListener.setAcceptAdvice(true);//核心，设置拒绝授权
                            }

                            @Override
                            public boolean onForwardToSettings() {
                                return true;//特殊权限特殊处理，如：需要进入 系统设置 中或 应用信息中的代码可自定义填写
                            }

                            @Override
                            public void request(boolean allGranted, String[] grantedList, String[] deniedList, String message) {
                                if (allGranted) { //全部授权
                                    start(onListener);
                                }
                            }
                        });

            }

            @SuppressLint("MissingPermission")
            private void start(GT.OneListener<Double> onListener) {
                mAudioRecord = new AudioRecord(MediaRecorder.AudioSource.MIC, SAMPLE_RATE_IN_HZ, AudioFormat.CHANNEL_IN_DEFAULT, AudioFormat.ENCODING_PCM_16BIT, BUFFER_SIZE);
                isGetVoiceRun = true;
                if (mAudioRecord == null) return;
                GT.Thread.getInstance(0).execute(() -> {
                    if (mAudioRecord != null)
                        mAudioRecord.startRecording();
                    short[] buffer = new short[BUFFER_SIZE];
                    while (isGetVoiceRun && mAudioRecord != null) {
                        //r是实际读取的数据长度，一般而言r会小于buffersize
                        int readInt = mAudioRecord.read(buffer, 0, BUFFER_SIZE);
                        long data = 0;
                        // 将 buffer 内容取出，进行平方和运算
                        for (short value : buffer) {
                            data += value * value;
                        }
                        // 平方和除以数据总长度，得到音量大小。
                        double mean = data / (double) readInt;
                        double volume = 10 * Math.log10(mean);
                        onListener.onOneListener(volume);
                        // 大概一秒十次
                        synchronized (mLock) {
                            try {
                                mLock.wait(timeoutMillis);
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                    if (mAudioRecord != null) {
                        mAudioRecord.stop();
                        mAudioRecord.release();
                        mAudioRecord = null;
                    }
                });
            }

        }

        /**
         * 磁场传感器：四步搞定
         * 1.初始化：private MagneticFieldUtils mfu = new MagneticFieldUtils();
         * 2.开始检测： mfu.init(this,[回调接口]);
         * 3.注册与取消监听 mfu.onResume():注册  mfu.onPause():取消
         * 4.结束检测: mfu.close();
         */
        public static class MagneticFieldUtils implements SensorEventListener {

            private double alarmLim = 80;//判定值，判断是否检测到金属

            private GT.OneListener<MagneticFieldBean> onListener;
            private SensorManager sensorManager;
            private MagneticFieldBean magneticFieldBean = new MagneticFieldBean();

            public double getAlarmLim() {
                return alarmLim;
            }

            public void setAlarmLim(double alarmLim) {
                this.alarmLim = alarmLim;
            }

            public void init(Context context, GT.OneListener<MagneticFieldBean> oneListener, double... alarmLims) {
                if (context == null) return;
                this.onListener = oneListener;
                if (alarmLims != null && alarmLims.length > 0) {
                    alarmLim = alarmLims[0];
                }
                if (sensorManager == null) {
                    sensorManager = (SensorManager) context.getSystemService(Context.SENSOR_SERVICE);
                }
            }

            //注册传感器监听器
            public void onResume() {
                if (sensorManager == null) return;
                sensorManager.registerListener(this, sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD), SensorManager.SENSOR_DELAY_NORMAL);
            }

            //取消磁场传感器监听器
            public void onPause() {
                if (sensorManager == null) return;
                sensorManager.unregisterListener(this); //取消注册的监听器
            }

            public void close() {
                magneticFieldBean = null;
                onListener = null;
                sensorManager = null;
            }

            @Override
            public void onSensorChanged(SensorEvent sensorEvent) {
                double rawTotal;//未处理的数据
                if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD) {
                    //分别计算三轴磁感应强度
                    float X_lateral = sensorEvent.values[0];
                    float Y_lateral = sensorEvent.values[1];
                    float Z_lateral = sensorEvent.values[2];
                    magneticFieldBean.X_lateral = X_lateral;
                    magneticFieldBean.Y_lateral = Y_lateral;
                    magneticFieldBean.Z_lateral = Z_lateral;
                    //计算出总磁感应强度
                    rawTotal = Math.sqrt(X_lateral * X_lateral + Y_lateral * Y_lateral + Z_lateral * Z_lateral);
                    //初始化BigDecimal类
                    BigDecimal total = new BigDecimal(rawTotal);
                    magneticFieldBean.alarmLimValue = total.setScale(2, RoundingMode.HALF_UP).doubleValue();
                    if (magneticFieldBean.alarmLimValue < alarmLim) {
                        magneticFieldBean.progress = (int) ((magneticFieldBean.alarmLimValue / alarmLim) * 100);
                        magneticFieldBean.isDetected = false;
                    } else {
                        magneticFieldBean.isDetected = true;
                        magneticFieldBean.progress = 100;
                    }
                    onListener.onOneListener(magneticFieldBean);
                }
            }

            @Override
            public void onAccuracyChanged(Sensor sensor, int i) {

            }

            public static class MagneticFieldBean {

                private float X_lateral;
                private float Y_lateral;
                private float Z_lateral;
                private double alarmLimValue;//当前感应值
                private int progress;//当前进度
                private boolean isDetected;//是否检测到金属

                public float getX_lateral() {
                    return X_lateral;
                }

                public void setX_lateral(float x_lateral) {
                    X_lateral = x_lateral;
                }

                public float getY_lateral() {
                    return Y_lateral;
                }

                public void setY_lateral(float y_lateral) {
                    Y_lateral = y_lateral;
                }

                public float getZ_lateral() {
                    return Z_lateral;
                }

                public void setZ_lateral(float z_lateral) {
                    Z_lateral = z_lateral;
                }

                public double getAlarmLimValue() {
                    return alarmLimValue;
                }

                public void setAlarmLimValue(double alarmLimValue) {
                    this.alarmLimValue = alarmLimValue;
                }

                public int getProgress() {
                    return progress;
                }

                public void setProgress(int progress) {
                    this.progress = progress;
                }

                public boolean isDetected() {
                    return isDetected;
                }

                public void setDetected(boolean detected) {
                    isDetected = detected;
                }

                @Override
                public String toString() {
                    return "MagneticFieldBean{" +
                            "X_lateral=" + X_lateral +
                            ", Y_lateral=" + Y_lateral +
                            ", Z_lateral=" + Z_lateral +
                            ", alarmLimValue=" + alarmLimValue +
                            ", progress=" + progress +
                            ", isDetected=" + isDetected +
                            '}';
                }
            }

        }

        /**
         * 光源传感器：四步搞定 LightSourceUtils
         * 1.初始化：private LightSourceUtils lsu = new LightSourceUtils();
         * 2.开始检测： lsu.init(this,[回调接口]);
         * 3.注册与取消监听 lsu.onResume():注册  lsu.onPause():取消
         * 4.结束检测: lsu.close();
         */
        public static class LightSourceUtils implements SensorEventListener {

            private SensorManager sensorManager;
            private GT.OneListener<Float> onListener;

            public void close() {
                onListener = null;
                sensorManager = null;
            }

            public void init(Context context, GT.OneListener<Float> oneListener) {
                if (context == null) return;
                this.onListener = oneListener;
                if (sensorManager == null) {
                    sensorManager = (SensorManager) context.getSystemService(Context.SENSOR_SERVICE);
                }

            }

            //注册传感器监听器
            public void onResume() {
                if (sensorManager == null) return;
                sensorManager.registerListener(this, sensorManager.getDefaultSensor(Sensor.TYPE_LIGHT), SensorManager.SENSOR_DELAY_GAME); //为光线传感器注册监听器
            }

            //取消传感器监听器
            public void onPause() {
                if (sensorManager == null) return;
                sensorManager.unregisterListener(this); //取消注册的监听器
            }

            @Override
            public void onSensorChanged(SensorEvent sensorEvent) {
                if (sensorEvent.sensor.getType() == Sensor.TYPE_LIGHT) {
                    if (onListener != null)
                        onListener.onOneListener(sensorEvent.values[0]);
                }
            }

            @Override
            public void onAccuracyChanged(Sensor sensor, int i) {

            }
        }

        /**
         * 水平仪传感器(指南针)：四步搞定 GradienterUtils
         * 1.初始化：private GradienterUtils lsu = new GradienterUtils();
         * 2.开始检测： lsu.init(this,[回调接口]);
         * 3.注册与取消监听 lsu.onResume():注册  lsu.onPause():取消
         * 4.结束检测: lsu.close();
         */
        public static class GradienterUtils implements SensorEventListener {

            private SensorManager sensorManager;
            private GT.OneListener<float[]> onListener;

            public void close() {
                onListener = null;
                sensorManager = null;
            }

            public void init(Context context, GT.OneListener<float[]> oneListener) {
                if (context == null) return;
                this.onListener = oneListener;
                if (sensorManager == null) {
                    sensorManager = (SensorManager) context.getSystemService(Context.SENSOR_SERVICE);
                }
            }


            //注册传感器监听器
            public void onResume() {
                if (sensorManager == null) return;
                sensorManager.registerListener(this, sensorManager.getDefaultSensor(Sensor.TYPE_ORIENTATION), SensorManager.SENSOR_DELAY_GAME);
            }

            //取消传感器监听器
            public void onPause() {
                if (sensorManager == null) return;
                sensorManager.unregisterListener(this);
            }

            @Override
            public void onSensorChanged(SensorEvent event) {
                if (event.sensor.getType() == Sensor.TYPE_ORIENTATION) {
                    if (onListener != null)
                        onListener.onOneListener(event.values);
                }
            }

            @Override
            public void onAccuracyChanged(Sensor sensor, int accuracy) {

            }
        }

        //壁纸封装类
        public static class WallpaperManagerUtils {

            private WallpaperManagerUtils() {
            }

            private static WallpaperManagerUtils wallpaperManagerUtils;
            private static WallpaperManager wpManager;

            public static WallpaperManager getWpManager() {
                return wpManager;
            }

            public static void setWpManager(WallpaperManager wpManager) {
                WallpaperManagerUtils.wpManager = wpManager;
            }

            public static WallpaperManagerUtils getInstance(Context context) {
                if (wallpaperManagerUtils == null) {
                    synchronized (WallpaperManagerUtils.class) {
                        if (wallpaperManagerUtils == null) {
                            wallpaperManagerUtils = new WallpaperManagerUtils();
                            wpManager = WallpaperManager.getInstance(context);
                        }
                    }
                }
                return wallpaperManagerUtils;
            }


            public void loadImage(Object value) {
                if (wpManager == null || value == null) return;
                try {
                    if (value instanceof Integer) {
                        int resId = (int) value;
                        wpManager.setResource(resId);
                    } else if (value instanceof Bitmap) {
                        Bitmap bitmap = (Bitmap) value;
                        wpManager.setBitmap(bitmap);
                    } else if (value instanceof InputStream) {
                        InputStream inputStream = (InputStream) value;
                        wpManager.setStream(inputStream);
                    } else if (value instanceof String) {
                        GT.Thread.getInstance(0).execute(() -> {
                            try {
                                String urlOrFile = (String) value;
                                Bitmap bitmap;
                                if (urlOrFile.contains("http")) {
                                    bitmap = GT.ImageViewTools.getImageBitmap(urlOrFile);
                                } else {
                                    bitmap = GT.ImageViewTools.getBitmapFromLocal(new File(urlOrFile));
                                }
                                if (bitmap != null) {
                                    wpManager.setBitmap(bitmap);
                                }
                            } catch (IOException e) {
                            }
                        });
                    } else {
                        GT.Thread.getInstance(0).execute(new Runnable() {
                            @Override
                            public void run() {
                                Bitmap bitmap = GT.ImageViewTools.ObjectToBitmap(value);
                                try {
                                    if (bitmap != null) wpManager.setBitmap(bitmap);
                                } catch (IOException e) {

                                }
                            }
                        });
                    }
                } catch (IOException e) {

                }
            }


            //清空锁屏壁纸
            public void clearLockScreen() {
                try {
                    wpManager.clear(WallpaperManager.FLAG_LOCK);
                } catch (IOException e) {

                }
            }


            //清空所有壁纸
            public void clearAll() {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
                    wpManager.clearWallpaper();
                }
            }

            //获得当前系统壁纸，如果没有设置壁纸，则返回系统默认壁纸
            public Drawable getDrawable() {
                @SuppressLint("MissingPermission") Drawable drawable = wpManager.getDrawable();
                return drawable;
            }


            //加入当前壁纸是动态壁纸，返回动态壁纸信息
            public WallpaperInfo getWallpaperInfo() {
                return wpManager.getWallpaperInfo();
            }

            //获得当前系统壁纸，如果没设置壁纸的话返回null
            public Drawable peekDrawable() {
                return wpManager.peekDrawable();
            }

        }

    }

    // 定义 GT 包 简易使用教程
    public interface CMD {
        @Deprecated
        public static void old() {
        }
    }


//=========================================== GT 库 后续开发 =========================================


    /**
     * 核心:后续GT库的开发 会向 兼容 Kotlin 语言的方向发展
     * 1.热修复支持资源修复
     */

}
